<dec f='halide/build/include/Halide.h' l='22907' type='Halide::Func Halide::ImageParam::operator Func() const'/>
<doc f='halide/build/include/Halide.h' l='22894'>/** Return the intrinsic Func representation of this ImageParam. This allows
     * an ImageParam to be implicitly converted to a Func.
     *
     * Note that we use implicit vars to name the dimensions of Funcs associated
     * with the ImageParam: both its internal Func representation and wrappers
     * (See \ref ImageParam::in). For example, to unroll the first and second
     * dimensions of the associated Func by a factor of 2, we would do the following:
     \code
     func.unroll(_0, 2).unroll(_1, 2);
     \endcode
     * &apos;_0&apos; represents the first dimension of the Func, while _1 represents the
     * second dimension of the Func.
     */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='115' u='c' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/ImageParam.h' l='87' type='Halide::Func Halide::ImageParam::operator Func() const'/>
<doc f='halide/src/ImageParam.h' l='74'>/** Return the intrinsic Func representation of this ImageParam. This allows
     * an ImageParam to be implicitly converted to a Func.
     *
     * Note that we use implicit vars to name the dimensions of Funcs associated
     * with the ImageParam: both its internal Func representation and wrappers
     * (See \ref ImageParam::in). For example, to unroll the first and second
     * dimensions of the associated Func by a factor of 2, we would do the following:
     \code
     func.unroll(_0, 2).unroll(_1, 2);
     \endcode
     * &apos;_0&apos; represents the first dimension of the Func, while _1 represents the
     * second dimension of the Func.
     */</doc>
<def f='halide/src/ImageParam.cpp' l='68' ll='70' type='Halide::Func Halide::ImageParam::operator Func() const'/>
