<def f='halide/build/include/Halide.h' l='10235' ll='10239' type='Buffer&lt;T, D&gt; Halide::Runtime::Buffer::embedded(int d, int pos = 0) const'/>
<doc f='halide/build/include/Halide.h' l='10225'>/** Make a new buffer that views this buffer as a single slice in a
     * higher-dimensional space. The new dimension has extent one and
     * the given min. This operation is the opposite of slice. As an
     * example, the following condition is true:
     *
     \code
     im2 = im.embedded(1, 17);
     &amp;im(x, y, c) == &amp;im2(x, 17, y, c);
     \endcode
     */</doc>
<def f='halide/src/runtime/HalideBuffer.h' l='1473' ll='1477' type='Buffer&lt;T, D&gt; Halide::Runtime::Buffer::embedded(int d, int pos = 0) const'/>
<doc f='halide/src/runtime/HalideBuffer.h' l='1463'>/** Make a new buffer that views this buffer as a single slice in a
     * higher-dimensional space. The new dimension has extent one and
     * the given min. This operation is the opposite of slice. As an
     * example, the following condition is true:
     *
     \code
     im2 = im.embedded(1, 17);
     &amp;im(x, y, c) == &amp;im2(x, 17, y, c);
     \endcode
     */</doc>
<use f='halide/tools/RunGen.h' l='472' u='c' c='_ZN6Halide6RunGen18adjust_buffer_dimsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_iNS_7Runtime6BufferIvLi4EEE'/>
