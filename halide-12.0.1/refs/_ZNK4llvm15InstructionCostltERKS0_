<def f='halide/llvm-install/include/llvm/Support/InstructionCost.h' l='168' ll='172' type='bool llvm::InstructionCost::operator&lt;(const llvm::InstructionCost &amp; RHS) const'/>
<use f='halide/llvm-install/include/llvm/Support/InstructionCost.h' l='174' u='c' c='_ZNK4llvm15InstructionCostgtERKS0_'/>
<use f='halide/llvm-install/include/llvm/Support/InstructionCost.h' l='176' u='c' c='_ZNK4llvm15InstructionCostleERKS0_'/>
<use f='halide/llvm-install/include/llvm/Support/InstructionCost.h' l='178' u='c' c='_ZNK4llvm15InstructionCostgeERKS0_'/>
<use f='halide/llvm-install/include/llvm/Support/InstructionCost.h' l='182' u='c' c='_ZNK4llvm15InstructionCostltEi'/>
<doc f='halide/llvm-install/include/llvm/Support/InstructionCost.h' l='161'>/// For the comparison operators we have chosen to use total ordering with
  /// the following rules:
  ///  1. If either of the states != Valid then a lexicographical order is
  ///     applied based upon the state.
  ///  2. If both states are valid then order based upon value.
  /// This avoids having to add asserts the comparison operators that the states
  /// are valid and users can test for validity of the cost explicitly.</doc>
