<def f='halide/tools/RunGen.h' l='387' ll='395' type='Buffer&lt;&gt; Halide::RunGen::allocate_buffer(const halide_type_t &amp; type, const Halide::RunGen::Shape &amp; shape)'/>
<use f='halide/tools/RunGen.h' l='743' u='c' c='_ZN6Halide6RunGen7ArgData11load_bufferESt8functionIFSt6vectorI18halide_dimension_tSaIS4_EEvEEPK24halide_filter_argument_t'/>
<use f='halide/tools/RunGen.h' l='755' u='c' c='_ZN6Halide6RunGen7ArgData11load_bufferESt8functionIFSt6vectorI18halide_dimension_tSaIS4_EEvEEPK24halide_filter_argument_t'/>
<use f='halide/tools/RunGen.h' l='765' u='c' c='_ZN6Halide6RunGen7ArgData11load_bufferESt8functionIFSt6vectorI18halide_dimension_tSaIS4_EEvEEPK24halide_filter_argument_t'/>
<use f='halide/tools/RunGen.h' l='780' u='c' c='_ZN6Halide6RunGen7ArgData11load_bufferESt8functionIFSt6vectorI18halide_dimension_tSaIS4_EEvEEPK24halide_filter_argument_t'/>
<use f='halide/tools/RunGen.h' l='827' u='c' c='_ZN6Halide6RunGen7ArgData18adapt_input_bufferERKSt6vectorI18halide_dimension_tSaIS3_EE'/>
<use f='halide/tools/RunGen.h' l='887' u='c' c='_ZN6Halide6RunGen7ArgData22allocate_output_bufferERKSt6vectorI18halide_dimension_tSaIS3_EE'/>
<doc f='halide/tools/RunGen.h' l='385'>// Given a type and shape, create a new Buffer&lt;&gt; and allocate storage for it.
// (Oddly, Buffer&lt;&gt; has an API to do this with vector-of-extent, but not vector-of-halide_dimension_t.)</doc>
