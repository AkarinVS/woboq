<dec f='halide/build/include/Halide.h' l='31924' type='Halide::Internal::Stmt Halide::Internal::vectorize_loops(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env, const Halide::Target &amp; t)'/>
<doc f='halide/build/include/Halide.h' l='31920'>/** Take a statement with for loops marked for vectorization, and turn
 * them into single statements that operate on vectors. The loops in
 * question must have constant extent.
 */</doc>
<dec f='halide/src/VectorizeLoops.h' l='23' type='Halide::Internal::Stmt Halide::Internal::vectorize_loops(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env, const Halide::Target &amp; t)'/>
<use f='halide/src/Lower.cpp' l='317' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
<doc f='halide/src/VectorizeLoops.h' l='19'>/** Take a statement with for loops marked for vectorization, and turn
 * them into single statements that operate on vectors. The loops in
 * question must have constant extent.
 */</doc>
<def f='halide/src/VectorizeLoops.cpp' l='1663' ll='1672' type='Halide::Internal::Stmt Halide::Internal::vectorize_loops(const Halide::Internal::Stmt &amp; stmt, const map&lt;std::string, Halide::Internal::Function&gt; &amp; env, const Halide::Target &amp; t)'/>
