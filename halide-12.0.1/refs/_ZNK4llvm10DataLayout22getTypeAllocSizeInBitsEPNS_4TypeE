<def f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='513' ll='515' type='llvm::TypeSize llvm::DataLayout::getTypeAllocSizeInBits(llvm::Type * Ty) const'/>
<use f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='674' u='c' c='_ZNK4llvm10DataLayout17getTypeSizeInBitsEPNS_4TypeE'/>
<doc f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='505'>/// Returns the offset in bits between successive objects of the
  /// specified type, including alignment padding; always a multiple of 8.
  ///
  /// If Ty is a scalable vector type, the scalable property will be set and
  /// the runtime size will be a positive integer multiple of the base size.
  ///
  /// This is the amount that alloca reserves for this type. For example,
  /// returns 96 or 128 for x86_fp80, depending on alignment.</doc>
