<def f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='54' ll='244'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='249' c='_ZN5Eigen9RealSchur7computeERKNS_9EigenBaseITL0__EEb'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='249' c='_ZN5Eigen9RealSchur7computeERKNS_9EigenBaseITL0__EEb'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='287' c='_ZN5Eigen9RealSchur21computeFromHessenbergERKTL0__RKTL0_0_b'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='287' c='_ZN5Eigen9RealSchur21computeFromHessenbergERKTL0__RKTL0_0_b'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='362' c='_ZN5Eigen9RealSchur14computeNormOfTEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='376' c='_ZN5Eigen9RealSchur21findSmallSubdiagEntryElRKNT_6ScalarE'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='395' c='_ZN5Eigen9RealSchur15splitOffTwoRowsElbRKNT_6ScalarE'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='430' c='_ZN5Eigen9RealSchur12computeShiftEllRNT_6ScalarERNS_6MatrixIS2_Li3ELi1ELi0ELi3ELi1EEE'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='472' c='_ZN5Eigen9RealSchur17initFrancisQRStepEllRKNS_6MatrixINT_6ScalarELi3ELi1ELi0ELi3ELi1EEERlRS4_'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='497' c='_ZN5Eigen9RealSchur20performFrancisQRStepElllbRKNS_6MatrixINT_6ScalarELi3ELi1ELi0ELi3ELi1EEEPS3_'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/EigenSolver.h' l='316'/>
<doc f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealSchur.h' l='18'>/** \eigenvalues_module \ingroup Eigenvalues_Module
  *
  *
  * \class RealSchur
  *
  * \brief Performs a real Schur decomposition of a square matrix
  *
  * \tparam _MatrixType the type of the matrix of which we are computing the
  * real Schur decomposition; this is expected to be an instantiation of the
  * Matrix class template.
  *
  * Given a real square matrix A, this class computes the real Schur
  * decomposition: \f$ A = U T U^T \f$ where U is a real orthogonal matrix and
  * T is a real quasi-triangular matrix. An orthogonal matrix is a matrix whose
  * inverse is equal to its transpose, \f$ U^{-1} = U^T \f$. A quasi-triangular
  * matrix is a block-triangular matrix whose diagonal consists of 1-by-1
  * blocks and 2-by-2 blocks with complex eigenvalues. The eigenvalues of the
  * blocks on the diagonal of T are the same as the eigenvalues of the matrix
  * A, and thus the real Schur decomposition is used in EigenSolver to compute
  * the eigendecomposition of a matrix.
  *
  * Call the function compute() to compute the real Schur decomposition of a
  * given matrix. Alternatively, you can use the RealSchur(const MatrixType&amp;, bool)
  * constructor which computes the real Schur decomposition at construction
  * time. Once the decomposition is computed, you can use the matrixU() and
  * matrixT() functions to retrieve the matrices U and T in the decomposition.
  *
  * The documentation of RealSchur(const MatrixType&amp;, bool) contains an example
  * of the typical use of this class.
  *
  * \note The implementation is adapted from
  * &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; (public domain).
  * Their code is based on EISPACK.
  *
  * \sa class ComplexSchur, class EigenSolver, class ComplexEigenSolver
  */</doc>
<fun r='_ZN5Eigen9RealSchurC1El'/>
<fun r='_ZN5Eigen9RealSchurC1ERKNS_9EigenBaseITL0__EEb'/>
<fun r='_ZNK5Eigen9RealSchur7matrixUEv'/>
<fun r='_ZNK5Eigen9RealSchur7matrixTEv'/>
<fun r='_ZN5Eigen9RealSchur7computeERKNS_9EigenBaseITL0__EEb'/>
<fun r='_ZN5Eigen9RealSchur21computeFromHessenbergERKTL0__RKTL0_0_b'/>
<fun r='_ZNK5Eigen9RealSchur4infoEv'/>
<fun r='_ZN5Eigen9RealSchur16setMaxIterationsEl'/>
<fun r='_ZN5Eigen9RealSchur16getMaxIterationsEv'/>
<smbr r='Eigen::RealSchur::m_maxIterationsPerRow' t='const int'/>
<mbr r='Eigen::RealSchur::m_matT' t='Eigen::RealSchur::MatrixType'/>
<mbr r='Eigen::RealSchur::m_matU' t='Eigen::RealSchur::MatrixType'/>
<mbr r='Eigen::RealSchur::m_workspaceVector' t='Eigen::RealSchur::ColumnVectorType'/>
<mbr r='Eigen::RealSchur::m_hess' t='HessenbergDecomposition&lt;Eigen::RealSchur::MatrixType&gt;'/>
<mbr r='Eigen::RealSchur::m_info' t='Eigen::ComputationInfo'/>
<mbr r='Eigen::RealSchur::m_isInitialized' t='bool'/>
<mbr r='Eigen::RealSchur::m_matUisUptodate' t='bool'/>
<mbr r='Eigen::RealSchur::m_maxIters' t='Eigen::RealSchur::Index'/>
<fun r='_ZN5Eigen9RealSchur14computeNormOfTEv'/>
<fun r='_ZN5Eigen9RealSchur21findSmallSubdiagEntryElRKNT_6ScalarE'/>
<fun r='_ZN5Eigen9RealSchur15splitOffTwoRowsElbRKNT_6ScalarE'/>
<fun r='_ZN5Eigen9RealSchur12computeShiftEllRNT_6ScalarERNS_6MatrixIS2_Li3ELi1ELi0ELi3ELi1EEE'/>
<fun r='_ZN5Eigen9RealSchur17initFrancisQRStepEllRKNS_6MatrixINT_6ScalarELi3ELi1ELi0ELi3ELi1EEERlRS4_'/>
<fun r='_ZN5Eigen9RealSchur20performFrancisQRStepElllbRKNS_6MatrixINT_6ScalarELi3ELi1ELi0ELi3ELi1EEEPS3_'/>
<fun r='_ZN5Eigen9RealSchur7computeERKNS_9EigenBaseITL0__EEb'/>
<fun r='_ZN5Eigen9RealSchur21computeFromHessenbergERKTL0__RKTL0_0_b'/>
<fun r='_ZN5Eigen9RealSchur14computeNormOfTEv'/>
<fun r='_ZN5Eigen9RealSchur21findSmallSubdiagEntryElRKNT_6ScalarE'/>
<fun r='_ZN5Eigen9RealSchur15splitOffTwoRowsElbRKNT_6ScalarE'/>
<fun r='_ZN5Eigen9RealSchur12computeShiftEllRNT_6ScalarERNS_6MatrixIS2_Li3ELi1ELi0ELi3ELi1EEE'/>
<fun r='_ZN5Eigen9RealSchur17initFrancisQRStepEllRKNS_6MatrixINT_6ScalarELi3ELi1ELi0ELi3ELi1EEERlRS4_'/>
<fun r='_ZN5Eigen9RealSchur20performFrancisQRStepElllbRKNS_6MatrixINT_6ScalarELi3ELi1ELi0ELi3ELi1EEEPS3_'/>
