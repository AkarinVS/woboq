<dec f='halide/build/include/HalideRuntime.h' l='891' type='int halide_memoization_cache_lookup(void * user_context, const uint8_t * cache_key, int32_t size, struct halide_buffer_t * realized_bounds, int32_t tuple_count, struct halide_buffer_t ** tuple_buffers)'/>
<doc f='halide/build/include/HalideRuntime.h' l='874'>/** Given a cache key for a memoized result, currently constructed
 *  from the Func name and top-level Func name plus the arguments of
 *  the computation, determine if the result is in the cache and
 *  return it if so. (The internals of the cache key should be
 *  considered opaque by this function.) If this routine returns true,
 *  it is a cache miss. Otherwise, it will return false and the
 *  buffers passed in will be filled, via copying, with memoized
 *  data. The last argument is a list if halide_buffer_t pointers which
 *  represents the outputs of the memoized Func. If the Func does not
 *  return a Tuple, there will only be one halide_buffer_t in the list. The
 *  tuple_count parameters determines the length of the list.
 *
 * The return values are:
 * -1: Signals an error.
 *  0: Success and cache hit.
 *  1: Success and cache miss.
 */</doc>
<dec f='halide/build/include/Halide.h' l='989' type='int halide_memoization_cache_lookup(void * user_context, const uint8_t * cache_key, int32_t size, struct halide_buffer_t * realized_bounds, int32_t tuple_count, struct halide_buffer_t ** tuple_buffers)'/>
<doc f='halide/build/include/Halide.h' l='972'>/** Given a cache key for a memoized result, currently constructed
 *  from the Func name and top-level Func name plus the arguments of
 *  the computation, determine if the result is in the cache and
 *  return it if so. (The internals of the cache key should be
 *  considered opaque by this function.) If this routine returns true,
 *  it is a cache miss. Otherwise, it will return false and the
 *  buffers passed in will be filled, via copying, with memoized
 *  data. The last argument is a list if halide_buffer_t pointers which
 *  represents the outputs of the memoized Func. If the Func does not
 *  return a Tuple, there will only be one halide_buffer_t in the list. The
 *  tuple_count parameters determines the length of the list.
 *
 * The return values are:
 * -1: Signals an error.
 *  0: Success and cache hit.
 *  1: Success and cache miss.
 */</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='891' type='int halide_memoization_cache_lookup(void * user_context, const uint8_t * cache_key, int32_t size, struct halide_buffer_t * realized_bounds, int32_t tuple_count, struct halide_buffer_t ** tuple_buffers)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='874'>/** Given a cache key for a memoized result, currently constructed
 *  from the Func name and top-level Func name plus the arguments of
 *  the computation, determine if the result is in the cache and
 *  return it if so. (The internals of the cache key should be
 *  considered opaque by this function.) If this routine returns true,
 *  it is a cache miss. Otherwise, it will return false and the
 *  buffers passed in will be filled, via copying, with memoized
 *  data. The last argument is a list if halide_buffer_t pointers which
 *  represents the outputs of the memoized Func. If the Func does not
 *  return a Tuple, there will only be one halide_buffer_t in the list. The
 *  tuple_count parameters determines the length of the list.
 *
 * The return values are:
 * -1: Signals an error.
 *  0: Success and cache hit.
 *  1: Success and cache miss.
 */</doc>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='963' type='int halide_memoization_cache_lookup(void * user_context, const uint8_t * cache_key, int32_t size, struct halide_buffer_t * realized_bounds, int32_t tuple_count, struct halide_buffer_t ** tuple_buffers)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='946'>/** Given a cache key for a memoized result, currently constructed
 *  from the Func name and top-level Func name plus the arguments of
 *  the computation, determine if the result is in the cache and
 *  return it if so. (The internals of the cache key should be
 *  considered opaque by this function.) If this routine returns true,
 *  it is a cache miss. Otherwise, it will return false and the
 *  buffers passed in will be filled, via copying, with memoized
 *  data. The last argument is a list if halide_buffer_t pointers which
 *  represents the outputs of the memoized Func. If the Func does not
 *  return a Tuple, there will only be one halide_buffer_t in the list. The
 *  tuple_count parameters determines the length of the list.
 *
 * The return values are:
 * -1: Signals an error.
 *  0: Success and cache hit.
 *  1: Success and cache miss.
 */</doc>
