<dec f='halide/llvm-install/include/llvm/IR/Instructions.h' l='3712' type='void llvm::InvokeInst::InvokeInst(llvm::FunctionType * Ty, llvm::Value * Func, llvm::BasicBlock * IfNormal, llvm::BasicBlock * IfException, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;llvm::OperandBundleDef&gt; Bundles, int NumOperands, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<use f='halide/llvm-install/include/llvm/IR/Instructions.h' l='3746' u='c' c='_ZN4llvm10InvokeInst6CreateEPNS_12FunctionTypeEPNS_5ValueEPNS_10BasicBlockES6_NS_8ArrayRefIS4_EERKNS_5TwineEPNS_11InstructionE'/>
<use f='halide/llvm-install/include/llvm/IR/Instructions.h' l='3760' u='c' c='_ZN4llvm10InvokeInst6CreateEPNS_12FunctionTypeEPNS_5ValueEPNS_10BasicBlockES6_NS_8ArrayRefIS4_EENS7_INS_17OperandBundleDefTIS4_EEEERKNS_5TwineEPNS_11InstructionE'/>
<def f='halide/llvm-install/include/llvm/IR/Instructions.h' l='3887' ll='3895' type='void llvm::InvokeInst::InvokeInst(llvm::FunctionType * Ty, llvm::Value * Func, llvm::BasicBlock * IfNormal, llvm::BasicBlock * IfException, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;llvm::OperandBundleDef&gt; Bundles, int NumOperands, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<doc f='halide/llvm-install/include/llvm/IR/Instructions.h' l='3709'>/// Construct an InvokeInst given a range of arguments.
  ///
  /// Construct an InvokeInst from a range of arguments</doc>
