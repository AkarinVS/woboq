<dec f='halide/halide-install/include/Halide.h' l='23298' type='int Halide::Internal::generate_filter_main(int argc, char ** argv, std::ostream &amp; cerr)'/>
<doc f='halide/halide-install/include/Halide.h' l='23295'>/** generate_filter_main() is a convenient wrapper for GeneratorRegistry::create() +
 * compile_to_files(); it can be trivially wrapped by a &quot;real&quot; main() to produce a
 * command-line utility for ahead-of-time filter compilation. */</doc>
<use f='halide/halide-install/share/tools/GenGen.cpp' l='4' u='c' c='main'/>
<dec f='halide/build/include/Halide.h' l='23298' type='int Halide::Internal::generate_filter_main(int argc, char ** argv, std::ostream &amp; cerr)'/>
<doc f='halide/build/include/Halide.h' l='23295'>/** generate_filter_main() is a convenient wrapper for GeneratorRegistry::create() +
 * compile_to_files(); it can be trivially wrapped by a &quot;real&quot; main() to produce a
 * command-line utility for ahead-of-time filter compilation. */</doc>
<dec f='halide/src/Generator.h' l='364' type='int Halide::Internal::generate_filter_main(int argc, char ** argv, std::ostream &amp; cerr)'/>
<def f='halide/src/Generator.cpp' l='1041' ll='1048' type='int Halide::Internal::generate_filter_main(int argc, char ** argv, std::ostream &amp; cerr)'/>
<doc f='halide/src/Generator.h' l='361'>/** generate_filter_main() is a convenient wrapper for GeneratorRegistry::create() +
 * compile_to_files(); it can be trivially wrapped by a &quot;real&quot; main() to produce a
 * command-line utility for ahead-of-time filter compilation. */</doc>
<use f='halide/tools/GenGen.cpp' l='4' u='c' c='main'/>
