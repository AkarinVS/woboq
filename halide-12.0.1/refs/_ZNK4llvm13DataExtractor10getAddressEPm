<def f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='322' ll='324' type='uint64_t llvm::DataExtractor::getAddress(uint64_t * offset_ptr) const'/>
<doc f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='305'>//------------------------------------------------------------------
  /// Extract an pointer from \a *offset_ptr.
  ///
  /// Extract a single pointer from the data and update the offset
  /// pointed to by \a offset_ptr. The size of the extracted pointer
  /// is \a getAddressSize(), so the address size has to be
  /// set correctly prior to extracting any pointer values.
  ///
  /// @param[in,out] offset_ptr
  ///     A pointer to an offset within the data that will be advanced
  ///     by the appropriate number of bytes if the value is extracted
  ///     correctly. If the offset is out of bounds or there are not
  ///     enough bytes to extract this value, the offset will be left
  ///     unmodified.
  ///
  /// @return
  ///     The extracted pointer value as a 64 integer.</doc>
<use f='halide/src/Introspection.cpp' l='2042' u='c' c='_ZN6Halide8Internal13Introspection12_GLOBAL__N_113DebugSections16parse_debug_lineERKN4llvm13DataExtractorE'/>
