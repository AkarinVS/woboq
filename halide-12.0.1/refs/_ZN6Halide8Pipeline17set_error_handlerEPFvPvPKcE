<dec f='halide/build/include/Halide.h' l='15015' type='void Halide::Pipeline::set_error_handler(void (*)(void *, const char *) handler)'/>
<doc f='halide/build/include/Halide.h' l='15006'>/** Set the error handler function that be called in the case of
     * runtime errors during halide pipelines. If you are compiling
     * statically, you can also just define your own function with
     * signature
     \code
     extern &quot;C&quot; void halide_error(void *user_context, const char *);
     \endcode
     * This will clobber Halide&apos;s version.
     */</doc>
<dec f='halide/src/Pipeline.h' l='359' type='void Halide::Pipeline::set_error_handler(void (*)(void *, const char *) handler)'/>
<doc f='halide/src/Pipeline.h' l='350'>/** Set the error handler function that be called in the case of
     * runtime errors during halide pipelines. If you are compiling
     * statically, you can also just define your own function with
     * signature
     \code
     extern &quot;C&quot; void halide_error(void *user_context, const char *);
     \endcode
     * This will clobber Halide&apos;s version.
     */</doc>
<use f='halide/src/Func.cpp' l='3264' u='c' c='_ZN6Halide4Func17set_error_handlerEPFvPvPKcE'/>
<def f='halide/src/Pipeline.cpp' l='643' ll='646' type='void Halide::Pipeline::set_error_handler(void (*)(void *, const char *) handler)'/>
