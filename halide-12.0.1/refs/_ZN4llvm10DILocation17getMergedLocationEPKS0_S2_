<dec f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='1751' type='static const llvm::DILocation * llvm::DILocation::getMergedLocation(const llvm::DILocation * LocA, const llvm::DILocation * LocB)'/>
<doc f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='1737'>/// When two instructions are combined into a single instruction we also
  /// need to combine the original locations into a single location.
  ///
  /// When the locations are the same we can use either location. When they
  /// differ, we need a third location which is distinct from either. If they
  /// have the same file/line but have a different discriminator we could
  /// create a location with a new discriminator. If they are from different
  /// files/lines the location is ambiguous and can&apos;t be represented in a line
  /// entry. In this case, if \p GenerateLocation is true, we will set the
  /// merged debug location as line 0 of the nearest common scope where the two
  /// locations are inlined from.
  ///
  /// \p GenerateLocation: Whether the merged location can be generated when
  /// \p LocA and \p LocB differ.</doc>
