<dec f='halide/apps/fft/fft.h' l='49' type='ComplexFunc fft2d_c2c(ComplexFunc x, int N0, int N1, int sign, const Halide::Target &amp; target, const Fft2dDesc &amp; desc = Fft2dDesc())'/>
<def f='halide/apps/fft/fft.cpp' l='1102' ll='1108' type='ComplexFunc fft2d_c2c(ComplexFunc x, int N0, int N1, int sign, const Halide::Target &amp; target, const Fft2dDesc &amp; desc = Fft2dDesc())'/>
<doc f='halide/apps/fft/fft.h' l='41'>// Compute the N0 x N1 2D complex DFT of the first 2 dimensions of a complex
// valued function x. The first 2 dimensions of x should be defined on at least
// [0, N0) and [0, N1) for dimensions 0, 1, respectively. sign = -1 indicates a
// forward FFT, sign = 1 indicates an inverse FFT. There is no normalization of
// the FFT in either direction, i.e.:
//
//   X = fft2d_c2c(x, N0, N1, -1);
//   x = fft2d_c2c(X, N0, N1, 1) / (N0 * N1);</doc>
<use f='halide/apps/fft/fft_generator.cpp' l='116' u='c' c='_ZN12_GLOBAL__N_112FFTGenerator8generateEv'/>
<use f='halide/apps/fft/fft_generator.cpp' l='125' u='c' c='_ZN12_GLOBAL__N_112FFTGenerator8generateEv'/>
<use f='halide/apps/fft/main.cpp' l='77' u='c' c='main'/>
<use f='halide/apps/fft/main.cpp' l='78' u='c' c='main'/>
<use f='halide/apps/fft/main.cpp' l='87' u='c' c='main'/>
<use f='halide/apps/fft/main.cpp' l='155' u='c' c='main'/>
