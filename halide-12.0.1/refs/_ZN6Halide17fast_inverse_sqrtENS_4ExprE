<dec f='halide/halide-install/include/Halide.h' l='7810' type='Halide::Expr Halide::fast_inverse_sqrt(Halide::Expr x)'/>
<doc f='halide/halide-install/include/Halide.h' l='7805'>/** Fast approximate inverse square root for Float(32). Corresponds to
 * the rsqrtps instruction on x86, and the vrsqrte instruction on
 * ARM. Vectorizes cleanly. Note that this can produce slightly different results
 * across different implementations of the same architecture (e.g. AMD vs Intel),
 * even when strict_float is enabled. */</doc>
<dec f='halide/build/include/Halide.h' l='7810' type='Halide::Expr Halide::fast_inverse_sqrt(Halide::Expr x)'/>
<doc f='halide/build/include/Halide.h' l='7805'>/** Fast approximate inverse square root for Float(32). Corresponds to
 * the rsqrtps instruction on x86, and the vrsqrte instruction on
 * ARM. Vectorizes cleanly. Note that this can produce slightly different results
 * across different implementations of the same architecture (e.g. AMD vs Intel),
 * even when strict_float is enabled. */</doc>
<use f='halide/python_bindings/src/PyIROperator.cpp' l='140' u='a' c='_ZN6Halide14PythonBindings16define_operatorsERN8pybind117module_E'/>
<dec f='halide/src/IROperator.h' l='1005' type='Halide::Expr Halide::fast_inverse_sqrt(Halide::Expr x)'/>
<doc f='halide/src/IROperator.h' l='1000'>/** Fast approximate inverse square root for Float(32). Corresponds to
 * the rsqrtps instruction on x86, and the vrsqrte instruction on
 * ARM. Vectorizes cleanly. Note that this can produce slightly different results
 * across different implementations of the same architecture (e.g. AMD vs Intel),
 * even when strict_float is enabled. */</doc>
<use f='halide/src/Derivative.cpp' l='1145' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_126ReverseAccumulationVisitor5visitEPKNS0_4CallE'/>
<def f='halide/src/IROperator.cpp' l='2182' ll='2186' type='Halide::Expr Halide::fast_inverse_sqrt(Halide::Expr x)'/>
