<dec f='halide/build/include/Halide.h' l='7871' type='Halide::Expr Halide::operator&amp;(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/build/include/Halide.h' l='7867'>/** Return the bitwise and of two expressions (which need not have the
 * same type).  The result type is the wider of the two expressions.
 * Only integral types are allowed and both expressions must be signed
 * or both must be unsigned. */</doc>
<dec f='halide/src/IROperator.h' l='1066' type='Halide::Expr Halide::operator&amp;(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/src/IROperator.h' l='1062'>/** Return the bitwise and of two expressions (which need not have the
 * same type).  The result type is the wider of the two expressions.
 * Only integral types are allowed and both expressions must be signed
 * or both must be unsigned. */</doc>
<use f='halide/src/Bounds.cpp' l='3199' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3200' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3204' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3205' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3206' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/CodeGen_Hexagon.cpp' l='2132' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_115CodeGen_Hexagon29codegen_cache_allocation_sizeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeERKSt62981512'/>
<use f='halide/src/CodeGen_Internal.cpp' l='375' u='c' c='_ZN6Halide8Internal18lower_int_uint_modERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='515' u='c' c='_ZN6Halide8Internal19lower_euclidean_divENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='517' u='c' c='_ZN6Halide8Internal19lower_euclidean_divENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='566' u='c' c='_ZN6Halide8Internal19lower_euclidean_modENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='568' u='c' c='_ZN6Halide8Internal19lower_euclidean_modENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Posix.cpp' l='48' u='c' c='_ZN6Halide8Internal13CodeGen_Posix23codegen_allocation_sizeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeERKSt6vectorINS_4ExprESaISC_EERKSC_'/>
<use f='halide/src/EmulateFloat16Math.cpp' l='47' u='c' c='_ZN6Halide8Internal18float16_to_float32ENS_4ExprE'/>
<use f='halide/src/EmulateFloat16Math.cpp' l='48' u='c' c='_ZN6Halide8Internal18float16_to_float32ENS_4ExprE'/>
<use f='halide/src/EmulateFloat16Math.cpp' l='80' u='c' c='_ZN6Halide8Internal18float32_to_float16ENS_4ExprE'/>
<use f='halide/src/FindIntrinsics.cpp' l='610' u='c' c='_ZN6Halide8Internal25lower_rounding_shift_leftERKNS_4ExprES3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='617' u='c' c='_ZN6Halide8Internal26lower_rounding_shift_rightERKNS_4ExprES3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='637' u='c' c='_ZN6Halide8Internal17lower_halving_addERKNS_4ExprES3_'/>
<use f='halide/src/FuzzFloatStores.cpp' l='19' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_115FuzzFloatStores5visitEPKNS0_5StoreE'/>
<use f='halide/src/IROperator.cpp' l='722' u='c' c='_ZN6Halide8Internal16range_reduce_logERKNS_4ExprEPS1_S4_'/>
<use f='halide/src/IROperator.cpp' l='733' u='c' c='_ZN6Halide8Internal16range_reduce_logERKNS_4ExprEPS1_S4_'/>
<def f='halide/src/IROperator.cpp' l='2328' ll='2332' type='Halide::Expr Halide::operator&amp;(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/src/Simplify_Call.cpp' l='274' u='c' c='_ZN6Halide8Internal8Simplify5visitEPKNS0_4CallEPNS1_8ExprInfoE'/>
