<dec f='halide/build/_deps/pybind11-src/include/pybind11/detail/common.h' l='453' type='bool'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='219' u='r' c='_ZN8pybind116detail16value_and_holderC1EPNS0_8instanceEPKNS0_9type_infoEmm'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='238' u='r' c='_ZNK8pybind116detail16value_and_holder18holder_constructedEv'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='243' u='r' c='_ZN8pybind116detail16value_and_holder22set_holder_constructedEb'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='251' u='r' c='_ZNK8pybind116detail16value_and_holder19instance_registeredEv'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='256' u='r' c='_ZN8pybind116detail16value_and_holder23set_instance_registeredEb'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='294' u='r' c='_ZN8pybind116detail18values_and_holders8iteratorppEv'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='358' u='w' c='_ZN8pybind116detail8instance15allocate_layoutEv'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='362' u='r' c='_ZN8pybind116detail8instance15allocate_layoutEv'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='399' u='r' c='_ZN8pybind116detail8instance17deallocate_layoutEv'/>
<offset>385</offset>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/detail/common.h' l='430'>/**
     * An instance has two possible value/holder layouts.
     *
     * Simple layout (when this flag is true), means the `simple_value_holder` is set with a pointer
     * and the holder object governing that pointer, i.e. [val1*][holder].  This layout is applied
     * whenever there is no python-side multiple inheritance of bound C++ types *and* the type&apos;s
     * holder will fit in the default space (which is large enough to hold either a std::unique_ptr
     * or std::shared_ptr).
     *
     * Non-simple layout applies when using custom holders that require more space than `shared_ptr`
     * (which is typically the size of two pointers), or when multiple inheritance is used on the
     * python side.  Non-simple layout allocates the required amount of memory to have multiple
     * bound C++ classes as parents.  Under this layout, `nonsimple.values_and_holders` is set to a
     * pointer to allocated space of the required space to hold a sequence of value pointers and
     * holders followed `status`, a set of bit flags (1 byte each), i.e.
     * [val1*][holder1][val2*][holder2]...[bb...]  where each [block] is rounded up to a multiple of
     * `sizeof(void *)`.  `nonsimple.status` is, for convenience, a pointer to the
     * beginning of the [bb...] block (but not independently allocated).
     *
     * Status bits indicate whether the associated holder is constructed (&amp;
     * status_holder_constructed) and whether the value pointer is registered (&amp;
     * status_instance_registered) in `registered_instances`.
     */</doc>
