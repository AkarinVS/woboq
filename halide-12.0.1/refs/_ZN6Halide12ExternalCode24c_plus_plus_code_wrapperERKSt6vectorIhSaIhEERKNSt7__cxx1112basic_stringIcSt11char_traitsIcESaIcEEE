<def f='halide/halide-install/include/Halide.h' l='13559' ll='13561' type='static Halide::ExternalCode Halide::ExternalCode::c_plus_plus_code_wrapper(const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/halide-install/include/Halide.h' l='13545'>/** Construct an ExternalCode container from C++ source code. This
     * container can be used to insert its code into C++ output from
     * Halide.
     *
     * At present, this API is not fully working. See Issue:
     *     https://github.com/halide/Halide/issues/1971
     *
     * The name is used as a unique identifier for the external code
     * and duplicates will be reduced to a single instance. Halide
     * does not do anything other than to compare names for
     * equality. To guarantee uniqueness in public code, we suggest
     * using a Java style inverted domain name followed by
     * organization specific naming. E.g.:
     *     com.cyberdyne.skynet.78ad6c411d313f050f172cd3d440f23fdd797d0d */</doc>
<def f='halide/build/include/Halide.h' l='13559' ll='13561' type='static Halide::ExternalCode Halide::ExternalCode::c_plus_plus_code_wrapper(const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/build/include/Halide.h' l='13545'>/** Construct an ExternalCode container from C++ source code. This
     * container can be used to insert its code into C++ output from
     * Halide.
     *
     * At present, this API is not fully working. See Issue:
     *     https://github.com/halide/Halide/issues/1971
     *
     * The name is used as a unique identifier for the external code
     * and duplicates will be reduced to a single instance. Halide
     * does not do anything other than to compare names for
     * equality. To guarantee uniqueness in public code, we suggest
     * using a Java style inverted domain name followed by
     * organization specific naming. E.g.:
     *     com.cyberdyne.skynet.78ad6c411d313f050f172cd3d440f23fdd797d0d */</doc>
<def f='halide/src/ExternalCode.h' l='86' ll='88' type='static Halide::ExternalCode Halide::ExternalCode::c_plus_plus_code_wrapper(const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/src/ExternalCode.h' l='72'>/** Construct an ExternalCode container from C++ source code. This
     * container can be used to insert its code into C++ output from
     * Halide.
     *
     * At present, this API is not fully working. See Issue:
     *     https://github.com/halide/Halide/issues/1971
     *
     * The name is used as a unique identifier for the external code
     * and duplicates will be reduced to a single instance. Halide
     * does not do anything other than to compare names for
     * equality. To guarantee uniqueness in public code, we suggest
     * using a Java style inverted domain name followed by
     * organization specific naming. E.g.:
     *     com.cyberdyne.skynet.78ad6c411d313f050f172cd3d440f23fdd797d0d */</doc>
<use f='halide/test/generator/external_code_generator.cpp' l='43' u='c' c='_ZN12_GLOBAL__N_112ExternalCode8generateEv'/>
