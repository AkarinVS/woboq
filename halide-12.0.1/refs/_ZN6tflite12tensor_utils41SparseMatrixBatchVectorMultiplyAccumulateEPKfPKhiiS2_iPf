<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/tensor_utils_common.h' l='111' type='void tflite::tensor_utils::SparseMatrixBatchVectorMultiplyAccumulate(const float *__restrict matrix, const uint8_t *__restrict ledger, int m_rows, int m_cols, const float *__restrict vector, int n_batch, float *__restrict result)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/tensor_utils_common.h' l='101'>// Same as the function above, but the matrix is stored in block compressed
// sparse row format with block pattern 1x16 which consists of two arrays:
//   1. A matrix array stores non-zero blocks of the matrix in row major.
//   2. A ledger array stores nrows groups, one group per row. Each group starts
//      with an integer representing the number of non-zero blocks for the
//      corresponding row and follows with column indexes of the first element
//      of each non-zero block.
// This function assumes that
//   1. m_cols is a multiple of 16 so that all blocks are full blocks.
//   2. m_cols &lt; 254 * 16 so that block index can be represented by uint8.</doc>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/reference/portable_tensor_utils.h' l='106' ll='112' type='void tflite::tensor_utils::SparseMatrixBatchVectorMultiplyAccumulate(const float *__restrict matrix, const uint8_t *__restrict ledger, int m_rows, int m_cols, const float *__restrict vector, int n_batch, float *__restrict result)'/>
