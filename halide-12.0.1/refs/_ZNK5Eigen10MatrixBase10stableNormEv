<dec f='halide/build-apps/eigen/Eigen/src/Core/MatrixBase.h' l='194' type='Eigen::MatrixBase::RealScalar Eigen::MatrixBase::stableNorm() const'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/StableNorm.h' l='224' ll='229' type='typename NumTraits&lt;typename internal::traits&lt;Derived&gt;::Scalar&gt;::Real Eigen::MatrixBase::stableNorm() const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/StableNorm.h' l='214'>/** \returns the \em l2 norm of \c *this avoiding underflow and overflow.
  * This version use a blockwise two passes algorithm:
  *  1 - find the absolute largest coefficient \c s
  *  2 - compute \f$ s \Vert \frac{*this}{s} \Vert \f$ in a standard way
  *
  * For architecture/scalar types supporting vectorization, this version
  * is faster than blueNorm(). Otherwise the blueNorm() is much faster.
  *
  * \sa norm(), blueNorm(), hypotNorm()
  */</doc>
<use f='halide/build-apps/eigen/blas/level1_cplx_impl.h' l='114' u='c' c='dznrm2_'/>
<use f='halide/build-apps/eigen/blas/level1_cplx_impl.h' l='116' u='c' c='dznrm2_'/>
<use f='halide/build-apps/eigen/blas/level1_real_impl.h' l='75' u='c' c='dnrm2_'/>
<use f='halide/build-apps/eigen/blas/level1_real_impl.h' l='76' u='c' c='dnrm2_'/>
