<def f='halide/halide-install/include/Halide.h' l='9870' ll='9875' type='Buffer&lt;Halide::Runtime::Buffer::not_const_T, D&gt; Halide::Runtime::Buffer::copy(void *(*)(size_t) allocate_fn = nullptr, void (*)(void *) deallocate_fn = nullptr) const'/>
<doc f='halide/halide-install/include/Halide.h' l='9858'>/** Make a new image which is a deep copy of this image. Use crop
     * or slice followed by copy to make a copy of only a portion of
     * the image. The new image uses the same memory layout as the
     * original, with holes compacted away. Note that the returned
     * Buffer is always of a non-const type T (ie:
     *
     *     Buffer&lt;const T&gt;.copy() -&gt; Buffer&lt;T&gt; rather than Buffer&lt;const T&gt;
     *
     * which is always safe, since we are making a deep copy. (The caller
     * can easily cast it back to Buffer&lt;const T&gt; if desired, which is
     * always safe and free.)
     */</doc>
<def f='halide/halide-install/include/HalideBuffer.h' l='1108' ll='1113' type='Buffer&lt;Halide::Runtime::Buffer::not_const_T, D&gt; Halide::Runtime::Buffer::copy(void *(*)(size_t) allocate_fn = nullptr, void (*)(void *) deallocate_fn = nullptr) const'/>
<doc f='halide/halide-install/include/HalideBuffer.h' l='1096'>/** Make a new image which is a deep copy of this image. Use crop
     * or slice followed by copy to make a copy of only a portion of
     * the image. The new image uses the same memory layout as the
     * original, with holes compacted away. Note that the returned
     * Buffer is always of a non-const type T (ie:
     *
     *     Buffer&lt;const T&gt;.copy() -&gt; Buffer&lt;T&gt; rather than Buffer&lt;const T&gt;
     *
     * which is always safe, since we are making a deep copy. (The caller
     * can easily cast it back to Buffer&lt;const T&gt; if desired, which is
     * always safe and free.)
     */</doc>
<use f='halide/apps/hannk/interpreter/lower.cpp' l='69' u='c' c='_ZN5hannk17lower_tflite_lstmESt10shared_ptrINS_6TensorEES2_S2_S2_S2_S2_S2_S2_S2_NS_18ActivationFunctionE'/>
<use f='halide/apps/hannk/util/model_runner.cpp' l='259' u='c' c='_ZN5hannk17TfLiteModelRunner12copy_outputsEv'/>
<use f='halide/apps/hannk/util/model_runner.cpp' l='351' u='c' c='_ZN5hannk11ModelRunner12run_in_hannkERKSt6vectorIcSaIcEE'/>
<def f='halide/build/include/Halide.h' l='9870' ll='9875' type='Buffer&lt;Halide::Runtime::Buffer::not_const_T, D&gt; Halide::Runtime::Buffer::copy(void *(*)(size_t) allocate_fn = nullptr, void (*)(void *) deallocate_fn = nullptr) const'/>
<doc f='halide/build/include/Halide.h' l='9858'>/** Make a new image which is a deep copy of this image. Use crop
     * or slice followed by copy to make a copy of only a portion of
     * the image. The new image uses the same memory layout as the
     * original, with holes compacted away. Note that the returned
     * Buffer is always of a non-const type T (ie:
     *
     *     Buffer&lt;const T&gt;.copy() -&gt; Buffer&lt;T&gt; rather than Buffer&lt;const T&gt;
     *
     * which is always safe, since we are making a deep copy. (The caller
     * can easily cast it back to Buffer&lt;const T&gt; if desired, which is
     * always safe and free.)
     */</doc>
<def f='halide/src/runtime/HalideBuffer.h' l='1108' ll='1113' type='Buffer&lt;Halide::Runtime::Buffer::not_const_T, D&gt; Halide::Runtime::Buffer::copy(void *(*)(size_t) allocate_fn = nullptr, void (*)(void *) deallocate_fn = nullptr) const'/>
<doc f='halide/src/runtime/HalideBuffer.h' l='1096'>/** Make a new image which is a deep copy of this image. Use crop
     * or slice followed by copy to make a copy of only a portion of
     * the image. The new image uses the same memory layout as the
     * original, with holes compacted away. Note that the returned
     * Buffer is always of a non-const type T (ie:
     *
     *     Buffer&lt;const T&gt;.copy() -&gt; Buffer&lt;T&gt; rather than Buffer&lt;const T&gt;
     *
     * which is always safe, since we are making a deep copy. (The caller
     * can easily cast it back to Buffer&lt;const T&gt; if desired, which is
     * always safe and free.)
     */</doc>
