<dec f='halide/build/include/Halide.h' l='22400' type='Halide::Internal::Stmt Halide::Internal::fuse_gpu_thread_loops(Halide::Internal::Stmt s)'/>
<doc f='halide/build/include/Halide.h' l='22392'>/** Converts Halide&apos;s GPGPU IR to the OpenCL/CUDA/Metal model. Within
 * every loop over gpu block indices, fuse the inner loops over thread
 * indices into a single loop (with predication to turn off
 * threads). Push if conditions between GPU blocks to the innermost GPU threads.
 * Also injects synchronization points as needed, and hoists
 * shared allocations at the block level out into a single shared
 * memory array, and heap allocations into a slice of a global pool
 * allocated outside the kernel. */</doc>
<dec f='halide/src/FuseGPUThreadLoops.h' l='25' type='Halide::Internal::Stmt Halide::Internal::fuse_gpu_thread_loops(Halide::Internal::Stmt s)'/>
<def f='halide/src/FuseGPUThreadLoops.cpp' l='1624' ll='1634' type='Halide::Internal::Stmt Halide::Internal::fuse_gpu_thread_loops(Halide::Internal::Stmt s)'/>
<doc f='halide/src/FuseGPUThreadLoops.h' l='17'>/** Converts Halide&apos;s GPGPU IR to the OpenCL/CUDA/Metal model. Within
 * every loop over gpu block indices, fuse the inner loops over thread
 * indices into a single loop (with predication to turn off
 * threads). Push if conditions between GPU blocks to the innermost GPU threads.
 * Also injects synchronization points as needed, and hoists
 * shared allocations at the block level out into a single shared
 * memory array, and heap allocations into a slice of a global pool
 * allocated outside the kernel. */</doc>
<use f='halide/src/Lower.cpp' l='324' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
