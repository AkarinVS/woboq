<dec f='halide/build/include/Halide.h' l='8738' type='const halide_device_interface_t * Halide::get_device_interface_for_device_api(Halide::DeviceAPI d, const Halide::Target &amp; t = get_jit_target_from_environment(), const char * error_site = nullptr)'/>
<use f='halide/build/include/Halide.h' l='11673' u='c' c='_ZN6Halide6Buffer14copy_to_deviceERKNS_9DeviceAPIERKNS_6TargetE'/>
<use f='halide/build/include/Halide.h' l='11683' u='c' c='_ZN6Halide6Buffer13device_mallocERKNS_9DeviceAPIERKNS_6TargetE'/>
<use f='halide/build/include/Halide.h' l='11692' u='c' c='_ZN6Halide6Buffer18device_wrap_nativeERKNS_9DeviceAPIEmRKNS_6TargetE'/>
<doc f='halide/build/include/Halide.h' l='8730'>/** Gets the appropriate halide_device_interface_t * for a
 * DeviceAPI. If error_site is non-null, e.g. the name of the routine
 * calling get_device_interface_for_device_api, a user_error is
 * reported if the requested device API is not enabled in or supported
 * by the target, Halide has been compiled without this device API, or
 * the device API is None or Host or a bad value. The error_site
 * argument is printed in the error message. If error_site is null,
 * this routine returns nullptr instead of calling user_error. */</doc>
<dec f='halide/src/DeviceInterface.h' l='21' type='const halide_device_interface_t * Halide::get_device_interface_for_device_api(Halide::DeviceAPI d, const Halide::Target &amp; t = get_jit_target_from_environment(), const char * error_site = nullptr)'/>
<use f='halide/src/Buffer.h' l='586' u='c' c='_ZN6Halide6Buffer14copy_to_deviceERKNS_9DeviceAPIERKNS_6TargetE'/>
<use f='halide/src/Buffer.h' l='596' u='c' c='_ZN6Halide6Buffer13device_mallocERKNS_9DeviceAPIERKNS_6TargetE'/>
<use f='halide/src/Buffer.h' l='605' u='c' c='_ZN6Halide6Buffer18device_wrap_nativeERKNS_9DeviceAPIEmRKNS_6TargetE'/>
<doc f='halide/src/DeviceInterface.h' l='13'>/** Gets the appropriate halide_device_interface_t * for a
 * DeviceAPI. If error_site is non-null, e.g. the name of the routine
 * calling get_device_interface_for_device_api, a user_error is
 * reported if the requested device API is not enabled in or supported
 * by the target, Halide has been compiled without this device API, or
 * the device API is None or Host or a bad value. The error_site
 * argument is printed in the error message. If error_site is null,
 * this routine returns nullptr instead of calling user_error. */</doc>
<use f='halide/src/DeviceInterface.cpp' l='43' u='c' c='_ZN6Halide27host_supports_target_deviceERKNS_6TargetE'/>
<def f='halide/src/DeviceInterface.cpp' l='70' ll='142' type='const halide_device_interface_t * Halide::get_device_interface_for_device_api(Halide::DeviceAPI d, const Halide::Target &amp; t = get_jit_target_from_environment(), const char * error_site = nullptr)'/>
<use f='halide/src/Target.cpp' l='238' u='c' c='_ZN6Halide12_GLOBAL__N_130calculate_host_cuda_capabilityENS_6TargetE'/>
