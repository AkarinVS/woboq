<def f='halide/build/_deps/pybind11-src/include/pybind11/detail/class.h' l='159' ll='168' type='PyObject * pybind11::detail::pybind11_meta_getattro(PyObject * obj, PyObject * name)'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/detail/class.h' l='263' u='r' c='_ZN8pybind116detail22make_default_metaclassEv'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/detail/class.h' l='153'>/**
 * Python 3&apos;s PyInstanceMethod_Type hides itself via its tp_descr_get, which prevents aliasing
 * methods via cls.attr(&quot;m2&quot;) = cls.attr(&quot;m1&quot;): instead the tp_descr_get returns a plain function,
 * when called on a class, or a PyMethod, when called on an instance.  Override that behaviour here
 * to do a special case bypass for PyInstanceMethod_Types.
 */</doc>
