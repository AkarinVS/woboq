<use f='halide/build-apps/eigen/Eigen/src/Core/MatrixBase.h' l='359' c='_ZNK5Eigen10MatrixBase13householderQrEv'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='18'/>
<def f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='56' ll='244'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='57'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='247' c='_ZNK5Eigen13HouseholderQR14absDeterminantEv'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='256' c='_ZNK5Eigen13HouseholderQR17logAbsDeterminantEv'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='361' c='_ZNK5Eigen13HouseholderQR11_solve_implERKTL0__RTL0_0_'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='379' c='_ZNK5Eigen13HouseholderQR22_solve_impl_transposedERKTL0_0_RTL0_1_'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='404' c='_ZN5Eigen13HouseholderQR14computeInPlaceEv'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='426' c='_ZNK5Eigen10MatrixBase13householderQrEv'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='429' c='_ZNK5Eigen10MatrixBase13householderQrEv'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/JacobiSVD.h' l='287'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/JacobiSVD.h' l='342'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/RealQZ.h' l='226' c='_ZN5Eigen6RealQZ20hessenbergTriangularEv'/>
<doc f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='29'>/** \ingroup QR_Module
  *
  *
  * \class HouseholderQR
  *
  * \brief Householder QR decomposition of a matrix
  *
  * \tparam _MatrixType the type of the matrix of which we are computing the QR decomposition
  *
  * This class performs a QR decomposition of a matrix \b A into matrices \b Q and \b R
  * such that 
  * \f[
  *  \mathbf{A} = \mathbf{Q} \, \mathbf{R}
  * \f]
  * by using Householder transformations. Here, \b Q a unitary matrix and \b R an upper triangular matrix.
  * The result is stored in a compact way compatible with LAPACK.
  *
  * Note that no pivoting is performed. This is \b not a rank-revealing decomposition.
  * If you want that feature, use FullPivHouseholderQR or ColPivHouseholderQR instead.
  *
  * This Householder QR decomposition is faster, but less numerically stable and less feature-full than
  * FullPivHouseholderQR or ColPivHouseholderQR.
  *
  * This class supports the \link InplaceDecomposition inplace decomposition \endlink mechanism.
  *
  * \sa MatrixBase::householderQr()
  */</doc>
<fun r='_ZN5Eigen13HouseholderQRC1Ev'/>
<fun r='_ZN5Eigen13HouseholderQRC1Ell'/>
<fun r='_ZN5Eigen13HouseholderQRC1ERKNS_9EigenBaseITL0__EE'/>
<fun r='_ZN5Eigen13HouseholderQRC1ERNS_9EigenBaseITL0__EE'/>
<fun r='_ZNK5Eigen13HouseholderQR12householderQEv'/>
<fun r='_ZNK5Eigen13HouseholderQR8matrixQREv'/>
<fun r='_ZN5Eigen13HouseholderQR7computeERKNS_9EigenBaseITL0__EE'/>
<fun r='_ZNK5Eigen13HouseholderQR14absDeterminantEv'/>
<fun r='_ZNK5Eigen13HouseholderQR17logAbsDeterminantEv'/>
<fun r='_ZNK5Eigen13HouseholderQR4rowsEv'/>
<fun r='_ZNK5Eigen13HouseholderQR4colsEv'/>
<fun r='_ZNK5Eigen13HouseholderQR7hCoeffsEv'/>
<fun r='_ZNK5Eigen13HouseholderQR11_solve_implERKTL0__RTL0_0_'/>
<fun r='_ZNK5Eigen13HouseholderQR22_solve_impl_transposedERKTL0_0_RTL0_1_'/>
<fun r='_ZN5Eigen13HouseholderQR25check_template_parametersEv'/>
<fun r='_ZN5Eigen13HouseholderQR14computeInPlaceEv'/>
<mbr r='Eigen::HouseholderQR::m_qr' t='Eigen::HouseholderQR::MatrixType'/>
<mbr r='Eigen::HouseholderQR::m_hCoeffs' t='Eigen::HouseholderQR::HCoeffsType'/>
<mbr r='Eigen::HouseholderQR::m_temp' t='Eigen::HouseholderQR::RowVectorType'/>
<mbr r='Eigen::HouseholderQR::m_isInitialized' t='bool'/>
<fun r='_ZNK5Eigen13HouseholderQR14absDeterminantEv'/>
<fun r='_ZNK5Eigen13HouseholderQR17logAbsDeterminantEv'/>
<fun r='_ZNK5Eigen13HouseholderQR11_solve_implERKTL0__RTL0_0_'/>
<fun r='_ZNK5Eigen13HouseholderQR22_solve_impl_transposedERKTL0_0_RTL0_1_'/>
<fun r='_ZN5Eigen13HouseholderQR14computeInPlaceEv'/>
