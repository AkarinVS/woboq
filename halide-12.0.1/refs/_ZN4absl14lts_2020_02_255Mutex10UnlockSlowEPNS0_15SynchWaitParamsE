<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='493' type='void absl::lts_2020_02_25::Mutex::UnlockSlow(absl::lts_2020_02_25::SynchWaitParams * waitp)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='492'>// slow path release</doc>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1578' u='c' c='_ZN4absl14lts_2020_02_255Mutex11AwaitCommonERKNS0_9ConditionENS0_24synchronization_internal13KernelTimeoutE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1700' u='c' c='_ZN4absl14lts_2020_02_255Mutex6UnlockEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1731' u='c' c='_ZN4absl14lts_2020_02_255Mutex12ReaderUnlockEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1858' u='c' c='_ZN4absl14lts_2020_02_255Mutex20LockSlowWithDeadlineEPKNS0_6MuHowSEPKNS0_9ConditionENS0_24synchronization_internal13KernelTimeoutEi'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1925' u='c' c='_ZN4absl14lts_2020_02_255Mutex12LockSlowLoopEPNS0_15SynchWaitParamsEi'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1969' u='c' c='_ZN4absl14lts_2020_02_255Mutex12LockSlowLoopEPNS0_15SynchWaitParamsEi'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2020' ll='2316' type='void absl::lts_2020_02_25::Mutex::UnlockSlow(absl::lts_2020_02_25::SynchWaitParams * waitp)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2533' u='c' c='_ZN4absl14lts_2020_02_257CondVar10WaitCommonEPNS0_5MutexENS0_24synchronization_internal13KernelTimeoutE'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2015'>// Unlock this mutex, which is held by the current thread.
// If waitp is non-zero, it must be the wait parameters for the current thread
// which holds the lock but is not runnable because its condition is false
// or it is in the process of blocking on a condition variable; it must requeue
// itself on the mutex/condvar to wait for its condition to become true.</doc>
