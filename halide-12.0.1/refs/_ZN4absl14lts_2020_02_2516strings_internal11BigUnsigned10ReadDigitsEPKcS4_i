<use f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.h' l='79' u='c' c='_ZN4absl14lts_2020_02_2516strings_internal11BigUnsignedC1ENS0_11string_viewE'/>
<dec f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.h' l='237' type='int absl::lts_2020_02_25::strings_internal::BigUnsigned::ReadDigits(const char * begin, const char * end, int significant_digits)'/>
<doc f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.h' l='221'>// Reads the number between [begin, end), possibly containing a decimal point,
  // into this BigUnsigned.
  //
  // Callers are required to ensure [begin, end) contains a valid number, with
  // one or more decimal digits and at most one decimal point.  This routine
  // will behave unpredictably if these preconditions are not met.
  //
  // Only the first `significant_digits` digits are read.  Digits beyond this
  // limit are &quot;sticky&quot;: If the final significant digit is 0 or 5, and if any
  // dropped digit is nonzero, then that final significant digit is adjusted up
  // to 1 or 6.  This adjustment allows for precise rounding.
  //
  // Returns `exponent_adjustment`, a power-of-ten exponent adjustment to
  // account for the decimal point and for dropped significant digits.  After
  // this function returns,
  //   actual_value_of_parsed_string ~= *this * 10**exponent_adjustment.</doc>
<use f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.cc' l='188' u='c' c='_ZN4absl14lts_2020_02_2516strings_internal11BigUnsigned17ReadFloatMantissaERKNS1_11ParsedFloatEi'/>
<def f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.cc' l='192' ll='285' type='int absl::lts_2020_02_25::strings_internal::BigUnsigned::ReadDigits(const char * begin, const char * end, int significant_digits)'/>
