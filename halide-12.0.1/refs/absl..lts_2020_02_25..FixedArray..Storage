<def f='halide/build-apps/abseil-cpp/absl/container/fixed_array.h' l='443' ll='479'/>
<use f='halide/build-apps/abseil-cpp/absl/container/fixed_array.h' l='481'/>
<doc f='halide/build-apps/abseil-cpp/absl/container/fixed_array.h' l='435'>// Storage
  //
  // An instance of Storage manages the inline and out-of-line memory for
  // instances of FixedArray. This guarantees that even when construction of
  // individual elements fails in the FixedArray constructor body, the
  // destructor for Storage will still be called and out-of-line memory will be
  // properly deallocated.
  //</doc>
<fun r='_ZN4absl14lts_2020_02_2510FixedArray7StorageC1ENSt16allocator_traitsIT1_E14allocator_type9size_typeERKNS5_14allocator_typeE'/>
<fun r='_ZN4absl14lts_2020_02_2510FixedArray7StorageD1Ev'/>
<fun r='_ZNK4absl14lts_2020_02_2510FixedArray7Storage4sizeEv'/>
<fun r='_ZNK4absl14lts_2020_02_2510FixedArray7Storage5beginEv'/>
<fun r='_ZNK4absl14lts_2020_02_2510FixedArray7Storage3endEv'/>
<fun r='_ZN4absl14lts_2020_02_2510FixedArray7Storage5allocEv'/>
<fun r='_ZN4absl14lts_2020_02_2510FixedArray7Storage19UsingInlinedStorageENSt16allocator_traitsIT1_E14allocator_type9size_typeE'/>
<fun r='_ZN4absl14lts_2020_02_2510FixedArray7Storage14InitializeDataEv'/>
<mbr r='absl::lts_2020_02_25::FixedArray::Storage::size_alloc_' t='container_internal::CompressedTuple&lt;size_type, allocator_type&gt;'/>
<mbr r='absl::lts_2020_02_25::FixedArray::Storage::data_' t='absl::lts_2020_02_25::FixedArray::StorageElement *'/>
