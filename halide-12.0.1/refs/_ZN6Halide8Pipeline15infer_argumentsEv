<dec f='halide/build/include/Halide.h' l='15200' type='std::vector&lt;Argument&gt; Halide::Pipeline::infer_arguments()'/>
<doc f='halide/build/include/Halide.h' l='15192'>/** Infer the arguments to the Pipeline, sorted into a canonical order:
     * all buffers (sorted alphabetically by name), followed by all non-buffers
     * (sorted alphabetically by name).
     This lets you write things like:
     \code
     pipeline.compile_to_assembly(&quot;/dev/stdout&quot;, pipeline.infer_arguments());
     \endcode
     */</doc>
<use f='halide/python_bindings/src/PyPipeline.cpp' l='184' u='c' c='_ZN6Halide14PythonBindings15define_pipelineERN8pybind117module_E'/>
<dec f='halide/src/Pipeline.h' l='544' type='std::vector&lt;Argument&gt; Halide::Pipeline::infer_arguments()'/>
<doc f='halide/src/Pipeline.h' l='536'>/** Infer the arguments to the Pipeline, sorted into a canonical order:
     * all buffers (sorted alphabetically by name), followed by all non-buffers
     * (sorted alphabetically by name).
     This lets you write things like:
     \code
     pipeline.compile_to_assembly(&quot;/dev/stdout&quot;, pipeline.infer_arguments());
     \endcode
     */</doc>
<use f='halide/src/Func.cpp' l='3155' u='c' c='_ZNK6Halide4Func15infer_argumentsEv'/>
<def f='halide/src/Pipeline.cpp' l='450' ll='452' type='vector&lt;Halide::Argument&gt; Halide::Pipeline::infer_arguments()'/>
<use f='halide/src/Pipeline.cpp' l='577' u='c' c='_ZN6Halide8Pipeline11compile_jitERKNS_6TargetE'/>
