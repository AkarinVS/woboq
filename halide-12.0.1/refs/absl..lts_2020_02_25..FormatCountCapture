<use f='halide/build-apps/abseil-cpp/absl/strings/internal/str_format/arg.h' l='183' c='_ZN4absl14lts_2020_02_2519str_format_internal24FormatCountCaptureHelper13ConvertHelperERKNS0_18FormatCountCaptureENS1_20FormatConversionSpecEPNS1_14FormatSinkImplE'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/internal/str_format/arg.h' l='186' c='_ZN4absl14lts_2020_02_2519str_format_internal24FormatCountCaptureHelper13ConvertHelperERKNS0_18FormatCountCaptureENS1_20FormatConversionSpecEPNS1_14FormatSinkImplE'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/internal/str_format/arg.h' l='195' c='_ZN4absl14lts_2020_02_2519str_format_internal17FormatConvertImplERKNS0_18FormatCountCaptureENS1_20FormatConversionSpecEPNS1_14FormatSinkImplE'/>
<def f='halide/build-apps/abseil-cpp/absl/strings/str_format.h' l='145' ll='158'/>
<size>8</size>
<doc f='halide/build-apps/abseil-cpp/absl/strings/str_format.h' l='129'>// FormatCountCapture
//
// This class provides a way to safely wrap `StrFormat()` captures of `%n`
// conversions, which denote the number of characters written by a formatting
// operation to this point, into an integer value.
//
// This wrapper is designed to allow safe usage of `%n` within `StrFormat(); in
// the `printf()` family of functions, `%n` is not safe to use, as the `int *`
// buffer can be used to capture arbitrary data.
//
// Example:
//
//   int n = 0;
//   std::string s = absl::StrFormat(&quot;%s%d%n&quot;, &quot;hello&quot;, 123,
//                       absl::FormatCountCapture(&amp;n));
//   EXPECT_EQ(8, n);</doc>
<fun r='_ZN4absl14lts_2020_02_2518FormatCountCaptureC1EPi'/>
<fun r='_ZN4absl14lts_2020_02_2518FormatCountCapture6UnusedEv'/>
<mbr r='absl::lts_2020_02_25::FormatCountCapture::p_' o='0' t='int *'/>
