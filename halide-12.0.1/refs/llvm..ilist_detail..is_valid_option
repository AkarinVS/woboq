<def f='halide/llvm-install/include/llvm/ADT/ilist_node_options.h' l='54'/>
<def f='halide/llvm-install/include/llvm/ADT/ilist_node_options.h' l='74' ll='76'/>
<def f='halide/llvm-install/include/llvm/ADT/ilist_node_options.h' l='90'/>
<use f='halide/llvm-install/include/llvm/ADT/ilist_node_options.h' l='99'/>
<doc f='halide/llvm-install/include/llvm/ADT/ilist_node_options.h' l='43'>/// Check whether an option is valid.
///
/// The steps for adding and enabling a new ilist option include:
/// \li define the option, ilist_foo&lt;Bar&gt;, above;
/// \li add new parameters for Bar to \a ilist_detail::node_options;
/// \li add an extraction meta-function, ilist_detail::extract_foo;
/// \li call extract_foo from \a ilist_detail::compute_node_options and pass it
/// into \a ilist_detail::node_options; and
/// \li specialize \c is_valid_option&lt;ilist_foo&lt;Bar&gt;&gt; to inherit from \c
/// std::true_type to get static assertions passing in \a simple_ilist and \a
/// ilist_node.</doc>
