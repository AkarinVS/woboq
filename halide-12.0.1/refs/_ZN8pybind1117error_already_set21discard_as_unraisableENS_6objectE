<def f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='348' ll='351' type='void pybind11::error_already_set::discard_as_unraisable(pybind11::object err_context)'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='353' u='c' c='_ZN8pybind1117error_already_set21discard_as_unraisableEPKc'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='342'>/// If it is impossible to raise the currently-held error, such as in destructor, we can write
    /// it out using Python&apos;s unraisable hook (sys.unraisablehook). The error context should be
    /// some object whose repr() helps identify the location of the error. Python already knows the
    /// type and value of the error, so there is no need to repeat that. For example, __func__ could
    /// be helpful. After this call, the current object no longer stores the error variables,
    /// and neither does Python.</doc>
