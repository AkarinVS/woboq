<dec f='halide/build/include/Halide.h' l='14801' type='void Halide::Pipeline::prepare_jit_call_arguments(Halide::Pipeline::RealizationArg &amp; output, const Halide::Target &amp; target, const Halide::ParamMap &amp; param_map, void * user_context, bool is_bounds_inference, Halide::Pipeline::JITCallArgs &amp; args_result)'/>
<doc f='halide/build/include/Halide.h' l='14800'>// For the three method below, precisely one of the first two args should be non-null</doc>
<dec f='halide/src/Pipeline.h' l='145' type='void Halide::Pipeline::prepare_jit_call_arguments(Halide::Pipeline::RealizationArg &amp; output, const Halide::Target &amp; target, const Halide::ParamMap &amp; param_map, void * user_context, bool is_bounds_inference, Halide::Pipeline::JITCallArgs &amp; args_result)'/>
<doc f='halide/src/Pipeline.h' l='144'>// For the three method below, precisely one of the first two args should be non-null</doc>
<def f='halide/src/Pipeline.cpp' l='931' ll='1003' type='void Halide::Pipeline::prepare_jit_call_arguments(Halide::Pipeline::RealizationArg &amp; outputs, const Halide::Target &amp; target, const Halide::ParamMap &amp; param_map, void * user_context, bool is_bounds_inference, Halide::Pipeline::JITCallArgs &amp; args_result)'/>
<use f='halide/src/Pipeline.cpp' l='1114' u='c' c='_ZN6Halide8Pipeline7realizeENS0_14RealizationArgERKNS_6TargetERKNS_8ParamMapE'/>
<use f='halide/src/Pipeline.cpp' l='1187' u='c' c='_ZN6Halide8Pipeline18infer_input_boundsENS0_14RealizationArgERKNS_6TargetERKNS_8ParamMapE'/>
<doc f='halide/src/Pipeline.cpp' l='928'>// Make a vector of void *&apos;s to pass to the jit call using the
// currently bound value for all of the params and image
// params.</doc>
