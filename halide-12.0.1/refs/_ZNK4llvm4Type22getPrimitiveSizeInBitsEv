<dec f='halide/llvm-install/include/llvm/IR/Type.h' l='299' type='llvm::TypeSize llvm::Type::getPrimitiveSizeInBits() const'/>
<use f='halide/llvm-install/include/llvm/IR/DerivedTypes.h' l='452' u='c' c='_ZN4llvm10VectorType10getIntegerEPS0_'/>
<use f='halide/llvm-install/include/llvm/IR/DerivedTypes.h' l='483' u='c' c='_ZN4llvm10VectorType29getTruncatedElementVectorTypeEPS0_'/>
<doc f='halide/llvm-install/include/llvm/IR/Type.h' l='286'>/// Return the basic size of this type if it is a primitive type. These are
  /// fixed by LLVM and are not target-dependent.
  /// This will return zero if the type does not have a size or is not a
  /// primitive type.
  ///
  /// If this is a scalable vector type, the scalable property will be set and
  /// the runtime size will be a positive integer multiple of the base size.
  ///
  /// Note that this may not reflect the size of memory allocated for an
  /// instance of the type or the number of bytes that are written when an
  /// instance of the type is stored to memory. The DataLayout class provides
  /// additional query functions to provide this information.
  ///</doc>
<use f='halide/src/CodeGen_LLVM.cpp' l='819' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM29embed_constant_scalar_value_tERKNS_4ExprE'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='2498' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM18codegen_atomic_rmwEPKNS0_5StoreE'/>
