<dec f='halide/build-apps/eigen/Eigen/src/Core/MatrixBase.h' l='171' type='const Product&lt;Derived, OtherDerived, LazyProduct&gt; Eigen::MatrixBase::lazyProduct(const MatrixBase&lt;OtherDerived&gt; &amp; other) const'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/GeneralProduct.h' l='440' ll='463' type='const Product&lt;Derived, OtherDerived, LazyProduct&gt; Eigen::MatrixBase::lazyProduct(const MatrixBase&lt;OtherDerived&gt; &amp; other) const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/GeneralProduct.h' l='429'>/** \returns an expression of the matrix product of \c *this and \a other without implicit evaluation.
  *
  * The returned product will behave like any other expressions: the coefficients of the product will be
  * computed once at a time as requested. This might be useful in some extremely rare cases when only
  * a small and no coherent fraction of the result&apos;s coefficients have to be computed.
  *
  * \warning This version of the matrix product can be much much slower. So use it only if you know
  * what you are doing and that you measured a true speed improvement.
  *
  * \sa operator*(const MatrixBase&amp;)
  */</doc>
