<dec f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='38' type='Eigen::Index Eigen::internal::SparseLUImpl::memXpand(VectorType &amp; vec, Eigen::Index &amp; maxlen, Eigen::Index nbElts, Eigen::internal::MemType memtype, Eigen::Index &amp; num_expansions)'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_Memory.h' l='207' ll='221' type='Eigen::Index Eigen::internal::SparseLUImpl::memXpand(VectorType &amp; vec, Eigen::Index &amp; maxlen, Eigen::Index nbElts, Eigen::internal::MemType memtype, Eigen::Index &amp; num_expansions)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_Memory.h' l='198'>/** 
 * \brief Expand the existing storage 
 * \param vec vector to expand 
 * \param[in,out] maxlen On input, previous size of vec (Number of elements to copy ). on output, new size
 * \param nbElts current number of elements in the vector.
 * \param memtype Type of the element to expand
 * \param num_expansions Number of expansions 
 * \return 0 on success, &gt; 0 size of the memory allocated so far
 */</doc>
