<def f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='55' ll='63' type='size_t flatbuffers::GetTypeSizeInline(reflection::BaseType base_type, int type_index, const reflection::Schema &amp; schema)'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='53'>// Same as above, but now correctly returns the size of a struct if
// the field (or vector element) is a struct.</doc>
