<def f='halide/halide-install/include/Halide.h' l='10455' ll='10457' type='static Buffer&lt;T, D&gt; Halide::Runtime::Buffer::make_interleaved(int width, int height, int channels)'/>
<doc f='halide/halide-install/include/Halide.h' l='10449'>/** If you use the (x, y, c) indexing convention, then Halide
     * Buffers are stored planar by default. This function constructs
     * an interleaved RGB or RGBA image that can still be indexed
     * using (x, y, c). Passing it to a generator requires that the
     * generator has been compiled with support for interleaved (also
     * known as packed or chunky) memory layouts. */</doc>
<def f='halide/halide-install/include/HalideBuffer.h' l='1693' ll='1695' type='static Buffer&lt;T, D&gt; Halide::Runtime::Buffer::make_interleaved(int width, int height, int channels)'/>
<doc f='halide/halide-install/include/HalideBuffer.h' l='1687'>/** If you use the (x, y, c) indexing convention, then Halide
     * Buffers are stored planar by default. This function constructs
     * an interleaved RGB or RGBA image that can still be indexed
     * using (x, y, c). Passing it to a generator requires that the
     * generator has been compiled with support for interleaved (also
     * known as packed or chunky) memory layouts. */</doc>
<use f='halide/apps/fft/fft_aot_test.cpp' l='23' u='c' c='_Z11real_bufferi'/>
<use f='halide/apps/fft/fft_aot_test.cpp' l='27' u='c' c='_Z14complex_bufferi'/>
<def f='halide/build/include/Halide.h' l='10455' ll='10457' type='static Buffer&lt;T, D&gt; Halide::Runtime::Buffer::make_interleaved(int width, int height, int channels)'/>
<doc f='halide/build/include/Halide.h' l='10449'>/** If you use the (x, y, c) indexing convention, then Halide
     * Buffers are stored planar by default. This function constructs
     * an interleaved RGB or RGBA image that can still be indexed
     * using (x, y, c). Passing it to a generator requires that the
     * generator has been compiled with support for interleaved (also
     * known as packed or chunky) memory layouts. */</doc>
<def f='halide/src/runtime/HalideBuffer.h' l='1693' ll='1695' type='static Buffer&lt;T, D&gt; Halide::Runtime::Buffer::make_interleaved(int width, int height, int channels)'/>
<doc f='halide/src/runtime/HalideBuffer.h' l='1687'>/** If you use the (x, y, c) indexing convention, then Halide
     * Buffers are stored planar by default. This function constructs
     * an interleaved RGB or RGBA image that can still be indexed
     * using (x, y, c). Passing it to a generator requires that the
     * generator has been compiled with support for interleaved (also
     * known as packed or chunky) memory layouts. */</doc>
<use f='halide/test/generator/blur2x2_aottest.cpp' l='23' u='c' c='_Z26buffer_factory_interleavediii'/>
<use f='halide/test/generator/msan_aottest.cpp' l='279' u='c' c='main'/>
<use f='halide/test/generator/msan_aottest.cpp' l='466' u='c' c='main'/>
<use f='halide/test/generator/msan_aottest.cpp' l='500' u='c' c='main'/>
<use f='halide/test/generator/nested_externs_aottest.cpp' l='10' u='c' c='main'/>
<use f='halide/test/generator/tiled_blur_aottest.cpp' l='52' u='c' c='_Z26buffer_factory_interleavediii'/>
<use f='halide/tutorial/lesson_16_rgb_run.cpp' l='39' u='c' c='main'/>
<use f='halide/tutorial/lesson_16_rgb_run.cpp' l='41' u='c' c='main'/>
