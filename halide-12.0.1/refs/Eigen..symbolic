<doc f='halide/build-apps/eigen/Eigen/src/Core/util/SymbolicIndex.h' l='15'>/** \namespace Eigen::symbolic
  * \ingroup Core_Module
  *
  * This namespace defines a set of classes and functions to build and evaluate symbolic expressions of scalar type Index.
  * Here is a simple example:
  *
  * \code
  * // First step, defines symbols:
  * struct x_tag {};  static const symbolic::SymbolExpr&lt;x_tag&gt; x;
  * struct y_tag {};  static const symbolic::SymbolExpr&lt;y_tag&gt; y;
  * struct z_tag {};  static const symbolic::SymbolExpr&lt;z_tag&gt; z;
  *
  * // Defines an expression:
  * auto expr = (x+3)/y+z;
  *
  * // And evaluate it: (c++14)
  * std::cout &lt;&lt; expr.eval(x=6,y=3,z=-13) &lt;&lt; &quot;\n&quot;;
  *
  * // In c++98/11, only one symbol per expression is supported for now:
  * auto expr98 = (3-x)/2;
  * std::cout &lt;&lt; expr98.eval(x=6) &lt;&lt; &quot;\n&quot;;
  * \endcode
  *
  * It is currently only used internally to define and manipulate the Eigen::last and Eigen::lastp1 symbols in Eigen::seq and Eigen::seqN.
  *
  */</doc>
