<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.h' l='224' type='double tflite::DoubleFromFractionAndShift(int64_t fraction, int shift)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.h' l='217'>// Converts an integer fraction in the format produced by IntegerFrExp (where
// 0x40000000 is 1.0) and an exponent shift (between -1022 and +1022) into an
// IEEE binary64 double format result. The implementation uses only integer and
// bitwise operators, so no floating point hardware support or emulation is
// needed. This is here so quantized operations can run non-time-critical
// preparation calculations on microcontrollers and other platforms without
// float support.</doc>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.cc' l='178' ll='223' type='double tflite::DoubleFromFractionAndShift(int64_t fraction, int shift)'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.cc' l='237' u='c' c='_ZN6tflite21IntegerDoubleMultiplyEdd'/>
