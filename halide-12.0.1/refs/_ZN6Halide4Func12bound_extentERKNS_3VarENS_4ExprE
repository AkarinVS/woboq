<dec f='halide/halide-install/include/Halide.h' l='17453' type='Halide::Func &amp; Halide::Func::bound_extent(const Halide::Var &amp; var, Halide::Expr extent)'/>
<use f='halide/halide-install/include/Halide.h' l='25175' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12bound_extentEDpOT_'/>
<use f='halide/halide-install/include/Halide.h' l='25175' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12bound_extentEDpOT_'/>
<doc f='halide/halide-install/include/Halide.h' l='17447'>/** Bound the extent of a Func&apos;s realization, but not its
     * min. This means the dimension can be unrolled or vectorized
     * even when its min is not fixed (for example because it is
     * compute_at tiles of another Func). This can also be useful for
     * forcing a function&apos;s allocation to be a fixed size, which often
     * means it can go on the stack. */</doc>
<use f='halide/apps/depthwise_separable_conv/depthwise_separable_conv_generator.cpp' l='152' u='c' c='_ZN12_GLOBAL__N_129DepthwiseSeparableConvolution8generateEv'/>
<use f='halide/apps/depthwise_separable_conv/depthwise_separable_conv_generator.cpp' l='259' u='c' c='_ZN12_GLOBAL__N_129DepthwiseSeparableConvolution8generateEv'/>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='272' u='c' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='175' u='c' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/elementwise_generator.cpp' l='204' u='c' c='_ZN5hannk11Elementwise5buildEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='142' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<dec f='halide/build/include/Halide.h' l='17453' type='Halide::Func &amp; Halide::Func::bound_extent(const Halide::Var &amp; var, Halide::Expr extent)'/>
<use f='halide/build/include/Halide.h' l='25175' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12bound_extentEDpOT_'/>
<use f='halide/build/include/Halide.h' l='25175' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12bound_extentEDpOT_'/>
<doc f='halide/build/include/Halide.h' l='17447'>/** Bound the extent of a Func&apos;s realization, but not its
     * min. This means the dimension can be unrolled or vectorized
     * even when its min is not fixed (for example because it is
     * compute_at tiles of another Func). This can also be useful for
     * forcing a function&apos;s allocation to be a fixed size, which often
     * means it can go on the stack. */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='330' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='1573' type='Halide::Func &amp; Halide::Func::bound_extent(const Halide::Var &amp; var, Halide::Expr extent)'/>
<doc f='halide/src/Func.h' l='1567'>/** Bound the extent of a Func&apos;s realization, but not its
     * min. This means the dimension can be unrolled or vectorized
     * even when its min is not fixed (for example because it is
     * compute_at tiles of another Func). This can also be useful for
     * forcing a function&apos;s allocation to be a fixed size, which often
     * means it can go on the stack. */</doc>
<def f='halide/src/Func.cpp' l='2301' ll='2303' type='Halide::Func &amp; Halide::Func::bound_extent(const Halide::Var &amp; var, Halide::Expr extent)'/>
<use f='halide/src/Generator.h' l='2241' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12bound_extentEDpOT_'/>
<use f='halide/src/Generator.h' l='2241' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12bound_extentEDpOT_'/>
