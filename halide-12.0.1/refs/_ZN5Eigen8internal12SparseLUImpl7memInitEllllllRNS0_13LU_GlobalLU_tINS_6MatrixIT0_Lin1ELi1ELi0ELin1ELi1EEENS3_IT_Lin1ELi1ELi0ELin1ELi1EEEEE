<dec f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='36' type='Eigen::Index Eigen::internal::SparseLUImpl::memInit(Eigen::Index m, Eigen::Index n, Eigen::Index annz, Eigen::Index lwork, Eigen::Index fillratio, Eigen::Index panel_size, Eigen::internal::SparseLUImpl::GlobalLU_t &amp; glu)'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_Memory.h' l='150' ll='196' type='Eigen::Index Eigen::internal::SparseLUImpl::memInit(Eigen::Index m, Eigen::Index n, Eigen::Index annz, Eigen::Index lwork, Eigen::Index fillratio, Eigen::Index panel_size, Eigen::internal::SparseLUImpl::GlobalLU_t &amp; glu)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_Memory.h' l='138'>/**
 * \brief  Allocate various working space for the numerical factorization phase.
 * \param m number of rows of the input matrix 
 * \param n number of columns 
 * \param annz number of initial nonzeros in the matrix 
 * \param lwork  if lwork=-1, this routine returns an estimated size of the required memory
 * \param glu persistent data to facilitate multiple factors : will be deleted later ??
 * \param fillratio estimated ratio of fill in the factors
 * \param panel_size Size of a panel
 * \return an estimated size of the required memory if lwork = -1; otherwise, return the size of actually allocated memory when allocation failed, and 0 on success
 * \note Unlike SuperLU, this routine does not support successive factorization with the same pattern and the same row permutation
 */</doc>
