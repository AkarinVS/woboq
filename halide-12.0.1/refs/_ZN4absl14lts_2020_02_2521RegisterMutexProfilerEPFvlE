<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='968' type='void absl::lts_2020_02_25::RegisterMutexProfiler(void (*)(int64_t) fn)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='958'>// Register a hook for profiling support.
//
// The function pointer registered here will be called whenever a mutex is
// contended.  The callback is given the absl/base/cycleclock.h timestamp when
// waiting began.
//
// Calls to this function do not race or block, but there is no ordering
// guaranteed between calls to this function and call to the provided hook.
// In particular, the previously registered hook may still be called for some
// time after this function returns.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='129' ll='131' type='void absl::lts_2020_02_25::RegisterMutexProfiler(void (*)(int64_t) fn)'/>
