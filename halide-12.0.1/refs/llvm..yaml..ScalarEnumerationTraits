<def f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='106' ll='109'/>
<use f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='324'/>
<use f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='959' c='_ZN4llvm4yaml7yamlizeERNS0_2IOERT_bRNS0_12EmptyContextE'/>
<def f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='1261' ll='1275'/>
<use f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='1272' c='_ZN4llvm4yaml23ScalarEnumerationTraitsINS_7support6detail31packed_endian_specific_integralIT_XT0_EXT1_EXsr13PickAlignmentIS5_XT1_EEE5valueEEENSt9enabl4134484'/>
<doc f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='95'>/// This class should be specialized by any integral type that converts
/// to/from a YAML scalar where there is a one-to-one mapping between
/// in-memory values and a string in YAML.  For example:
///
///     struct ScalarEnumerationTraits&lt;Colors&gt; {
///         static void enumeration(IO &amp;io, Colors &amp;value) {
///           io.enumCase(value, &quot;red&quot;,   cRed);
///           io.enumCase(value, &quot;blue&quot;,  cBlue);
///           io.enumCase(value, &quot;green&quot;, cGreen);
///         }
///       };</doc>
<fun r='_ZN4llvm4yaml23ScalarEnumerationTraitsINS_7support6detail31packed_endian_specific_integralIT_XT0_EXT1_EXsr13PickAlignmentIS5_XT1_EEE5valueEEENSt9enabl4134484'/>
