<dec f='halide/build-apps/abseil-cpp/absl/base/dynamic_annotations.h' l='312' type='int RunningOnValgrind()'/>
<def f='halide/build-apps/abseil-cpp/absl/base/dynamic_annotations.cc' l='99' ll='108' type='int RunningOnValgrind()'/>
<use f='halide/build-apps/abseil-cpp/absl/base/dynamic_annotations.cc' l='116' u='c' c='ValgrindSlowdown'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/dynamic_annotations.cc' l='98'>/* See the comments in dynamic_annotations.h */</doc>
<doc f='halide/build-apps/abseil-cpp/absl/base/dynamic_annotations.h' l='297'>/* Return non-zero value if running under valgrind.

  If &quot;valgrind.h&quot; is included into dynamic_annotations.cc,
  the regular valgrind mechanism will be used.
  See http://valgrind.org/docs/manual/manual-core-adv.html about
  RUNNING_ON_VALGRIND and other valgrind &quot;client requests&quot;.
  The file &quot;valgrind.h&quot; may be obtained by doing
     svn co svn://svn.valgrind.org/valgrind/trunk/include

  If for some reason you can&apos;t use &quot;valgrind.h&quot; or want to fake valgrind,
  there are two ways to make this function return non-zero:
    - Use environment variable: export RUNNING_ON_VALGRIND=1
    - Make your tool intercept the function RunningOnValgrind() and
      change its return value.
 */</doc>
<use f='halide/build-apps/abseil-cpp/absl/debugging/internal/vdso_support.cc' l='83' u='c' c='_ZN4absl14lts_2020_02_2518debugging_internal11VDSOSupport4InitEv'/>
