<dec f='halide/build-apps/abseil-cpp/absl/synchronization/blocking_counter.h' l='77' type='bool absl::lts_2020_02_25::BlockingCounter::DecrementCount()'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/blocking_counter.cc' l='27' ll='37' type='bool absl::lts_2020_02_25::BlockingCounter::DecrementCount()'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/blocking_counter.h' l='69'>// BlockingCounter::DecrementCount()
  //
  // Decrements the counter&apos;s &quot;count&quot; by one, and return &quot;count == 0&quot;. This
  // function requires that &quot;count != 0&quot; when it is called.
  //
  // Memory ordering: For any threads X and Y, any action taken by X
  // before it calls `DecrementCount()` is visible to thread Y after
  // Y&apos;s call to `DecrementCount()`, provided Y&apos;s call returns `true`.</doc>
