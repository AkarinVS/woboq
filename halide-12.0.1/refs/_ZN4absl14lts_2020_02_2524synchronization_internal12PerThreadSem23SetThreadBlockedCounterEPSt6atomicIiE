<dec f='halide/build-apps/abseil-cpp/absl/synchronization/internal/per_thread_sem.h' l='61' type='static void absl::lts_2020_02_25::synchronization_internal::PerThreadSem::SetThreadBlockedCounter(std::atomic&lt;int&gt; * counter)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/internal/per_thread_sem.h' l='51'>// ---------------------------------------------------------------------------
  // Routines used by autosizing threadpools to detect when threads are
  // blocked.  Each thread has a counter pointer, initially zero.  If non-zero,
  // the implementation atomically increments the counter when it blocks on a
  // semaphore, a decrements it again when it wakes.  This allows a threadpool
  // to keep track of how many of its threads are blocked.
  // SetThreadBlockedCounter() should be used only by threadpool
  // implementations.  GetThreadBlockedCounter() should be used by modules that
  // block threads; if the pointer returned is non-zero, the location should be
  // incremented before the thread blocks, and decremented after it wakes.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/internal/per_thread_sem.cc' l='31' ll='35' type='static void absl::lts_2020_02_25::synchronization_internal::PerThreadSem::SetThreadBlockedCounter(std::atomic&lt;int&gt; * counter)'/>
