<def f='halide/build-apps/abseil-cpp/absl/functional/internal/function_ref.h' l='35' ll='38'/>
<use f='halide/build-apps/abseil-cpp/absl/functional/internal/function_ref.h' l='63'/>
<use f='halide/build-apps/abseil-cpp/absl/functional/internal/function_ref.h' l='71' c='_ZN4absl14lts_2020_02_2519functional_internal12InvokeObjectENS1_7VoidPtrEDpNS1_8ForwardTIT1_E4typeE'/>
<use f='halide/build-apps/abseil-cpp/absl/functional/internal/function_ref.h' l='78' c='_ZN4absl14lts_2020_02_2519functional_internal14InvokeFunctionENS1_7VoidPtrEDpNS1_8ForwardTIT1_E4typeE'/>
<use f='halide/build-apps/abseil-cpp/absl/functional/function_ref.h' l='132'/>
<size>8</size>
<doc f='halide/build-apps/abseil-cpp/absl/functional/internal/function_ref.h' l='29'>// Like a void* that can handle function pointers as well. The standard does not
// allow function pointers to round-trip through void*, but void(*)() is fine.
//
// Note: It&apos;s important that this class remains trivial and is the same size as
// a pointer, since this allows the compiler to perform tail-call optimizations
// when the underlying function is a callable object with a matching signature.</doc>
<mbr r='absl::lts_2020_02_25::functional_internal::VoidPtr::obj' o='0' t='const void *'/>
<mbr r='absl::lts_2020_02_25::functional_internal::VoidPtr::fun' o='0' t='void (*)()'/>
