<dec f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='233' type='const llvm::PassBuilder::OptimizationLevel'/>
<doc f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='219'>/// Optimize for fast execution as much as possible.
    ///
    /// This mode is significantly more aggressive in trading off compile time
    /// and code size to get execution time improvements. The core idea is that
    /// this mode should include any optimization that helps execution time on
    /// balance across a diverse collection of benchmarks, even if it increases
    /// code size or compile time for some benchmarks without corresponding
    /// improvements to execution time.
    ///
    /// Despite being willing to trade more compile time off to get improved
    /// execution time, this mode still tries to avoid superlinear growth in
    /// order to make even significantly slower compile times at least scale
    /// reasonably. This does not preclude very substantial constant factor
    /// costs though.</doc>
<use f='halide/src/CodeGen_LLVM.cpp' l='1127' u='r' c='_ZN6Halide8Internal12CodeGen_LLVM15optimize_moduleEv'/>
