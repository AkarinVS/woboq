<dec f='halide/build-apps/abseil-cpp/absl/time/time.h' l='964' type='absl::lts_2020_02_25::TimeZone::TimeInfo absl::lts_2020_02_25::TimeZone::At(absl::lts_2020_02_25::CivilSecond ct) const'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1108' u='c' c='_ZN4absl14lts_2020_02_259FromCivilENS0_13time_internal4cctz6detail10civil_timeINS1_10second_tagEEENS0_8TimeZoneE'/>
<doc f='halide/build-apps/abseil-cpp/absl/time/time.h' l='935'>// TimeZone::At(CivilSecond)
  //
  // Returns an `absl::TimeInfo` containing the absolute time(s) for this
  // TimeZone at an `absl::CivilSecond`. When the civil time is skipped or
  // repeated, returns times calculated using the pre-transition and post-
  // transition UTC offsets, plus the transition time itself.
  //
  // Examples:
  //
  //   // A unique civil time
  //   const auto jan01 = lax.At(absl::CivilSecond(2011, 1, 1, 0, 0, 0));
  //   // jan01.kind == TimeZone::TimeInfo::UNIQUE
  //   // jan01.pre    is 2011-01-01 00:00:00 -0800
  //   // jan01.trans  is 2011-01-01 00:00:00 -0800
  //   // jan01.post   is 2011-01-01 00:00:00 -0800
  //
  //   // A Spring DST transition, when there is a gap in civil time
  //   const auto mar13 = lax.At(absl::CivilSecond(2011, 3, 13, 2, 15, 0));
  //   // mar13.kind == TimeZone::TimeInfo::SKIPPED
  //   // mar13.pre   is 2011-03-13 03:15:00 -0700
  //   // mar13.trans is 2011-03-13 03:00:00 -0700
  //   // mar13.post  is 2011-03-13 01:15:00 -0800
  //
  //   // A Fall DST transition, when civil times are repeated
  //   const auto nov06 = lax.At(absl::CivilSecond(2011, 11, 6, 1, 15, 0));
  //   // nov06.kind == TimeZone::TimeInfo::REPEATED
  //   // nov06.pre   is 2011-11-06 01:15:00 -0700
  //   // nov06.trans is 2011-11-06 01:00:00 -0800
  //   // nov06.post  is 2011-11-06 01:15:00 -0800</doc>
<def f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='367' ll='387' type='absl::TimeZone::TimeInfo absl::lts_2020_02_25::TimeZone::At(absl::lts_2020_02_25::CivilSecond ct) const'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='408' u='c' c='_ZN4absl14lts_2020_02_2515ConvertDateTimeEliiiiiNS0_8TimeZoneE'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='443' u='c' c='_ZN4absl14lts_2020_02_256FromTMERK2tmNS0_8TimeZoneE'/>
