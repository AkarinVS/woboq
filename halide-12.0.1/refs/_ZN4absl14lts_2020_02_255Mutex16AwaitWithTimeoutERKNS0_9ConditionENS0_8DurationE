<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='349' type='bool absl::lts_2020_02_25::Mutex::AwaitWithTimeout(const absl::lts_2020_02_25::Condition &amp; cond, absl::Duration timeout)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='327'>// ---------------------------------------------------------------------------
  // Mutex Variants with Timeouts/Deadlines
  // ---------------------------------------------------------------------------

  // Mutex::AwaitWithTimeout()
  // Mutex::AwaitWithDeadline()
  //
  // If `cond` is initially true, do nothing, or act as though `cond` is
  // initially false.
  //
  // If `cond` is initially false, unlock this `Mutex` and block until
  // simultaneously:
  //   - either `cond` is true or the {timeout has expired, deadline has passed}
  //     and
  //   - this `Mutex` can be reacquired,
  // then reacquire this `Mutex` in the same mode in which it was previously
  // held, returning `true` iff `cond` is `true` on return.
  //
  // Deadlines in the past are equivalent to an immediate deadline.
  // Negative timeouts are equivalent to a zero timeout.
  //
  // This method requires that this thread holds this `Mutex` in some mode.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1547' ll='1549' type='bool absl::lts_2020_02_25::Mutex::AwaitWithTimeout(const absl::lts_2020_02_25::Condition &amp; cond, absl::Duration timeout)'/>
