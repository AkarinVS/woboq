<dec f='halide/build/include/Halide.h' l='4865' type='std::map&lt;std::string, Box&gt; Halide::Internal::boxes_provided(const Halide::Expr &amp; e, const Scope&lt;Halide::Internal::Interval&gt; &amp; scope = Scope&lt;Interval&gt;::empty_scope(), const Halide::Internal::FuncValueBounds &amp; func_bounds = empty_func_value_bounds())'/>
<doc f='halide/build/include/Halide.h' l='4861'>/** Compute rectangular domains large enough to cover all the
 * &apos;Provides&apos;s to each function that occurs within a given statement
 * or expression. */
// @{</doc>
<dec f='halide/src/Bounds.h' l='125' type='std::map&lt;std::string, Box&gt; Halide::Internal::boxes_provided(const Halide::Expr &amp; e, const Scope&lt;Halide::Internal::Interval&gt; &amp; scope = Scope&lt;Interval&gt;::empty_scope(), const Halide::Internal::FuncValueBounds &amp; func_bounds = empty_func_value_bounds())'/>
<doc f='halide/src/Bounds.h' l='121'>/** Compute rectangular domains large enough to cover all the
 * &apos;Provides&apos;s to each function that occurs within a given statement
 * or expression. */
// @{</doc>
<def f='halide/src/Bounds.cpp' l='2828' ll='2830' type='map&lt;std::string, Halide::Internal::Box&gt; Halide::Internal::boxes_provided(const Halide::Expr &amp; e, const Scope&lt;Halide::Internal::Interval&gt; &amp; scope = Scope&lt;Interval&gt;::empty_scope(), const Halide::Internal::FuncValueBounds &amp; fb = empty_func_value_bounds())'/>
