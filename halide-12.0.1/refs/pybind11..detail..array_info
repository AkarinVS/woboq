<def f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='296'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='297' ll='312'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='298'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='300'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='306' c='_ZN8pybind116detail10array_infoISt5arrayIT_XT0_EEE14append_extentsERNS_4listE'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='309'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='310'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='315'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='316'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='317'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='317'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='318'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='842'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='978'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='981' c='_ZN8pybind1117format_descriptorIT_NSt9enable_ifIXsr6detail10array_infoIS1_EE8is_arrayEvE4typeEE6formatB5cxx11Ev'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='1066'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='1068'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='1070'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='1072'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='1075' c='_ZN8pybind116detail21npy_format_descriptorIT_NSt9enable_ifIXsr6detail10array_infoIS2_EE8is_arrayEvE4typeEE5dtypeEv'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='293'>// Computes underlying type and a comma-separated list of extents for array
// types (any mix of std::array and built-in arrays). An array of char is
// treated as scalar because it gets special handling.</doc>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/numpy.h' l='313'>// For numpy we have special handling for arrays of characters, so we don&apos;t include
// the size in the array extents.</doc>
<smbr r='pybind11::detail::array_info{array{type-parameter-0-0,_Nm}}::is_array' t='const bool'/>
<smbr r='pybind11::detail::array_info{array{type-parameter-0-0,_Nm}}::is_empty' t='const bool'/>
<smbr r='pybind11::detail::array_info{array{type-parameter-0-0,_Nm}}::extent' t='const pybind11::size_t'/>
<fun r='_ZN8pybind116detail10array_infoISt5arrayIT_XT0_EEE14append_extentsERNS_4listE'/>
<smbr r='pybind11::detail::array_info{array{type-parameter-0-0,_Nm}}::extents' t='const auto'/>
