<dec f='halide/halide-install/include/Halide.h' l='16911' type='void Halide::Func::set_error_handler(void (*)(void *, const char *) handler)'/>
<doc f='halide/halide-install/include/Halide.h' l='16902'>/** Set the error handler function that be called in the case of
     * runtime errors during halide pipelines. If you are compiling
     * statically, you can also just define your own function with
     * signature
     \code
     extern &quot;C&quot; void halide_error(void *user_context, const char *);
     \endcode
     * This will clobber Halide&apos;s version.
     */</doc>
<dec f='halide/build/include/Halide.h' l='16911' type='void Halide::Func::set_error_handler(void (*)(void *, const char *) handler)'/>
<doc f='halide/build/include/Halide.h' l='16902'>/** Set the error handler function that be called in the case of
     * runtime errors during halide pipelines. If you are compiling
     * statically, you can also just define your own function with
     * signature
     \code
     extern &quot;C&quot; void halide_error(void *user_context, const char *);
     \endcode
     * This will clobber Halide&apos;s version.
     */</doc>
<dec f='halide/src/Func.h' l='1031' type='void Halide::Func::set_error_handler(void (*)(void *, const char *) handler)'/>
<doc f='halide/src/Func.h' l='1022'>/** Set the error handler function that be called in the case of
     * runtime errors during halide pipelines. If you are compiling
     * statically, you can also just define your own function with
     * signature
     \code
     extern &quot;C&quot; void halide_error(void *user_context, const char *);
     \endcode
     * This will clobber Halide&apos;s version.
     */</doc>
<def f='halide/src/Func.cpp' l='3263' ll='3265' type='void Halide::Func::set_error_handler(void (*)(void *, const char *) handler)'/>
<doc f='halide/src/Func.cpp' l='3261'>// JIT-related code</doc>
