<dec f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='376' type='bool Eigen::DenseBase::isApprox(const DenseBase&lt;OtherDerived&gt; &amp; other, const Eigen::DenseBase::RealScalar &amp; prec = NumTraits&lt;Scalar&gt;::dummy_precision()) const'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/Fuzzy.h' l='101' ll='109' type='bool Eigen::DenseBase::isApprox(const DenseBase&lt;OtherDerived&gt; &amp; other, const Eigen::DenseBase::RealScalar &amp; prec = NumTraits&lt;Scalar&gt;::dummy_precision()) const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Fuzzy.h' l='84'>/** \returns \c true if \c *this is approximately equal to \a other, within the precision
  * determined by \a prec.
  *
  * \note The fuzzy compares are done multiplicatively. Two vectors \f$ v \f$ and \f$ w \f$
  * are considered to be approximately equal within precision \f$ p \f$ if
  * \f[ \Vert v - w \Vert \leqslant p\,\min(\Vert v\Vert, \Vert w\Vert). \f]
  * For matrices, the comparison is done using the Hilbert-Schmidt norm (aka Frobenius norm
  * L2 norm).
  *
  * \note Because of the multiplicativeness of this comparison, one can&apos;t use this function
  * to check whether \c *this is approximately equal to the zero matrix or vector.
  * Indeed, \c isApprox(zero) returns false unless \c *this itself is exactly the zero matrix
  * or vector. If you want to test whether \c *this is zero, use internal::isMuchSmallerThan(const
  * RealScalar&amp;, RealScalar) instead.
  *
  * \sa internal::isMuchSmallerThan(const RealScalar&amp;, RealScalar) const
  */</doc>
