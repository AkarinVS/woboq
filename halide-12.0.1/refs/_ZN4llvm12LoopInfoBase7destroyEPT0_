<def f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='1067' ll='1073' type='void llvm::LoopInfoBase::destroy(LoopT * L)'/>
<doc f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='1057'>/// Destroy a loop that has been removed from the `LoopInfo` nest.
  ///
  /// This runs the destructor of the loop object making it invalid to
  /// reference afterward. The memory is retained so that the *pointer* to the
  /// loop remains valid.
  ///
  /// The caller is responsible for removing this loop from the loop nest and
  /// otherwise disconnecting it from the broader `LoopInfo` data structures.
  /// Callers that don&apos;t naturally handle this themselves should probably call
  /// `erase&apos; instead.</doc>
