<dec f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='772' type='llvm::BranchInst * llvm::Loop::getLoopGuardBranch() const'/>
<use f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='777' u='c' c='_ZNK4llvm4Loop9isGuardedEv'/>
<doc f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='754'>/// Return the loop guard branch, if it exists.
  ///
  /// This currently only works on simplified loop, as it requires a preheader
  /// and a latch to identify the guard. It will work on loops of the form:
  /// \code
  /// GuardBB:
  ///   br cond1, Preheader, ExitSucc &lt;== GuardBranch
  /// Preheader:
  ///   br Header
  /// Header:
  ///  ...
  ///   br Latch
  /// Latch:
  ///   br cond2, Header, ExitBlock
  /// ExitBlock:
  ///   br ExitSucc
  /// ExitSucc:
  /// \endcode</doc>
