<inh f='halide/build/include/Halide.h' l='12801' c='Halide::Internal::IRVisitor'/>
<def f='halide/build/include/Halide.h' l='18861' ll='18921'/>
<ovr f='halide/build/include/Halide.h' l='19517' c='Halide::Internal::HostClosure'/>
<use f='halide/build/include/Halide.h' l='19517'/>
<use f='halide/build/include/Halide.h' l='19644' c='_ZN6Halide8Internal18build_closure_typeERKNS0_7ClosureEPN4llvm10StructTypeEPNS4_11LLVMContextE'/>
<use f='halide/build/include/Halide.h' l='19652' c='_ZN6Halide8Internal12pack_closureEPN4llvm10StructTypeEPNS1_5ValueERKNS0_7ClosureERKNS0_5ScopeIS5_EES3_PNS1_9IRBuilderINS1_14ConstantFolderENS1_24IRBui3531356'/>
<use f='halide/build/include/Halide.h' l='19661' c='_ZN6Halide8Internal14unpack_closureERKNS0_7ClosureERNS0_5ScopeIPN4llvm5ValueEEEPNS5_10StructTypeES7_PNS5_9IRBuilderINS5_14ConstantFolderENS5_24IRBuilderDefaultInserterEEE'/>
<size>160</size>
<doc f='halide/build/include/Halide.h' l='18855'>/** A helper class to manage closures. Walks over a statement and
 * retrieves all the references within it to external symbols
 * (variables and allocations). It then helps you build a struct
 * containing the current values of these symbols that you can use as
 * a closure if you want to migrate the body of the statement to its
 * own function (e.g. because it&apos;s the body of a parallel for loop. */</doc>
<mbr r='Halide::Internal::Closure::ignore' o='64' t='Scope&lt;&gt;'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_3LetE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_7LetStmtE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_3ForE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_4LoadE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_5StoreE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_8AllocateE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_8VariableE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_6AtomicE'/>
<fun r='_ZN6Halide8Internal7Closure16found_buffer_refERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeEbbRKNS_6BufferIvEE'/>
<fun r='_ZN6Halide8Internal7ClosureC1Ev'/>
<fun r='_ZN6Halide8Internal7ClosureC1ERKNS0_4StmtERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<mbr r='Halide::Internal::Closure::vars' o='512' t='std::map&lt;std::string, Type&gt;'/>
<mbr r='Halide::Internal::Closure::buffers' o='896' t='std::map&lt;std::string, Buffer&gt;'/>
<inh f='halide/src/IRVisitor.h' l='19' c='Halide::Internal::IRVisitor'/>
<def f='halide/src/Closure.h' l='28' ll='88'/>
<use f='halide/src/CodeGen_Internal.h' l='41' c='_ZN6Halide8Internal18build_closure_typeERKNS0_7ClosureEPN4llvm10StructTypeEPNS4_11LLVMContextE'/>
<use f='halide/src/CodeGen_Internal.h' l='49' c='_ZN6Halide8Internal12pack_closureEPN4llvm10StructTypeEPNS1_5ValueERKNS0_7ClosureERKNS0_5ScopeIS5_EES3_PNS1_9IRBuilderINS1_14ConstantFolderENS1_24IRBui3531356'/>
<use f='halide/src/CodeGen_Internal.h' l='58' c='_ZN6Halide8Internal14unpack_closureERKNS0_7ClosureERNS0_5ScopeIPN4llvm5ValueEEEPNS5_10StructTypeES7_PNS5_9IRBuilderINS5_14ConstantFolderENS5_24IRBuilderDefaultInserterEEE'/>
<size>160</size>
<doc f='halide/src/Closure.h' l='22'>/** A helper class to manage closures. Walks over a statement and
 * retrieves all the references within it to external symbols
 * (variables and allocations). It then helps you build a struct
 * containing the current values of these symbols that you can use as
 * a closure if you want to migrate the body of the statement to its
 * own function (e.g. because it&apos;s the body of a parallel for loop. */</doc>
<mbr r='Halide::Internal::Closure::ignore' o='64' t='Scope&lt;&gt;'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_3LetE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_7LetStmtE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_3ForE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_4LoadE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_5StoreE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_8AllocateE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_8VariableE'/>
<fun r='_ZN6Halide8Internal7Closure5visitEPKNS0_6AtomicE'/>
<fun r='_ZN6Halide8Internal7Closure16found_buffer_refERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeEbbRKNS_6BufferIvEE'/>
<fun r='_ZN6Halide8Internal7ClosureC1Ev'/>
<fun r='_ZN6Halide8Internal7ClosureC1ERKNS0_4StmtERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<mbr r='Halide::Internal::Closure::vars' o='512' t='std::map&lt;std::string, Type&gt;'/>
<mbr r='Halide::Internal::Closure::buffers' o='896' t='std::map&lt;std::string, Buffer&gt;'/>
<ovr f='halide/src/DeviceArgument.h' l='95' c='Halide::Internal::HostClosure'/>
<use f='halide/src/DeviceArgument.h' l='95'/>
<size>160</size>
<use f='halide/src/CodeGen_Internal.cpp' l='21' c='_ZN6Halide8Internal12_GLOBAL__N_110llvm_typesERKNS0_7ClosureEPN4llvm10StructTypeERNS5_11LLVMContextE'/>
<use f='halide/src/CodeGen_Internal.cpp' l='35' c='_ZN6Halide8Internal18build_closure_typeERKNS0_7ClosureEPN4llvm10StructTypeEPNS4_11LLVMContextE'/>
<use f='halide/src/CodeGen_Internal.cpp' l='45' c='_ZN6Halide8Internal12pack_closureEPN4llvm10StructTypeEPNS1_5ValueERKNS0_7ClosureERKNS0_5ScopeIS5_EES3_PNS1_9IRBuilderINS1_14ConstantFolderENS1_24IRBui3531356'/>
<use f='halide/src/CodeGen_Internal.cpp' l='85' c='_ZN6Halide8Internal14unpack_closureERKNS0_7ClosureERNS0_5ScopeIPN4llvm5ValueEEEPNS5_10StructTypeES7_PNS5_9IRBuilderINS5_14ConstantFolderENS5_24IRBuilderDefaultInserterEEE'/>
<size>160</size>
<use f='halide/src/CodeGen_LLVM.cpp' l='3572' c='_ZN6Halide8Internal12CodeGen_LLVM17do_parallel_tasksERKSt6vectorINS1_12ParallelTaskESaIS3_EE'/>
<size>160</size>
<use f='halide/src/HexagonOffload.cpp' l='758' c='_ZN6Halide8Internal12_GLOBAL__N_116InjectHexagonRpc5visitEPKNS0_3ForE'/>
<size>160</size>
