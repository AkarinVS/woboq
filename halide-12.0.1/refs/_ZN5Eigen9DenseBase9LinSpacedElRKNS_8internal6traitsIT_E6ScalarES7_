<dec f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='346' type='static const Eigen::DenseBase::RandomAccessLinSpacedReturnType Eigen::DenseBase::LinSpaced(Eigen::Index size, const Eigen::DenseBase::Scalar &amp; low, const Eigen::DenseBase::Scalar &amp; high)'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/CwiseNullaryOp.h' l='286' ll='292' type='static const typename DenseBase&lt;Derived&gt;::RandomAccessLinSpacedReturnType Eigen::DenseBase::LinSpaced(Eigen::Index size, const Eigen::DenseBase::Scalar &amp; low, const Eigen::DenseBase::Scalar &amp; high)'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/CwiseNullaryOp.h' l='263'>/**
  * \brief Sets a linearly spaced vector.
  *
  * The function generates &apos;size&apos; equally spaced values in the closed interval [low,high].
  * When size is set to 1, a vector of length 1 containing &apos;high&apos; is returned.
  *
  * \only_for_vectors
  *
  * Example: \include DenseBase_LinSpaced.cpp
  * Output: \verbinclude DenseBase_LinSpaced.out
  *
  * For integer scalar types, an even spacing is possible if and only if the length of the range,
  * i.e., \c high-low is a scalar multiple of \c size-1, or if \c size is a scalar multiple of the
  * number of values \c high-low+1 (meaning each value can be repeated the same number of time).
  * If one of these two considions is not satisfied, then \c high is lowered to the largest value
  * satisfying one of this constraint.
  * Here are some examples:
  *
  * Example: \include DenseBase_LinSpacedInt.cpp
  * Output: \verbinclude DenseBase_LinSpacedInt.out
  *
  * \sa setLinSpaced(Index,const Scalar&amp;,const Scalar&amp;), CwiseNullaryOp
  */</doc>
