<dec f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='611' type='int64_t llvm::DataExtractor::getSLEB128(uint64_t * OffsetPtr, llvm::Error * Err = nullptr) const'/>
<use f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='616' u='c' c='_ZNK4llvm13DataExtractor10getSLEB128ERNS0_6CursorE'/>
<doc f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='589'>/// Extract a signed LEB128 value from \a *offset_ptr.
  ///
  /// Extracts an signed LEB128 number from this object&apos;s data
  /// starting at the offset pointed to by \a offset_ptr. The offset
  /// pointed to by \a offset_ptr will be updated with the offset of
  /// the byte following the last extracted byte.
  ///
  /// @param[in,out] OffsetPtr
  ///     A pointer to an offset within the data that will be advanced
  ///     by the appropriate number of bytes if the value is extracted
  ///     correctly. If the offset is out of bounds or there are not
  ///     enough bytes to extract this value, the offset will be left
  ///     unmodified.
  ///
  /// @param[in,out] Err
  ///     A pointer to an Error object. Upon return the Error object is set to
  ///     indicate the result (success/failure) of the function. If the Error
  ///     object is already set when calling this function, no extraction is
  ///     performed.
  ///
  /// @return
  ///     The extracted signed integer value.</doc>
<use f='halide/src/Introspection.cpp' l='1280' u='c' c='_ZN6Halide8Internal13Introspection12_GLOBAL__N_113DebugSections16parse_debug_infoERKN4llvm13DataExtractorES7_NS4_9StringRefES8_'/>
<use f='halide/src/Introspection.cpp' l='2086' u='c' c='_ZN6Halide8Internal13Introspection12_GLOBAL__N_113DebugSections16parse_debug_lineERKN4llvm13DataExtractorE'/>
