<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='981' type='void absl::lts_2020_02_25::RegisterMutexTracer(void (*)(const char *, const void *, int64_t) fn)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='970'>// Register a hook for Mutex tracing.
//
// The function pointer registered here will be called whenever a mutex is
// contended.  The callback is given an opaque handle to the contended mutex,
// an event name, and the number of wait cycles (as measured by
// //absl/base/internal/cycleclock.h, and which may not be real
// &quot;cycle&quot; counts.)
//
// The only event name currently sent is &quot;slow release&quot;.
//
// This has the same memory ordering concerns as RegisterMutexProfiler() above.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='133' ll='136' type='void absl::lts_2020_02_25::RegisterMutexTracer(void (*)(const char *, const void *, int64_t) fn)'/>
