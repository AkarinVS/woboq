<def f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='67' ll='130'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='87' c='_ZN4llvm10InlineCost3getEii'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='90' c='_ZN4llvm10InlineCost3getEii'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='92' c='_ZN4llvm10InlineCost9getAlwaysEPKc'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='93' c='_ZN4llvm10InlineCost9getAlwaysEPKc'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='95' c='_ZN4llvm10InlineCost8getNeverEPKc'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='96' c='_ZN4llvm10InlineCost8getNeverEPKc'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='225' c='_ZN4llvm13getInlineCostERNS_8CallBaseERKNS_12InlineParamsERNS_19TargetTransformInfoENS_12function_refIFRNS_15AssumptionCacheERNS_8FunctionEEEENS7_IFRK1401667'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='239' c='_ZN4llvm13getInlineCostERNS_8CallBaseEPNS_8FunctionERKNS_12InlineParamsERNS_19TargetTransformInfoENS_12function_refIFRNS_15AssumptionCacheERS2_EEENS9_4080712'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='123' c='_ZN4llvm19DefaultInlineAdviceC1EPNS_13InlineAdvisorERNS_8CallBaseENS_8OptionalINS_10InlineCostEEERNS_25OptimizationRemarkEmitterEb'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='135'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='263' c='_ZN4llvm12shouldInlineERNS_8CallBaseENS_12function_refIFNS_10InlineCostES1_EEERNS_25OptimizationRemarkEmitterEb'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='264' c='_ZN4llvm12shouldInlineERNS_8CallBaseENS_12function_refIFNS_10InlineCostES1_EEERNS_25OptimizationRemarkEmitterEb'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='270' c='_ZN4llvm15emitInlinedIntoERNS_25OptimizationRemarkEmitterENS_8DebugLocEPKNS_10BasicBlockERKNS_8FunctionES8_RKNS_10InlineCostEbPKc'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='284' c='_ZN4llvm13inlineCostStrB5cxx11ERKNS_10InlineCostE'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO/Inliner.h' l='57' c='_ZN4llvm17LegacyInlinerBase13getInlineCostERNS_8CallBaseE'/>
<size>16</size>
<doc f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='57'>/// Represents the cost of inlining a function.
///
/// This supports special values for functions which should &quot;always&quot; or
/// &quot;never&quot; be inlined. Otherwise, the cost represents a unitless amount;
/// smaller values increase the likelihood of the function being inlined.
///
/// Objects of this type also provide the adjusted threshold for inlining
/// based on the information available for a particular callsite. They can be
/// directly tested to determine if inlining should occur given the cost and
/// threshold for this cost metric.</doc>
<mbr r='llvm::InlineCost::Cost' o='0' t='int'/>
<mbr r='llvm::InlineCost::Threshold' o='32' t='int'/>
<mbr r='llvm::InlineCost::Reason' o='64' t='const char *'/>
<fun r='_ZN4llvm10InlineCostC1EiiPKc'/>
<fun r='_ZN4llvm10InlineCost3getEii'/>
<fun r='_ZN4llvm10InlineCost9getAlwaysEPKc'/>
<fun r='_ZN4llvm10InlineCost8getNeverEPKc'/>
<fun r='_ZNK4llvm10InlineCostcvbEv'/>
<fun r='_ZNK4llvm10InlineCost8isAlwaysEv'/>
<fun r='_ZNK4llvm10InlineCost7isNeverEv'/>
<fun r='_ZNK4llvm10InlineCost10isVariableEv'/>
<fun r='_ZNK4llvm10InlineCost7getCostEv'/>
<fun r='_ZNK4llvm10InlineCost12getThresholdEv'/>
<fun r='_ZNK4llvm10InlineCost9getReasonEv'/>
<fun r='_ZNK4llvm10InlineCost12getCostDeltaEv'/>
