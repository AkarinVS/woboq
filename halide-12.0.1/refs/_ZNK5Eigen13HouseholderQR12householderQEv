<def f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='163' ll='167' type='Eigen::HouseholderQR::HouseholderSequenceType Eigen::HouseholderQR::householderQ() const'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='367' u='c' c='_ZNK5Eigen13HouseholderQR11_solve_implERKTL0__RTL0_0_'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='393' u='c' c='_ZNK5Eigen13HouseholderQR22_solve_impl_transposedERKTL0_0_RTL0_1_'/>
<doc f='halide/build-apps/eigen/Eigen/src/QR/HouseholderQR.h' l='155'>/** This method returns an expression of the unitary matrix Q as a sequence of Householder transformations.
      *
      * The returned expression can directly be used to perform matrix products. It can also be assigned to a dense Matrix object.
      * Here is an example showing how to recover the full or thin matrix Q, as well as how to perform matrix products using operator*:
      *
      * Example: \include HouseholderQR_householderQ.cpp
      * Output: \verbinclude HouseholderQR_householderQ.out
      */</doc>
