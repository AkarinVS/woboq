<def f='halide/halide-install/include/Halide.h' l='10134' ll='10138' type='Buffer&lt;T, D&gt; Halide::Runtime::Buffer::transposed(int d1, int d2) const'/>
<doc f='halide/halide-install/include/Halide.h' l='10130'>/** Make a buffer which refers to the same data in the same layout
     * using a swapped indexing order for the dimensions given. So
     * A = B.transposed(0, 1) means that A(i, j) == B(j, i), and more
     * strongly that A.address_of(i, j) == B.address_of(j, i). */</doc>
<def f='halide/halide-install/include/HalideBuffer.h' l='1372' ll='1376' type='Buffer&lt;T, D&gt; Halide::Runtime::Buffer::transposed(int d1, int d2) const'/>
<doc f='halide/halide-install/include/HalideBuffer.h' l='1368'>/** Make a buffer which refers to the same data in the same layout
     * using a swapped indexing order for the dimensions given. So
     * A = B.transposed(0, 1) means that A(i, j) == B(j, i), and more
     * strongly that A.address_of(i, j) == B.address_of(j, i). */</doc>
<def f='halide/build/include/Halide.h' l='10134' ll='10138' type='Buffer&lt;T, D&gt; Halide::Runtime::Buffer::transposed(int d1, int d2) const'/>
<doc f='halide/build/include/Halide.h' l='10130'>/** Make a buffer which refers to the same data in the same layout
     * using a swapped indexing order for the dimensions given. So
     * A = B.transposed(0, 1) means that A(i, j) == B(j, i), and more
     * strongly that A.address_of(i, j) == B.address_of(j, i). */</doc>
<def f='halide/src/runtime/HalideBuffer.h' l='1372' ll='1376' type='Buffer&lt;T, D&gt; Halide::Runtime::Buffer::transposed(int d1, int d2) const'/>
<doc f='halide/src/runtime/HalideBuffer.h' l='1368'>/** Make a buffer which refers to the same data in the same layout
     * using a swapped indexing order for the dimensions given. So
     * A = B.transposed(0, 1) means that A(i, j) == B(j, i), and more
     * strongly that A.address_of(i, j) == B.address_of(j, i). */</doc>
