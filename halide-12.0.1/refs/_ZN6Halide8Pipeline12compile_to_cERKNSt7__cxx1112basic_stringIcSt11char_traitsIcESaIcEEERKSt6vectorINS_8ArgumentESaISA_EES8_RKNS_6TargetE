<dec f='halide/halide-install/include/Halide.h' l='14929' type='void Halide::Pipeline::compile_to_c(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/halide-install/include/Halide.h' l='14925'>/** Statically compile a pipeline to C source code. This is useful
     * for providing fallback code paths that will compile on many
     * platforms. Vectorization will fail, and parallelization will
     * produce serial code. */</doc>
<dec f='halide/build/include/Halide.h' l='14929' type='void Halide::Pipeline::compile_to_c(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/build/include/Halide.h' l='14925'>/** Statically compile a pipeline to C source code. This is useful
     * for providing fallback code paths that will compile on many
     * platforms. Vectorization will fail, and parallelization will
     * produce serial code. */</doc>
<use f='halide/python_bindings/src/PyPipeline.cpp' l='77' u='a' c='_ZN6Halide14PythonBindings15define_pipelineERN8pybind117module_E'/>
<dec f='halide/src/Pipeline.h' l='273' type='void Halide::Pipeline::compile_to_c(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/src/Pipeline.h' l='269'>/** Statically compile a pipeline to C source code. This is useful
     * for providing fallback code paths that will compile on many
     * platforms. Vectorization will fail, and parallelization will
     * produce serial code. */</doc>
<use f='halide/src/Func.cpp' l='3211' u='c' c='_ZN6Halide4Func12compile_to_cERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EES8_RKNS_6TargetE'/>
<def f='halide/src/Pipeline.cpp' l='306' ll='312' type='void Halide::Pipeline::compile_to_c(const std::string &amp; filename, const vector&lt;Halide::Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
