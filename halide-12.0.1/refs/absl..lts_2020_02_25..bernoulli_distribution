<def f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='35' ll='105'/>
<use f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='41'/>
<use f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='60' c='_ZN4absl14lts_2020_02_2522bernoulli_distributionC1Ev'/>
<use f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='88' c='_ZN4absl14lts_2020_02_25eqERKNS0_22bernoulli_distributionES3_'/>
<use f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='89' c='_ZN4absl14lts_2020_02_25eqERKNS0_22bernoulli_distributionES3_'/>
<use f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='93' c='_ZN4absl14lts_2020_02_25neERKNS0_22bernoulli_distributionES3_'/>
<use f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='94' c='_ZN4absl14lts_2020_02_25neERKNS0_22bernoulli_distributionES3_'/>
<use f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='110' c='_ZN4absl14lts_2020_02_25lsERSt13basic_ostreamIT_T0_ERKNS0_22bernoulli_distributionE'/>
<use f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='120' c='_ZN4absl14lts_2020_02_25rsERSt13basic_istreamIT_T0_ERNS0_22bernoulli_distributionE'/>
<use f='halide/build-apps/abseil-cpp/absl/random/discrete_distribution.h' l='201' c='_ZN4absl14lts_2020_02_2521discrete_distributionclERTL0__RKNS1_10param_typeE'/>
<size>8</size>
<doc f='halide/build-apps/abseil-cpp/absl/random/bernoulli_distribution.h' l='29'>// absl::bernoulli_distribution is a drop in replacement for
// std::bernoulli_distribution. It guarantees that (given a perfect
// UniformRandomBitGenerator) the acceptance probability is *exactly* equal to
// the given double.
//
// The implementation assumes that double is IEEE754</doc>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distributionC1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distributionC1Ed'/>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distributionC1ENS1_10param_typeE'/>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distribution5resetEv'/>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distributionclERT_'/>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distributionclERT_RKNS1_10param_typeE'/>
<fun r='_ZNK4absl14lts_2020_02_2522bernoulli_distribution5paramEv'/>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distribution5paramERKNS1_10param_typeE'/>
<fun r='_ZNK4absl14lts_2020_02_2522bernoulli_distribution1pEv'/>
<fun r='_ZNK4absl14lts_2020_02_2522bernoulli_distribution3minEv'/>
<fun r='_ZNK4absl14lts_2020_02_2522bernoulli_distribution3maxEv'/>
<smbr r='absl::lts_2020_02_25::bernoulli_distribution::kP32' t='const uint64_t'/>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distribution8GenerateEdRT_'/>
<mbr r='absl::lts_2020_02_25::bernoulli_distribution::param_' o='0' t='absl::lts_2020_02_25::bernoulli_distribution::param_type'/>
<fun r='_ZN4absl14lts_2020_02_2522bernoulli_distribution8GenerateEdRT_'/>
