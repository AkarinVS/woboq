<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='883' ll='901'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='897' c='_ZN4absl14lts_2020_02_2519ReleasableMutexLockC1ERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='898' c='_ZN4absl14lts_2020_02_2519ReleasableMutexLockC1EOS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='899' c='_ZN4absl14lts_2020_02_2519ReleasableMutexLockaSERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='899' c='_ZN4absl14lts_2020_02_2519ReleasableMutexLockaSERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='900' c='_ZN4absl14lts_2020_02_2519ReleasableMutexLockaSEOS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='900' c='_ZN4absl14lts_2020_02_2519ReleasableMutexLockaSEOS1_'/>
<size>8</size>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='879'>// ReleasableMutexLock
//
// ReleasableMutexLock is like MutexLock, but permits `Release()` of its
// mutex before destruction. `Release()` may be called at most once.</doc>
<fun r='_ZN4absl14lts_2020_02_2519ReleasableMutexLockC1EPNS0_5MutexE'/>
<fun r='_ZN4absl14lts_2020_02_2519ReleasableMutexLockD1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2519ReleasableMutexLock7ReleaseEv'/>
<mbr r='absl::lts_2020_02_25::ReleasableMutexLock::mu_' o='0' t='absl::lts_2020_02_25::Mutex *'/>
<fun r='_ZN4absl14lts_2020_02_2519ReleasableMutexLockC1ERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_2519ReleasableMutexLockC1EOS1_'/>
<fun r='_ZN4absl14lts_2020_02_2519ReleasableMutexLockaSERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_2519ReleasableMutexLockaSEOS1_'/>
