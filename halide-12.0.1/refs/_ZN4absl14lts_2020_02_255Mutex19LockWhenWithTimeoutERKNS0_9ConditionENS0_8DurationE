<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='364' type='bool absl::lts_2020_02_25::Mutex::LockWhenWithTimeout(const absl::lts_2020_02_25::Condition &amp; cond, absl::Duration timeout)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='370' u='c' c='_ZN4absl14lts_2020_02_255Mutex25WriterLockWhenWithTimeoutERKNS0_9ConditionENS0_8DurationE'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='353'>// Mutex::LockWhenWithTimeout()
  // Mutex::ReaderLockWhenWithTimeout()
  // Mutex::WriterLockWhenWithTimeout()
  //
  // Blocks until simultaneously both:
  //   - either `cond` is `true` or the timeout has expired, and
  //   - this `Mutex` can be acquired,
  // then atomically acquires this `Mutex`, returning `true` iff `cond` is
  // `true` on return.
  //
  // Negative timeouts are equivalent to a zero timeout.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1499' ll='1501' type='bool absl::lts_2020_02_25::Mutex::LockWhenWithTimeout(const absl::lts_2020_02_25::Condition &amp; cond, absl::Duration timeout)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/notification.cc' l='60' u='c' c='_ZNK4absl14lts_2020_02_2512Notification30WaitForNotificationWithTimeoutENS0_8DurationE'/>
