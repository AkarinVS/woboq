<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/rfft2d.cc' l='247' ll='298' type='void tflite::ops::builtin::rfft2d::Rfft2dReorder(int fft_height, int fft_width, double ** fft_input_output)'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/rfft2d.cc' l='311' u='c' c='_ZN6tflite3ops7builtin6rfft2d10Rfft2dImplEiiPPdPiS3_'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/rfft2d.cc' l='229'>// Reorder the result so that it matches the pattern of tf.signal.rfft2d.
// In tf.signal.fft2d the frequency matrix of a 4x4 input is
//    [[F(0, 0),  F(0, 1/4),   F(0, 2/4)],
//    [F(1/4, 0), F(1/4, 1/4), F(1/4, 2/4)],
//    [F(2/4, 0), F(2/4, 1/4), F(2/4, 2/4)],
//    [F(3/4, 0), F(3/4, 1/4), F(3/4, 2/4)]]
// While in rdft2d, the frequency matrix of a 4x4 input is
//    [[(F(0, 0), F(0, -2/4))       F(0, -1/4),   0],
//     [ F(-1/4, 0),                F(-1/4, -1/4), 0],
//     [(F(-2/4, 0),F(-2/4, -2/4)), F(-2/4, -1/4), 0],
//     [ j*F(-3/4, -2/4),           F(-3/4, -1/4), 0]]
// Since real fft has the property that
//   Real(u,v) = Real(-u, -v)
//   Img(u,v) = - Img(-u, -v)
// Result of rdft2d can be reordered and match the pattern of tf.signal.rfft2d.
// For example,
//   Real(-3/4, 0) = Real(1/4, 0) = Real(-1/4, 0)
//   Img(-3/4, 0) = Img(1/4, 0) = -Img(-1/4, 0)</doc>
