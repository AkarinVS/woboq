<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='399' u='c' c='_ZNK4absl14lts_2020_02_2514flags_internal8FlagImpl3GetEPT_'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='422' u='c' c='_ZN4absl14lts_2020_02_2514flags_internal8FlagImpl3SetERKT_'/>
<dec f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='488' type='void absl::lts_2020_02_25::flags_internal::FlagImpl::AssertValidType(absl::lts_2020_02_25::flags_internal::FlagStaticTypeId type_id) const'/>
<doc f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='482'>// Used in read/write operations to validate source/target has correct type.
  // For example if flag is declared as absl::Flag&lt;int&gt; FLAGS_foo, a call to
  // absl::GetFlag(FLAGS_foo) validates that the type of FLAGS_foo is indeed
  // int. To do that we pass the &quot;assumed&quot; type id (which is deduced from type
  // int) as an argument `op`, which is in turn is validated against the type id
  // stored in flag object by flag definition statement.</doc>
<def f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='96' ll='119' type='void absl::lts_2020_02_25::flags_internal::FlagImpl::AssertValidType(absl::lts_2020_02_25::flags_internal::FlagStaticTypeId type_id) const'/>
