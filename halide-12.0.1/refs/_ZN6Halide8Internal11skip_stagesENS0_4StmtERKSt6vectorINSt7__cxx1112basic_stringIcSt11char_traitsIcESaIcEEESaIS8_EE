<dec f='halide/build/include/Halide.h' l='31283' type='Halide::Internal::Stmt Halide::Internal::skip_stages(Halide::Internal::Stmt s, const std::vector&lt;std::string&gt; &amp; order)'/>
<doc f='halide/build/include/Halide.h' l='31278'>/** Avoid computing certain stages if we can infer a runtime condition
 * to check that tells us they won&apos;t be used. Does this by analyzing
 * all reads of each buffer allocated, and inferring some condition
 * that tells us if the reads occur. If the condition is non-trivial,
 * inject ifs that guard the production. */</doc>
<dec f='halide/src/SkipStages.h' l='21' type='Halide::Internal::Stmt Halide::Internal::skip_stages(Halide::Internal::Stmt s, const std::vector&lt;std::string&gt; &amp; order)'/>
<use f='halide/src/Lower.cpp' l='240' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
<doc f='halide/src/SkipStages.h' l='16'>/** Avoid computing certain stages if we can infer a runtime condition
 * to check that tells us they won&apos;t be used. Does this by analyzing
 * all reads of each buffer allocated, and inferring some condition
 * that tells us if the reads occur. If the condition is non-trivial,
 * inject ifs that guard the production. */</doc>
<def f='halide/src/SkipStages.cpp' l='511' ll='530' type='Halide::Internal::Stmt Halide::Internal::skip_stages(Halide::Internal::Stmt stmt, const vector&lt;std::string&gt; &amp; order)'/>
