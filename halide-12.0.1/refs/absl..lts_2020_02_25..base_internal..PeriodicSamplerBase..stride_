<dec f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.h' l='151' type='uint64_t'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.h' l='157' u='w' c='_ZN4absl14lts_2020_02_2513base_internal19PeriodicSamplerBase17SubtleMaybeSampleEv'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.cc' l='34' u='w' c='_ZN4absl14lts_2020_02_2513base_internal19PeriodicSamplerBase19SubtleConfirmSampleEv'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.cc' l='39' u='r' c='_ZN4absl14lts_2020_02_2513base_internal19PeriodicSamplerBase19SubtleConfirmSampleEv'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.cc' l='40' u='w' c='_ZN4absl14lts_2020_02_2513base_internal19PeriodicSamplerBase19SubtleConfirmSampleEv'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.cc' l='41' u='r' c='_ZN4absl14lts_2020_02_2513base_internal19PeriodicSamplerBase19SubtleConfirmSampleEv'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.cc' l='42' u='w' c='_ZN4absl14lts_2020_02_2513base_internal19PeriodicSamplerBase19SubtleConfirmSampleEv'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.cc' l='47' u='w' c='_ZN4absl14lts_2020_02_2513base_internal19PeriodicSamplerBase19SubtleConfirmSampleEv'/>
<offset>64</offset>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/periodic_sampler.h' l='115'>// Keep and decrement stride_ as an unsigned integer, but compare the value
  // to zero casted as a signed int. clang and msvc do not create optimum code
  // if we use signed for the combined decrement and sign comparison.
  //
  // Below 3 alternative options, all compiles generate the best code
  // using the unsigned increment &lt;---&gt; signed int comparison option.
  //
  // Option 1:
  //   int64_t stride_;
  //   if (ABSL_PREDICT_TRUE(++stride_ &lt; 0)) { ... }
  //
  //   GCC   x64 (OK) : https://gcc.godbolt.org/z/R5MzzA
  //   GCC   ppc (OK) : https://gcc.godbolt.org/z/z7NZAt
  //   Clang x64 (BAD): https://gcc.godbolt.org/z/t4gPsd
  //   ICC   x64 (OK) : https://gcc.godbolt.org/z/rE6s8W
  //   MSVC  x64 (OK) : https://gcc.godbolt.org/z/ARMXqS
  //
  // Option 2:
  //   int64_t stride_ = 0;
  //   if (ABSL_PREDICT_TRUE(--stride_ &gt;= 0)) { ... }
  //
  //   GCC   x64 (OK) : https://gcc.godbolt.org/z/jSQxYK
  //   GCC   ppc (OK) : https://gcc.godbolt.org/z/VJdYaA
  //   Clang x64 (BAD): https://gcc.godbolt.org/z/Xm4NjX
  //   ICC   x64 (OK) : https://gcc.godbolt.org/z/4snaFd
  //   MSVC  x64 (BAD): https://gcc.godbolt.org/z/BgnEKE
  //
  // Option 3:
  //   uint64_t stride_;
  //   if (ABSL_PREDICT_TRUE(static_cast&lt;int64_t&gt;(++stride_) &lt; 0)) { ... }
  //
  //   GCC   x64 (OK) : https://gcc.godbolt.org/z/bFbfPy
  //   GCC   ppc (OK) : https://gcc.godbolt.org/z/S9KkUE
  //   Clang x64 (OK) : https://gcc.godbolt.org/z/UYzRb4
  //   ICC   x64 (OK) : https://gcc.godbolt.org/z/ptTNfD
  //   MSVC  x64 (OK) : https://gcc.godbolt.org/z/76j4-5</doc>
