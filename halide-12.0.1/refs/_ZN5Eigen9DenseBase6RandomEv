<dec f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='530' type='static const Eigen::DenseBase::RandomReturnType Eigen::DenseBase::Random()'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/Random.h' l='111' ll='116' type='static const typename DenseBase&lt;Derived&gt;::RandomReturnType Eigen::DenseBase::Random()'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Random.h' l='92'>/** \returns a fixed-size random matrix or vector expression
  *
  * Numbers are uniformly spread through their whole definition range for integer types,
  * and in the [-1:1] range for floating point scalar types.
  * 
  * This variant is only for fixed-size MatrixBase types. For dynamic-size types, you
  * need to use the variants taking size arguments.
  *
  * Example: \include MatrixBase_random.cpp
  * Output: \verbinclude MatrixBase_random.out
  *
  * This expression has the &quot;evaluate before nesting&quot; flag so that it will be evaluated into
  * a temporary matrix whenever it is nested in a larger expression. This prevents unexpected
  * behavior with expressions involving random matrices.
  * 
  * \not_reentrant
  *
  * \sa DenseBase::setRandom(), DenseBase::Random(Index,Index), DenseBase::Random(Index)
  */</doc>
