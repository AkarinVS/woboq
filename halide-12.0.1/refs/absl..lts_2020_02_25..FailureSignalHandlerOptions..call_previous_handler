<dec f='halide/build-apps/abseil-cpp/absl/debugging/failure_signal_handler.h' l='88' type='bool'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/failure_signal_handler.cc' l='355' u='r' c='_ZN4absl14lts_2020_02_25L24AbslFailureSignalHandlerEiP9siginfo_tPv'/>
<offset>64</offset>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/failure_signal_handler.h' l='76'>// If true, call the previously registered signal handler for the signal that
  // was received (if one was registered) after the existing signal handler
  // runs. This mechanism can be used to chain signal handlers together.
  //
  // If false, the signal is raised to the default handler for that signal
  // (which normally terminates the program).
  //
  // IMPORTANT: If true, the chained fatal signal handlers must not try to
  // recover from the fatal signal. Instead, they should terminate the program
  // via some mechanism, like raising the default handler for the signal, or by
  // calling `_exit()`. Note that the failure signal handler may put parts of
  // the Abseil library into a state from which they cannot recover.</doc>
