<use f='halide/build-apps/eigen/Eigen/src/Core/MatrixBase.h' l='354' c='_ZNK5Eigen10MatrixBase3lltEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/SelfAdjointView.h' l='250' c='_ZNK5Eigen15SelfAdjointView3lltEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='17'/>
<def f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='66' ll='233'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='67'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='432' c='_ZN5Eigen3LLT7computeERKNS_9EigenBaseITL0__EE'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='432' c='_ZN5Eigen3LLT7computeERKNS_9EigenBaseITL0__EE'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='469' c='_ZN5Eigen3LLT10rankUpdateERKTL0__RKNS_9NumTraitsINS_8internal6traitsINS_3LLTIT_XT0_EEEE6ScalarEE4RealE'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='469' c='_ZN5Eigen3LLT10rankUpdateERKTL0__RKNS_9NumTraitsINS_8internal6traitsINS_3LLTIT_XT0_EEEE6ScalarEE4RealE'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='485' c='_ZNK5Eigen3LLT11_solve_implERKTL0__RTL0_0_'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='492' c='_ZNK5Eigen3LLT22_solve_impl_transposedERKTL0_0_RTL0_1_'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='516' c='_ZNK5Eigen3LLT12solveInPlaceERKNS_10MatrixBaseITL0__EE'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='528' c='_ZNK5Eigen3LLT19reconstructedMatrixEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='539' c='_ZNK5Eigen10MatrixBase3lltEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='542' c='_ZNK5Eigen10MatrixBase3lltEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='550' c='_ZNK5Eigen15SelfAdjointView3lltEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='553' c='_ZNK5Eigen15SelfAdjointView3lltEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h' l='175' c='_ZN5Eigen33GeneralizedSelfAdjointEigenSolver7computeERKT_S3_i'/>
<doc f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='29'>/** \ingroup Cholesky_Module
  *
  * \class LLT
  *
  * \brief Standard Cholesky decomposition (LL^T) of a matrix and associated features
  *
  * \tparam _MatrixType the type of the matrix of which we are computing the LL^T Cholesky decomposition
  * \tparam _UpLo the triangular part that will be used for the decompositon: Lower (default) or Upper.
  *               The other triangular part won&apos;t be read.
  *
  * This class performs a LL^T Cholesky decomposition of a symmetric, positive definite
  * matrix A such that A = LL^* = U^*U, where L is lower triangular.
  *
  * While the Cholesky decomposition is particularly useful to solve selfadjoint problems like  D^*D x = b,
  * for that purpose, we recommend the Cholesky decomposition without square root which is more stable
  * and even faster. Nevertheless, this standard Cholesky decomposition remains useful in many other
  * situations like generalised eigen problems with hermitian matrices.
  *
  * Remember that Cholesky decompositions are not rank-revealing. This LLT decomposition is only stable on positive definite matrices,
  * use LDLT instead for the semidefinite case. Also, do not use a Cholesky decomposition to determine whether a system of equations
  * has a solution.
  *
  * Example: \include LLT_example.cpp
  * Output: \verbinclude LLT_example.out
  *
  * \b Performance: for best performance, it is recommended to use a column-major storage format
  * with the Lower triangular part (the default), or, equivalently, a row-major storage format
  * with the Upper triangular part. Otherwise, you might get a 20% slowdown for the full factorization
  * step, and rank-updates can be up to 3 times slower.
  *
  * This class supports the \link InplaceDecomposition inplace decomposition \endlink mechanism.
  *
  * Note that during the decomposition, only the lower (or upper, as defined by _UpLo) triangular part of A is considered.
  * Therefore, the strict lower part does not have to store correct values.
  *
  * \sa MatrixBase::llt(), SelfAdjointView::llt(), class LDLT
  */</doc>
<fun r='_ZN5Eigen3LLTC1Ev'/>
<fun r='_ZN5Eigen3LLTC1El'/>
<fun r='_ZN5Eigen3LLTC1ERKNS_9EigenBaseITL0__EE'/>
<fun r='_ZN5Eigen3LLTC1ERNS_9EigenBaseITL0__EE'/>
<fun r='_ZNK5Eigen3LLT7matrixUEv'/>
<fun r='_ZNK5Eigen3LLT7matrixLEv'/>
<fun r='_ZNK5Eigen3LLT12solveInPlaceERKNS_10MatrixBaseITL0__EE'/>
<fun r='_ZN5Eigen3LLT7computeERKNS_9EigenBaseITL0__EE'/>
<fun r='_ZNK5Eigen3LLT5rcondEv'/>
<fun r='_ZNK5Eigen3LLT9matrixLLTEv'/>
<fun r='_ZNK5Eigen3LLT19reconstructedMatrixEv'/>
<fun r='_ZNK5Eigen3LLT4infoEv'/>
<fun r='_ZNK5Eigen3LLT7adjointEv'/>
<fun r='_ZNK5Eigen3LLT4rowsEv'/>
<fun r='_ZNK5Eigen3LLT4colsEv'/>
<fun r='_ZN5Eigen3LLT10rankUpdateERKTL0__RKNS_9NumTraitsINS_8internal6traitsINS_3LLTIT_XT0_EEEE6ScalarEE4RealE'/>
<fun r='_ZNK5Eigen3LLT11_solve_implERKTL0__RTL0_0_'/>
<fun r='_ZNK5Eigen3LLT22_solve_impl_transposedERKTL0_0_RTL0_1_'/>
<fun r='_ZN5Eigen3LLT25check_template_parametersEv'/>
<mbr r='Eigen::LLT::m_matrix' t='Eigen::LLT::MatrixType'/>
<mbr r='Eigen::LLT::m_l1_norm' t='Eigen::LLT::RealScalar'/>
<mbr r='Eigen::LLT::m_isInitialized' t='bool'/>
<mbr r='Eigen::LLT::m_info' t='Eigen::ComputationInfo'/>
<fun r='_ZN5Eigen3LLT7computeERKNS_9EigenBaseITL0__EE'/>
<fun r='_ZN5Eigen3LLT10rankUpdateERKTL0__RKNS_9NumTraitsINS_8internal6traitsINS_3LLTIT_XT0_EEEE6ScalarEE4RealE'/>
<fun r='_ZNK5Eigen3LLT11_solve_implERKTL0__RTL0_0_'/>
<fun r='_ZNK5Eigen3LLT22_solve_impl_transposedERKTL0_0_RTL0_1_'/>
<fun r='_ZNK5Eigen3LLT12solveInPlaceERKNS_10MatrixBaseITL0__EE'/>
<fun r='_ZNK5Eigen3LLT19reconstructedMatrixEv'/>
