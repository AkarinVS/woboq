<dec f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='922' type='unsigned int llvm::TargetTransformInfo::getRegisterClassForType(bool Vector, llvm::Type * Ty = nullptr) const'/>
<doc f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='911'>/// \return the target-provided register class ID for the provided type,
  /// accounting for type promotion and other type-legalization techniques that
  /// the target might apply. However, it specifically does not account for the
  /// scalarization or splitting of vector types. Should a vector type require
  /// scalarization or splitting into multiple underlying vector registers, that
  /// type should be mapped to a register class containing no registers.
  /// Specifically, this is designed to provide a simple, high-level view of the
  /// register allocation later performed by the backend. These register classes
  /// don&apos;t necessarily map onto the register classes used by the backend.
  /// FIXME: It&apos;s not currently possible to determine how many registers
  /// are used by the provided type.</doc>
