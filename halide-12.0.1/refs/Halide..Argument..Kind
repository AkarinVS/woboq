<def f='halide/build/include/Halide.h' l='6546' ll='6550'/>
<use f='halide/build/include/Halide.h' l='6551'/>
<use f='halide/build/include/Halide.h' l='6569' c='_ZN6Halide8ArgumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_4KindERKNS_4TypeEiRKNS_17ArgumentEstimatesE'/>
<use f='halide/build/include/Halide.h' l='13978' c='_ZN6Halide8Internal15LoweredArgumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_8Argument4KindERKNS_4TypeEhRKNS_17ArgumentEstimatesE'/>
<use f='halide/build/include/Halide.h' l='22734'/>
<use f='halide/build/include/Halide.h' l='22747' c='_ZN6Halide16OutputImageParamC1ERKNS_8Internal9ParameterENS_8Argument4KindENS_4FuncE'/>
<doc f='halide/build/include/Halide.h' l='6535'>/** An argument is either a primitive type (for parameters), or a
     * buffer pointer.
     *
     * If kind == InputScalar, then type fully encodes the expected type
     * of the scalar argument.
     *
     * If kind == InputBuffer|OutputBuffer, then type.bytes() should be used
     * to determine* elem_size of the buffer; additionally, type.code *should*
     * reflect the expected interpretation of the buffer data (e.g. float vs int),
     * but there is no runtime enforcement of this at present.
     */</doc>
<use f='halide/python_bindings/src/PyEnums.cpp' l='7' c='_ZN6Halide14PythonBindings12define_enumsERN8pybind117module_E'/>
<def f='halide/src/Argument.h' l='52' ll='56'/>
<use f='halide/src/Argument.h' l='57'/>
<use f='halide/src/Argument.h' l='75' c='_ZN6Halide8ArgumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_4KindERKNS_4TypeEiRKNS_17ArgumentEstimatesE'/>
<use f='halide/src/Module.h' l='88' c='_ZN6Halide8Internal15LoweredArgumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_8Argument4KindERKNS_4TypeEhRKNS_17ArgumentEstimatesE'/>
<use f='halide/src/OutputImageParam.h' l='27'/>
<use f='halide/src/OutputImageParam.h' l='40' c='_ZN6Halide16OutputImageParamC1ERKNS_8Internal9ParameterENS_8Argument4KindENS_4FuncE'/>
<doc f='halide/src/Argument.h' l='41'>/** An argument is either a primitive type (for parameters), or a
     * buffer pointer.
     *
     * If kind == InputScalar, then type fully encodes the expected type
     * of the scalar argument.
     *
     * If kind == InputBuffer|OutputBuffer, then type.bytes() should be used
     * to determine* elem_size of the buffer; additionally, type.code *should*
     * reflect the expected interpretation of the buffer data (e.g. float vs int),
     * but there is no runtime enforcement of this at present.
     */</doc>
<use f='halide/src/Argument.cpp' l='21' c='_ZN6Halide8ArgumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_4KindERKNS_4TypeEiRKNS_17ArgumentEstimatesE'/>
<use f='halide/src/HexagonOffload.cpp' l='804' c='_ZN6Halide8Internal12_GLOBAL__N_116InjectHexagonRpc5visitEPKNS0_3ForE'/>
<use f='halide/src/HexagonOffload.cpp' l='807' c='_ZN6Halide8Internal12_GLOBAL__N_116InjectHexagonRpc5visitEPKNS0_3ForE'/>
<use f='halide/src/OutputImageParam.cpp' l='10' c='_ZN6Halide16OutputImageParamC1ERKNS_8Internal9ParameterENS_8Argument4KindENS_4FuncE'/>
