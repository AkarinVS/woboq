<dec f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='462' type='Offset&lt;const flatbuffers::Table *&gt; flatbuffers::CopyTable(flatbuffers::FlatBufferBuilder &amp; fbb, const reflection::Schema &amp; schema, const reflection::Object &amp; objectdef, const flatbuffers::Table &amp; table, bool use_string_pooling = false)'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='451'>// ------------------------- COPYING -------------------------

// Generic copying of tables from a FlatBuffer into a FlatBuffer builder.
// Can be used to do any kind of merging/selecting you may want to do out
// of existing buffers. Also useful to reconstruct a whole buffer if the
// above resizing functionality has introduced garbage in a buffer you want
// to remove.
// Note: this does not deal with DAGs correctly. If the table passed forms a
// DAG, the copy will be a tree instead (with duplicates). Strings can be
// shared however, by passing true for use_string_pooling.</doc>
<def f='halide/build-apps/flatbuffers/src/reflection.cpp' l='378' ll='499' type='Offset&lt;const flatbuffers::Table *&gt; flatbuffers::CopyTable(flatbuffers::FlatBufferBuilder &amp; fbb, const reflection::Schema &amp; schema, const reflection::Object &amp; objectdef, const flatbuffers::Table &amp; table, bool use_string_pooling = false)'/>
<use f='halide/build-apps/flatbuffers/src/reflection.cpp' l='402' u='c' c='_ZN11flatbuffers9CopyTableERNS_17FlatBufferBuilderERKN10reflection6SchemaERKNS2_6ObjectERKNS_5TableEb'/>
<use f='halide/build-apps/flatbuffers/src/reflection.cpp' l='410' u='c' c='_ZN11flatbuffers9CopyTableERNS_17FlatBufferBuilderERKN10reflection6SchemaERKNS2_6ObjectERKNS_5TableEb'/>
<use f='halide/build-apps/flatbuffers/src/reflection.cpp' l='438' u='c' c='_ZN11flatbuffers9CopyTableERNS_17FlatBufferBuilderERKN10reflection6SchemaERKNS2_6ObjectERKNS_5TableEb'/>
