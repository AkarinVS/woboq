<dec f='halide/halide-install/include/Halide.h' l='8754' type='bool Halide::host_supports_target_device(const Halide::Target &amp; t)'/>
<doc f='halide/halide-install/include/Halide.h' l='8747'>/** This attempts to sniff whether a given Target (and its implied DeviceAPI) is usable on
 * the current host. If it appears to be usable, return true; if not, return false.
 * Note that a return value of true does *not* guarantee that future usage of
 * that device will succeed; it is intended mainly as a simple diagnostic
 * to allow early-exit when a desired device is definitely not usable.
 * Also note that this call is *NOT* threadsafe, as it temporarily redirect various
 * global error-handling hooks in Halide. */</doc>
<dec f='halide/build/include/Halide.h' l='8754' type='bool Halide::host_supports_target_device(const Halide::Target &amp; t)'/>
<doc f='halide/build/include/Halide.h' l='8747'>/** This attempts to sniff whether a given Target (and its implied DeviceAPI) is usable on
 * the current host. If it appears to be usable, return true; if not, return false.
 * Note that a return value of true does *not* guarantee that future usage of
 * that device will succeed; it is intended mainly as a simple diagnostic
 * to allow early-exit when a desired device is definitely not usable.
 * Also note that this call is *NOT* threadsafe, as it temporarily redirect various
 * global error-handling hooks in Halide. */</doc>
<use f='halide/python_bindings/src/PyTarget.cpp' l='66' u='a' c='_ZN6Halide14PythonBindings13define_targetERN8pybind117module_E'/>
<dec f='halide/src/DeviceInterface.h' l='37' type='bool Halide::host_supports_target_device(const Halide::Target &amp; t)'/>
<doc f='halide/src/DeviceInterface.h' l='30'>/** This attempts to sniff whether a given Target (and its implied DeviceAPI) is usable on
 * the current host. If it appears to be usable, return true; if not, return false.
 * Note that a return value of true does *not* guarantee that future usage of
 * that device will succeed; it is intended mainly as a simple diagnostic
 * to allow early-exit when a desired device is definitely not usable.
 * Also note that this call is *NOT* threadsafe, as it temporarily redirect various
 * global error-handling hooks in Halide. */</doc>
<use f='halide/src/CodeGen_PyTorch.cpp' l='318' u='c' c='_ZN6Halide8Internal15CodeGen_PyTorch4testEv'/>
<def f='halide/src/DeviceInterface.cpp' l='35' ll='68' type='bool Halide::host_supports_target_device(const Halide::Target &amp; t)'/>
<use f='halide/tutorial/lesson_12_using_the_gpu.cpp' l='310' u='c' c='_Z15find_gpu_targetv'/>
<use f='halide/tutorial/lesson_19_wrapper_funcs.cpp' l='303' u='c' c='main'/>
