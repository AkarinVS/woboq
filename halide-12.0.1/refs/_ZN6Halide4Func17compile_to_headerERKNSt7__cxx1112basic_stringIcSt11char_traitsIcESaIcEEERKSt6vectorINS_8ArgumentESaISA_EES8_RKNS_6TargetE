<dec f='halide/build/include/Halide.h' l='16797' type='void Halide::Func::compile_to_header(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name = &quot;&quot;, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/build/include/Halide.h' l='16790'>/** Emit a header file with the given filename for this
     * function. The header will define a function with the type
     * signature given by the second argument, and a name given by the
     * third. The name defaults to the same name as this halide
     * function. You don&apos;t actually have to have defined this function
     * yet to call this. You probably don&apos;t want to use this directly;
     * call compile_to_static_library or compile_to_file instead. */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='225' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='917' type='void Halide::Func::compile_to_header(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name = &quot;&quot;, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/src/Func.h' l='910'>/** Emit a header file with the given filename for this
     * function. The header will define a function with the type
     * signature given by the second argument, and a name given by the
     * third. The name defaults to the same name as this halide
     * function. You don&apos;t actually have to have defined this function
     * yet to call this. You probably don&apos;t want to use this directly;
     * call compile_to_static_library or compile_to_file instead. */</doc>
<def f='halide/src/Func.cpp' l='3204' ll='3207' type='void Halide::Func::compile_to_header(const std::string &amp; filename, const vector&lt;Halide::Argument&gt; &amp; args, const std::string &amp; fn_name = &quot;&quot;, const Halide::Target &amp; target = get_target_from_environment())'/>
