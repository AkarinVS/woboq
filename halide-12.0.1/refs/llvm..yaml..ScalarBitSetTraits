<def f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='122' ll='125'/>
<use f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='339'/>
<use f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='970' c='_ZN4llvm4yaml7yamlizeERNS0_2IOERT_bRNS0_12EmptyContextE'/>
<def f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='1277' ll='1290'/>
<use f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='1287' c='_ZN4llvm4yaml18ScalarBitSetTraitsINS_7support6detail31packed_endian_specific_integralIT_XT0_EXT1_EXsr13PickAlignmentIS5_XT1_EEE5valueEEENSt9enable_ifI9848273'/>
<doc f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='111'>/// This class should be specialized by any integer type that is a union
/// of bit values and the YAML representation is a flow sequence of
/// strings.  For example:
///
///      struct ScalarBitSetTraits&lt;MyFlags&gt; {
///        static void bitset(IO &amp;io, MyFlags &amp;value) {
///          io.bitSetCase(value, &quot;big&quot;,   flagBig);
///          io.bitSetCase(value, &quot;flat&quot;,  flagFlat);
///          io.bitSetCase(value, &quot;round&quot;, flagRound);
///        }
///      };</doc>
<fun r='_ZN4llvm4yaml18ScalarBitSetTraitsINS_7support6detail31packed_endian_specific_integralIT_XT0_EXT1_EXsr13PickAlignmentIS5_XT1_EEE5valueEEENSt9enable_ifI9848273'/>
