<dec f='halide/halide-install/include/Halide.h' l='18042' type='Halide::Func &amp; Halide::Func::compute_at(const Halide::Func &amp; f, const Halide::Var &amp; var)'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='124' u='c' c='_ZN12_GLOBAL__N_15solveENS_6MatrixIXT_EXT_EEENS0_IXT_EXT0_EEEN6Halide4FuncENS3_3VarEbNS3_6TargetE'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='235' u='c' c='_ZN12_GLOBAL__N_115solve_symmetricENS_6MatrixIXT_EXT_EEENS0_IXT_EXT0_EEEN6Halide4FuncENS3_3VarEbNS3_6TargetE'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='537' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='543' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='556' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='561' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='580' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='686' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='689' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='691' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<doc f='halide/halide-install/include/Halide.h' l='17973'>/** Compute this function as needed for each unique value of the
     * given var for the given calling function f.
     *
     * For example, consider the simple pipeline:
     \code
     Func f, g;
     Var x, y;
     g(x, y) = x*y;
     f(x, y) = g(x, y) + g(x, y+1) + g(x+1, y) + g(x+1, y+1);
     \endcode
     *
     * If we schedule f like so:
     *
     \code
     g.compute_at(f, x);
     \endcode
     *
     * Then the C code equivalent to this pipeline will look like this
     *
     \code

     int f[height][width];
     for (int y = 0; y &lt; height; y++) {
         for (int x = 0; x &lt; width; x++) {
             int g[2][2];
             g[0][0] = x*y;
             g[0][1] = (x+1)*y;
             g[1][0] = x*(y+1);
             g[1][1] = (x+1)*(y+1);
             f[y][x] = g[0][0] + g[1][0] + g[0][1] + g[1][1];
         }
     }

     \endcode
     *
     * The allocation and computation of g is within f&apos;s loop over x,
     * and enough of g is computed to satisfy all that f will need for
     * that iteration. This has excellent locality - values of g are
     * used as soon as they are computed, but it does redundant
     * work. Each value of g ends up getting computed four times. If
     * we instead schedule f like so:
     *
     \code
     g.compute_at(f, y);
     \endcode
     *
     * The equivalent C code is:
     *
     \code
     int f[height][width];
     for (int y = 0; y &lt; height; y++) {
         int g[2][width+1];
         for (int x = 0; x &lt; width; x++) {
             g[0][x] = x*y;
             g[1][x] = x*(y+1);
         }
         for (int x = 0; x &lt; width; x++) {
             f[y][x] = g[0][x] + g[1][x] + g[0][x+1] + g[1][x+1];
         }
     }
     \endcode
     *
     * The allocation and computation of g is within f&apos;s loop over y,
     * and enough of g is computed to satisfy all that f will need for
     * that iteration. This does less redundant work (each point in g
     * ends up being evaluated twice), but the locality is not quite
     * as good, and we have to allocate more temporary memory to store
     * g.
     */</doc>
<use f='halide/apps/bilateral_grid/bilateral_grid_generator.cpp' l='102' u='c' c='_ZN12_GLOBAL__N_113BilateralGrid8generateEv'/>
<use f='halide/apps/bilateral_grid/bilateral_grid_generator.cpp' l='121' u='c' c='_ZN12_GLOBAL__N_113BilateralGrid8generateEv'/>
<use f='halide/apps/bilateral_grid/bilateral_grid_generator.cpp' l='137' u='c' c='_ZN12_GLOBAL__N_113BilateralGrid8generateEv'/>
<use f='halide/apps/blur/halide_blur_generator.cpp' l='53' u='c' c='_ZN12_GLOBAL__N_110HalideBlur8generateEv'/>
<use f='halide/apps/blur/halide_blur_generator.cpp' l='96' u='c' c='_ZN12_GLOBAL__N_110HalideBlur8generateEv'/>
<use f='halide/apps/blur/halide_blur_generator.cpp' l='109' u='c' c='_ZN12_GLOBAL__N_110HalideBlur8generateEv'/>
<use f='halide/apps/camera_pipe/camera_pipe_generator.cpp' l='475' u='c' c='_ZN12_GLOBAL__N_110CameraPipe8generateEv'/>
<use f='halide/apps/camera_pipe/camera_pipe_generator.cpp' l='479' u='c' c='_ZN12_GLOBAL__N_110CameraPipe8generateEv'/>
<use f='halide/apps/camera_pipe/camera_pipe_generator.cpp' l='486' u='c' c='_ZN12_GLOBAL__N_110CameraPipe8generateEv'/>
<use f='halide/apps/camera_pipe/camera_pipe_generator.cpp' l='492' u='c' c='_ZN12_GLOBAL__N_110CameraPipe8generateEv'/>
<use f='halide/apps/camera_pipe/camera_pipe_generator.cpp' l='530' u='c' c='_ZN12_GLOBAL__N_110CameraPipe8generateEv'/>
<use f='halide/apps/camera_pipe/camera_pipe_generator.cpp' l='539' u='c' c='_ZN12_GLOBAL__N_110CameraPipe8generateEv'/>
<use f='halide/apps/camera_pipe/camera_pipe_generator.cpp' l='547' u='c' c='_ZN12_GLOBAL__N_110CameraPipe8generateEv'/>
<use f='halide/apps/camera_pipe/camera_pipe_generator.cpp' l='556' u='c' c='_ZN12_GLOBAL__N_110CameraPipe8generateEv'/>
<use f='halide/apps/conv_layer/conv_layer_generator.cpp' l='97' u='c' c='_ZN12_GLOBAL__N_116ConvolutionLayer8generateEv'/>
<use f='halide/apps/conv_layer/conv_layer_generator.cpp' l='182' u='c' c='_ZN12_GLOBAL__N_116ConvolutionLayer8generateEv'/>
<use f='halide/apps/conv_layer/conv_layer_generator.cpp' l='200' u='c' c='_ZN12_GLOBAL__N_116ConvolutionLayer8generateEv'/>
<use f='halide/apps/depthwise_separable_conv/depthwise_separable_conv_generator.cpp' l='124' u='c' c='_ZN12_GLOBAL__N_129DepthwiseSeparableConvolution8generateEv'/>
<use f='halide/apps/depthwise_separable_conv/depthwise_separable_conv_generator.cpp' l='151' u='c' c='_ZN12_GLOBAL__N_129DepthwiseSeparableConvolution8generateEv'/>
<use f='halide/apps/depthwise_separable_conv/depthwise_separable_conv_generator.cpp' l='160' u='c' c='_ZN12_GLOBAL__N_129DepthwiseSeparableConvolution8generateEv'/>
<use f='halide/apps/depthwise_separable_conv/depthwise_separable_conv_generator.cpp' l='169' u='c' c='_ZN12_GLOBAL__N_129DepthwiseSeparableConvolution8generateEv'/>
<use f='halide/apps/depthwise_separable_conv/depthwise_separable_conv_generator.cpp' l='246' u='c' c='_ZN12_GLOBAL__N_129DepthwiseSeparableConvolution8generateEv'/>
<use f='halide/apps/fft/fft.cpp' l='417' u='c' c='_ZN12_GLOBAL__N_18fft_dim1E5FuncTI11ComplexExprERKSt6vectorIiSaIiEEiiN6Halide4ExprEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS8_6Targe14237183'/>
<use f='halide/apps/fft/fft.cpp' l='535' u='c' c='_Z9fft2d_c2c5FuncTI11ComplexExprESt6vectorIiSaIiEES4_iRKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='537' u='c' c='_Z9fft2d_c2c5FuncTI11ComplexExprESt6vectorIiSaIiEES4_iRKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='540' u='c' c='_Z9fft2d_c2c5FuncTI11ComplexExprESt6vectorIiSaIiEES4_iRKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='545' u='c' c='_Z9fft2d_c2c5FuncTI11ComplexExprESt6vectorIiSaIiEES4_iRKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='548' u='c' c='_Z9fft2d_c2c5FuncTI11ComplexExprESt6vectorIiSaIiEES4_iRKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='711' u='c' c='_Z9fft2d_r2cN6Halide4FuncERKSt6vectorIiSaIiEES5_RKNS_6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='835' u='c' c='_Z9fft2d_r2cN6Halide4FuncERKSt6vectorIiSaIiEES5_RKNS_6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='839' u='c' c='_Z9fft2d_r2cN6Halide4FuncERKSt6vectorIiSaIiEES5_RKNS_6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='844' u='c' c='_Z9fft2d_r2cN6Halide4FuncERKSt6vectorIiSaIiEES5_RKNS_6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='850' u='c' c='_Z9fft2d_r2cN6Halide4FuncERKSt6vectorIiSaIiEES5_RKNS_6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='855' u='c' c='_Z9fft2d_r2cN6Halide4FuncERKSt6vectorIiSaIiEES5_RKNS_6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='928' u='c' c='_Z9fft2d_c2r5FuncTI11ComplexExprESt6vectorIiSaIiEES4_RKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='1036' u='c' c='_Z9fft2d_c2r5FuncTI11ComplexExprESt6vectorIiSaIiEES4_RKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='1038' u='c' c='_Z9fft2d_c2r5FuncTI11ComplexExprESt6vectorIiSaIiEES4_RKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='1045' u='c' c='_Z9fft2d_c2r5FuncTI11ComplexExprESt6vectorIiSaIiEES4_RKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='1048' u='c' c='_Z9fft2d_c2r5FuncTI11ComplexExprESt6vectorIiSaIiEES4_RKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='1056' u='c' c='_Z9fft2d_c2r5FuncTI11ComplexExprESt6vectorIiSaIiEES4_RKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft_generator.cpp' l='155' u='c' c='_ZN12_GLOBAL__N_112FFTGenerator8scheduleEv'/>
<use f='halide/apps/fft/fft_generator.cpp' l='158' u='c' c='_ZN12_GLOBAL__N_112FFTGenerator8scheduleEv'/>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='224' u='c' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='253' u='c' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='271' u='c' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='295' u='c' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='173' u='c' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='193' u='c' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='200' u='c' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='206' u='c' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='135' u='c' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='155' u='c' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='183' u='c' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='190' u='c' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/hannk/halide/normalizations_generator.cpp' l='45' u='c' c='_ZN5hannk15L2Normalization8generateEv'/>
<use f='halide/apps/hannk/halide/normalizations_generator.cpp' l='47' u='c' c='_ZN5hannk15L2Normalization8generateEv'/>
<use f='halide/apps/hannk/halide/normalizations_generator.cpp' l='115' u='c' c='_ZN5hannk7Softmax8generateEv'/>
<use f='halide/apps/hannk/halide/normalizations_generator.cpp' l='120' u='c' c='_ZN5hannk7Softmax8generateEv'/>
<use f='halide/apps/hannk/halide/normalizations_generator.cpp' l='125' u='c' c='_ZN5hannk7Softmax8generateEv'/>
<use f='halide/apps/hannk/halide/reductions_generator.cpp' l='45' u='c' c='_ZN5hannk4Mean8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='81' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='87' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='91' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='94' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='99' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='104' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='115' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='118' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/harris/harris_generator.cpp' l='121' u='c' c='_ZN12_GLOBAL__N_16Harris8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='91' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='123' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='140' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='160' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='161' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='162' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='165' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='181' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='188' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/iir_blur/iir_blur_generator.cpp' l='51' u='c' c='_Z19blur_cols_transposeN6Halide4FuncENS_4ExprES1_bNS_6TargetE'/>
<use f='halide/apps/iir_blur/iir_blur_generator.cpp' l='79' u='c' c='_Z19blur_cols_transposeN6Halide4FuncENS_4ExprES1_bNS_6TargetE'/>
<use f='halide/apps/iir_blur/iir_blur_generator.cpp' l='108' u='c' c='_Z19blur_cols_transposeN6Halide4FuncENS_4ExprES1_bNS_6TargetE'/>
<use f='halide/apps/interpolate/interpolate_generator.cpp' l='116' u='c' c='_ZN12_GLOBAL__N_111Interpolate8generateEv'/>
<use f='halide/apps/interpolate/interpolate_generator.cpp' l='125' u='c' c='_ZN12_GLOBAL__N_111Interpolate8generateEv'/>
<use f='halide/apps/interpolate/interpolate_generator.cpp' l='134' u='c' c='_ZN12_GLOBAL__N_111Interpolate8generateEv'/>
<use f='halide/apps/interpolate/interpolate_generator.cpp' l='165' u='c' c='_ZN12_GLOBAL__N_111Interpolate8generateEv'/>
<use f='halide/apps/interpolate/interpolate_generator.cpp' l='184' u='c' c='_ZN12_GLOBAL__N_111Interpolate8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='180' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='181' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='206' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='208' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='209' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='219' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='221' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='226' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='229' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='254' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='263' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='265' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='271' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='272' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='88' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='96' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='100' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='104' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='157' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l3_generators.cpp' l='134' u='c' c='_ZN12_GLOBAL__N_113GEMMGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l3_generators.cpp' l='144' u='c' c='_ZN12_GLOBAL__N_113GEMMGenerator8generateEv'/>
<use f='halide/apps/local_laplacian/local_laplacian_generator.cpp' l='150' u='c' c='_ZN12_GLOBAL__N_114LocalLaplacian8generateEv'/>
<use f='halide/apps/local_laplacian/local_laplacian_generator.cpp' l='154' u='c' c='_ZN12_GLOBAL__N_114LocalLaplacian8generateEv'/>
<use f='halide/apps/max_filter/max_filter_generator.cpp' l='107' u='c' c='_ZN12_GLOBAL__N_13Max8generateEv'/>
<use f='halide/apps/max_filter/max_filter_generator.cpp' l='112' u='c' c='_ZN12_GLOBAL__N_13Max8generateEv'/>
<use f='halide/apps/nl_means/nl_means_generator.cpp' l='120' u='c' c='_ZN12_GLOBAL__N_113NonLocalMeans8generateEv'/>
<use f='halide/apps/nl_means/nl_means_generator.cpp' l='124' u='c' c='_ZN12_GLOBAL__N_113NonLocalMeans8generateEv'/>
<use f='halide/apps/nl_means/nl_means_generator.cpp' l='138' u='c' c='_ZN12_GLOBAL__N_113NonLocalMeans8generateEv'/>
<use f='halide/apps/nl_means/nl_means_generator.cpp' l='141' u='c' c='_ZN12_GLOBAL__N_113NonLocalMeans8generateEv'/>
<use f='halide/apps/nl_means/nl_means_generator.cpp' l='143' u='c' c='_ZN12_GLOBAL__N_113NonLocalMeans8generateEv'/>
<use f='halide/apps/nl_means/nl_means_generator.cpp' l='152' u='c' c='_ZN12_GLOBAL__N_113NonLocalMeans8generateEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='150' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='153' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='161' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='164' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='167' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='177' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='181' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='189' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='192' u='c' c='_ZN6Resize8scheduleEv'/>
<use f='halide/apps/stencil_chain/stencil_chain_generator.cpp' l='80' u='c' c='_ZN12_GLOBAL__N_112StencilChain8generateEv'/>
<use f='halide/apps/stencil_chain/stencil_chain_generator.cpp' l='98' u='c' c='_ZN12_GLOBAL__N_112StencilChain8generateEv'/>
<use f='halide/apps/stencil_chain/stencil_chain_generator.cpp' l='140' u='c' c='_ZN12_GLOBAL__N_112StencilChain8generateEv'/>
<use f='halide/apps/unsharp/unsharp_generator.cpp' l='80' u='c' c='_ZN12_GLOBAL__N_17Unsharp8generateEv'/>
<use f='halide/apps/unsharp/unsharp_generator.cpp' l='81' u='c' c='_ZN12_GLOBAL__N_17Unsharp8generateEv'/>
<use f='halide/apps/unsharp/unsharp_generator.cpp' l='86' u='c' c='_ZN12_GLOBAL__N_17Unsharp8generateEv'/>
<use f='halide/apps/unsharp/unsharp_generator.cpp' l='98' u='c' c='_ZN12_GLOBAL__N_17Unsharp8generateEv'/>
<use f='halide/apps/unsharp/unsharp_generator.cpp' l='101' u='c' c='_ZN12_GLOBAL__N_17Unsharp8generateEv'/>
<use f='halide/apps/unsharp/unsharp_generator.cpp' l='104' u='c' c='_ZN12_GLOBAL__N_17Unsharp8generateEv'/>
<dec f='halide/build/include/Halide.h' l='18042' type='Halide::Func &amp; Halide::Func::compute_at(const Halide::Func &amp; f, const Halide::Var &amp; var)'/>
<doc f='halide/build/include/Halide.h' l='17973'>/** Compute this function as needed for each unique value of the
     * given var for the given calling function f.
     *
     * For example, consider the simple pipeline:
     \code
     Func f, g;
     Var x, y;
     g(x, y) = x*y;
     f(x, y) = g(x, y) + g(x, y+1) + g(x+1, y) + g(x+1, y+1);
     \endcode
     *
     * If we schedule f like so:
     *
     \code
     g.compute_at(f, x);
     \endcode
     *
     * Then the C code equivalent to this pipeline will look like this
     *
     \code

     int f[height][width];
     for (int y = 0; y &lt; height; y++) {
         for (int x = 0; x &lt; width; x++) {
             int g[2][2];
             g[0][0] = x*y;
             g[0][1] = (x+1)*y;
             g[1][0] = x*(y+1);
             g[1][1] = (x+1)*(y+1);
             f[y][x] = g[0][0] + g[1][0] + g[0][1] + g[1][1];
         }
     }

     \endcode
     *
     * The allocation and computation of g is within f&apos;s loop over x,
     * and enough of g is computed to satisfy all that f will need for
     * that iteration. This has excellent locality - values of g are
     * used as soon as they are computed, but it does redundant
     * work. Each value of g ends up getting computed four times. If
     * we instead schedule f like so:
     *
     \code
     g.compute_at(f, y);
     \endcode
     *
     * The equivalent C code is:
     *
     \code
     int f[height][width];
     for (int y = 0; y &lt; height; y++) {
         int g[2][width+1];
         for (int x = 0; x &lt; width; x++) {
             g[0][x] = x*y;
             g[1][x] = x*(y+1);
         }
         for (int x = 0; x &lt; width; x++) {
             f[y][x] = g[0][x] + g[1][x] + g[0][x+1] + g[1][x+1];
         }
     }
     \endcode
     *
     * The allocation and computation of g is within f&apos;s loop over y,
     * and enough of g is computed to satisfy all that f will need for
     * that iteration. This does less redundant work (each point in g
     * ends up being evaluated twice), but the locality is not quite
     * as good, and we have to allocate more temporary memory to store
     * g.
     */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='198' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='2162' type='Halide::Func &amp; Halide::Func::compute_at(const Halide::Func &amp; f, const Halide::Var &amp; var)'/>
<doc f='halide/src/Func.h' l='2093'>/** Compute this function as needed for each unique value of the
     * given var for the given calling function f.
     *
     * For example, consider the simple pipeline:
     \code
     Func f, g;
     Var x, y;
     g(x, y) = x*y;
     f(x, y) = g(x, y) + g(x, y+1) + g(x+1, y) + g(x+1, y+1);
     \endcode
     *
     * If we schedule f like so:
     *
     \code
     g.compute_at(f, x);
     \endcode
     *
     * Then the C code equivalent to this pipeline will look like this
     *
     \code

     int f[height][width];
     for (int y = 0; y &lt; height; y++) {
         for (int x = 0; x &lt; width; x++) {
             int g[2][2];
             g[0][0] = x*y;
             g[0][1] = (x+1)*y;
             g[1][0] = x*(y+1);
             g[1][1] = (x+1)*(y+1);
             f[y][x] = g[0][0] + g[1][0] + g[0][1] + g[1][1];
         }
     }

     \endcode
     *
     * The allocation and computation of g is within f&apos;s loop over x,
     * and enough of g is computed to satisfy all that f will need for
     * that iteration. This has excellent locality - values of g are
     * used as soon as they are computed, but it does redundant
     * work. Each value of g ends up getting computed four times. If
     * we instead schedule f like so:
     *
     \code
     g.compute_at(f, y);
     \endcode
     *
     * The equivalent C code is:
     *
     \code
     int f[height][width];
     for (int y = 0; y &lt; height; y++) {
         int g[2][width+1];
         for (int x = 0; x &lt; width; x++) {
             g[0][x] = x*y;
             g[1][x] = x*(y+1);
         }
         for (int x = 0; x &lt; width; x++) {
             f[y][x] = g[0][x] + g[1][x] + g[0][x+1] + g[1][x+1];
         }
     }
     \endcode
     *
     * The allocation and computation of g is within f&apos;s loop over y,
     * and enough of g is computed to satisfy all that f will need for
     * that iteration. This does less redundant work (each point in g
     * ends up being evaluated twice), but the locality is not quite
     * as good, and we have to allocate more temporary memory to store
     * g.
     */</doc>
<def f='halide/src/Func.cpp' l='2640' ll='2642' type='Halide::Func &amp; Halide::Func::compute_at(const Halide::Func &amp; f, const Halide::Var &amp; var)'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='190' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='282' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='292' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='336' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='353' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='437' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='733' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='811' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_schedule.h' l='832' u='c' c='_Z22do_cost_model_scheduleN6Halide8PipelineE'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_generator.cpp' l='505' u='c' c='_ZN9CostModel8generateEv'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_generator.cpp' l='509' u='c' c='_ZN9CostModel8generateEv'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_generator.cpp' l='518' u='c' c='_ZN9CostModel8generateEv'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_generator.cpp' l='544' u='c' c='_ZN9CostModel8generateEv'/>
<use f='halide/src/autoschedulers/adams2019/included_schedule_file.schedule.h' l='56' u='c' c='_Z37apply_schedule_included_schedule_fileN6Halide8PipelineENS_6TargetE'/>
<use f='halide/src/autoschedulers/mullapudi2016/AutoSchedule.cpp' l='2825' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111Partitioner27generate_group_cpu_scheduleERKNS2_5GroupERKNS_6TargetERKSt3mapINS1_6FStageES9_INSt7__cxx1112basic_stri4682444'/>
<use f='halide/test/generator/async_parallel_generator.cpp' l='29' u='c' c='_ZN13AsyncParallel8generateEv'/>
<use f='halide/test/generator/async_parallel_generator.cpp' l='30' u='c' c='_ZN13AsyncParallel8generateEv'/>
<use f='halide/test/generator/async_parallel_generator.cpp' l='31' u='c' c='_ZN13AsyncParallel8generateEv'/>
<use f='halide/test/generator/async_parallel_generator.cpp' l='32' u='c' c='_ZN13AsyncParallel8generateEv'/>
<use f='halide/test/generator/buffer_copy_generator.cpp' l='40' u='c' c='_ZN10BufferCopy8scheduleEv'/>
<use f='halide/test/generator/buffer_copy_generator.cpp' l='44' u='c' c='_ZN10BufferCopy8scheduleEv'/>
<use f='halide/test/generator/buffer_copy_generator.cpp' l='49' u='c' c='_ZN10BufferCopy8scheduleEv'/>
<use f='halide/test/generator/buffer_copy_generator.cpp' l='52' u='c' c='_ZN10BufferCopy8scheduleEv'/>
<use f='halide/test/generator/buffer_copy_generator.cpp' l='55' u='c' c='_ZN10BufferCopy8scheduleEv'/>
<use f='halide/test/generator/buffer_copy_generator.cpp' l='58' u='c' c='_ZN10BufferCopy8scheduleEv'/>
<use f='halide/test/generator/buffer_copy_generator.cpp' l='61' u='c' c='_ZN10BufferCopy8scheduleEv'/>
<use f='halide/test/generator/extern_output_generator.cpp' l='30' u='c' c='_ZN12_GLOBAL__N_112ExternOutput8scheduleEv'/>
<use f='halide/test/generator/mandelbrot_generator.cpp' l='83' u='c' c='_ZN12_GLOBAL__N_110Mandelbrot8generateEv'/>
<use f='halide/test/generator/memory_profiler_mandelbrot_generator.cpp' l='86' u='c' c='_ZN12_GLOBAL__N_110Mandelbrot8generateEv'/>
<use f='halide/test/generator/nested_externs_generator.cpp' l='91' u='c' c='_ZN12_GLOBAL__N_117NestedExternsRoot8scheduleEv'/>
<use f='halide/test/generator/tiled_blur_generator.cpp' l='44' u='c' c='_ZN12_GLOBAL__N_19TiledBlur8scheduleEv'/>
<use f='halide/test/generator/tiled_blur_generator.cpp' l='45' u='c' c='_ZN12_GLOBAL__N_19TiledBlur8scheduleEv'/>
<use f='halide/tutorial/lesson_08_scheduling_2.cpp' l='200' u='c' c='main'/>
<use f='halide/tutorial/lesson_08_scheduling_2.cpp' l='282' u='c' c='main'/>
<use f='halide/tutorial/lesson_08_scheduling_2.cpp' l='392' u='c' c='main'/>
<use f='halide/tutorial/lesson_08_scheduling_2.cpp' l='486' u='c' c='main'/>
<use f='halide/tutorial/lesson_08_scheduling_2.cpp' l='580' u='c' c='main'/>
<use f='halide/tutorial/lesson_09_update_definitions.cpp' l='384' u='c' c='main'/>
<use f='halide/tutorial/lesson_09_update_definitions.cpp' l='428' u='c' c='main'/>
<use f='halide/tutorial/lesson_09_update_definitions.cpp' l='479' u='c' c='main'/>
<use f='halide/tutorial/lesson_09_update_definitions.cpp' l='545' u='c' c='main'/>
<use f='halide/tutorial/lesson_09_update_definitions.cpp' l='546' u='c' c='main'/>
<use f='halide/tutorial/lesson_09_update_definitions.cpp' l='784' u='c' c='main'/>
<use f='halide/tutorial/lesson_12_using_the_gpu.cpp' l='92' u='c' c='_ZN10MyPipeline16schedule_for_cpuEv'/>
<use f='halide/tutorial/lesson_12_using_the_gpu.cpp' l='101' u='c' c='_ZN10MyPipeline16schedule_for_cpuEv'/>
<use f='halide/tutorial/lesson_12_using_the_gpu.cpp' l='178' u='c' c='_ZN10MyPipeline16schedule_for_gpuEv'/>
<use f='halide/tutorial/lesson_15_generators.cpp' l='157' u='c' c='_ZN17MySecondGenerator8generateEv'/>
<use f='halide/tutorial/lesson_19_wrapper_funcs.cpp' l='146' u='c' c='main'/>
<use f='halide/tutorial/lesson_19_wrapper_funcs.cpp' l='147' u='c' c='main'/>
<use f='halide/tutorial/lesson_19_wrapper_funcs.cpp' l='187' u='c' c='main'/>
<use f='halide/tutorial/lesson_19_wrapper_funcs.cpp' l='188' u='c' c='main'/>
<use f='halide/tutorial/lesson_19_wrapper_funcs.cpp' l='250' u='c' c='main'/>
<use f='halide/tutorial/lesson_19_wrapper_funcs.cpp' l='285' u='c' c='main'/>
<use f='halide/tutorial/lesson_19_wrapper_funcs.cpp' l='380' u='c' c='main'/>
