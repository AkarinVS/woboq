<dec f='halide/build/include/Halide.h' l='14920' type='void Halide::Pipeline::compile_to_assembly(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/build/include/Halide.h' l='14915'>/** Statically compile a pipeline to text assembly equivalent to
     * the object file generated by compile_to_object. This is useful
     * for checking what Halide is producing without having to
     * disassemble anything, or if you need to feed the assembly into
     * some custom toolchain to produce an object file. */</doc>
<use f='halide/python_bindings/src/PyPipeline.cpp' l='75' u='a' c='_ZN6Halide14PythonBindings15define_pipelineERN8pybind117module_E'/>
<dec f='halide/src/Pipeline.h' l='264' type='void Halide::Pipeline::compile_to_assembly(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/src/Pipeline.h' l='259'>/** Statically compile a pipeline to text assembly equivalent to
     * the object file generated by compile_to_object. This is useful
     * for checking what Halide is producing without having to
     * disassemble anything, or if you need to feed the assembly into
     * some custom toolchain to produce an object file. */</doc>
<use f='halide/src/Func.cpp' l='3254' u='c' c='_ZN6Halide4Func19compile_to_assemblyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EES8_RKNS_6TargetE'/>
<use f='halide/src/Func.cpp' l='3258' u='c' c='_ZN6Halide4Func19compile_to_assemblyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EERKNS_6TargetE'/>
<def f='halide/src/Pipeline.cpp' l='298' ll='304' type='void Halide::Pipeline::compile_to_assembly(const std::string &amp; filename, const vector&lt;Halide::Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
