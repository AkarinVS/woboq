<dec f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU.h' l='116' type='void Eigen::SparseLU::analyzePattern(const Eigen::SparseLU::MatrixType &amp; matrix)'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU.h' l='127' u='c' c='_ZN5Eigen8SparseLU7computeERKT_'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU.h' l='413' ll='475' type='void Eigen::SparseLU::analyzePattern(const Eigen::SparseLU::MatrixType &amp; mat)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU.h' l='403'>/** 
  * Compute the column permutation to minimize the fill-in
  * 
  *  - Apply this permutation to the input matrix - 
  * 
  *  - Compute the column elimination tree on the permuted matrix 
  * 
  *  - Postorder the elimination tree and the column permutation
  * 
  */</doc>
