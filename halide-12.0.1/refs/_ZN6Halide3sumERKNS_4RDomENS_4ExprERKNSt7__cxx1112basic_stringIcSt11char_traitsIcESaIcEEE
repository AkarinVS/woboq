<dec f='halide/build/include/Halide.h' l='27045' type='Halide::Expr Halide::sum(const Halide::RDom &amp; , Halide::Expr , const std::string &amp; s = &quot;sum&quot;)'/>
<doc f='halide/build/include/Halide.h' l='27035'>/** Variants of the inline reduction in which the RDom is stated
 * explicitly. The expression can refer to multiple RDoms, and only
 * the inner one is captured by the reduction. This allows you to
 * write expressions like:
 \code
 RDom r1(0, 10), r2(0, 10), r3(0, 10);
 Expr e = minimum(r1, product(r2, sum(r3, r1 + r2 + r3)));
 \endcode
*/
// @{</doc>
<use f='halide/python_bindings/src/PyInlineReductions.cpp' l='11' u='a' c='_ZN6Halide14PythonBindings24define_inline_reductionsERN8pybind117module_E'/>
<dec f='halide/src/InlineReductions.h' l='57' type='Halide::Expr Halide::sum(const Halide::RDom &amp; , Halide::Expr , const std::string &amp; s = &quot;sum&quot;)'/>
<doc f='halide/src/InlineReductions.h' l='47'>/** Variants of the inline reduction in which the RDom is stated
 * explicitly. The expression can refer to multiple RDoms, and only
 * the inner one is captured by the reduction. This allows you to
 * write expressions like:
 \code
 RDom r1(0, 10), r2(0, 10), r3(0, 10);
 Expr e = minimum(r1, product(r2, sum(r3, r1 + r2 + r3)));
 \endcode
*/
// @{</doc>
<def f='halide/src/InlineReductions.cpp' l='119' ll='121' type='Halide::Expr Halide::sum(const Halide::RDom &amp; r, Halide::Expr e, const std::string &amp; name = &quot;sum&quot;)'/>
