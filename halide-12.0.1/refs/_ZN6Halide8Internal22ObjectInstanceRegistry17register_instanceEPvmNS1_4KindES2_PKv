<dec f='halide/build/include/Halide.h' l='23169' type='static void Halide::Internal::ObjectInstanceRegistry::register_instance(void * this_ptr, size_t size, Halide::Internal::ObjectInstanceRegistry::Kind kind, void * subject_ptr, const void * introspection_helper)'/>
<doc f='halide/build/include/Halide.h' l='23148'>/** Add an instance to the registry. The size may be 0 for Param Kinds,
     * but not for Generator. subject_ptr is the value actually associated
     * with this instance; it is usually (but not necessarily) the same
     * as this_ptr. Assert if this_ptr is already registered.
     *
     * If &apos;this&apos; is directly heap allocated (not a member of a
     * heap-allocated object) and you want the introspection subsystem
     * to know about it and its members, set the introspection_helper
     * argument to a pointer to a global variable with the same true
     * type as &apos;this&apos;. For example:
     *
     * MyObject *obj = new MyObject;
     * static MyObject *introspection_helper = nullptr;
     * register_instance(obj, sizeof(MyObject), kind, obj, &amp;introspection_helper);
     *
     * I.e. introspection_helper should be a pointer to a pointer to
     * an object instance. The inner pointer can be null. The
     * introspection subsystem will then assume this new object is of
     * the matching type, which will help its members deduce their
     * names on construction.
     */</doc>
<dec f='halide/src/ObjectInstanceRegistry.h' l='54' type='static void Halide::Internal::ObjectInstanceRegistry::register_instance(void * this_ptr, size_t size, Halide::Internal::ObjectInstanceRegistry::Kind kind, void * subject_ptr, const void * introspection_helper)'/>
<use f='halide/src/Generator.cpp' l='1057' u='c' c='_ZN6Halide8Internal18GeneratorParamBaseC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='halide/src/Generator.cpp' l='1148' u='c' c='_ZN6Halide8Internal13GeneratorBaseC1EmPKv'/>
<use f='halide/src/Generator.cpp' l='1885' u='c' c='_ZN6Halide8Internal18GeneratorInputBaseC1EmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_6IOKindERKSt6vectorINS_4TypeESaISC_EEi'/>
<use f='halide/src/Generator.cpp' l='2023' u='c' c='_ZN6Halide8Internal19GeneratorOutputBaseC1EmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_6IOKindERKSt6vectorINS_4TypeESaISC_EEi'/>
<doc f='halide/src/ObjectInstanceRegistry.h' l='33'>/** Add an instance to the registry. The size may be 0 for Param Kinds,
     * but not for Generator. subject_ptr is the value actually associated
     * with this instance; it is usually (but not necessarily) the same
     * as this_ptr. Assert if this_ptr is already registered.
     *
     * If &apos;this&apos; is directly heap allocated (not a member of a
     * heap-allocated object) and you want the introspection subsystem
     * to know about it and its members, set the introspection_helper
     * argument to a pointer to a global variable with the same true
     * type as &apos;this&apos;. For example:
     *
     * MyObject *obj = new MyObject;
     * static MyObject *introspection_helper = nullptr;
     * register_instance(obj, sizeof(MyObject), kind, obj, &amp;introspection_helper);
     *
     * I.e. introspection_helper should be a pointer to a pointer to
     * an object instance. The inner pointer can be null. The
     * introspection subsystem will then assume this new object is of
     * the matching type, which will help its members deduce their
     * names on construction.
     */</doc>
<def f='halide/src/ObjectInstanceRegistry.cpp' l='15' ll='27' type='static void Halide::Internal::ObjectInstanceRegistry::register_instance(void * this_ptr, size_t size, Halide::Internal::ObjectInstanceRegistry::Kind kind, void * subject_ptr, const void * introspection_helper)'/>
<doc f='halide/src/ObjectInstanceRegistry.cpp' l='14'>/* static */</doc>
