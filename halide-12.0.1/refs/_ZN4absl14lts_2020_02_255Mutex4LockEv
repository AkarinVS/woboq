<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='168' type='void absl::lts_2020_02_25::Mutex::Lock()'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='261' u='c' c='_ZN4absl14lts_2020_02_255Mutex10WriterLockEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='542' u='c' c='_ZN4absl14lts_2020_02_259MutexLockC1EPNS0_5MutexE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='864' u='c' c='_ZN4absl14lts_2020_02_2514MutexLockMaybeC1EPNS0_5MutexE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='887' u='c' c='_ZN4absl14lts_2020_02_2519ReleasableMutexLockC1EPNS0_5MutexE'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='164'>// Mutex::Lock()
  //
  // Blocks the calling thread, if necessary, until this `Mutex` is free, and
  // then acquires it exclusively. (This lock is also known as a &quot;write lock.&quot;)</doc>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='66' u='c' c='_ZN4absl14lts_2020_02_2514flags_internal12_GLOBAL__N_111MutexRelockD1Ev'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/registry.cc' l='65' u='c' c='_ZN4absl14lts_2020_02_2514flags_internal12FlagRegistry4LockEv'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1458' ll='1474' type='void absl::lts_2020_02_25::Mutex::Lock()'/>
