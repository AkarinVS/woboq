<def f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='84' ll='86'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/AssignEvaluator.h' l='820' c='_ZN5Eigen8internal15call_assignmentERT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingIS3_EE5valueEPvE4typeE'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/AssignEvaluator.h' l='828' c='_ZN5Eigen8internal15call_assignmentERT_RKT0_RKT1_NS0_9enable_ifIXntsr25evaluator_assume_aliasingIS3_EE5valueEPvE4typeE'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='40' ll='46'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='88' ll='91'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='204' ll='208'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='210' ll='214'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='38'>// Catch &quot;scalar * ( A * B )&quot; and transform it to &quot;(A*scalar) * B&quot;
// TODO we should apply that rule only if that&apos;s really helpful</doc>
<doc f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='200'>//----------------------------------------
// Catch &quot;Dense ?= xpr + Product&lt;&gt;&quot; expression to save one temporary
// FIXME we could probably enable these rules for any product, i.e., not only Dense and DefaultProduct</doc>
<smbr r='Eigen::internal::evaluator_assume_aliasing::value' t='const bool'/>
<smbr r='Eigen::internal::evaluator_assume_aliasing{CwiseBinaryOp{scalar_product_op{type-parameter-0-2,type-parameter-0-3},constCwiseNullaryOp{scalar_constant_6678159' t='const bool'/>
<smbr r='Eigen::internal::evaluator_assume_aliasing{Product{type-parameter-0-0,type-parameter-0-1,0},typenameevaluator_traits{Product{type-parameter-0-0,type-p12685958' t='const bool'/>
<smbr r='Eigen::internal::evaluator_assume_aliasing{CwiseBinaryOp{scalar_sum_op{typenametype-parameter-0-0::Scalar,typenameProduct{type-parameter-0-1,type-para1184014' t='const bool'/>
<smbr r='Eigen::internal::evaluator_assume_aliasing{CwiseBinaryOp{scalar_difference_op{typenametype-parameter-0-0::Scalar,typenameProduct{type-parameter-0-1,ty8866028' t='const bool'/>
