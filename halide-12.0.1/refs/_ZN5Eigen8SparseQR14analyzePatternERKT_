<use f='halide/build-apps/eigen/Eigen/src/SparseQR/SparseQR.h' l='129' u='c' c='_ZN5Eigen8SparseQR7computeERKT_'/>
<dec f='halide/build-apps/eigen/Eigen/src/SparseQR/SparseQR.h' l='132' type='void Eigen::SparseQR::analyzePattern(const Eigen::SparseQR::MatrixType &amp; mat)'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseQR/SparseQR.h' l='319' ll='351' type='void Eigen::SparseQR::analyzePattern(const Eigen::SparseQR::MatrixType &amp; mat)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseQR/SparseQR.h' l='310'>/** \brief Preprocessing step of a QR factorization 
  * 
  * \warning The matrix \a mat must be in compressed mode (see SparseMatrix::makeCompressed()).
  * 
  * In this step, the fill-reducing permutation is computed and applied to the columns of A
  * and the column elimination tree is computed as well. Only the sparsity pattern of \a mat is exploited.
  * 
  * \note In this step it is assumed that there is no empty row in the matrix \a mat.
  */</doc>
