<dec f='halide/build-apps/ruy/ruy/prepacked_cache.h' l='127' type='ruy::PrepackedCache::Action ruy::PrepackedCache::Get(const void * src_data, ruy::PEMat * packed_matrix)'/>
<doc f='halide/build-apps/ruy/ruy/prepacked_cache.h' l='109'>// This is the method by which new matrices are cached, and existing cache
  // entries are queried.
  // `src_data` is the source matrix data pointer.
  // `packed_matrix` is a packed matrix structure where all fields have already
  // been populated, except for the `data` and `sums` pointers which have not
  // yet been allocated.
  //
  // This method:
  // 1. Queries the cache for an entry matching the given `src_data` pointer and
  //    the relevant fields of `packed_matrix`, particularly its `layout`.
  // 2. If a matching cache entry does not exist, it is created and inserted
  //    into the cache, and its `data` and `sums` buffers are allocated.
  // 3. The `packed_matrix` has its `data` and `sums` pointers set to point
  //    to the allocated buffers.
  // 4. The cache entry&apos;s timestamp is updated so it&apos;s the most recently used
  //    entry.
  // 5. The return value is Action::kInsertedNewEntry if at step 2 a new
  //    entry was created. Otherwise it is Action::kGotExistingEntry.</doc>
<def f='halide/build-apps/ruy/ruy/prepacked_cache.cc' l='79' ll='102' type='PrepackedCache::Action ruy::PrepackedCache::Get(const void * src_data, ruy::PEMat * packed_matrix)'/>
<use f='halide/build-apps/ruy/ruy/prepare_packed_matrices.cc' l='76' u='c' c='_ZN3ruy21PreparePackedMatricesEPNS_3CtxEPNS_11TrMulParamsE'/>
