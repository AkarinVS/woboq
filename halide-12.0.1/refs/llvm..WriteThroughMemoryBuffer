<inh f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='50' c='llvm::MemoryBuffer'/>
<def f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='220' ll='259'/>
<use f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='241' c='_ZN4llvm24WriteThroughMemoryBuffer7getFileERKNS_5TwineEl'/>
<use f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='245' c='_ZN4llvm24WriteThroughMemoryBuffer12getFileSliceERKNS_5TwineEmm'/>
<size>24</size>
<doc f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='216'>/// This class is an extension of MemoryBuffer, which allows write access to
/// the underlying contents and committing those changes to the original source.
/// It only supports creation methods that are guaranteed to produce a writable
/// buffer.  For example, mapping a file read-only is not supported.</doc>
<fun r='_ZN4llvm24WriteThroughMemoryBufferC1Ev'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer14getBufferStartEv'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer12getBufferEndEv'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer9getBufferEv'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer7getFileERKNS_5TwineEl'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer12getFileSliceERKNS_5TwineEmm'/>
