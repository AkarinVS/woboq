<def f='halide/halide-install/include/Halide.h' l='23998' ll='24000' type='decltype((T)a / b) Halide::operator/(const GeneratorParam&lt;T&gt; &amp; a, const Other &amp; b)'/>
<use f='halide/apps/bilateral_grid/bilateral_grid_generator.cpp' l='23' u='c' c='_ZN12_GLOBAL__N_113BilateralGrid8generateEv'/>
<use f='halide/apps/bilateral_grid/bilateral_grid_generator.cpp' l='23' u='c' c='_ZN12_GLOBAL__N_113BilateralGrid8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='77' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='84' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='146' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='154' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='194' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<def f='halide/build/include/Halide.h' l='23998' ll='24000' type='decltype((T)a / b) Halide::operator/(const GeneratorParam&lt;T&gt; &amp; a, const Other &amp; b)'/>
<def f='halide/src/Generator.h' l='1064' ll='1066' type='decltype((T)a / b) Halide::operator/(const GeneratorParam&lt;T&gt; &amp; a, const Other &amp; b)'/>
