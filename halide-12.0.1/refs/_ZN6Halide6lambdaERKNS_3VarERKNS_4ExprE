<dec f='halide/build/include/Halide.h' l='18467' type='Halide::Func Halide::lambda(const Halide::Var &amp; x, const Halide::Expr &amp; e)'/>
<doc f='halide/build/include/Halide.h' l='18463'>/** Create a 1-D halide function in the first argument that returns
 * the second argument. The function may have more dimensions if the
 * expression contains implicit arguments and the list of Var
 * arguments contains a placeholder (&quot;_&quot;). */</doc>
<use f='halide/python_bindings/src/PyBoundaryConditions.cpp' l='9' u='c' c='_ZN6Halide14PythonBindings12_GLOBAL__N_17to_funcERKNS_6BufferIvEE'/>
<dec f='halide/src/Lambda.h' l='22' type='Halide::Func Halide::lambda(const Halide::Var &amp; x, const Halide::Expr &amp; e)'/>
<doc f='halide/src/Lambda.h' l='18'>/** Create a 1-D halide function in the first argument that returns
 * the second argument. The function may have more dimensions if the
 * expression contains implicit arguments and the list of Var
 * arguments contains a placeholder (&quot;_&quot;). */</doc>
<def f='halide/src/Lambda.cpp' l='11' ll='15' type='Halide::Func Halide::lambda(const Halide::Var &amp; x, const Halide::Expr &amp; e)'/>
