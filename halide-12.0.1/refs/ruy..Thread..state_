<use f='halide/build-apps/ruy/ruy/thread_pool.cc' l='47' u='w' c='_ZN3ruy6ThreadC1EPNS_15BlockingCounterENSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEE'/>
<use f='halide/build-apps/ruy/ruy/thread_pool.cc' l='66' u='m' c='_ZN3ruy6Thread11ChangeStateENS0_5StateEPNS_4TaskE'/>
<use f='halide/build-apps/ruy/ruy/thread_pool.cc' l='98' u='m' c='_ZN3ruy6Thread11ChangeStateENS0_5StateEPNS_4TaskE'/>
<use f='halide/build-apps/ruy/ruy/thread_pool.cc' l='126' u='m' c='_ZN3ruy6Thread14ThreadFuncImplEv'/>
<use f='halide/build-apps/ruy/ruy/thread_pool.cc' l='132' u='m' c='_ZN3ruy6Thread14ThreadFuncImplEv'/>
<dec f='halide/build-apps/ruy/ruy/thread_pool.cc' l='161' type='std::atomic&lt;State&gt;'/>
<offset>832</offset>
<doc f='halide/build-apps/ruy/ruy/thread_pool.cc' l='157'>// The state enum tells if we&apos;re currently working, waiting for work, etc.
  // Its concurrent accesses by the thread and main threads are guarded by
  // state_mutex_, and can thus use memory_order_relaxed. This still needs
  // to be a std::atomic because we use WaitForVariableChange.</doc>
