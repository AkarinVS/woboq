<dec f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='414' type='llvm::ModulePassManager llvm::PassBuilder::buildThinLTODefaultPipeline(llvm::PassBuilder::OptimizationLevel Level, const llvm::ModuleSummaryIndex * ImportSummary)'/>
<doc f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='402'>/// Build an ThinLTO default optimization pipeline to a pass manager.
  ///
  /// This provides a good default optimization pipeline for link-time
  /// optimization and code generation. It is particularly tuned to fit well
  /// when IR coming into the LTO phase was first run through \c
  /// addPreLinkLTODefaultPipeline, and the two coordinate closely.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.</doc>
