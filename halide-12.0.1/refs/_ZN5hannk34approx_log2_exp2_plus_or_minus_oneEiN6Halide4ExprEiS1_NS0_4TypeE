<def f='halide/apps/hannk/halide/common_halide.cpp' l='178' ll='189' type='Halide::Expr hannk::approx_log2_exp2_plus_or_minus_one(int q, Halide::Expr x, int sign, Halide::Expr q_x, Halide::Type type)'/>
<use f='halide/apps/hannk/halide/common_halide.cpp' l='192' u='c' c='_ZN5hannk18approx_log2p1_exp2EiRKN6Halide4ExprES3_RKNS0_4TypeE'/>
<use f='halide/apps/hannk/halide/common_halide.cpp' l='196' u='c' c='_ZN5hannk18approx_log2m1_exp2EiRKN6Halide4ExprES3_RKNS0_4TypeE'/>
<doc f='halide/apps/hannk/halide/common_halide.cpp' l='171'>// TODO: These implementations are pretty slow, at least on x86. However:
// - They are readily implementable on every target
// - Produce identical results on every target
// - Avoid the use of lookup tables, which can be annoying on some targets
// - Negligibly impact overall performance in most realistic workloads

// Approximate log2(2^(x/2^q) +/- 1)*2^q</doc>
