<def f='halide/llvm-install/include/llvm/Support/GenericDomTree.h' l='544' ll='548' type='void llvm::DominatorTreeBase::applyUpdates(ArrayRef&lt;llvm::DominatorTreeBase::UpdateType&gt; Updates)'/>
<doc f='halide/llvm-install/include/llvm/Support/GenericDomTree.h' l='509'>//===--------------------------------------------------------------------===//
  // API to update (Post)DominatorTree information based on modifications to
  // the CFG...

  /// Inform the dominator tree about a sequence of CFG edge insertions and
  /// deletions and perform a batch update on the tree.
  ///
  /// This function should be used when there were multiple CFG updates after
  /// the last dominator tree update. It takes care of performing the updates
  /// in sync with the CFG and optimizes away the redundant operations that
  /// cancel each other.
  /// The functions expects the sequence of updates to be balanced. Eg.:
  ///  - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because
  ///    logically it results in a single insertions.
  ///  - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn&apos;t make
  ///    sense to insert the same edge twice.
  ///
  /// What&apos;s more, the functions assumes that it&apos;s safe to ask every node in the
  /// CFG about its children and inverse children. This implies that deletions
  /// of CFG edges must not delete the CFG nodes before calling this function.
  ///
  /// The applyUpdates function can reorder the updates and remove redundant
  /// ones internally. The batch updater is also able to detect sequences of
  /// zero and exactly one update -- it&apos;s optimized to do less work in these
  /// cases.
  ///
  /// Note that for postdominators it automatically takes care of applying
  /// updates on reverse edges internally (so there&apos;s no need to swap the
  /// From and To pointers when constructing DominatorTree::UpdateType).
  /// The type of updates is the same for DomTreeBase&lt;T&gt; and PostDomTreeBase&lt;T&gt;
  /// with the same template parameter T.
  ///
  /// \param Updates An unordered sequence of updates to perform. The current
  /// CFG and the reverse of these updates provides the pre-view of the CFG.
  ///</doc>
