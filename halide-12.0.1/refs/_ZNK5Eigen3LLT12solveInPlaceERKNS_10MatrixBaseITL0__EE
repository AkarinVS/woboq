<dec f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='158' type='void Eigen::LLT::solveInPlace(const MatrixBase&lt;Derived&gt; &amp; bAndX) const'/>
<def f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='514' ll='522' type='void Eigen::LLT::solveInPlace(const MatrixBase&lt;Derived&gt; &amp; bAndX) const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Cholesky/LLT.h' l='501'>/** \internal use x = llt_object.solve(x);
  *
  * This is the \em in-place version of solve().
  *
  * \param bAndX represents both the right-hand side matrix b and result x.
  *
  * This version avoids a copy when the right hand side matrix b is not needed anymore.
  *
  * \warning The parameter is only marked &apos;const&apos; to make the C++ compiler accept a temporary expression here.
  * This function will const_cast it, so constness isn&apos;t honored here.
  *
  * \sa LLT::solve(), MatrixBase::llt()
  */</doc>
