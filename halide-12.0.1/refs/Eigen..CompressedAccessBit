<def f='halide/build-apps/eigen/Eigen/src/Core/util/Constants.h' l='190' type='const unsigned int'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Block.h' l='53' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='58' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseVector.h' l='43' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='30' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='36' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='48' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='59' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='64' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='76' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseTranspose.h' l='16' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseTranspose.h' l='22' u='r'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/util/Constants.h' l='179'>/** \ingroup flags
  *
  * Means that the underlying coefficients can be accessed through pointers to the sparse (un)compressed storage format,
  * that is, the expression provides:
  * \code
    inline const Scalar* valuePtr() const;
    inline const Index* innerIndexPtr() const;
    inline const Index* outerIndexPtr() const;
    inline const Index* innerNonZeroPtr() const;
    \endcode
  */</doc>
