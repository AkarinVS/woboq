<def f='halide/halide-install/include/Halide.h' l='8810'/>
<def f='halide/halide-install/include/Halide.h' l='8812' ll='8813'/>
<use f='halide/halide-install/include/Halide.h' l='8813'/>
<def f='halide/halide-install/include/Halide.h' l='8815' ll='8818'/>
<use f='halide/halide-install/include/Halide.h' l='8817'/>
<def f='halide/halide-install/include/Halide.h' l='8823' ll='8824'/>
<def f='halide/halide-install/include/Halide.h' l='8826' ll='8827'/>
<use f='halide/halide-install/include/Halide.h' l='9545'/>
<use f='halide/halide-install/include/Halide.h' l='9582'/>
<use f='halide/halide-install/include/Halide.h' l='9658'/>
<use f='halide/halide-install/include/Halide.h' l='9675'/>
<use f='halide/halide-install/include/Halide.h' l='10603'/>
<use f='halide/halide-install/include/Halide.h' l='10630'/>
<size>1</size>
<doc f='halide/halide-install/include/Halide.h' l='8820'>// Floats and doubles are technically implicitly int-convertible, but
// doing so produces a warning we treat as an error, so just disallow
// it here.</doc>
<smbr r='Halide::Runtime::AllInts{type-parameter-0-0,type-parameter-0-1...}::value' t='const bool'/>
<def f='halide/halide-install/include/HalideBuffer.h' l='48'/>
<def f='halide/halide-install/include/HalideBuffer.h' l='50' ll='51'/>
<use f='halide/halide-install/include/HalideBuffer.h' l='51'/>
<def f='halide/halide-install/include/HalideBuffer.h' l='53' ll='56'/>
<use f='halide/halide-install/include/HalideBuffer.h' l='55'/>
<def f='halide/halide-install/include/HalideBuffer.h' l='61' ll='62'/>
<def f='halide/halide-install/include/HalideBuffer.h' l='64' ll='65'/>
<use f='halide/halide-install/include/HalideBuffer.h' l='783'/>
<use f='halide/halide-install/include/HalideBuffer.h' l='820'/>
<use f='halide/halide-install/include/HalideBuffer.h' l='896'/>
<use f='halide/halide-install/include/HalideBuffer.h' l='913'/>
<use f='halide/halide-install/include/HalideBuffer.h' l='1841'/>
<use f='halide/halide-install/include/HalideBuffer.h' l='1868'/>
<size>1</size>
<doc f='halide/halide-install/include/HalideBuffer.h' l='58'>// Floats and doubles are technically implicitly int-convertible, but
// doing so produces a warning we treat as an error, so just disallow
// it here.</doc>
<smbr r='Halide::Runtime::AllInts{type-parameter-0-0,type-parameter-0-1...}::value' t='const bool'/>
<def f='halide/build/include/Halide.h' l='8810'/>
<def f='halide/build/include/Halide.h' l='8812' ll='8813'/>
<use f='halide/build/include/Halide.h' l='8813'/>
<def f='halide/build/include/Halide.h' l='8815' ll='8818'/>
<use f='halide/build/include/Halide.h' l='8817'/>
<def f='halide/build/include/Halide.h' l='8823' ll='8824'/>
<def f='halide/build/include/Halide.h' l='8826' ll='8827'/>
<use f='halide/build/include/Halide.h' l='9545'/>
<use f='halide/build/include/Halide.h' l='9582'/>
<use f='halide/build/include/Halide.h' l='9658'/>
<use f='halide/build/include/Halide.h' l='9675'/>
<use f='halide/build/include/Halide.h' l='10603'/>
<use f='halide/build/include/Halide.h' l='10630'/>
<size>1</size>
<doc f='halide/build/include/Halide.h' l='8820'>// Floats and doubles are technically implicitly int-convertible, but
// doing so produces a warning we treat as an error, so just disallow
// it here.</doc>
<smbr r='Halide::Runtime::AllInts{type-parameter-0-0,type-parameter-0-1...}::value' t='const bool'/>
<def f='halide/src/runtime/HalideBuffer.h' l='48'/>
<def f='halide/src/runtime/HalideBuffer.h' l='50' ll='51'/>
<use f='halide/src/runtime/HalideBuffer.h' l='51'/>
<def f='halide/src/runtime/HalideBuffer.h' l='53' ll='56'/>
<use f='halide/src/runtime/HalideBuffer.h' l='55'/>
<def f='halide/src/runtime/HalideBuffer.h' l='61' ll='62'/>
<def f='halide/src/runtime/HalideBuffer.h' l='64' ll='65'/>
<use f='halide/src/runtime/HalideBuffer.h' l='783'/>
<use f='halide/src/runtime/HalideBuffer.h' l='820'/>
<use f='halide/src/runtime/HalideBuffer.h' l='896'/>
<use f='halide/src/runtime/HalideBuffer.h' l='913'/>
<use f='halide/src/runtime/HalideBuffer.h' l='1841'/>
<use f='halide/src/runtime/HalideBuffer.h' l='1868'/>
<size>1</size>
<doc f='halide/src/runtime/HalideBuffer.h' l='58'>// Floats and doubles are technically implicitly int-convertible, but
// doing so produces a warning we treat as an error, so just disallow
// it here.</doc>
<smbr r='Halide::Runtime::AllInts{type-parameter-0-0,type-parameter-0-1...}::value' t='const bool'/>
