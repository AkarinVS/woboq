<dec f='halide/build/include/Halide.h' l='30717' type='Halide::Expr Halide::Internal::purify_index_math(const Halide::Expr &amp; )'/>
<doc f='halide/build/include/Halide.h' l='30709'>/** Bounds inference and related stages can lift integer bounds
 * expressions out of if statements that guard against those integer
 * expressions doing side-effecty things like dividing or modding by
 * zero. In those cases, if the lowering passes are functional, the
 * value resulting from the division or mod is evaluated but not
 * used. This mutator rewrites divs and mods in such expressions to
 * fail silently (evaluate to undef) when the denominator is zero.
 */</doc>
<dec f='halide/src/PurifyIndexMath.h' l='21' type='Halide::Expr Halide::Internal::purify_index_math(const Halide::Expr &amp; )'/>
<use f='halide/src/Bounds.cpp' l='2795' u='c' c='_ZN6Halide8Internal13boxes_touchedERKNS_4ExprENS0_4StmtEbbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_5ScopeINS0_8IntervalEEERKSt3mapI4565527'/>
<use f='halide/src/Bounds.cpp' l='2797' u='c' c='_ZN6Halide8Internal13boxes_touchedERKNS_4ExprENS0_4StmtEbbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_5ScopeINS0_8IntervalEEERKSt3mapI4565527'/>
<use f='halide/src/Bounds.cpp' l='2798' u='c' c='_ZN6Halide8Internal13boxes_touchedERKNS_4ExprENS0_4StmtEbbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_5ScopeINS0_8IntervalEEERKSt3mapI4565527'/>
<doc f='halide/src/PurifyIndexMath.h' l='13'>/** Bounds inference and related stages can lift integer bounds
 * expressions out of if statements that guard against those integer
 * expressions doing side-effecty things like dividing or modding by
 * zero. In those cases, if the lowering passes are functional, the
 * value resulting from the division or mod is evaluated but not
 * used. This mutator rewrites divs and mods in such expressions to
 * fail silently (evaluate to undef) when the denominator is zero.
 */</doc>
<def f='halide/src/PurifyIndexMath.cpp' l='28' ll='30' type='Halide::Expr Halide::Internal::purify_index_math(const Halide::Expr &amp; s)'/>
