<dec f='halide/build/include/Halide.h' l='15813' type='static bool Halide::Var::is_implicit(const std::string &amp; name)'/>
<use f='halide/build/include/Halide.h' l='15815' u='c' c='_ZNK6Halide3Var11is_implicitEv'/>
<use f='halide/build/include/Halide.h' l='15825' u='c' c='_ZN6Halide3Var14implicit_indexERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='halide/build/include/Halide.h' l='15807'>/** Return whether a variable name is of the form for an implicit argument.
     * TODO: This is almost guaranteed to incorrectly fire on user
     * declared variables at some point. We should likely prevent
     * user Var declarations from making names of this form.
     */
    //{</doc>
<dec f='halide/src/Var.h' l='128' type='static bool Halide::Var::is_implicit(const std::string &amp; name)'/>
<use f='halide/src/Var.h' l='130' u='c' c='_ZNK6Halide3Var11is_implicitEv'/>
<use f='halide/src/Var.h' l='140' u='c' c='_ZN6Halide3Var14implicit_indexERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='halide/src/Var.h' l='122'>/** Return whether a variable name is of the form for an implicit argument.
     * TODO: This is almost guaranteed to incorrectly fire on user
     * declared variables at some point. We should likely prevent
     * user Var declarations from making names of this form.
     */
    //{</doc>
<use f='halide/src/DerivativeUtils.cpp' l='466' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_123ImplicitVariablesFinder5visitEPKNS0_8VariableE'/>
<def f='halide/src/Var.cpp' l='19' ll='22' type='static bool Halide::Var::is_implicit(const std::string &amp; name)'/>
