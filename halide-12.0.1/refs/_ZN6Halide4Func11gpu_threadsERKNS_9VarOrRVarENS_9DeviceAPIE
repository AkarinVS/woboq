<dec f='halide/build/include/Halide.h' l='17778' type='Halide::Func &amp; Halide::Func::gpu_threads(const Halide::VarOrRVar &amp; thread_x, Halide::DeviceAPI device_api = DeviceAPI::Default_GPU)'/>
<doc f='halide/build/include/Halide.h' l='17771'>/** Tell Halide that the following dimensions correspond to GPU
     * thread indices. This is useful if you compute a producer
     * function within the block indices of a consumer function, and
     * want to control how that function&apos;s dimensions map to GPU
     * threads. If the selected target is not an appropriate GPU, this
     * just marks those dimensions as parallel. */
    // @{</doc>
<dec f='halide/src/Func.h' l='1898' type='Halide::Func &amp; Halide::Func::gpu_threads(const Halide::VarOrRVar &amp; thread_x, Halide::DeviceAPI device_api = DeviceAPI::Default_GPU)'/>
<doc f='halide/src/Func.h' l='1891'>/** Tell Halide that the following dimensions correspond to GPU
     * thread indices. This is useful if you compute a producer
     * function within the block indices of a consumer function, and
     * want to control how that function&apos;s dimensions map to GPU
     * threads. If the selected target is not an appropriate GPU, this
     * just marks those dimensions as parallel. */
    // @{</doc>
<def f='halide/src/Func.cpp' l='2401' ll='2405' type='Halide::Func &amp; Halide::Func::gpu_threads(const Halide::VarOrRVar &amp; tx, Halide::DeviceAPI device_api = DeviceAPI::Default_GPU)'/>
<use f='halide/tutorial/lesson_12_using_the_gpu.cpp' l='147' u='c' c='_ZN10MyPipeline16schedule_for_gpuEv'/>
