<dec f='halide/build/include/Halide.h' l='15029' type='void Halide::Pipeline::set_custom_allocator(void *(*)(void *, size_t) malloc, void (*)(void *, void *) free)'/>
<doc f='halide/build/include/Halide.h' l='15017'>/** Set a custom malloc and free for halide to use. Malloc should
     * return 32-byte aligned chunks of memory, and it should be safe
     * for Halide to read slightly out of bounds (up to 8 bytes before
     * the start or beyond the end). If compiling statically, routines
     * with appropriate signatures can be provided directly
    \code
     extern &quot;C&quot; void *halide_malloc(void *, size_t)
     extern &quot;C&quot; void halide_free(void *, void *)
     \endcode
     * These will clobber Halide&apos;s versions. See HalideRuntime.h
     * for declarations.
     */</doc>
<dec f='halide/src/Pipeline.h' l='373' type='void Halide::Pipeline::set_custom_allocator(void *(*)(void *, size_t) malloc, void (*)(void *, void *) free)'/>
<doc f='halide/src/Pipeline.h' l='361'>/** Set a custom malloc and free for halide to use. Malloc should
     * return 32-byte aligned chunks of memory, and it should be safe
     * for Halide to read slightly out of bounds (up to 8 bytes before
     * the start or beyond the end). If compiling statically, routines
     * with appropriate signatures can be provided directly
    \code
     extern &quot;C&quot; void *halide_malloc(void *, size_t)
     extern &quot;C&quot; void halide_free(void *, void *)
     \endcode
     * These will clobber Halide&apos;s versions. See HalideRuntime.h
     * for declarations.
     */</doc>
<use f='halide/src/Func.cpp' l='3269' u='c' c='_ZN6Halide4Func20set_custom_allocatorEPFPvS1_mEPFvS1_S1_E'/>
<def f='halide/src/Pipeline.cpp' l='648' ll='653' type='void Halide::Pipeline::set_custom_allocator(void *(*)(void *, size_t) cust_malloc, void (*)(void *, void *) cust_free)'/>
