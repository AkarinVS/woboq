<dec f='halide/llvm-install/include/llvm/ExecutionEngine/JITSymbol.h' l='421' type='llvm::JITSymbol llvm::LegacyJITSymbolResolver::findSymbolInLogicalDylib(const std::string &amp; Name)'/>
<ovr f='halide/llvm-install/include/llvm/ExecutionEngine/RTDyldMemoryManager.h' l='123' c='_ZN4llvm19RTDyldMemoryManager24findSymbolInLogicalDylibERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='halide/llvm-install/include/llvm/ExecutionEngine/JITSymbol.h' l='409'>/// This method returns the address of the specified symbol if it exists
  /// within the logical dynamic library represented by this JITSymbolResolver.
  /// Unlike findSymbol, queries through this interface should return addresses
  /// for hidden symbols.
  ///
  /// This is of particular importance for the Orc JIT APIs, which support lazy
  /// compilation by breaking up modules: Each of those broken out modules
  /// must be able to resolve hidden symbols provided by the others. Clients
  /// writing memory managers for MCJIT can usually ignore this method.
  ///
  /// This method will be queried by RuntimeDyld when checking for previous
  /// definitions of common symbols.</doc>
