<dec f='halide/halide-install/include/Halide.h' l='13430' type='static std::vector&lt;JITModule&gt; Halide::Internal::JITSharedRuntime::get(llvm::Module * m, const Halide::Target &amp; target, bool create = true)'/>
<doc f='halide/halide-install/include/Halide.h' l='13429'>// Note only the first llvm::Module passed in here is used. The same shared runtime is used for all JIT.</doc>
<dec f='halide/build/include/Halide.h' l='13430' type='static std::vector&lt;JITModule&gt; Halide::Internal::JITSharedRuntime::get(llvm::Module * m, const Halide::Target &amp; target, bool create = true)'/>
<doc f='halide/build/include/Halide.h' l='13429'>// Note only the first llvm::Module passed in here is used. The same shared runtime is used for all JIT.</doc>
<dec f='halide/src/JITModule.h' l='163' type='static std::vector&lt;JITModule&gt; Halide::Internal::JITSharedRuntime::get(llvm::Module * m, const Halide::Target &amp; target, bool create = true)'/>
<doc f='halide/src/JITModule.h' l='162'>// Note only the first llvm::Module passed in here is used. The same shared runtime is used for all JIT.</doc>
<use f='halide/src/DeviceInterface.cpp' l='20' u='c' c='_ZN6Halide12_GLOBAL__N_122lookup_runtime_routineERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERT_'/>
<use f='halide/src/JITModule.cpp' l='238' u='c' c='_ZN6Halide8Internal9JITModuleC1ERKNS_6ModuleERKNS0_11LoweredFuncERKSt6vectorIS1_SaIS1_EE'/>
<def f='halide/src/JITModule.cpp' l='830' ll='886' type='static std::vector&lt;JITModule&gt; Halide::Internal::JITSharedRuntime::get(llvm::Module * for_module, const Halide::Target &amp; target, bool create = true)'/>
<doc f='halide/src/JITModule.cpp' l='822'>/* Shared runtimes are stored as global state. The set needed is
 * determined from the target and the retrieved. If one does not exist
 * yet, it is made on the fly from the compiled in bitcode of the
 * runtime modules. As with all JITModules, the shared runtime is ref
 * counted, but a global keeps one ref alive until shutdown or when
 * JITSharedRuntime::release_all is called. If
 * JITSharedRuntime::release_all is called, the global state is reset
 * and any newly compiled Funcs will get a new runtime. */</doc>
