<dec f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='42' type='uint32_t absl::lts_2020_02_25::base_internal::SpinLockWait(std::atomic&lt;uint32_t&gt; * w, int n, const absl::lts_2020_02_25::base_internal::SpinLockWaitTransition * trans, absl::lts_2020_02_25::base_internal::SchedulingMode scheduling_mode)'/>
<use f='halide/build-apps/abseil-cpp/absl/base/call_once.h' l='176' u='c' c='_ZN4absl14lts_2020_02_2513base_internal12CallOnceImplEPSt6atomicIjENS1_14SchedulingModeEOT_DpOT0_'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='38'>// Wait until *w can transition from trans[i].from to trans[i].to for some i
// satisfying 0&lt;=i&lt;n &amp;&amp; trans[i].done, atomically make the transition,
// then return the old value of *w.   Make any other atomic transitions
// where !trans[i].done, but continue waiting.</doc>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.cc' l='39' ll='57' type='uint32_t absl::lts_2020_02_25::base_internal::SpinLockWait(std::atomic&lt;uint32_t&gt; * w, int n, const absl::lts_2020_02_25::base_internal::SpinLockWaitTransition * trans, base_internal::SchedulingMode scheduling_mode)'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.cc' l='38'>// See spinlock_wait.h for spec.</doc>
