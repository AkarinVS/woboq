<dec f='halide/build/include/Halide.h' l='4324' type='static Halide::Expr Halide::Internal::Interval::make_max(const Halide::Expr &amp; a, const Halide::Expr &amp; b)'/>
<doc f='halide/build/include/Halide.h' l='4323'>/** An eagerly-simplifying max of two Exprs that respects infinities. */</doc>
<dec f='halide/src/Interval.h' l='94' type='static Halide::Expr Halide::Internal::Interval::make_max(const Halide::Expr &amp; a, const Halide::Expr &amp; b)'/>
<doc f='halide/src/Interval.h' l='93'>/** An eagerly-simplifying max of two Exprs that respects infinities. */</doc>
<use f='halide/src/Bounds.cpp' l='357' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_8VariableE'/>
<use f='halide/src/Bounds.cpp' l='370' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_8VariableE'/>
<use f='halide/src/Bounds.cpp' l='741' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_3MaxE'/>
<use f='halide/src/Bounds.cpp' l='742' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_3MaxE'/>
<use f='halide/src/Bounds.cpp' l='1026' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_6SelectE'/>
<use f='halide/src/Bounds.cpp' l='1031' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_6SelectE'/>
<use f='halide/src/Bounds.cpp' l='1037' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_6SelectE'/>
<use f='halide/src/Bounds.cpp' l='1043' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_6SelectE'/>
<use f='halide/src/Bounds.cpp' l='1228' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1719' u='c' c='_ZN6Halide8Internal11merge_boxesERNS0_3BoxERKS1_'/>
<use f='halide/src/Bounds.cpp' l='1724' u='c' c='_ZN6Halide8Internal11merge_boxesERNS0_3BoxERKS1_'/>
<use f='halide/src/Bounds.cpp' l='1726' u='c' c='_ZN6Halide8Internal11merge_boxesERNS0_3BoxERKS1_'/>
<use f='halide/src/Bounds.cpp' l='1728' u='c' c='_ZN6Halide8Internal11merge_boxesERNS0_3BoxERKS1_'/>
<def f='halide/src/Interval.cpp' l='119' ll='121' type='static Halide::Expr Halide::Internal::Interval::make_max(const Halide::Expr &amp; a, const Halide::Expr &amp; b)'/>
<use f='halide/src/Interval.cpp' l='128' u='c' c='_ZN6Halide8Internal8Interval7includeERKS1_'/>
<use f='halide/src/Interval.cpp' l='133' u='c' c='_ZN6Halide8Internal8Interval7includeERKNS_4ExprE'/>
<use f='halide/src/Interval.cpp' l='144' u='c' c='_ZN6Halide8Internal8Interval17make_intersectionERKS1_S3_'/>
<doc f='halide/src/Interval.cpp' l='116'>// This is called repeatedly by bounds inference and the solver to
// build large expressions, so we want to simplify eagerly to avoid
// monster expressions.</doc>
<use f='halide/src/autoschedulers/mullapudi2016/AutoSchedule.cpp' l='326' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_118queue_func_regionsERSt3mapINS1_6FStageES2_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_8IntervalESt4les7489116'/>
