<dec f='halide/halide-install/include/Halide.h' l='30847' type='std::vector&lt;std::string&gt; Halide::Internal::topological_order(const std::vector&lt;Function&gt; &amp; outputs, const std::map&lt;std::string, Function&gt; &amp; env)'/>
<doc f='halide/halide-install/include/Halide.h' l='30843'>/** Given a bunch of functions that call each other, determine a
 * topological order which stays constant regardless of the schedule.
 * This ordering adheres to the producer-consumer dependencies, i.e. producer
 * will come before its consumers in that order */</doc>
<dec f='halide/build/include/Halide.h' l='30847' type='std::vector&lt;std::string&gt; Halide::Internal::topological_order(const std::vector&lt;Function&gt; &amp; outputs, const std::map&lt;std::string, Function&gt; &amp; env)'/>
<doc f='halide/build/include/Halide.h' l='30843'>/** Given a bunch of functions that call each other, determine a
 * topological order which stays constant regardless of the schedule.
 * This ordering adheres to the producer-consumer dependencies, i.e. producer
 * will come before its consumers in that order */</doc>
<dec f='halide/src/RealizationOrder.h' l='38' type='std::vector&lt;std::string&gt; Halide::Internal::topological_order(const std::vector&lt;Function&gt; &amp; outputs, const std::map&lt;std::string, Function&gt; &amp; env)'/>
<doc f='halide/src/RealizationOrder.h' l='34'>/** Given a bunch of functions that call each other, determine a
 * topological order which stays constant regardless of the schedule.
 * This ordering adheres to the producer-consumer dependencies, i.e. producer
 * will come before its consumers in that order */</doc>
<use f='halide/src/Pipeline.cpp' l='250' u='c' c='_ZN6Halide8Pipeline8get_funcEm'/>
<def f='halide/src/RealizationOrder.cpp' l='360' ll='388' type='vector&lt;std::string&gt; Halide::Internal::topological_order(const vector&lt;Halide::Internal::Function&gt; &amp; outputs, const map&lt;std::string, Halide::Internal::Function&gt; &amp; env)'/>
<use f='halide/src/RegionCosts.cpp' l='712' u='c' c='_ZN6Halide8Internal11RegionCosts16region_footprintERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_3BoxESt4lessIS8_ESaISt4pairIKS8_S94510298'/>
<use f='halide/src/Tracing.cpp' l='395' u='c' c='_ZN6Halide8Internal14inject_tracingENS0_4StmtERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbRKSt3mapIS7_NS0_8FunctionESt4lessIS7_ESaISt4pairI10988969'/>
<use f='halide/src/autoschedulers/adams2019/FunctionDAG.cpp' l='586' u='c' c='_ZN6Halide8Internal13Autoscheduler11FunctionDAGC1ERKSt6vectorINS0_8FunctionESaIS4_EERKNS_13MachineParamsERKNS_6TargetE'/>
<use f='halide/src/autoschedulers/li2018/GradientAutoscheduler.cpp' l='841' u='c' c='_ZN6Halide8Internal13Autoscheduler17generate_scheduleERKSt6vectorINS0_8FunctionESaIS3_EERKNS_6TargetERKNS_13MachineParamsEPNS_20AutoSchedulerResultsE'/>
<use f='halide/src/autoschedulers/mullapudi2016/AutoSchedule.cpp' l='3185' u='c' c='_ZN6Halide8Internal18generate_schedulesB5cxx11ERKSt6vectorINS0_8FunctionESaIS2_EERKNS_6TargetERKNS_13MachineParamsE'/>
