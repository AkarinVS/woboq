<dec f='halide/build/include/Halide.h' l='2524' type='void Halide::float16_t::float16_t(float value)'/>
<doc f='halide/build/include/Halide.h' l='2519'>/** Construct from a float, double, or int using
     * round-to-nearest-ties-to-even. Out-of-range values become +/-
     * infinity.
     */
    // @{</doc>
<dec f='halide/src/Float16.h' l='32' type='void Halide::float16_t::float16_t(float value)'/>
<doc f='halide/src/Float16.h' l='27'>/** Construct from a float, double, or int using
     * round-to-nearest-ties-to-even. Out-of-range values become +/-
     * infinity.
     */
    // @{</doc>
<def f='halide/src/Float16.cpp' l='358' ll='360' type='void Halide::float16_t::float16_t(float value)'/>
<use f='halide/src/Float16.cpp' l='409' u='c' c='_ZNK6Halide9float16_tngEv'/>
<use f='halide/src/Float16.cpp' l='413' u='c' c='_ZNK6Halide9float16_tplES0_'/>
<use f='halide/src/Float16.cpp' l='417' u='c' c='_ZNK6Halide9float16_tmiES0_'/>
<use f='halide/src/Float16.cpp' l='421' u='c' c='_ZNK6Halide9float16_tmlES0_'/>
<use f='halide/src/Float16.cpp' l='425' u='c' c='_ZNK6Halide9float16_tdvES0_'/>
<use f='halide/src/Type.cpp' l='148' u='c' c='_ZNK6Halide4Type13can_representEl'/>
<use f='halide/src/Type.cpp' l='176' u='c' c='_ZNK6Halide4Type13can_representEm'/>
