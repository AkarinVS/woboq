<dec f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='459' type='llvm::TypeSize llvm::DataLayout::getTypeSizeInBits(llvm::Type * Ty) const'/>
<use f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='469' u='c' c='_ZNK4llvm10DataLayout16getTypeStoreSizeEPNS_4TypeE'/>
<use f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='489' u='c' c='_ZNK4llvm10DataLayout23typeSizeEqualsStoreSizeEPNS_4TypeE'/>
<def f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='664' ll='710' type='llvm::TypeSize llvm::DataLayout::getTypeSizeInBits(llvm::Type * Ty) const'/>
<use f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='704' u='c' c='_ZNK4llvm10DataLayout17getTypeSizeInBitsEPNS_4TypeE'/>
<doc f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='435'>/// Size examples:
  ///
  /// Type        SizeInBits  StoreSizeInBits  AllocSizeInBits[*]
  /// ----        ----------  ---------------  ---------------
  ///  i1            1           8                8
  ///  i8            8           8                8
  ///  i19          19          24               32
  ///  i32          32          32               32
  ///  i100        100         104              128
  ///  i128        128         128              128
  ///  Float        32          32               32
  ///  Double       64          64               64
  ///  X86_FP80     80          80               96
  ///
  /// [*] The alloc size depends on the alignment, and thus on the target.
  ///     These values are for x86-32 linux.

  /// Returns the number of bits necessary to hold the specified type.
  ///
  /// If Ty is a scalable vector type, the scalable property will be set and
  /// the runtime size will be a positive integer multiple of the base size.
  ///
  /// For example, returns 36 for i36 and 80 for x86_fp80. The type passed must
  /// have a size (Type::isSized() must return true).</doc>
<doc f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='662'>// The implementation of this method is provided inline as it is particularly
// well suited to constant folding when called on a specific Type subclass.</doc>
