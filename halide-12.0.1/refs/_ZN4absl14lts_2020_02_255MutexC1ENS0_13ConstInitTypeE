<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='160' type='void absl::lts_2020_02_25::Mutex::Mutex(absl::ConstInitType )'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='911' type='void absl::lts_2020_02_25::Mutex::Mutex(absl::ConstInitType )'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='149'>// Creates a mutex with static storage duration.  A global variable
  // constructed this way avoids the lifetime issues that can occur on program
  // startup and shutdown.  (See absl/base/const_init.h.)
  //
  // For Mutexes allocated on the heap and stack, instead use the default
  // constructor, which can interact more fully with the thread sanitizer.
  //
  // Example usage:
  //   namespace foo {
  //   ABSL_CONST_INIT Mutex mu(absl::kConstInit);
  //   }</doc>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/program_name.cc' l='32' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/parse.cc' l='60' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/usage.cc' l='33' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/usage_config.cc' l='100' u='c'/>
