<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2312' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpOEQEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2317' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpOGTEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2322' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpOGEEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2327' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpOLTEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2332' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpOLEEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2337' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpONEEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2342' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpORDEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2347' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpUNOEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2352' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpUEQEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2357' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpUGTEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2362' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpUGEEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2367' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpULTEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2372' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpULEEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2377' u='c' c='_ZN4llvm13IRBuilderBase13CreateFCmpUNEEPNS_5ValueES2_RKNS_5TwineEPNS_6MDNodeE'/>
<def f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2391' ll='2394' type='llvm::Value * llvm::IRBuilderBase::CreateFCmp(CmpInst::Predicate P, llvm::Value * LHS, llvm::Value * RHS, const llvm::Twine &amp; Name = &quot;&quot;, llvm::MDNode * FPMathTag = nullptr)'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2399' u='c' c='_ZN4llvm13IRBuilderBase9CreateCmpENS_7CmpInst9PredicateEPNS_5ValueES4_RKNS_5TwineEPNS_6MDNodeE'/>
<doc f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='2388'>// Create a quiet floating-point comparison (i.e. one that raises an FP
  // exception only in the case where an input is a signaling NaN).
  // Note that this differs from CreateFCmpS only if IsFPConstrained is true.</doc>
