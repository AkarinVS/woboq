<def f='halide/build-apps/eigen/Eigen/src/Core/util/Constants.h' l='143' type='const unsigned int'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/util/ForwardDeclarations.h' l='33' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/util/XprHelper.h' l='286' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/util/XprHelper.h' l='670' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/DenseCoeffsBase.h' l='49' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CwiseUnaryView.h' l='26'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Map.h' l='37' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Block.h' l='51'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/IndexedView.h' l='56'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Reshaped.h' l='80'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Transpose.h' l='27'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Transpose.h' l='28' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/DiagonalMatrix.h' l='135' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/DiagonalMatrix.h' l='287' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Diagonal.h' l='54'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/TriangularMatrix.h' l='179'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/SelfAdjointView.h' l='41'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/BandMatrix.h' l='189' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/BandMatrix.h' l='251' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Reverse.h' l='33' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ArrayWrapper.h' l='35'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ArrayWrapper.h' l='36' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ArrayWrapper.h' l='133'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ArrayWrapper.h' l='134' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/Quaternion.h' l='47' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/Quaternion.h' l='267' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/Quaternion.h' l='387' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='58' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='80' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMap.h' l='35' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseVector.h' l='43' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='48' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='76' u='r'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/util/Constants.h' l='131'>/** \ingroup flags
  *
  * Means the expression has a coeffRef() method, i.e. is writable as its individual coefficients are directly addressable.
  * This rules out read-only expressions.
  *
  * Note that DirectAccessBit and LvalueBit are mutually orthogonal, as there are examples of expression having one but note
  * the other:
  *   \li writable expressions that don&apos;t have a very simple memory layout as a strided array, have LvalueBit but not DirectAccessBit
  *   \li Map-to-const expressions, for example Map&lt;const Matrix&gt;, have DirectAccessBit but not LvalueBit
  *
  * Expressions having LvalueBit also have their coeff() method returning a const reference instead of returning a new value.
  */</doc>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/Tensor/TensorTraits.h' l='57' u='r'/>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/Tensor/TensorTraits.h' l='76' u='r'/>
