<def f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='178' ll='185' type='std::string flatbuffers::GetAnyFieldS(const flatbuffers::Table &amp; table, const reflection::Field &amp; field, const reflection::Schema * schema)'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='175'>// Get any table field as a string, regardless of what type it is.
// You may pass nullptr for the schema if you don&apos;t care to have fields that
// are of table type pretty-printed.</doc>
<use f='halide/build-apps/flatbuffers/src/reflection.cpp' l='98' u='c' c='_ZN11flatbuffers12GetAnyValueSB5cxx11EN10reflection8BaseTypeEPKhPKNS0_6SchemaEi'/>
