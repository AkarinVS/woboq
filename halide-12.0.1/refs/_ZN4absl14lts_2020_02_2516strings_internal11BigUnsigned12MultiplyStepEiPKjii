<dec f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.h' l='267' type='void absl::lts_2020_02_25::strings_internal::BigUnsigned::MultiplyStep(int original_size, const uint32_t * other_words, int other_size, int step)'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.h' l='275' u='c' c='_ZN4absl14lts_2020_02_2516strings_internal11BigUnsigned10MultiplyByEiPKj'/>
<doc f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.h' l='239'>// Performs a step of big integer multiplication.  This computes the full
  // (64-bit-wide) values that should be added at the given index (step), and
  // adds to that location in-place.
  //
  // Because our math all occurs in place, we must multiply starting from the
  // highest word working downward.  (This is a bit more expensive due to the
  // extra carries involved.)
  //
  // This must be called in steps, for each word to be calculated, starting from
  // the high end and working down to 0.  The first value of `step` should be
  //   `std::min(original_size + other.size_ - 2, max_words - 1)`.
  // The reason for this expression is that multiplying the i&apos;th word from one
  // multiplicand and the j&apos;th word of another multiplicand creates a
  // two-word-wide value to be stored at the (i+j)&apos;th element.  The highest
  // word indices we will access are `original_size - 1` from this object, and
  // `other.size_ - 1` from our operand.  Therefore,
  // `original_size + other.size_ - 2` is the first step we should calculate,
  // but limited on an upper bound by max_words.

  // Working from high-to-low ensures that we do not overwrite the portions of
  // the initial value of *this which are still needed for later steps.
  //
  // Once called with step == 0, *this contains the result of the
  // multiplication.
  //
  // `original_size` is the size_ of *this before the first call to
  // MultiplyStep().  `other_words` and `other_size` are the contents of our
  // operand.  `step` is the step to perform, as described above.</doc>
<def f='halide/build-apps/abseil-cpp/absl/strings/internal/charconv_bigint.cc' l='315' ll='336' type='void absl::lts_2020_02_25::strings_internal::BigUnsigned::MultiplyStep(int original_size, const uint32_t * other_words, int other_size, int step)'/>
