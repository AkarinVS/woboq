<dec f='halide/build-apps/eigen/Eigen/src/Core/MatrixBase.h' l='434' type='void Eigen::MatrixBase::applyHouseholderOnTheRight(const EssentialPart &amp; essential, const Eigen::MatrixBase::Scalar &amp; tau, Eigen::MatrixBase::Scalar * workspace)'/>
<def f='halide/build-apps/eigen/Eigen/src/Householder/Householder.h' l='151' ll='172' type='void Eigen::MatrixBase::applyHouseholderOnTheRight(const EssentialPart &amp; essential, const Eigen::MatrixBase::Scalar &amp; tau, Eigen::MatrixBase::Scalar * workspace)'/>
<doc f='halide/build-apps/eigen/Eigen/src/Householder/Householder.h' l='136'>/** Apply the elementary reflector H given by
  * \f$ H = I - tau v v^*\f$
  * with
  * \f$ v^T = [1 essential^T] \f$
  * from the right to a vector or matrix.
  *
  * On input:
  * \param essential the essential part of the vector \c v
  * \param tau the scaling factor of the Householder transformation
  * \param workspace a pointer to working space with at least
  *                  this-&gt;rows() entries
  *
  * \sa MatrixBase::makeHouseholder(), MatrixBase::makeHouseholderInPlace(), 
  *     MatrixBase::applyHouseholderOnTheLeft()
  */</doc>
