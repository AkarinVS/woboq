<dec f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU.h' l='117' type='void Eigen::SparseLU::factorize(const Eigen::SparseLU::MatrixType &amp; matrix)'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU.h' l='129' u='c' c='_ZN5Eigen8SparseLU7computeERKT_'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU.h' l='498' ll='701' type='void Eigen::SparseLU::factorize(const Eigen::SparseLU::MatrixType &amp; matrix)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU.h' l='480'>/** 
  *  - Numerical factorization 
  *  - Interleaved with the symbolic factorization 
  * On exit,  info is 
  * 
  *    = 0: successful factorization
  * 
  *    &gt; 0: if info = i, and i is
  * 
  *       &lt;= A-&gt;ncol: U(i,i) is exactly zero. The factorization has
  *          been completed, but the factor U is exactly singular,
  *          and division by zero will occur if it is used to solve a
  *          system of equations.
  * 
  *       &gt; A-&gt;ncol: number of bytes allocated when memory allocation
  *         failure occurred, plus A-&gt;ncol. If lwork = -1, it is
  *         the estimated amount of space needed, plus A-&gt;ncol.  
  */</doc>
