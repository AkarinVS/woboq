<dec f='halide/halide-install/include/Halide.h' l='7930' type='Halide::Expr Halide::operator&gt;&gt;(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/halide-install/include/Halide.h' l='28582' u='c' c='_ZNK6Halide8Internal9IRMatcher6Intrin4makeERNS1_12MatcherStateE13halide_type_t'/>
<doc f='halide/halide-install/include/Halide.h' l='7921'>/** Shift the bits of an integer value right. Does sign extension for
 * signed integers. This is less efficient than dividing by a power of
 * two. Halide&apos;s definition of division (always round to negative
 * infinity) means that all divisions by powers of two get compiled to
 * bit-shifting, and Halide&apos;s optimization routines understand
 * division and can work with it. The type of the result is equal to
 * the type of the first argument. Both arguments must have integer
 * type. */
// @{</doc>
<use f='halide/apps/hannk/halide/common_halide.cpp' l='119' u='c' c='_ZN5hannk11approx_exp2EiRKN6Halide4ExprES3_RKNS0_4TypeE'/>
<use f='halide/apps/hannk/halide/common_halide.cpp' l='188' u='c' c='_ZN5hannk34approx_log2_exp2_plus_or_minus_oneEiN6Halide4ExprEiS1_NS0_4TypeE'/>
<dec f='halide/build/include/Halide.h' l='7930' type='Halide::Expr Halide::operator&gt;&gt;(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/build/include/Halide.h' l='28582' u='c' c='_ZNK6Halide8Internal9IRMatcher6Intrin4makeERNS1_12MatcherStateE13halide_type_t'/>
<doc f='halide/build/include/Halide.h' l='7921'>/** Shift the bits of an integer value right. Does sign extension for
 * signed integers. This is less efficient than dividing by a power of
 * two. Halide&apos;s definition of division (always round to negative
 * infinity) means that all divisions by powers of two get compiled to
 * bit-shifting, and Halide&apos;s optimization routines understand
 * division and can work with it. The type of the result is equal to
 * the type of the first argument. Both arguments must have integer
 * type. */
// @{</doc>
<dec f='halide/src/IROperator.h' l='1125' type='Halide::Expr Halide::operator&gt;&gt;(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/src/IROperator.h' l='1116'>/** Shift the bits of an integer value right. Does sign extension for
 * signed integers. This is less efficient than dividing by a power of
 * two. Halide&apos;s definition of division (always round to negative
 * infinity) means that all divisions by powers of two get compiled to
 * bit-shifting, and Halide&apos;s optimization routines understand
 * division and can work with it. The type of the result is equal to
 * the type of the first argument. Both arguments must have integer
 * type. */
// @{</doc>
<use f='halide/src/IRMatch.h' l='1468' u='c' c='_ZNK6Halide8Internal9IRMatcher6Intrin4makeERNS1_12MatcherStateE13halide_type_t'/>
<use f='halide/src/Bounds.cpp' l='1277' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1314' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1338' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1344' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1345' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1355' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1361' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1362' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='2977' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_119constant_bound_testEv'/>
<use f='halide/src/Bounds.cpp' l='3210' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3211' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3313' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3382' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3383' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/CodeGen_ARM.cpp' l='123' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='124' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='125' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='126' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='127' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='128' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='162' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='163' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='164' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='165' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='166' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='167' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='168' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='169' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='170' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARMC1ERKNS_6TargetE'/>
<use f='halide/src/CodeGen_Internal.cpp' l='281' u='c' c='_ZN6Halide8Internal18lower_int_uint_divERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='305' u='c' c='_ZN6Halide8Internal18lower_int_uint_divERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='354' u='c' c='_ZN6Halide8Internal18lower_int_uint_divERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='445' u='c' c='_ZN6Halide8Internal26long_div_mod_round_to_zeroERKNS_4ExprES3_PKm'/>
<use f='halide/src/CodeGen_Internal.cpp' l='446' u='c' c='_ZN6Halide8Internal26long_div_mod_round_to_zeroERKNS_4ExprES3_PKm'/>
<use f='halide/src/CodeGen_Internal.cpp' l='485' u='c' c='_ZN6Halide8Internal19lower_euclidean_divENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='486' u='c' c='_ZN6Halide8Internal19lower_euclidean_divENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='541' u='c' c='_ZN6Halide8Internal19lower_euclidean_modENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='542' u='c' c='_ZN6Halide8Internal19lower_euclidean_modENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='585' u='c' c='_ZN6Halide8Internal23lower_signed_shift_leftERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='592' u='c' c='_ZN6Halide8Internal23lower_signed_shift_leftERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='604' u='c' c='_ZN6Halide8Internal24lower_signed_shift_rightERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='613' u='c' c='_ZN6Halide8Internal24lower_signed_shift_rightERKNS_4ExprES3_'/>
<use f='halide/src/FastIntegerDivide.cpp' l='162' u='c' c='_ZN6Halide19fast_integer_divideENS_4ExprES0_'/>
<use f='halide/src/FastIntegerDivide.cpp' l='171' u='c' c='_ZN6Halide19fast_integer_divideENS_4ExprES0_'/>
<use f='halide/src/FastIntegerDivide.cpp' l='212' u='c' c='_ZN6Halide19fast_integer_divideENS_4ExprES0_'/>
<use f='halide/src/FastIntegerDivide.cpp' l='217' u='c' c='_ZN6Halide19fast_integer_divideENS_4ExprES0_'/>
<use f='halide/src/FindIntrinsics.cpp' l='135' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_117to_rounding_shiftEPKNS0_4CallE'/>
<use f='halide/src/FindIntrinsics.cpp' l='310' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_114FindIntrinsics5visitEPKNS0_3DivE'/>
<use f='halide/src/FindIntrinsics.cpp' l='603' u='c' c='_ZN6Halide8Internal26lower_widening_shift_rightERKNS_4ExprES3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='617' u='c' c='_ZN6Halide8Internal26lower_rounding_shift_rightERKNS_4ExprES3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='617' u='c' c='_ZN6Halide8Internal26lower_rounding_shift_rightERKNS_4ExprES3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='676' u='c' c='_ZN6Halide8Internal21lower_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='680' u='c' c='_ZN6Halide8Internal21lower_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='689' u='c' c='_ZN6Halide8Internal21lower_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='694' u='c' c='_ZN6Halide8Internal21lower_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='717' u='c' c='_ZN6Halide8Internal30lower_rounding_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='721' u='c' c='_ZN6Halide8Internal30lower_rounding_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/HexagonOptimize.cpp' l='736' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3AddE'/>
<use f='halide/src/HexagonOptimize.cpp' l='741' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3AddE'/>
<use f='halide/src/HexagonOptimize.cpp' l='817' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_4CastE'/>
<use f='halide/src/HexagonOptimize.cpp' l='818' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_4CastE'/>
<use f='halide/src/HexagonOptimize.cpp' l='819' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_4CastE'/>
<use f='halide/src/HexagonOptimize.cpp' l='847' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_4CastE'/>
<use f='halide/src/IROperator.cpp' l='2404' u='c' c='_ZN6HalidelsENS_4ExprEi'/>
<def f='halide/src/IROperator.cpp' l='2408' ll='2413' type='Halide::Expr Halide::operator&gt;&gt;(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/src/IROperator.cpp' l='2419' u='c' c='_ZN6HalidersENS_4ExprEi'/>
