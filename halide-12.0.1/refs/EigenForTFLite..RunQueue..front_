<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='40' u='w' c='_ZN14EigenForTFLite8RunQueueC1Ev'/>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='54' u='m' c='_ZN14EigenForTFLite8RunQueue9PushFrontET_'/>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='60' u='m' c='_ZN14EigenForTFLite8RunQueue9PushFrontET_'/>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='69' u='m' c='_ZN14EigenForTFLite8RunQueue8PopFrontEv'/>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='78' u='m' c='_ZN14EigenForTFLite8RunQueue8PopFrontEv'/>
<dec f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='183' type='std::atomic&lt;unsigned int&gt;'/>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='194' u='m' c='_ZNK14EigenForTFLite8RunQueue14SizeOrNotEmptyEv'/>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='198' u='m' c='_ZNK14EigenForTFLite8RunQueue14SizeOrNotEmptyEv'/>
<doc f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/RunQueue.h' l='176'>// Low log(kSize) + 1 bits in front_ and back_ contain rolling index of
  // front/back, respectively. The remaining bits contain modification counters
  // that are incremented on Push operations. This allows us to (1) distinguish
  // between empty and full conditions (if we would use log(kSize) bits for
  // position, these conditions would be indistinguishable); (2) obtain
  // consistent snapshot of front_/back_ for Size operation using the
  // modification counters.</doc>
