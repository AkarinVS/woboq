<def f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='980' ll='988' type='pybind11::module_ pybind11::module_::def_submodule(const char * name, const char * doc = nullptr)'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='970'>/** \rst
        Create and return a new Python submodule with the given name and docstring.
        This also works recursively, i.e.

        .. code-block:: cpp

            py::module_ m(&quot;example&quot;, &quot;pybind11 example plugin&quot;);
            py::module_ m2 = m.def_submodule(&quot;sub&quot;, &quot;A submodule of &apos;example&apos;&quot;);
            py::module_ m3 = m2.def_submodule(&quot;subsub&quot;, &quot;A submodule of &apos;example.sub&apos;&quot;);
    \endrst */</doc>
<use f='halide/python_bindings/src/PyBoundaryConditions.cpp' l='17' u='c' c='_ZN6Halide14PythonBindings26define_boundary_conditionsERN8pybind117module_E'/>
