<inh f='halide/llvm-install/include/llvm/IR/PassManager.h' l='374' c='llvm::PassInfoMixin'/>
<def f='halide/llvm-install/include/llvm/Transforms/Instrumentation/AddressSanitizer.h' l='118' ll='133'/>
<use f='halide/llvm-install/include/llvm/Transforms/Instrumentation/AddressSanitizer.h' l='119'/>
<size>4</size>
<doc f='halide/llvm-install/include/llvm/Transforms/Instrumentation/AddressSanitizer.h' l='113'>/// Public interface to the address sanitizer module pass for instrumenting code
/// to check for various memory errors.
///
/// This adds &apos;asan.module_ctor&apos; to &apos;llvm.global_ctors&apos;. This pass may also
/// run intependently of the function address sanitizer.</doc>
<fun r='_ZN4llvm26ModuleAddressSanitizerPassC1Ebbbb'/>
<fun r='_ZN4llvm26ModuleAddressSanitizerPass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<fun r='_ZN4llvm26ModuleAddressSanitizerPass10isRequiredEv'/>
<mbr r='llvm::ModuleAddressSanitizerPass::CompileKernel' o='0' t='bool'/>
<mbr r='llvm::ModuleAddressSanitizerPass::Recover' o='8' t='bool'/>
<mbr r='llvm::ModuleAddressSanitizerPass::UseGlobalGC' o='16' t='bool'/>
<mbr r='llvm::ModuleAddressSanitizerPass::UseOdrIndicator' o='24' t='bool'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='1157' c='_ZN6Halide8Internal12CodeGen_LLVM15optimize_moduleEv'/>
<size>4</size>
