<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='240' u='c' c='_ZN8gemmlowp6WorkerD1Ev'/>
<def f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='252' ll='294' type='void gemmlowp::Worker::ChangeState(gemmlowp::Worker::State new_state, gemmlowp::Task * task = nullptr)'/>
<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='300' u='c' c='_ZN8gemmlowp6Worker10ThreadFuncEv'/>
<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='314' u='c' c='_ZN8gemmlowp6Worker10ThreadFuncEv'/>
<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='330' u='c' c='_ZN8gemmlowp6Worker9StartWorkEPNS_4TaskE'/>
<doc f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='246'>// Changes State; may be called from either the worker thread
  // or the master thread; however, not all state transitions are legal,
  // which is guarded by assertions.
  //
  // The Task argument is to be used only with new_state==HasWork.
  // It specifies the Task being handed to this Worker.</doc>
