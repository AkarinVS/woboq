<def f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='500' ll='503' type='llvm::TypeSize llvm::DataLayout::getTypeAllocSize(llvm::Type * Ty) const'/>
<use f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='514' u='c' c='_ZNK4llvm10DataLayout22getTypeAllocSizeInBitsEPNS_4TypeE'/>
<doc f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='492'>/// Returns the offset in bytes between successive objects of the
  /// specified type, including alignment padding.
  ///
  /// If Ty is a scalable vector type, the scalable property will be set and
  /// the runtime size will be a positive integer multiple of the base size.
  ///
  /// This is the amount that alloca reserves for this type. For example,
  /// returns 12 or 16 for x86_fp80, depending on alignment.</doc>
<use f='halide/src/CodeGen_LLVM.cpp' l='3156' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM5visitEPKNS0_4CallE'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='4655' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM22create_alloca_at_entryEPN4llvm4TypeEibRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
