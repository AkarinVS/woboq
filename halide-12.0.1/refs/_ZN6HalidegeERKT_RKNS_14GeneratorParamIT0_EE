<def f='halide/halide-install/include/Halide.h' l='24046' ll='24048' type='decltype(a &gt;= (T)b) Halide::operator&gt;=(const Other &amp; a, const GeneratorParam&lt;T&gt; &amp; b)'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='76' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='83' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='145' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='153' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='193' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<def f='halide/build/include/Halide.h' l='24046' ll='24048' type='decltype(a &gt;= (T)b) Halide::operator&gt;=(const Other &amp; a, const GeneratorParam&lt;T&gt; &amp; b)'/>
<def f='halide/src/Generator.h' l='1112' ll='1114' type='decltype(a &gt;= (T)b) Halide::operator&gt;=(const Other &amp; a, const GeneratorParam&lt;T&gt; &amp; b)'/>
