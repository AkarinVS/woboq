<def f='halide/build-apps/abseil-cpp/absl/strings/substitute.h' l='237' ll='239' type='void absl::lts_2020_02_25::SubstituteAndAppend(std::string * output, absl::string_view format)'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/substitute.h' l='484' u='c' c='_ZN4absl14lts_2020_02_2510SubstituteB5cxx11ENS0_11string_viewE'/>
<doc f='halide/build-apps/abseil-cpp/absl/strings/substitute.h' l='215'>//
// PUBLIC API
//

// SubstituteAndAppend()
//
// Substitutes variables into a given format string and appends to a given
// output string. See file comments above for usage.
//
// The declarations of `SubstituteAndAppend()` below consist of overloads
// for passing 0 to 10 arguments, respectively.
//
// NOTE: A zero-argument `SubstituteAndAppend()` may be used within variadic
// templates to allow a variable number of arguments.
//
// Example:
//  template &lt;typename... Args&gt;
//  void VarMsg(std::string* boilerplate, absl::string_view format,
//      const Args&amp;... args) {
//    absl::SubstituteAndAppend(boilerplate, format, args...);
//  }
//</doc>
