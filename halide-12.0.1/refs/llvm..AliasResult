<def f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='81' ll='94'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='97' c='_ZN4llvmlsERNS_11raw_ostreamENS_11AliasResultE'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='350'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='414' c='_ZN4llvm9AAResults5aliasERKNS_14MemoryLocationES3_'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='417' c='_ZN4llvm9AAResults5aliasEPKNS_5ValueENS_12LocationSizeES3_S4_'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='423' c='_ZN4llvm9AAResults5aliasEPKNS_5ValueES3_'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='758' c='_ZN4llvm9AAResults5aliasERKNS_14MemoryLocationES3_RNS_11AAQueryInfoE'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='818' c='_ZN4llvm14BatchAAResults5aliasERKNS_14MemoryLocationES3_'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='881' c='_ZN4llvm9AAResults7Concept5aliasERKNS_14MemoryLocationES4_RNS_11AAQueryInfoE'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='940' c='_ZN4llvm9AAResults5Model5aliasERKNS_14MemoryLocationES4_RNS_11AAQueryInfoE'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='1015' c='_ZN4llvm12AAResultBase14AAResultsProxy5aliasERKNS_14MemoryLocationES4_RNS_11AAQueryInfoE'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='1074' c='_ZN4llvm12AAResultBase5aliasERKNS_14MemoryLocationES3_RNS_11AAQueryInfoE'/>
<doc f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='68'>/// The possible results of an alias query.
///
/// These results are always computed between two MemoryLocation objects as
/// a query to some alias analysis.
///
/// Note that these are unscoped enumerations because we would like to support
/// implicitly testing a result for the existence of any possible aliasing with
/// a conversion to bool, but an &quot;enum class&quot; doesn&apos;t support this. The
/// canonical names from the literature are suffixed and unique anyways, and so
/// they serve as global constants in LLVM for these results.
///
/// See docs/AliasAnalysis.html for more information on the specific meanings
/// of these values.</doc>
