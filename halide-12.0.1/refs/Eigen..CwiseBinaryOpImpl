<use f='halide/build-apps/eigen/Eigen/src/Core/CwiseBinaryOp.h' l='78'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CwiseBinaryOp.h' l='91'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/CwiseBinaryOp.h' l='154' ll='159'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseCwiseBinaryOp.h' l='35' ll='51'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseCwiseBinaryOp.h' l='15'>// Here we have to handle 3 cases:
//  1 - sparse op dense
//  2 - dense op sparse
//  3 - sparse op sparse
// We also need to implement a 4th iterator for:
//  4 - dense op dense
// Finally, we also need to distinguish between the product and other operations :
//                configuration      returned mode
//  1 - sparse op dense    product      sparse
//                         generic      dense
//  2 - dense op sparse    product      sparse
//                         generic      dense
//  3 - sparse op sparse   product      sparse
//                         generic      sparse
//  4 - dense op dense     product      dense
//                         generic      dense
//
// TODO to ease compiler job, we could specialize product/quotient with a scalar
//      and fallback to cwise-unary evaluator using bind1st_op and bind2nd_op.</doc>
<fun r='_ZN5Eigen17CwiseBinaryOpImplIT_T0_T1_NS_6SparseEEC1Ev'/>
