<def f='halide/llvm-install/include/llvm/IR/DiagnosticInfo.h' l='889' ll='893' type='void llvm::OptimizationRemarkAnalysisAliasing::OptimizationRemarkAnalysisAliasing(const char * PassName, llvm::StringRef RemarkName, const llvm::DiagnosticLocation &amp; Loc, const llvm::Value * CodeRegion)'/>
<doc f='halide/llvm-install/include/llvm/IR/DiagnosticInfo.h' l='882'>/// \p PassName is the name of the pass emitting this diagnostic. If this name
  /// matches the regular expression given in -Rpass-analysis=, then the
  /// diagnostic will be emitted. \p RemarkName is a textual identifier for the
  /// remark (single-word, camel-case). \p Loc is the debug location and \p
  /// CodeRegion is the region that the optimization operates on (currently only
  /// block is supported). The front-end will append its own message related to
  /// options that address pointer aliasing legality.</doc>
