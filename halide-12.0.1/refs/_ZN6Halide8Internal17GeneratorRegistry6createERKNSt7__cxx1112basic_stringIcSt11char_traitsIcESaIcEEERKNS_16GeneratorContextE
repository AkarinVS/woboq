<dec f='halide/build/include/Halide.h' l='26431' type='static std::unique_ptr&lt;GeneratorBase&gt; Halide::Internal::GeneratorRegistry::create(const std::string &amp; name, const Halide::GeneratorContext &amp; context)'/>
<doc f='halide/build/include/Halide.h' l='26429'>// Note that this method will never return null:
    // if it cannot return a valid Generator, it should assert-fail.</doc>
<dec f='halide/src/Generator.h' l='3497' type='static std::unique_ptr&lt;GeneratorBase&gt; Halide::Internal::GeneratorRegistry::create(const std::string &amp; name, const Halide::GeneratorContext &amp; context)'/>
<use f='halide/src/Generator.cpp' l='1017' u='c' c='_ZN6Halide8Internal26generate_filter_main_innerEiPPcRSo'/>
<use f='halide/src/Generator.cpp' l='1029' u='c' c='_ZN6Halide8Internal26generate_filter_main_innerEiPPcRSo'/>
<def f='halide/src/Generator.cpp' l='1115' ll='1132' type='static std::unique_ptr&lt;GeneratorBase&gt; Halide::Internal::GeneratorRegistry::create(const std::string &amp; name, const Halide::GeneratorContext &amp; context)'/>
<doc f='halide/src/Generator.cpp' l='1114'>/* static */</doc>
<doc f='halide/src/Generator.h' l='3495'>// Note that this method will never return null:
    // if it cannot return a valid Generator, it should assert-fail.</doc>
