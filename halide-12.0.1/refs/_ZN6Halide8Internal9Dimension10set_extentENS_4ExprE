<dec f='halide/build/include/Halide.h' l='21244' type='Halide::Internal::Dimension Halide::Internal::Dimension::set_extent(Halide::Expr extent)'/>
<doc f='halide/build/include/Halide.h' l='21223'>/** Set the extent in a given dimension to equal the given
     * expression. Images passed in that fail this check will generate
     * a runtime error. Returns a reference to the ImageParam so that
     * these calls may be chained.
     *
     * This may help the compiler generate better
     * code. E.g:
     \code
     im.dim(0).set_extent(100);
     \endcode
     * tells the compiler that dimension zero must be of extent 100,
     * which may result in simplification of boundary checks. The
     * value can be an arbitrary expression:
     \code
     im.dim(0).set_extent(im.dim(1).extent());
     \endcode
     * declares that im is a square image (of unknown size), whereas:
     \code
     im.dim(0).set_extent((im.dim(0).extent()/32)*32);
     \endcode
     * tells the compiler that the extent is a multiple of 32. */</doc>
<use f='halide/python_bindings/src/PyImageParam.cpp' l='18' u='a' c='_ZN6Halide14PythonBindings18define_image_paramERN8pybind117module_E'/>
<dec f='halide/src/Dimension.h' l='60' type='Halide::Internal::Dimension Halide::Internal::Dimension::set_extent(Halide::Expr extent)'/>
<doc f='halide/src/Dimension.h' l='39'>/** Set the extent in a given dimension to equal the given
     * expression. Images passed in that fail this check will generate
     * a runtime error. Returns a reference to the ImageParam so that
     * these calls may be chained.
     *
     * This may help the compiler generate better
     * code. E.g:
     \code
     im.dim(0).set_extent(100);
     \endcode
     * tells the compiler that dimension zero must be of extent 100,
     * which may result in simplification of boundary checks. The
     * value can be an arbitrary expression:
     \code
     im.dim(0).set_extent(im.dim(1).extent());
     \endcode
     * declares that im is a square image (of unknown size), whereas:
     \code
     im.dim(0).set_extent((im.dim(0).extent()/32)*32);
     \endcode
     * tells the compiler that the extent is a multiple of 32. */</doc>
<def f='halide/src/Dimension.cpp' l='53' ll='60' type='Halide::Internal::Dimension Halide::Internal::Dimension::set_extent(Halide::Expr extent)'/>
<use f='halide/src/Dimension.cpp' l='77' u='c' c='_ZN6Halide8Internal9Dimension10set_boundsENS_4ExprES2_'/>
<use f='halide/test/generator/msan_generator.cpp' l='28' u='c' c='_ZN12_GLOBAL__N_14MSAN8scheduleEv'/>
<use f='halide/test/generator/msan_generator.cpp' l='28' u='c' c='_ZN12_GLOBAL__N_14MSAN8scheduleEv'/>
<use f='halide/test/generator/msan_generator.cpp' l='28' u='c' c='_ZN12_GLOBAL__N_14MSAN8scheduleEv'/>
<use f='halide/test/generator/msan_generator.cpp' l='30' u='c' c='_ZN12_GLOBAL__N_14MSAN8scheduleEv'/>
<use f='halide/test/generator/msan_generator.cpp' l='30' u='c' c='_ZN12_GLOBAL__N_14MSAN8scheduleEv'/>
<use f='halide/test/generator/msan_generator.cpp' l='30' u='c' c='_ZN12_GLOBAL__N_14MSAN8scheduleEv'/>
