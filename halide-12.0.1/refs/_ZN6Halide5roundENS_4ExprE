<dec f='halide/halide-install/include/Halide.h' l='7829' type='Halide::Expr Halide::round(Halide::Expr x)'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='308' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<doc f='halide/halide-install/include/Halide.h' l='7824'>/** Return the whole number closest to a floating-point expression. If the
 * argument is not floating-point, it is cast to Float(32). The return value
 * is still in floating point, despite being a whole number. On ties, we
 * follow IEEE754 conventions and round to the nearest even number. Vectorizes
 * cleanly. */</doc>
<dec f='halide/build/include/Halide.h' l='7829' type='Halide::Expr Halide::round(Halide::Expr x)'/>
<doc f='halide/build/include/Halide.h' l='7824'>/** Return the whole number closest to a floating-point expression. If the
 * argument is not floating-point, it is cast to Float(32). The return value
 * is still in floating point, despite being a whole number. On ties, we
 * follow IEEE754 conventions and round to the nearest even number. Vectorizes
 * cleanly. */</doc>
<use f='halide/python_bindings/src/PyIROperator.cpp' l='143' u='a' c='_ZN6Halide14PythonBindings16define_operatorsERN8pybind117module_E'/>
<dec f='halide/src/IROperator.h' l='1024' type='Halide::Expr Halide::round(Halide::Expr x)'/>
<doc f='halide/src/IROperator.h' l='1019'>/** Return the whole number closest to a floating-point expression. If the
 * argument is not floating-point, it is cast to Float(32). The return value
 * is still in floating point, despite being a whole number. On ties, we
 * follow IEEE754 conventions and round to the nearest even number. Vectorizes
 * cleanly. */</doc>
<use f='halide/src/EmulateFloat16Math.cpp' l='91' u='c' c='_ZN6Halide8Internal18float32_to_float16ENS_4ExprE'/>
<def f='halide/src/IROperator.cpp' l='2224' ll='2240' type='Halide::Expr Halide::round(Halide::Expr x)'/>
