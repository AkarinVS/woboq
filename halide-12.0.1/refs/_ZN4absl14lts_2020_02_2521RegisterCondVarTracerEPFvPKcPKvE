<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='998' type='void absl::lts_2020_02_25::RegisterCondVarTracer(void (*)(const char *, const void *) fn)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='984'>// TODO(gfalcon): Combine RegisterMutexProfiler() and RegisterMutexTracer()
// into a single interface, since they are only ever called in pairs.

// Register a hook for CondVar tracing.
//
// The function pointer registered here will be called here on various CondVar
// events.  The callback is given an opaque handle to the CondVar object and
// a string identifying the event.  This is thread-safe, but only a single
// tracer can be registered.
//
// Events that can be sent are &quot;Wait&quot;, &quot;Unwait&quot;, &quot;Signal wakeup&quot;, and
// &quot;SignalAll wakeup&quot;.
//
// This has the same memory ordering concerns as RegisterMutexProfiler() above.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='138' ll='140' type='void absl::lts_2020_02_25::RegisterCondVarTracer(void (*)(const char *, const void *) fn)'/>
