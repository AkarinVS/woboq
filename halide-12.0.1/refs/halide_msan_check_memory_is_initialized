<dec f='halide/build/include/HalideRuntime.h' l='951' type='int halide_msan_check_memory_is_initialized(void * user_context, const void * ptr, uint64_t len, const char * name)'/>
<doc f='halide/build/include/HalideRuntime.h' l='945'>/** Verify that a given range of memory has been initialized; only used when Target::MSAN is enabled.
 *
 * The default implementation simply calls the LLVM-provided __msan_check_mem_is_initialized() function.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/build/include/Halide.h' l='1049' type='int halide_msan_check_memory_is_initialized(void * user_context, const void * ptr, uint64_t len, const char * name)'/>
<doc f='halide/build/include/Halide.h' l='1043'>/** Verify that a given range of memory has been initialized; only used when Target::MSAN is enabled.
 *
 * The default implementation simply calls the LLVM-provided __msan_check_mem_is_initialized() function.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='951' type='int halide_msan_check_memory_is_initialized(void * user_context, const void * ptr, uint64_t len, const char * name)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='945'>/** Verify that a given range of memory has been initialized; only used when Target::MSAN is enabled.
 *
 * The default implementation simply calls the LLVM-provided __msan_check_mem_is_initialized() function.
 *
 * The return value should always be zero.
 */</doc>
<def f='halide/test/generator/msan_aottest.cpp' l='132' ll='174' type='int halide_msan_check_memory_is_initialized(void * user_context, const void * ptr, uint64_t len, const char * name)'/>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='1023' type='int halide_msan_check_memory_is_initialized(void * user_context, const void * ptr, uint64_t len, const char * name)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='1017'>/** Verify that a given range of memory has been initialized; only used when Target::MSAN is enabled.
 *
 * The default implementation simply calls the LLVM-provided __msan_check_mem_is_initialized() function.
 *
 * The return value should always be zero.
 */</doc>
