<use f='halide/llvm-install/include/llvm/IR/Value.h' l='951'/>
<inh f='halide/llvm-install/include/llvm/IR/Value.h' l='75' c='llvm::Value'/>
<def f='halide/llvm-install/include/llvm/IR/Argument.h' l='29' ll='166'/>
<use f='halide/llvm-install/include/llvm/IR/SymbolTableListTraits.h' l='53'/>
<use f='halide/llvm-install/include/llvm/IR/Function.h' l='69'/>
<use f='halide/llvm-install/include/llvm/IR/Function.h' l='70'/>
<use f='halide/llvm-install/include/llvm/IR/Function.h' l='75'/>
<use f='halide/llvm-install/include/llvm/IR/Function.h' l='780' c='_ZNK4llvm8Function6getArgEj'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='1273' c='_ZNK4llvm19TargetTransformInfo28areFunctionArgsABICompatibleEPKNS_8FunctionES3_RNS_15SmallPtrSetImplIPNS_8ArgumentEEE'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='1635' c='_ZNK4llvm19TargetTransformInfo7Concept28areFunctionArgsABICompatibleEPKNS_8FunctionES4_RNS_15SmallPtrSetImplIPNS_8ArgumentEEE'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2145' c='_ZNK4llvm19TargetTransformInfo5Model28areFunctionArgsABICompatibleEPKNS_8FunctionES4_RNS_15SmallPtrSetImplIPNS_8ArgumentEEE'/>
<size>40</size>
<doc f='halide/llvm-install/include/llvm/IR/Argument.h' l='23'>/// This class represents an incoming formal argument to a Function. A formal
/// argument, since it is ``formal&apos;&apos;, does not contain an actual value but
/// instead represents the type, argument number, and attributes of an argument
/// for a specific function. When used in the body of said function, the
/// argument of course represents the value of the actual argument that the
/// function was called with.</doc>
<mbr r='llvm::Argument::Parent' o='192' t='llvm::Function *'/>
<mbr r='llvm::Argument::ArgNo' o='256' t='unsigned int'/>
<fun r='_ZN4llvm8Argument9setParentEPNS_8FunctionE'/>
<fun r='_ZN4llvm8ArgumentC1EPNS_4TypeERKNS_5TwineEPNS_8FunctionEj'/>
<fun r='_ZNK4llvm8Argument9getParentEv'/>
<fun r='_ZN4llvm8Argument9getParentEv'/>
<fun r='_ZNK4llvm8Argument8getArgNoEv'/>
<fun r='_ZNK4llvm8Argument14hasNonNullAttrEb'/>
<fun r='_ZNK4llvm8Argument23getDereferenceableBytesEv'/>
<fun r='_ZNK4llvm8Argument29getDereferenceableOrNullBytesEv'/>
<fun r='_ZNK4llvm8Argument12hasByValAttrEv'/>
<fun r='_ZNK4llvm8Argument12hasByRefAttrEv'/>
<fun r='_ZNK4llvm8Argument16hasSwiftSelfAttrEv'/>
<fun r='_ZNK4llvm8Argument17hasSwiftErrorAttrEv'/>
<fun r='_ZNK4llvm8Argument29hasPassPointeeByValueCopyAttrEv'/>
<fun r='_ZNK4llvm8Argument29getPassPointeeByValueCopySizeERKNS_10DataLayoutE'/>
<fun r='_ZNK4llvm8Argument27hasPointeeInMemoryValueAttrEv'/>
<fun r='_ZNK4llvm8Argument27getPointeeInMemoryValueTypeEv'/>
<fun r='_ZNK4llvm8Argument17getParamAlignmentEv'/>
<fun r='_ZNK4llvm8Argument13getParamAlignEv'/>
<fun r='_ZNK4llvm8Argument17getParamByValTypeEv'/>
<fun r='_ZNK4llvm8Argument21getParamStructRetTypeEv'/>
<fun r='_ZNK4llvm8Argument17getParamByRefTypeEv'/>
<fun r='_ZNK4llvm8Argument11hasNestAttrEv'/>
<fun r='_ZNK4llvm8Argument14hasNoAliasAttrEv'/>
<fun r='_ZNK4llvm8Argument16hasNoCaptureAttrEv'/>
<fun r='_ZNK4llvm8Argument16hasStructRetAttrEv'/>
<fun r='_ZNK4llvm8Argument12hasInRegAttrEv'/>
<fun r='_ZNK4llvm8Argument15hasReturnedAttrEv'/>
<fun r='_ZNK4llvm8Argument15onlyReadsMemoryEv'/>
<fun r='_ZNK4llvm8Argument15hasInAllocaAttrEv'/>
<fun r='_ZNK4llvm8Argument19hasPreallocatedAttrEv'/>
<fun r='_ZNK4llvm8Argument11hasZExtAttrEv'/>
<fun r='_ZNK4llvm8Argument11hasSExtAttrEv'/>
<fun r='_ZN4llvm8Argument8addAttrsERNS_11AttrBuilderE'/>
<fun r='_ZN4llvm8Argument7addAttrENS_9Attribute8AttrKindE'/>
<fun r='_ZN4llvm8Argument7addAttrENS_9AttributeE'/>
<fun r='_ZN4llvm8Argument10removeAttrENS_9Attribute8AttrKindE'/>
<fun r='_ZNK4llvm8Argument12hasAttributeENS_9Attribute8AttrKindE'/>
<fun r='_ZNK4llvm8Argument12getAttributeENS_9Attribute8AttrKindE'/>
<fun r='_ZN4llvm8Argument7classofEPKNS_5ValueE'/>
