<dec f='halide/build/include/Halide.h' l='6251' type='Halide::Internal::FuncSchedule Halide::Internal::FuncSchedule::deep_copy(std::map&lt;FunctionPtr, FunctionPtr&gt; &amp; copied_map) const'/>
<doc f='halide/build/include/Halide.h' l='6244'>/** Return a deep copy of this FuncSchedule. It recursively deep copies all
     * called functions, schedules, specializations, and reduction domains. This
     * method takes a map of &lt;old FunctionContents, deep-copied version&gt; as input
     * and would use the deep-copied FunctionContents from the map if exists
     * instead of creating a new deep-copy to avoid creating deep-copies of the
     * same FunctionContents multiple times.
     */</doc>
<dec f='halide/src/Schedule.h' l='534' type='Halide::Internal::FuncSchedule Halide::Internal::FuncSchedule::deep_copy(std::map&lt;FunctionPtr, FunctionPtr&gt; &amp; copied_map) const'/>
<doc f='halide/src/Schedule.h' l='527'>/** Return a deep copy of this FuncSchedule. It recursively deep copies all
     * called functions, schedules, specializations, and reduction domains. This
     * method takes a map of &lt;old FunctionContents, deep-copied version&gt; as input
     * and would use the deep-copied FunctionContents from the map if exists
     * instead of creating a new deep-copy to avoid creating deep-copies of the
     * same FunctionContents multiple times.
     */</doc>
<use f='halide/src/Function.cpp' l='358' u='c' c='_ZNK6Halide8Internal8Function9deep_copyERKNS0_11FunctionPtrERSt3mapIS2_S2_St4lessIS2_ESaISt4pairIS3_S2_EEE'/>
<def f='halide/src/Schedule.cpp' l='330' ll='353' type='Halide::Internal::FuncSchedule Halide::Internal::FuncSchedule::deep_copy(std::map&lt;FunctionPtr, FunctionPtr&gt; &amp; copied_map) const'/>
