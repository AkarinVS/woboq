<def f='halide/llvm-install/include/llvm/Support/Error.h' l='708' ll='720' type='void llvm::cantFail(llvm::Error Err, const char * Msg = nullptr)'/>
<use f='halide/llvm-install/include/llvm/Support/Error.h' l='936' u='c' c='_ZN4llvm15handleAllErrorsENS_5ErrorE'/>
<doc f='halide/llvm-install/include/llvm/Support/Error.h' l='695'>/// Report a fatal error if Err is a failure value.
///
/// This function can be used to wrap calls to fallible functions ONLY when it
/// is known that the Error will always be a success value. E.g.
///
///   @code{.cpp}
///   // foo only attempts the fallible operation if DoFallibleOperation is
///   // true. If DoFallibleOperation is false then foo always returns
///   // Error::success().
///   Error foo(bool DoFallibleOperation);
///
///   cantFail(foo(false));
///   @endcode</doc>
