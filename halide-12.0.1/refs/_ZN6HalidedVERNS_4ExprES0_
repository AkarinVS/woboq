<dec f='halide/build/include/Halide.h' l='7291' type='Halide::Expr &amp; Halide::operator/=(Halide::Expr &amp; a, Halide::Expr b)'/>
<doc f='halide/build/include/Halide.h' l='7286'>/** Modify the first expression to be the ratio of two expressions,
 * without changing its type. This casts the second argument to match
 * the type of the first. Note that signed integer division in Halide
 * rounds towards minus infinity, unlike C, which rounds towards
 * zero. */</doc>
<dec f='halide/src/IROperator.h' l='486' type='Halide::Expr &amp; Halide::operator/=(Halide::Expr &amp; a, Halide::Expr b)'/>
<doc f='halide/src/IROperator.h' l='481'>/** Modify the first expression to be the ratio of two expressions,
 * without changing its type. This casts the second argument to match
 * the type of the first. Note that signed integer division in Halide
 * rounds towards minus infinity, unlike C, which rounds towards
 * zero. */</doc>
<use f='halide/src/FuseGPUThreadLoops.cpp' l='827' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_131ExtractSharedAndHeapAllocations12rewrap_blockENS0_4StmtERKNS1_16ExtractBlockSizeE'/>
<use f='halide/src/IROperator.cpp' l='877' u='c' c='_ZN6Halide8Internal22raise_to_integer_powerENS_4ExprEl'/>
<def f='halide/src/IROperator.cpp' l='1628' ll='1633' type='Halide::Expr &amp; Halide::operator/=(Halide::Expr &amp; a, Halide::Expr b)'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_generator.cpp' l='84' u='c' c='_ZN11ModelWeightILb1EE8backpropERKN6Halide10DerivativeERKNS1_4ExprES7_'/>
