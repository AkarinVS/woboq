<def f='halide/llvm-install/include/llvm/ADT/fallible_iterator.h' l='94' ll='96' type='static fallible_iterator&lt;Underlying&gt; llvm::fallible_iterator::end(Underlying I)'/>
<doc f='halide/llvm-install/include/llvm/ADT/fallible_iterator.h' l='89'>/// Construct a fallible iterator that can be used as an end-of-range value.
  ///
  /// A value created by this method can be dereferenced (if the underlying
  /// value points at a valid value) and compared, but not incremented or
  /// decremented.</doc>
