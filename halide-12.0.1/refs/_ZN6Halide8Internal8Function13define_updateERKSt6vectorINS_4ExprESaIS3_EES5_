<dec f='halide/halide-install/include/Halide.h' l='13700' type='void Halide::Internal::Function::define_update(const std::vector&lt;Expr&gt; &amp; args, std::vector&lt;Expr&gt; values)'/>
<doc f='halide/halide-install/include/Halide.h' l='13692'>/** Add an update definition to this function. It must already
     * have a pure definition but not an update definition, and the
     * length of args must match the length of args used in the pure
     * definition. &apos;value&apos; must depend on some reduction domain, and
     * may contain variables from that domain as well as pure
     * variables. Any pure variables must also appear as Variables in
     * the args array, and they must have the same name as the pure
     * definition&apos;s argument in the same index. */</doc>
<dec f='halide/build/include/Halide.h' l='13700' type='void Halide::Internal::Function::define_update(const std::vector&lt;Expr&gt; &amp; args, std::vector&lt;Expr&gt; values)'/>
<doc f='halide/build/include/Halide.h' l='13692'>/** Add an update definition to this function. It must already
     * have a pure definition but not an update definition, and the
     * length of args must match the length of args used in the pure
     * definition. &apos;value&apos; must depend on some reduction domain, and
     * may contain variables from that domain as well as pure
     * variables. Any pure variables must also appear as Variables in
     * the args array, and they must have the same name as the pure
     * definition&apos;s argument in the same index. */</doc>
<dec f='halide/src/Function.h' l='97' type='void Halide::Internal::Function::define_update(const std::vector&lt;Expr&gt; &amp; args, std::vector&lt;Expr&gt; values)'/>
<doc f='halide/src/Function.h' l='89'>/** Add an update definition to this function. It must already
     * have a pure definition but not an update definition, and the
     * length of args must match the length of args used in the pure
     * definition. &apos;value&apos; must depend on some reduction domain, and
     * may contain variables from that domain as well as pure
     * variables. Any pure variables must also appear as Variables in
     * the args array, and they must have the same name as the pure
     * definition&apos;s argument in the same index. */</doc>
<use f='halide/src/Func.cpp' l='2861' u='c' c='_ZN6Halide7FuncRefaSERKNS_5TupleE'/>
<def f='halide/src/Function.cpp' l='498' ll='699' type='void Halide::Internal::Function::define_update(const vector&lt;Halide::Expr&gt; &amp; _args, vector&lt;Halide::Expr&gt; values)'/>
