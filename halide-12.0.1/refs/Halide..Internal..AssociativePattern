<def f='halide/build/include/Halide.h' l='8380' ll='8419'/>
<use f='halide/build/include/Halide.h' l='8399' c='_ZNK6Halide8Internal18AssociativePatterneqERKS1_'/>
<use f='halide/build/include/Halide.h' l='8410' c='_ZNK6Halide8Internal18AssociativePatternneERKS1_'/>
<use f='halide/build/include/Halide.h' l='8421' c='_ZN6Halide8Internal13get_ops_tableERKSt6vectorINS_4ExprESaIS2_EE'/>
<use f='halide/build/include/Halide.h' l='8505'/>
<use f='halide/build/include/Halide.h' l='8514' c='_ZN6Halide8Internal13AssociativeOpC1ERKNS0_18AssociativePatternERKSt6vectorINS1_11ReplacementESaIS6_EESA_b'/>
<use f='halide/build/include/Halide.h' l='18991' c='_ZN6Halide8InternallsERSoRKNS0_18AssociativePatternE'/>
<size>56</size>
<doc f='halide/build/include/Halide.h' l='8366'>/**
 * Represent an associative op with its identity. The op may be multi-dimensional,
 * e.g. complex multiplication. &apos;is_commutative&apos; is set to true if the op is also
 * commutative in addition to being associative.
 *
 * For example, complex multiplication is represented as:
 \code
 AssociativePattern pattern(
    {x0 * y0 - x1 * y1, x1 * y0 + x0 * y1},
    {one, zero},
    true
 );
 \endcode
 */</doc>
<mbr r='Halide::Internal::AssociativePattern::ops' o='0' t='std::vector&lt;Expr&gt;'/>
<mbr r='Halide::Internal::AssociativePattern::identities' o='192' t='std::vector&lt;Expr&gt;'/>
<mbr r='Halide::Internal::AssociativePattern::is_commutative' o='384' t='bool'/>
<fun r='_ZN6Halide8Internal18AssociativePatternC1Ev'/>
<fun r='_ZN6Halide8Internal18AssociativePatternC1Em'/>
<fun r='_ZN6Halide8Internal18AssociativePatternC1ERKSt6vectorINS_4ExprESaIS3_EES7_b'/>
<fun r='_ZN6Halide8Internal18AssociativePatternC1ENS_4ExprES2_b'/>
<fun r='_ZNK6Halide8Internal18AssociativePatterneqERKS1_'/>
<fun r='_ZNK6Halide8Internal18AssociativePatternneERKS1_'/>
<fun r='_ZNK6Halide8Internal18AssociativePattern4sizeEv'/>
<fun r='_ZNK6Halide8Internal18AssociativePattern11commutativeEv'/>
<def f='halide/src/AssociativeOpsTable.h' l='31' ll='70'/>
<use f='halide/src/AssociativeOpsTable.h' l='50' c='_ZNK6Halide8Internal18AssociativePatterneqERKS1_'/>
<use f='halide/src/AssociativeOpsTable.h' l='61' c='_ZNK6Halide8Internal18AssociativePatternneERKS1_'/>
<use f='halide/src/AssociativeOpsTable.h' l='72' c='_ZN6Halide8Internal13get_ops_tableERKSt6vectorINS_4ExprESaIS2_EE'/>
<use f='halide/src/IRPrinter.h' l='60' c='_ZN6Halide8InternallsERSoRKNS0_18AssociativePatternE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='123'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='144' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_single_general_addERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='149' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_single_general_mulERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='154' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_single_general_maxERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='159' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_single_general_minERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='164' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_single_general_subERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='168' c='_ZN6Halide8Internal12_GLOBAL__N_140populate_ops_table_single_general_selectERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='172' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_double_general_addERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='179' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_double_general_mulERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='183' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_double_general_maxERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='188' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_double_general_minERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='193' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_double_general_subERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='201' c='_ZN6Halide8Internal12_GLOBAL__N_140populate_ops_table_double_general_selectERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='205' c='_ZN6Halide8Internal12_GLOBAL__N_135populate_ops_table_single_uint1_andERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='210' c='_ZN6Halide8Internal12_GLOBAL__N_134populate_ops_table_single_uint1_orERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='215' c='_ZN6Halide8Internal12_GLOBAL__N_136populate_ops_table_single_uint8_castERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='225' c='_ZN6Halide8Internal12_GLOBAL__N_138populate_ops_table_single_uint8_selectERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='231' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_single_uint16_castERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='239' c='_ZN6Halide8Internal12_GLOBAL__N_139populate_ops_table_single_uint16_selectERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='245' c='_ZN6Halide8Internal12_GLOBAL__N_137populate_ops_table_single_uint32_castERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='251' c='_ZN6Halide8Internal12_GLOBAL__N_139populate_ops_table_single_uint32_selectERKSt6vectorINS_4TypeESaIS3_EERS2_INS0_18AssociativePatternESaIS8_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='257'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='284' c='_ZN6Halide8Internal12_GLOBAL__N_120get_ops_table_helperERKSt6vectorINS_4TypeESaIS3_EENS1_8RootExprEm'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='290' c='_ZN6Halide8Internal12_GLOBAL__N_120get_ops_table_helperERKSt6vectorINS_4TypeESaIS3_EENS1_8RootExprEm'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='324' c='_ZN6Halide8Internal13get_ops_tableERKSt6vectorINS_4ExprESaIS2_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='327' c='_ZN6Halide8Internal13get_ops_tableERKSt6vectorINS_4ExprESaIS2_EE'/>
<use f='halide/src/AssociativeOpsTable.cpp' l='375' c='_ZN6Halide8Internal13get_ops_tableERKSt6vectorINS_4ExprESaIS2_EE'/>
<size>56</size>
<doc f='halide/src/AssociativeOpsTable.h' l='17'>/**
 * Represent an associative op with its identity. The op may be multi-dimensional,
 * e.g. complex multiplication. &apos;is_commutative&apos; is set to true if the op is also
 * commutative in addition to being associative.
 *
 * For example, complex multiplication is represented as:
 \code
 AssociativePattern pattern(
    {x0 * y0 - x1 * y1, x1 * y0 + x0 * y1},
    {one, zero},
    true
 );
 \endcode
 */</doc>
<mbr r='Halide::Internal::AssociativePattern::ops' o='0' t='std::vector&lt;Expr&gt;'/>
<mbr r='Halide::Internal::AssociativePattern::identities' o='192' t='std::vector&lt;Expr&gt;'/>
<mbr r='Halide::Internal::AssociativePattern::is_commutative' o='384' t='bool'/>
<fun r='_ZN6Halide8Internal18AssociativePatternC1Ev'/>
<fun r='_ZN6Halide8Internal18AssociativePatternC1Em'/>
<fun r='_ZN6Halide8Internal18AssociativePatternC1ERKSt6vectorINS_4ExprESaIS3_EES7_b'/>
<fun r='_ZN6Halide8Internal18AssociativePatternC1ENS_4ExprES2_b'/>
<fun r='_ZNK6Halide8Internal18AssociativePatterneqERKS1_'/>
<fun r='_ZNK6Halide8Internal18AssociativePatternneERKS1_'/>
<fun r='_ZNK6Halide8Internal18AssociativePattern4sizeEv'/>
<fun r='_ZNK6Halide8Internal18AssociativePattern11commutativeEv'/>
<use f='halide/src/Associativity.h' l='81'/>
<use f='halide/src/Associativity.h' l='90' c='_ZN6Halide8Internal13AssociativeOpC1ERKNS0_18AssociativePatternERKSt6vectorINS1_11ReplacementESaIS6_EESA_b'/>
<use f='halide/src/Associativity.cpp' l='160' c='_ZN6Halide8Internal12_GLOBAL__N_110find_matchERKSt6vectorINS0_18AssociativePatternESaIS3_EERKS2_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5124669'/>
<use f='halide/src/Associativity.cpp' l='173' c='_ZN6Halide8Internal12_GLOBAL__N_110find_matchERKSt6vectorINS0_18AssociativePatternESaIS3_EERKS2_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5124669'/>
<use f='halide/src/Associativity.cpp' l='552' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='560' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='568' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='576' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='593' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='601' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='620' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='628' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='636' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='644' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='655' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='663' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='671' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='680' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='711' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='721' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='731' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='742' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='753' c='_ZN6Halide8Internal18associativity_testEv'/>
<use f='halide/src/Associativity.cpp' l='794' c='_ZN6Halide8Internal18associativity_testEv'/>
<size>56</size>
<use f='halide/src/IRPrinter.cpp' l='228' c='_ZN6Halide8InternallsERSoRKNS0_18AssociativePatternE'/>
<size>56</size>
