<def f='halide/build-apps/gemmlowp/public/output_stages.h' l='135' ll='139'/>
<use f='halide/build-apps/gemmlowp/internal/output.h' l='151'/>
<use f='halide/build-apps/gemmlowp/internal/output.h' l='156'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_gemm_gemmlowp.h' l='97' c='_ZN6tflite16cpu_backend_gemm6detail21GemmImplUsingGemmlowpIT_T0_T1_T2_LNS0_18QuantizationFlavorE1EE3RunERKNS0_12MatrixParamsIS3_EEPKS3_SC_SE_RKNS9_IS6194641'/>
<size>12</size>
<doc f='halide/build-apps/gemmlowp/public/output_stages.h' l='126'>// Variant of OutputStageQuantizeDownInt32ByFixedPoint where the &apos;shift&apos;
// is not necessarily just a right shift, so we can represent multipliers
// greater than 1. This takes an result_exponent parameter; when it&apos;s
// &lt;= 0, this is equivalent to OutputStageQuantizeDownInt32ByFixedPoint
// with result_shift = -result_exponent.
// In the general case, this consists in first left-shifting by
// std::max(result_exponent, 0), before doing the same as
// OutputStageQuantizeDownInt32ByFixedPoint with
// result_shift = std::max(-result_exponent, 0).</doc>
<mbr r='gemmlowp::OutputStageScaleInt32ByFixedPointAndExponent::result_fixedpoint_multiplier' o='0' t='std::int32_t'/>
<mbr r='gemmlowp::OutputStageScaleInt32ByFixedPointAndExponent::result_exponent' o='32' t='std::int32_t'/>
<mbr r='gemmlowp::OutputStageScaleInt32ByFixedPointAndExponent::result_offset_after_shift' o='64' t='std::int32_t'/>
