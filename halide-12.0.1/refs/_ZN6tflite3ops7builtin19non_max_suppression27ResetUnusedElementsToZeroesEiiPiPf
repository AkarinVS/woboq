<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/non_max_suppression.cc' l='189' ll='199' type='void tflite::ops::builtin::non_max_suppression::ResetUnusedElementsToZeroes(const int max_output_size, const int num_selected_indices, int * selected_indices, float * selected_scores)'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/non_max_suppression.cc' l='264' u='c' c='_ZN6tflite3ops7builtin19non_max_suppression4EvalEP13TfLiteContextP10TfLiteNode'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/non_max_suppression.cc' l='282' u='c' c='_ZN6tflite3ops7builtin19non_max_suppression4EvalEP13TfLiteContextP10TfLiteNode'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/non_max_suppression.cc' l='182'>// If num_selected_indices &lt; max_output_size, the output tensor can contain
// garbage values initially present in memory. This causes segfault in
// downstream ops such as GATHER, since one of the outputs denotes indices and
// int garbage values can be pretty large. This method zeroes-out the remaining
// values.
// NOTE: We ensure memory being reset is valid, by setting pertinent output
// tensors to max_output_size length in Prepare.</doc>
