<dec f='halide/build/include/HalideRuntime.h' l='846' type='int halide_device_wrap_native(void * user_context, struct halide_buffer_t * buf, uint64_t handle, const struct halide_device_interface_t * device_interface)'/>
<doc f='halide/build/include/HalideRuntime.h' l='839'>/** Wrap or detach a native device handle, setting the device field
 * and device_interface field as appropriate for the given GPU
 * API. The meaning of the opaque handle is specific to the device
 * interface, so if you know the device interface in use, call the
 * more specific functions in the runtime headers for your specific
 * device API instead (e.g. HalideRuntimeCuda.h). */
// @{</doc>
<dec f='halide/build/include/Halide.h' l='944' type='int halide_device_wrap_native(void * user_context, struct halide_buffer_t * buf, uint64_t handle, const struct halide_device_interface_t * device_interface)'/>
<doc f='halide/build/include/Halide.h' l='937'>/** Wrap or detach a native device handle, setting the device field
 * and device_interface field as appropriate for the given GPU
 * API. The meaning of the opaque handle is specific to the device
 * interface, so if you know the device interface in use, call the
 * more specific functions in the runtime headers for your specific
 * device API instead (e.g. HalideRuntimeCuda.h). */
// @{</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='846' type='int halide_device_wrap_native(void * user_context, struct halide_buffer_t * buf, uint64_t handle, const struct halide_device_interface_t * device_interface)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='839'>/** Wrap or detach a native device handle, setting the device field
 * and device_interface field as appropriate for the given GPU
 * API. The meaning of the opaque handle is specific to the device
 * interface, so if you know the device interface in use, call the
 * more specific functions in the runtime headers for your specific
 * device API instead (e.g. HalideRuntimeCuda.h). */
// @{</doc>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='918' type='int halide_device_wrap_native(void * user_context, struct halide_buffer_t * buf, uint64_t handle, const struct halide_device_interface_t * device_interface)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='911'>/** Wrap or detach a native device handle, setting the device field
 * and device_interface field as appropriate for the given GPU
 * API. The meaning of the opaque handle is specific to the device
 * interface, so if you know the device interface in use, call the
 * more specific functions in the runtime headers for your specific
 * device API instead (e.g. HalideRuntimeCuda.h). */
// @{</doc>
