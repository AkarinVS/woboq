<use f='halide/build-apps/gemmlowp/internal/pack.h' l='53' u='w' c='_ZN8gemmlowp15PackedSideBlockC1ENS_4SideEPNS_9AllocatorERKNS_11BlockParamsE'/>
<use f='halide/build-apps/gemmlowp/internal/pack.h' l='66' u='w' c='_ZNK8gemmlowp15PackedSideBlock8seek_runEii'/>
<use f='halide/build-apps/gemmlowp/internal/pack.h' l='69' u='w' c='_ZNK8gemmlowp15PackedSideBlock14seek_next_cellEv'/>
<use f='halide/build-apps/gemmlowp/internal/pack.h' l='72' u='w' c='_ZNK8gemmlowp15PackedSideBlock20seek_forward_n_cellsEi'/>
<use f='halide/build-apps/gemmlowp/internal/pack.h' l='80' u='r' c='_ZNK8gemmlowp15PackedSideBlock12current_dataEv'/>
<use f='halide/build-apps/gemmlowp/internal/pack.h' l='84' u='r' c='_ZN8gemmlowp15PackedSideBlock12current_dataEv'/>
<dec f='halide/build-apps/gemmlowp/internal/pack.h' l='127' type='int'/>
<doc f='halide/build-apps/gemmlowp/internal/pack.h' l='116'>// pos_ is the current position in the buffer, which we access
  // sequentially, like a file.
  // The idea is that we pack data in the same order as it is
  // going to be traversed during the computation, which for
  // cache-friendliness reasons is complicated to random-access,
  // as the offsets calculations would be intricate. So we
  // give up random-access addressing, and instead content ourselves
  // with sequential access.
  //
  // pos_ is mutable because during the computation we will want to
  // be able to iterate on the data in a const PackedSideBlock.</doc>
