<def f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='468' ll='471' type='llvm::TypeSize llvm::DataLayout::getTypeStoreSize(llvm::Type * Ty) const'/>
<use f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='481' u='c' c='_ZNK4llvm10DataLayout22getTypeStoreSizeInBitsEPNS_4TypeE'/>
<use f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='502' u='c' c='_ZNK4llvm10DataLayout16getTypeAllocSizeEPNS_4TypeE'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='1846' u='c' c='_ZN4llvm13IRBuilderBase19CreateAtomicCmpXchgEPNS_5ValueES2_S2_NS_14AtomicOrderingES3_h'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='1855' u='c' c='_ZN4llvm13IRBuilderBase15CreateAtomicRMWENS_13AtomicRMWInst5BinOpEPNS_5ValueES4_NS_14AtomicOrderingEh'/>
<doc f='halide/llvm-install/include/llvm/IR/DataLayout.h' l='461'>/// Returns the maximum number of bytes that may be overwritten by
  /// storing the specified type.
  ///
  /// If Ty is a scalable vector type, the scalable property will be set and
  /// the runtime size will be a positive integer multiple of the base size.
  ///
  /// For example, returns 5 for i36 and 10 for x86_fp80.</doc>
