<dec f='halide/build/include/Halide.h' l='15217' type='void Halide::Pipeline::add_requirement(const Halide::Expr &amp; condition, std::vector&lt;Expr&gt; &amp; error)'/>
<use f='halide/build/include/Halide.h' l='15226' u='c' c='_ZN6Halide8Pipeline15add_requirementERKNS_4ExprEDpOT_'/>
<doc f='halide/build/include/Halide.h' l='15210'>/** Add a top-level precondition to the generated pipeline,
     * expressed as a boolean Expr. The Expr may depend on parameters
     * only, and may not call any Func or use a Var. If the condition
     * is not true at runtime, the pipeline will call halide_error
     * with the remaining arguments, and return
     * halide_error_code_requirement_failed. Requirements are checked
     * in the order added. */</doc>
<dec f='halide/src/Pipeline.h' l='561' type='void Halide::Pipeline::add_requirement(const Halide::Expr &amp; condition, std::vector&lt;Expr&gt; &amp; error)'/>
<use f='halide/src/Pipeline.h' l='570' u='c' c='_ZN6Halide8Pipeline15add_requirementERKNS_4ExprEDpOT_'/>
<doc f='halide/src/Pipeline.h' l='554'>/** Add a top-level precondition to the generated pipeline,
     * expressed as a boolean Expr. The Expr may depend on parameters
     * only, and may not call any Func or use a Var. If the condition
     * is not true at runtime, the pipeline will call halide_error
     * with the remaining arguments, and return
     * halide_error_code_requirement_failed. Requirements are checked
     * in the order added. */</doc>
<def f='halide/src/Pipeline.cpp' l='768' ll='799' type='void Halide::Pipeline::add_requirement(const Halide::Expr &amp; condition, std::vector&lt;Expr&gt; &amp; error_args)'/>
