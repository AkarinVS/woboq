<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/external_cpu_backend_context.h' l='30' ll='41'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/external_cpu_backend_context.h' l='87' c='_ZN6tflite25ExternalCpuBackendContext28set_internal_backend_contextESt10unique_ptrINS_28TfLiteInternalBackendContextESt14default_deleteIS2_EE'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/external_cpu_backend_context.h' l='91' c='_ZNK6tflite25ExternalCpuBackendContext24internal_backend_contextEv'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/external_cpu_backend_context.h' l='97'/>
<size>8</size>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/external_cpu_backend_context.h' l='25'>// This is the base class for TF Lite internal backend contexts (like a
// RUY-based cpu backend context class). A derived internal backend context is
// generally a collection of utilities (i.e. a thread pool etc.) for TF Lite to
// use certain kernel libraries, such as Gemmlowp, RUY, etc., to implement TF
// Lite operators.</doc>
<fun r='_ZN6tflite28TfLiteInternalBackendContextD1Ev'/>
<fun r='_ZN6tflite28TfLiteInternalBackendContext16SetMaxNumThreadsEi'/>
<fun r='_ZN6tflite28TfLiteInternalBackendContext11ClearCachesEv'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/interpreter.cc' l='127' c='_ZN6tflite11InterpreterD1Ev'/>
<size>8</size>
<ovr f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.h' l='33' c='tflite::CpuBackendContext'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.h' l='33'/>
<size>8</size>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.cc' l='120' c='_ZN6tflite17CpuBackendContext14GetFromContextEP13TfLiteContext'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.cc' l='127' c='_ZN6tflite17CpuBackendContextC1Ev'/>
<size>8</size>
