<dec f='halide/build/include/Halide.h' l='17794' type='Halide::Func &amp; Halide::Func::gpu_single_thread(Halide::DeviceAPI device_api = DeviceAPI::Default_GPU)'/>
<use f='halide/build/include/Halide.h' l='18403' u='c' c='_ZN6Halide8Internal15schedule_scalarENS_4FuncE'/>
<use f='halide/build/include/Halide.h' l='25188' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase17gpu_single_threadEDpOT_'/>
<use f='halide/build/include/Halide.h' l='25188' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase17gpu_single_threadEDpOT_'/>
<doc f='halide/build/include/Halide.h' l='17790'>/** Tell Halide to run this stage using a single gpu thread and
     * block. This is not an efficient use of your GPU, but it can be
     * useful to avoid copy-back for intermediate update stages that
     * touch a very small part of your Func. */</doc>
<dec f='halide/src/Func.h' l='1914' type='Halide::Func &amp; Halide::Func::gpu_single_thread(Halide::DeviceAPI device_api = DeviceAPI::Default_GPU)'/>
<use f='halide/src/Func.h' l='2523' u='c' c='_ZN6Halide8Internal15schedule_scalarENS_4FuncE'/>
<doc f='halide/src/Func.h' l='1910'>/** Tell Halide to run this stage using a single gpu thread and
     * block. This is not an efficient use of your GPU, but it can be
     * useful to avoid copy-back for intermediate update stages that
     * touch a very small part of your Func. */</doc>
<def f='halide/src/Func.cpp' l='2443' ll='2447' type='Halide::Func &amp; Halide::Func::gpu_single_thread(Halide::DeviceAPI device_api = DeviceAPI::Default_GPU)'/>
<use f='halide/src/Generator.h' l='2254' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase17gpu_single_threadEDpOT_'/>
<use f='halide/src/Generator.h' l='2254' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase17gpu_single_threadEDpOT_'/>
