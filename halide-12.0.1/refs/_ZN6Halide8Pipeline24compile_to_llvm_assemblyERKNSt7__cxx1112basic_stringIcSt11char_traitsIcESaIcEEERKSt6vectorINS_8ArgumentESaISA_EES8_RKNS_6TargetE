<dec f='halide/build/include/Halide.h' l='14889' type='void Halide::Pipeline::compile_to_llvm_assembly(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/build/include/Halide.h' l='14885'>/** Statically compile a pipeline to llvm assembly, with the given
     * filename (which should probably end in .ll), type signature,
     * and C function name. If you&apos;re compiling a pipeline with a
     * single output Func, see also Func::compile_to_llvm_assembly. */</doc>
<use f='halide/python_bindings/src/PyPipeline.cpp' l='69' u='a' c='_ZN6Halide14PythonBindings15define_pipelineERN8pybind117module_E'/>
<dec f='halide/src/Pipeline.h' l='233' type='void Halide::Pipeline::compile_to_llvm_assembly(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/src/Pipeline.h' l='229'>/** Statically compile a pipeline to llvm assembly, with the given
     * filename (which should probably end in .ll), type signature,
     * and C function name. If you&apos;re compiling a pipeline with a
     * single output Func, see also Func::compile_to_llvm_assembly. */</doc>
<use f='halide/src/Func.cpp' l='3186' u='c' c='_ZN6Halide4Func24compile_to_llvm_assemblyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EES8_RKNS_6TargetE'/>
<use f='halide/src/Func.cpp' l='3191' u='c' c='_ZN6Halide4Func24compile_to_llvm_assemblyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EERKNS_6TargetE'/>
<def f='halide/src/Pipeline.cpp' l='273' ll='279' type='void Halide::Pipeline::compile_to_llvm_assembly(const std::string &amp; filename, const vector&lt;Halide::Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
