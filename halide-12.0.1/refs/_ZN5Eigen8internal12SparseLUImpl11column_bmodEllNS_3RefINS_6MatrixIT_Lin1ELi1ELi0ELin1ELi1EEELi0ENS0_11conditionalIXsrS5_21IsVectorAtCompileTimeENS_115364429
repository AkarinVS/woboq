<dec f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='53' type='Eigen::Index Eigen::internal::SparseLUImpl::column_bmod(const Eigen::Index jcol, const Eigen::Index nseg, Eigen::internal::SparseLUImpl::BlockScalarVector dense, Eigen::internal::SparseLUImpl::ScalarVector &amp; tempv, Eigen::internal::SparseLUImpl::BlockIndexVector segrep, Eigen::internal::SparseLUImpl::BlockIndexVector repfnz, Eigen::Index fpanelc, Eigen::internal::SparseLUImpl::GlobalLU_t &amp; glu)'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_column_bmod.h' l='52' ll='176' type='Eigen::Index Eigen::internal::SparseLUImpl::column_bmod(const Eigen::Index jcol, const Eigen::Index nseg, Eigen::internal::SparseLUImpl::BlockScalarVector dense, Eigen::internal::SparseLUImpl::ScalarVector &amp; tempv, Eigen::internal::SparseLUImpl::BlockIndexVector segrep, Eigen::internal::SparseLUImpl::BlockIndexVector repfnz, Eigen::Index fpanelc, Eigen::internal::SparseLUImpl::GlobalLU_t &amp; glu)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_column_bmod.h' l='37'>/**
 * \brief Performs numeric block updates (sup-col) in topological order
 * 
 * \param jcol current column to update
 * \param nseg Number of segments in the U part
 * \param dense Store the full representation of the column
 * \param tempv working array 
 * \param segrep segment representative ...
 * \param repfnz ??? First nonzero column in each row ???  ...
 * \param fpanelc First column in the current panel
 * \param glu Global LU data. 
 * \return 0 - successful return 
 *         &gt; 0 - number of bytes allocated when run out of space
 * 
 */</doc>
