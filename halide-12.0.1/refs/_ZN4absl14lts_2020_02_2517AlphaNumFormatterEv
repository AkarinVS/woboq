<def f='halide/build-apps/abseil-cpp/absl/strings/str_join.h' l='102' ll='104' type='strings_internal::AlphaNumFormatterImpl absl::lts_2020_02_25::AlphaNumFormatter()'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_join.h' l='131' u='c' c='_ZN4absl14lts_2020_02_2513PairFormatterENS0_11string_viewE'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_join.h' l='131' u='c' c='_ZN4absl14lts_2020_02_2513PairFormatterENS0_11string_viewE'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_join.h' l='153' u='c' c='_ZN4absl14lts_2020_02_2520DereferenceFormatterEv'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_join.h' l='287' u='c' c='_ZN4absl14lts_2020_02_257StrJoinB5cxx11ERKSt5tupleIJDpT_EENS0_11string_viewE'/>
<doc f='halide/build-apps/abseil-cpp/absl/strings/str_join.h' l='65'>// -----------------------------------------------------------------------------
// Concept: Formatter
// -----------------------------------------------------------------------------
//
// A Formatter is a function object that is responsible for formatting its
// argument as a string and appending it to a given output std::string.
// Formatters may be implemented as function objects, lambdas, or normal
// functions. You may provide your own Formatter to enable `absl::StrJoin()` to
// work with arbitrary types.
//
// The following is an example of a custom Formatter that simply uses
// `std::to_string()` to format an integer as a std::string.
//
//   struct MyFormatter {
//     void operator()(std::string* out, int i) const {
//       out-&gt;append(std::to_string(i));
//     }
//   };
//
// You would use the above formatter by passing an instance of it as the final
// argument to `absl::StrJoin()`:
//
//   std::vector&lt;int&gt; v = {1, 2, 3, 4};
//   std::string s = absl::StrJoin(v, &quot;-&quot;, MyFormatter());
//   EXPECT_EQ(&quot;1-2-3-4&quot;, s);
//
// The following standard formatters are provided within this file:
//
// - `AlphaNumFormatter()` (the default)
// - `StreamFormatter()`
// - `PairFormatter()`
// - `DereferenceFormatter()`

// AlphaNumFormatter()
//
// Default formatter used if none is specified. Uses `absl::AlphaNum` to convert
// numeric arguments to strings.</doc>
