<dec f='halide/build/include/Halide.h' l='17918' type='Halide::Func &amp; Halide::Func::reorder_storage(const std::vector&lt;Var&gt; &amp; dims)'/>
<use f='halide/build/include/Halide.h' l='17925' u='c' c='_ZN6Halide4Func15reorder_storageERKNS_3VarES3_DpOT_'/>
<doc f='halide/build/include/Halide.h' l='17903'>/** Specify how the storage for the function is laid out. These
     * calls let you specify the nesting order of the dimensions. For
     * example, foo.reorder_storage(y, x) tells Halide to use
     * column-major storage for any realizations of foo, without
     * changing how you refer to foo in the code. You may want to do
     * this if you intend to vectorize across y. When representing
     * color images, foo.reorder_storage(c, x, y) specifies packed
     * storage (red, green, and blue values adjacent in memory), and
     * foo.reorder_storage(x, y, c) specifies planar storage (entire
     * red, green, and blue images one after the other in memory).
     *
     * If you leave out some dimensions, those remain in the same
     * positions in the nesting order while the specified variables
     * are reordered around them. */
    // @{</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='193' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<use f='halide/python_bindings/src/PyFunc.cpp' l='195' u='c' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='2038' type='Halide::Func &amp; Halide::Func::reorder_storage(const std::vector&lt;Var&gt; &amp; dims)'/>
<use f='halide/src/Func.h' l='2045' u='c' c='_ZN6Halide4Func15reorder_storageERKNS_3VarES3_DpOT_'/>
<doc f='halide/src/Func.h' l='2023'>/** Specify how the storage for the function is laid out. These
     * calls let you specify the nesting order of the dimensions. For
     * example, foo.reorder_storage(y, x) tells Halide to use
     * column-major storage for any realizations of foo, without
     * changing how you refer to foo in the code. You may want to do
     * this if you intend to vectorize across y. When representing
     * color images, foo.reorder_storage(c, x, y) specifies packed
     * storage (red, green, and blue values adjacent in memory), and
     * foo.reorder_storage(x, y, c) specifies planar storage (entire
     * red, green, and blue images one after the other in memory).
     *
     * If you leave out some dimensions, those remain in the same
     * positions in the nesting order while the specified variables
     * are reordered around them. */
    // @{</doc>
<def f='halide/src/Func.cpp' l='2584' ll='2588' type='Halide::Func &amp; Halide::Func::reorder_storage(const std::vector&lt;Var&gt; &amp; dims)'/>
<use f='halide/src/autoschedulers/adams2019/State.cpp' l='671' u='c' c='_ZN6Halide8Internal13Autoscheduler5State14apply_scheduleERKNS1_11FunctionDAGERKNS_13MachineParamsE'/>
<use f='halide/src/autoschedulers/li2018/GradientAutoscheduler.cpp' l='61' u='c' c='_ZN6Halide8Internal13Autoscheduler12_GLOBAL__N_115reorder_storageENS_4FuncERKSt6vectorINS_3VarESaIS5_EERNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE'/>
