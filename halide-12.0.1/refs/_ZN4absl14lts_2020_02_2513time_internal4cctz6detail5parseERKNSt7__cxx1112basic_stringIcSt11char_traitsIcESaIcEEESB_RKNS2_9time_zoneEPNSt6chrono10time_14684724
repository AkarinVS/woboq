<dec f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/include/cctz/time_zone.h' l='280' type='bool absl::lts_2020_02_25::time_internal::cctz::detail::parse(const std::string &amp; , const std::string &amp; , const absl::lts_2020_02_25::time_internal::cctz::time_zone &amp; , time_point&lt;absl::lts_2020_02_25::time_internal::cctz::seconds&gt; * , absl::lts_2020_02_25::time_internal::cctz::detail::femtoseconds * , std::string * err = nullptr)'/>
<use f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/include/cctz/time_zone.h' l='370' u='c' c='_ZN4absl14lts_2020_02_2513time_internal4cctz5parseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_RKNS2_9time_zoneEPNSt6chrono10time_pointIN6431837'/>
<use f='halide/build-apps/abseil-cpp/absl/time/format.cc' l='125' u='c' c='_ZN4absl14lts_2020_02_259ParseTimeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_NS0_8TimeZoneEPNS0_4TimeEPS6_'/>
<def f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_format.cc' l='621' ll='916' type='bool absl::lts_2020_02_25::time_internal::cctz::detail::parse(const std::string &amp; format, const std::string &amp; input, const absl::lts_2020_02_25::time_internal::cctz::time_zone &amp; tz, time_point&lt;absl::lts_2020_02_25::time_internal::cctz::seconds&gt; * sec, detail::femtoseconds * fs, std::string * err = nullptr)'/>
<doc f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_format.cc' l='607'>// Uses strptime(3) to parse the given input.  Supports the same extended
// format specifiers as format(), although %E#S and %E*S are treated
// identically (and similarly for %E#f and %E*f).  %Ez and %E*z also accept
// the same inputs.
//
// The standard specifiers from RFC3339_* (%Y, %m, %d, %H, %M, and %S) are
// handled internally so that we can normally avoid strptime() altogether
// (which is particularly helpful when the native implementation is broken).
//
// The TZ/GNU %s extension is handled internally because strptime() has to
// use localtime_r() to generate it, and that assumes the local time zone.
//
// We also handle the %z specifier to accommodate platforms that do not
// support the tm_gmtoff extension to std::tm.  %Z is parsed but ignored.</doc>
