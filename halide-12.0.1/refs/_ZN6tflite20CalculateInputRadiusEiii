<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.h' l='255' type='int tflite::CalculateInputRadius(int input_integer_bits, int input_left_shift, int total_signed_bits = 31)'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/activations.cc' l='409' u='c' c='_ZN6tflite3ops7builtin11activations11TanhPrepareEP13TfLiteContextP10TfLiteNode'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/activations.cc' l='514' u='c' c='_ZN6tflite3ops7builtin11activations14SigmoidPrepareEP13TfLiteContextP10TfLiteNode'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.h' l='250'>// Calculate the largest input that will result in a within-bounds intermediate
// result within MultiplyByQuantizedMultiplierGreaterThanOne.  In other words,
// it must not overflow before we reduce the value by multiplication by the
// input multiplier.  The negative radius is used as the minimum difference in
// Softmax.</doc>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.cc' l='317' ll='334' type='int tflite::CalculateInputRadius(int input_integer_bits, int input_left_shift, int total_signed_bits = 31)'/>
