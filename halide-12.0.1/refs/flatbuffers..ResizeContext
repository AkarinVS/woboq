<def f='halide/build-apps/flatbuffers/src/reflection.cpp' l='177' ll='307'/>
<use f='halide/build-apps/flatbuffers/src/reflection.cpp' l='299' c='_ZN11flatbuffers13ResizeContextaSERKS0_'/>
<use f='halide/build-apps/flatbuffers/src/reflection.cpp' l='320' c='_ZN11flatbuffers9SetStringERKN10reflection6SchemaERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKNS_6StringEPSt6vectorIhSaIhEEPKNS0_6ObjectE'/>
<use f='halide/build-apps/flatbuffers/src/reflection.cpp' l='346' c='_ZN11flatbuffers15ResizeAnyVectorERKN10reflection6SchemaEjPKNS_11VectorOfAnyEjjPSt6vectorIhSaIhEEPKNS0_6ObjectE'/>
<size>56</size>
<doc f='halide/build-apps/flatbuffers/src/reflection.cpp' l='169'>// Resize a FlatBuffer in-place by iterating through all offsets in the buffer
// and adjusting them by &quot;delta&quot; if they straddle the start offset.
// Once that is done, bytes can now be inserted/deleted safely.
// &quot;delta&quot; may be negative (shrinking).
// Unless &quot;delta&quot; is a multiple of the largest alignment, you&apos;ll create a small
// amount of garbage space in the buffer (usually 0..7 bytes).
// If your FlatBuffer&apos;s root table is not the schema&apos;s root table, you should
// pass in your root_table type as well.</doc>
