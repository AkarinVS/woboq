<dec f='halide/build/include/Halide.h' l='7374' type='Halide::Expr Halide::operator&lt;=(int a, Halide::Expr b)'/>
<doc f='halide/build/include/Halide.h' l='7370'>/** Return a boolean expression that tests whether a constant integer
 * is less than or equal to an expression. Coerces the integer to the
 * type of the expression. Errors if the integer is not representable
 * in that type. */</doc>
<dec f='halide/src/IROperator.h' l='569' type='Halide::Expr Halide::operator&lt;=(int a, Halide::Expr b)'/>
<doc f='halide/src/IROperator.h' l='565'>/** Return a boolean expression that tests whether a constant integer
 * is less than or equal to an expression. Coerces the integer to the
 * type of the expression. Errors if the integer is not representable
 * in that type. */</doc>
<use f='halide/src/Bounds.cpp' l='3160' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<def f='halide/src/IROperator.cpp' l='1722' ll='1727' type='Halide::Expr Halide::operator&lt;=(int a, Halide::Expr b)'/>
<use f='halide/src/Monotonic.cpp' l='738' u='c' c='_ZN6Halide8Internal17is_monotonic_testEv'/>
<use f='halide/src/Monotonic.cpp' l='739' u='c' c='_ZN6Halide8Internal17is_monotonic_testEv'/>
