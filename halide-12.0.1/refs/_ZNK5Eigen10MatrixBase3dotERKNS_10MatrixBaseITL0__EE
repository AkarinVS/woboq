<dec f='halide/build-apps/eigen/Eigen/src/Core/MatrixBase.h' l='190' type='typename ScalarBinaryOpTraits&lt;typename internal::traits&lt;Derived&gt;::Scalar, typename internal::traits&lt;OtherDerived&gt;::Scalar&gt;::ReturnType Eigen::MatrixBase::dot(const MatrixBase&lt;OtherDerived&gt; &amp; other) const'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/Dot.h' l='67' ll='85' type='typename ScalarBinaryOpTraits&lt;typename internal::traits&lt;Derived&gt;::Scalar, typename internal::traits&lt;OtherDerived&gt;::Scalar&gt;::ReturnType Eigen::MatrixBase::dot(const MatrixBase&lt;OtherDerived&gt; &amp; other) const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Dot.h' l='56'>/** \fn MatrixBase::dot
  * \returns the dot product of *this with other.
  *
  * \only_for_vectors
  *
  * \note If the scalar type is complex numbers, then this function returns the hermitian
  * (sesquilinear) dot product, conjugate-linear in the first variable and linear in the
  * second variable.
  *
  * \sa squaredNorm(), norm()
  */</doc>
<use f='halide/build-apps/eigen/blas/level1_cplx_impl.h' l='76' u='c' c='zdotcw_'/>
<use f='halide/build-apps/eigen/blas/level1_cplx_impl.h' l='77' u='c' c='zdotcw_'/>
<use f='halide/build-apps/eigen/blas/level1_cplx_impl.h' l='78' u='c' c='zdotcw_'/>
<use f='halide/build-apps/eigen/blas/level1_cplx_impl.h' l='79' u='c' c='zdotcw_'/>
<use f='halide/build-apps/eigen/blas/level1_cplx_impl.h' l='80' u='c' c='zdotcw_'/>
