<dec f='halide/build-apps/flatbuffers/include/flatbuffers/idl.h' l='987' type='bool flatbuffers::GenerateTextFromTable(const flatbuffers::Parser &amp; parser, const void * table, const std::string &amp; tablename, std::string * text)'/>
<def f='halide/build-apps/flatbuffers/src/idl_gen_text.cpp' l='361' ll='367' type='bool flatbuffers::GenerateTextFromTable(const flatbuffers::Parser &amp; parser, const void * table, const std::string &amp; table_name, std::string * _text)'/>
<doc f='halide/build-apps/flatbuffers/src/idl_gen_text.cpp' l='360'>// Generate a text representation of a flatbuffer in JSON format.</doc>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/idl.h' l='979'>// Generate text (JSON) from a given FlatBuffer, and a given Parser
// object that has been populated with the corresponding schema.
// If ident_step is 0, no indentation will be generated. Additionally,
// if it is less than 0, no linefeeds will be generated either.
// See idl_gen_text.cpp.
// strict_json adds &quot;quotes&quot; around field names if true.
// If the flatbuffer cannot be encoded in JSON (e.g., it contains non-UTF-8
// byte arrays in String values), returns false.</doc>
