<use f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='497'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='498'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='499'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='500'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/VectorwiseOp.h' l='186' ll='752'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Replicate.h' l='134' c='_ZNK5Eigen12VectorwiseOp9replicateEl'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Replicate.h' l='133' c='_ZNK5Eigen12VectorwiseOp9replicateEl'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Replicate.h' l='136' c='_ZNK5Eigen12VectorwiseOp9replicateEl'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Reverse.h' l='208' c='_ZN5Eigen12VectorwiseOp14reverseInPlaceEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/OrthoMethods.h' l='111' c='_ZNK5Eigen12VectorwiseOp5crossERKNS_10MatrixBaseITL0__EE'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/OrthoMethods.h' l='110' c='_ZNK5Eigen12VectorwiseOp5crossERKNS_10MatrixBaseITL0__EE'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/Homogeneous.h' l='148' c='_ZNK5Eigen12VectorwiseOp11homogeneousEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/Homogeneous.h' l='196' c='_ZNK5Eigen12VectorwiseOp11hnormalizedEv'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/Homogeneous.h' l='195' c='_ZNK5Eigen12VectorwiseOp11hnormalizedEv'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/VectorwiseOp.h' l='149'>/** \class VectorwiseOp
  * \ingroup Core_Module
  *
  * \brief Pseudo expression providing broadcasting and partial reduction operations
  *
  * \tparam ExpressionType the type of the object on which to do partial reductions
  * \tparam Direction indicates whether to operate on columns (#Vertical) or rows (#Horizontal)
  *
  * This class represents a pseudo expression with broadcasting and partial reduction features.
  * It is the return type of DenseBase::colwise() and DenseBase::rowwise()
  * and most of the time this is the only way it is explicitly used.
  *
  * To understand the logic of rowwise/colwise expression, let&apos;s consider a generic case `A.colwise().foo()`
  * where `foo` is any method of `VectorwiseOp`. This expression is equivalent to applying `foo()` to each
  * column of `A` and then re-assemble the outputs in a matrix expression:
  * \code [A.col(0).foo(), A.col(1).foo(), ..., A.col(A.cols()-1).foo()] \endcode
  * 
  * Example: \include MatrixBase_colwise.cpp
  * Output: \verbinclude MatrixBase_colwise.out
  *
  * The begin() and end() methods are obviously exceptions to the previous rule as they
  * return STL-compatible begin/end iterators to the rows or columns of the nested expression.
  * Typical use cases include for-range-loop and calls to STL algorithms:
  * 
  * Example: \include MatrixBase_colwise_iterator_cxx11.cpp
  * Output: \verbinclude MatrixBase_colwise_iterator_cxx11.out
  * 
  * For a partial reduction on an empty input, some rules apply.
  * For the sake of clarity, let&apos;s consider a vertical reduction:
  *   - If the number of columns is zero, then a 1x0 row-major vector expression is returned.
  *   - Otherwise, if the number of rows is zero, then
  *       - a row vector of zeros is returned for sum-like reductions (sum, squaredNorm, norm, etc.)
  *       - a row vector of ones is returned for a product reduction (e.g., &lt;code&gt;MatrixXd(n,0).colwise().prod()&lt;/code&gt;)
  *       - an assert is triggered for all other reductions (minCoeff,maxCoeff,redux(bin_op))
  * 
  * \sa DenseBase::colwise(), DenseBase::rowwise(), class PartialReduxExpr
  */</doc>
<fun r='_ZNK5Eigen12VectorwiseOp10extendedToERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZNK5Eigen12VectorwiseOp18extendedToOppositeERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZN5Eigen12VectorwiseOpC1ERT_'/>
<fun r='_ZNK5Eigen12VectorwiseOp11_expressionEv'/>
<fun r='_ZN5Eigen12VectorwiseOp5beginEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp5beginEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp6cbeginEv'/>
<fun r='_ZN5Eigen12VectorwiseOp6rbeginEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp6rbeginEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp7crbeginEv'/>
<fun r='_ZN5Eigen12VectorwiseOp3endEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp3endEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp4cendEv'/>
<fun r='_ZN5Eigen12VectorwiseOp4rendEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp4rendEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp5crendEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp5reduxERKTL0__'/>
<fun r='_ZNK5Eigen12VectorwiseOp8minCoeffEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp8maxCoeffEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp11squaredNormEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp4normEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp6lpNormEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp8blueNormEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp10stableNormEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp9hypotNormEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp3sumEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp4meanEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp3allEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp3anyEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp5countEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp4prodEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp7reverseEv'/>
<fun r='_ZN5Eigen12VectorwiseOp7reverseEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp9replicateEl'/>
<fun r='_ZNK5Eigen12VectorwiseOp9replicateEl'/>
<fun r='_ZN5Eigen12VectorwiseOpaSERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZN5Eigen12VectorwiseOppLERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZN5Eigen12VectorwiseOpmIERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZN5Eigen12VectorwiseOpmLERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZN5Eigen12VectorwiseOpdVERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZNK5Eigen12VectorwiseOpplERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZNK5Eigen12VectorwiseOpmiERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZNK5Eigen12VectorwiseOpmlERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZNK5Eigen12VectorwiseOpdvERKNS_9DenseBaseITL0__EE'/>
<fun r='_ZNK5Eigen12VectorwiseOp10normalizedEv'/>
<fun r='_ZN5Eigen12VectorwiseOp9normalizeEv'/>
<fun r='_ZN5Eigen12VectorwiseOp14reverseInPlaceEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp11homogeneousEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp5crossERKNS_10MatrixBaseITL0__EE'/>
<fun r='_ZNK5Eigen12VectorwiseOp11hnormalizedEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp12redux_lengthEv'/>
<mbr r='Eigen::VectorwiseOp::m_matrix' t='Eigen::VectorwiseOp::ExpressionTypeNested'/>
<fun r='_ZNK5Eigen12VectorwiseOp9replicateEl'/>
<fun r='_ZN5Eigen12VectorwiseOp14reverseInPlaceEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp5crossERKNS_10MatrixBaseITL0__EE'/>
<fun r='_ZNK5Eigen12VectorwiseOp11homogeneousEv'/>
<fun r='_ZNK5Eigen12VectorwiseOp11hnormalizedEv'/>
