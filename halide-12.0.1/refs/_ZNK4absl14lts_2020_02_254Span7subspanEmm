<def f='halide/build-apps/abseil-cpp/absl/types/span.h' l='386' ll='390' type='Span&lt;T&gt; absl::lts_2020_02_25::Span::subspan(absl::lts_2020_02_25::Span::size_type pos = 0, absl::lts_2020_02_25::Span::size_type len = npos) const'/>
<doc f='halide/build-apps/abseil-cpp/absl/types/span.h' l='370'>// Span::subspan()
  //
  // Returns a `Span` starting at element `pos` and of length `len`. Both `pos`
  // and `len` are of type `size_type` and thus non-negative. Parameter `pos`
  // must be &lt;= size(). Any `len` value that points past the end of the span
  // will be trimmed to at most size() - `pos`. A default `len` value of `npos`
  // ensures the returned subspan continues until the end of the span.
  //
  // Examples:
  //
  //   std::vector&lt;int&gt; vec = {10, 11, 12, 13};
  //   absl::MakeSpan(vec).subspan(1, 2);  // {11, 12}
  //   absl::MakeSpan(vec).subspan(2, 8);  // {12, 13}
  //   absl::MakeSpan(vec).subspan(1);     // {11, 12, 13}
  //   absl::MakeSpan(vec).subspan(4);     // {}
  //   absl::MakeSpan(vec).subspan(5);     // throws std::out_of_range</doc>
