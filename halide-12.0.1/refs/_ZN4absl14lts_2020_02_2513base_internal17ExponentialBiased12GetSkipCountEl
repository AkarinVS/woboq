<dec f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.h' l='93' type='int64_t absl::lts_2020_02_25::base_internal::ExponentialBiased::GetSkipCount(int64_t mean)'/>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.cc' l='41' ll='70' type='int64_t absl::lts_2020_02_25::base_internal::ExponentialBiased::GetSkipCount(int64_t mean)'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.cc' l='73' u='c' c='_ZN4absl14lts_2020_02_2513base_internal17ExponentialBiased9GetStrideEl'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.cc' l='31'>// The algorithm generates a random number between 0 and 1 and applies the
// inverse cumulative distribution function for an exponential. Specifically:
// Let m be the inverse of the sample period, then the probability
// distribution function is m*exp(-mx) so the CDF is
// p = 1 - exp(-mx), so
// q = 1 - p = exp(-mx)
// log_e(q) = -mx
// -log_e(q)/m = x
// log_2(q) * (-log_e(2) * 1/m) = x
// In the code, q is actually in the range 1 to 2**26, hence the -26 below</doc>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.h' l='79'>// `GetSkipCount()` returns the number of events to skip before some chosen
  // event happens. For example, randomly tossing a coin, we will on average
  // throw heads once before we get tails. We can simulate random coin tosses
  // using GetSkipCount() as:
  //
  //   ExponentialBiased eb;
  //   for (...) {
  //     int number_of_heads_before_tail = eb.GetSkipCount(1);
  //     for (int flips = 0; flips &lt; number_of_heads_before_tail; ++flips) {
  //       printf(&quot;head...&quot;);
  //     }
  //     printf(&quot;tail\n&quot;);
  //   }
  //</doc>
