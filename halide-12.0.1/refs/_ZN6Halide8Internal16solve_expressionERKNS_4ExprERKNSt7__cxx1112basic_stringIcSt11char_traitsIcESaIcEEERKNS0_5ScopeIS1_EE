<dec f='halide/build/include/Halide.h' l='31339' type='Halide::Internal::SolverResult Halide::Internal::solve_expression(const Halide::Expr &amp; e, const std::string &amp; variable, const Scope&lt;Halide::Expr&gt; &amp; scope = Scope&lt;Expr&gt;::empty_scope())'/>
<doc f='halide/build/include/Halide.h' l='31331'>/** Attempts to collect all instances of a variable in an expression
 * tree and place it as far to the left as possible, and as far up the
 * tree as possible (i.e. outside most parentheses). If the expression
 * is an equality or comparison, this &apos;solves&apos; the equation. Returns a
 * pair of Expr and bool. The Expr is the mutated expression, and the
 * bool indicates whether there is a single instance of the variable
 * in the result. If it is false, the expression has only been partially
 * solved, and there are still multiple instances of the variable. */</doc>
<dec f='halide/src/Solve.h' l='27' type='Halide::Internal::SolverResult Halide::Internal::solve_expression(const Halide::Expr &amp; e, const std::string &amp; variable, const Scope&lt;Halide::Expr&gt; &amp; scope = Scope&lt;Expr&gt;::empty_scope())'/>
<use f='halide/src/Associativity.cpp' l='365' u='c' c='_ZN6Halide8Internal19prove_associativityERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorINS_4ExprESaISA_EESC_'/>
<doc f='halide/src/Solve.h' l='19'>/** Attempts to collect all instances of a variable in an expression
 * tree and place it as far to the left as possible, and as far up the
 * tree as possible (i.e. outside most parentheses). If the expression
 * is an equality or comparison, this &apos;solves&apos; the equation. Returns a
 * pair of Expr and bool. The Expr is the mutated expression, and the
 * bool indicates whether there is a single instance of the variable
 * in the result. If it is false, the expression has only been partially
 * solved, and there are still multiple instances of the variable. */</doc>
<use f='halide/src/Bounds.cpp' l='1908' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_115SolveIfThenElse5visitEPKNS0_10IfThenElseE'/>
<use f='halide/src/Bounds.cpp' l='2493' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_112BoxesTouched5visitEPKNS0_10IfThenElseE'/>
<use f='halide/src/FuseGPUThreadLoops.cpp' l='350' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_131ExtractSharedAndHeapAllocations5visitEPKNS0_3ForE'/>
<use f='halide/src/LowerWarpShuffles.cpp' l='578' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_117LowerWarpShuffles14make_warp_loadENS_4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_4ExprESC_'/>
<use f='halide/src/LowerWarpShuffles.cpp' l='635' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_117LowerWarpShuffles5visitEPKNS0_4LoadE'/>
<use f='halide/src/SimplifyCorrelatedDifferences.cpp' l='197' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_129SimplifyCorrelatedDifferences31cancel_correlated_subexpressionENS_4ExprERKS3_S5_b'/>
<use f='halide/src/Solve.cpp' l='991' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116SolveForInterval5visitEPKNS0_2LEE'/>
<use f='halide/src/Solve.cpp' l='1048' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116SolveForInterval5visitEPKNS0_2GEE'/>
<def f='halide/src/Solve.cpp' l='1145' ll='1154' type='Halide::Internal::SolverResult Halide::Internal::solve_expression(const Halide::Expr &amp; e, const std::string &amp; variable, const Scope&lt;Halide::Expr&gt; &amp; scope = Scope&lt;Expr&gt;::empty_scope())'/>
<use f='halide/src/Solve.cpp' l='1197' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111check_solveERKNS_4ExprES4_'/>
<use f='halide/src/Solve.cpp' l='1283' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1298' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1320' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1326' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1438' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/TrimNoOps.cpp' l='232' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_119SimplifyUsingBounds25provably_true_over_domainENS_4ExprE'/>
