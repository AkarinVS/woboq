<dec f='halide/halide-install/include/Halide.h' l='16816' type='void Halide::Func::compile_to_c(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name = &quot;&quot;, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/halide-install/include/Halide.h' l='16812'>/** Statically compile this function to C source code. This is
     * useful for providing fallback code paths that will compile on
     * many platforms. Vectorization will fail, and parallelization
     * will produce serial code. */</doc>
<dec f='halide/build/include/Halide.h' l='16816' type='void Halide::Func::compile_to_c(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name = &quot;&quot;, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/build/include/Halide.h' l='16812'>/** Statically compile this function to C source code. This is
     * useful for providing fallback code paths that will compile on
     * many platforms. Vectorization will fail, and parallelization
     * will produce serial code. */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='230' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='936' type='void Halide::Func::compile_to_c(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name = &quot;&quot;, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/src/Func.h' l='932'>/** Statically compile this function to C source code. This is
     * useful for providing fallback code paths that will compile on
     * many platforms. Vectorization will fail, and parallelization
     * will produce serial code. */</doc>
<def f='halide/src/Func.cpp' l='3209' ll='3212' type='void Halide::Func::compile_to_c(const std::string &amp; filename, const vector&lt;Halide::Argument&gt; &amp; args, const std::string &amp; fn_name = &quot;&quot;, const Halide::Target &amp; target = get_target_from_environment())'/>
