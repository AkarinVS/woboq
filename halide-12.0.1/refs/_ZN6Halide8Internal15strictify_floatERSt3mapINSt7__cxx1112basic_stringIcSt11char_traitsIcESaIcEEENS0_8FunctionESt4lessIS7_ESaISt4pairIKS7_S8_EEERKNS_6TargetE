<dec f='halide/build/include/Halide.h' l='31515' type='bool Halide::Internal::strictify_float(std::map&lt;std::string, Function&gt; &amp; env, const Halide::Target &amp; t)'/>
<doc f='halide/build/include/Halide.h' l='31507'>/** Propagate strict_float intrinisics such that they immediately wrap
 * all floating-point expressions. This makes the IR nodes context
 * independent.  If the Target::StrictFloat flag is specified in
 * target, starts in strict_float mode so all floating-point type
 * Exprs in the compilation will be marked with strict_float. Returns
 * whether any strict floating-point is used in any function in the
 * passed in env.
 */</doc>
<dec f='halide/src/StrictifyFloat.h' l='27' type='bool Halide::Internal::strictify_float(std::map&lt;std::string, Function&gt; &amp; env, const Halide::Target &amp; t)'/>
<use f='halide/src/Lower.cpp' l='122' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
<doc f='halide/src/StrictifyFloat.h' l='19'>/** Propagate strict_float intrinisics such that they immediately wrap
 * all floating-point expressions. This makes the IR nodes context
 * independent.  If the Target::StrictFloat flag is specified in
 * target, starts in strict_float mode so all floating-point type
 * Exprs in the compilation will be marked with strict_float. Returns
 * whether any strict floating-point is used in any function in the
 * passed in env.
 */</doc>
<def f='halide/src/StrictifyFloat.cpp' l='66' ll='82' type='bool Halide::Internal::strictify_float(std::map&lt;std::string, Function&gt; &amp; env, const Halide::Target &amp; t)'/>
