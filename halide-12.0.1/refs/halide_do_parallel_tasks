<dec f='halide/build/include/HalideRuntime.h' l='252' type='int halide_do_parallel_tasks(void * user_context, int num_tasks, struct halide_parallel_task_t * tasks, void * task_parent)'/>
<doc f='halide/build/include/HalideRuntime.h' l='246'>/** Enqueue some number of the tasks described above and wait for them
 * to complete. While waiting, the calling threads assists with either
 * the tasks enqueued, or other non-blocking tasks in the task
 * system. Note that task_parent should be NULL for top-level calls
 * and the pass through argument if this call is being made from
 * another task. */</doc>
<dec f='halide/build/include/Halide.h' l='350' type='int halide_do_parallel_tasks(void * user_context, int num_tasks, struct halide_parallel_task_t * tasks, void * task_parent)'/>
<doc f='halide/build/include/Halide.h' l='344'>/** Enqueue some number of the tasks described above and wait for them
 * to complete. While waiting, the calling threads assists with either
 * the tasks enqueued, or other non-blocking tasks in the task
 * system. Note that task_parent should be NULL for top-level calls
 * and the pass through argument if this call is being made from
 * another task. */</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='252' type='int halide_do_parallel_tasks(void * user_context, int num_tasks, struct halide_parallel_task_t * tasks, void * task_parent)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='246'>/** Enqueue some number of the tasks described above and wait for them
 * to complete. While waiting, the calling threads assists with either
 * the tasks enqueued, or other non-blocking tasks in the task
 * system. Note that task_parent should be NULL for top-level calls
 * and the pass through argument if this call is being made from
 * another task. */</doc>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='324' type='int halide_do_parallel_tasks(void * user_context, int num_tasks, struct halide_parallel_task_t * tasks, void * task_parent)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='318'>/** Enqueue some number of the tasks described above and wait for them
 * to complete. While waiting, the calling threads assists with either
 * the tasks enqueued, or other non-blocking tasks in the task
 * system. Note that task_parent should be NULL for top-level calls
 * and the pass through argument if this call is being made from
 * another task. */</doc>
