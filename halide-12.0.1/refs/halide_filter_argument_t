<def f='halide/build/include/HalideRuntime.h' l='1651' ll='1666'/>
<use f='halide/build/include/HalideRuntime.h' l='1683'/>
<size>64</size>
<doc f='halide/build/include/HalideRuntime.h' l='1647'>/**
 * halide_filter_argument_t is essentially a plain-C-struct equivalent to
 * Halide::Argument; most user code will never need to create one.
 */</doc>
<mbr r='halide_filter_argument_t::name' o='0' t='const char *'/>
<mbr r='halide_filter_argument_t::kind' o='64' t='int32_t'/>
<mbr r='halide_filter_argument_t::dimensions' o='96' t='int32_t'/>
<mbr r='halide_filter_argument_t::type' o='128' t='struct halide_type_t'/>
<mbr r='halide_filter_argument_t::scalar_def' o='192' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_min' o='256' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_max' o='320' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_estimate' o='384' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::buffer_estimates' o='448' t='const int64_t *const *'/>
<def f='halide/build/include/Halide.h' l='1749' ll='1764'/>
<use f='halide/build/include/Halide.h' l='1781'/>
<size>64</size>
<doc f='halide/build/include/Halide.h' l='1745'>/**
 * halide_filter_argument_t is essentially a plain-C-struct equivalent to
 * Halide::Argument; most user code will never need to create one.
 */</doc>
<mbr r='halide_filter_argument_t::name' o='0' t='const char *'/>
<mbr r='halide_filter_argument_t::kind' o='64' t='int32_t'/>
<mbr r='halide_filter_argument_t::dimensions' o='96' t='int32_t'/>
<mbr r='halide_filter_argument_t::type' o='128' t='struct halide_type_t'/>
<mbr r='halide_filter_argument_t::scalar_def' o='192' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_min' o='256' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_max' o='320' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_estimate' o='384' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::buffer_estimates' o='448' t='const int64_t *const *'/>
<def f='halide/src/runtime/HalideRuntime.h' l='1651' ll='1666'/>
<use f='halide/src/runtime/HalideRuntime.h' l='1683'/>
<size>64</size>
<doc f='halide/src/runtime/HalideRuntime.h' l='1647'>/**
 * halide_filter_argument_t is essentially a plain-C-struct equivalent to
 * Halide::Argument; most user code will never need to create one.
 */</doc>
<mbr r='halide_filter_argument_t::name' o='0' t='const char *'/>
<mbr r='halide_filter_argument_t::kind' o='64' t='int32_t'/>
<mbr r='halide_filter_argument_t::dimensions' o='96' t='int32_t'/>
<mbr r='halide_filter_argument_t::type' o='128' t='struct halide_type_t'/>
<mbr r='halide_filter_argument_t::scalar_def' o='192' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_min' o='256' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_max' o='320' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_estimate' o='384' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::buffer_estimates' o='448' t='const int64_t *const *'/>
<use f='halide/test/generator/metadata_tester_aottest.cpp' l='156' c='_Z14match_argumentRK24halide_filter_argument_tS1_'/>
<use f='halide/test/generator/metadata_tester_aottest.cpp' l='156' c='_Z14match_argumentRK24halide_filter_argument_tS1_'/>
<use f='halide/test/generator/metadata_tester_aottest.cpp' l='374' c='_Z14check_metadataRK24halide_filter_metadata_tb'/>
<use f='halide/test/generator/metadata_tester_aottest.cpp' l='1336' c='_Z14check_metadataRK24halide_filter_metadata_tb'/>
<size>64</size>
<use f='halide/tools/RunGen.h' l='335' c='_ZN6Halide6RunGen35try_parse_metadata_buffer_estimatesEPK24halide_filter_argument_tPSt6vectorI18halide_dimension_tSaIS5_EE'/>
<use f='halide/tools/RunGen.h' l='362' c='_ZN6Halide6RunGen31parse_metadata_buffer_estimatesEPK24halide_filter_argument_t'/>
<use f='halide/tools/RunGen.h' l='482' c='_ZN6Halide6RunGen20load_input_from_fileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK24halide_filter_argument_t'/>
<use f='halide/tools/RunGen.h' l='707'/>
<use f='halide/tools/RunGen.h' l='714' c='_ZN6Halide6RunGen7ArgDataC1EmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK24halide_filter_argument_t'/>
<use f='halide/tools/RunGen.h' l='718' c='_ZN6Halide6RunGen7ArgData11load_bufferESt8functionIFSt6vectorI18halide_dimension_tSaIS4_EEvEEPK24halide_filter_argument_t'/>
<use f='halide/tools/RunGen.h' l='788' c='_ZN6Halide6RunGen7ArgData11load_bufferERKSt6vectorI18halide_dimension_tSaIS3_EEPK24halide_filter_argument_t'/>
<size>64</size>
<def f='halide/build/tutorial/lesson_10_halide.h' l='1723' ll='1738'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='1755'/>
<size>64</size>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='1719'>/**
 * halide_filter_argument_t is essentially a plain-C-struct equivalent to
 * Halide::Argument; most user code will never need to create one.
 */</doc>
<mbr r='halide_filter_argument_t::name' o='0' t='const char *'/>
<mbr r='halide_filter_argument_t::kind' o='64' t='int32_t'/>
<mbr r='halide_filter_argument_t::dimensions' o='96' t='int32_t'/>
<mbr r='halide_filter_argument_t::type' o='128' t='struct halide_type_t'/>
<mbr r='halide_filter_argument_t::scalar_def' o='192' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_min' o='256' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_max' o='320' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::scalar_estimate' o='384' t='const struct halide_scalar_value_t *'/>
<mbr r='halide_filter_argument_t::buffer_estimates' o='448' t='const int64_t *const *'/>
