<def f='halide/llvm-install/include/llvm/ADT/Hashing.h' l='604' ll='608' type='llvm::hash_code llvm::hash_combine(const Ts &amp;... args)'/>
<use f='halide/llvm-install/include/llvm/Object/ObjectFile.h' l='586' u='c' c='_ZN4llvm12DenseMapInfoINS_6object10SectionRefEE12getHashValueERKS2_'/>
<use f='halide/llvm-install/include/llvm/Support/VersionTuple.h' l='149' u='c' c='_ZN4llvm10hash_valueERKNS_12VersionTupleE'/>
<use f='halide/llvm-install/include/llvm/IR/Dominators.h' l='123' u='c' c='_ZN4llvm12DenseMapInfoINS_14BasicBlockEdgeEE12getHashValueERKS1_'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='3590' u='c' c='_ZN4llvm12DenseMapInfoINS_13DebugVariableEE12getHashValueERKS1_'/>
<doc f='halide/llvm-install/include/llvm/ADT/Hashing.h' l='593'>/// Combine values into a single hash_code.
///
/// This routine accepts a varying number of arguments of any type. It will
/// attempt to combine them into a single hash_code. For user-defined types it
/// attempts to call a \see hash_value overload (via ADL) for the type. For
/// integer and pointer types it directly combines their data into the
/// resulting hash_code.
///
/// The result is suitable for returning from a user&apos;s hash_value
/// *implementation* for their user-defined type. Consumers of a type should
/// *not* call this routine, they should instead call &apos;hash_value&apos;.</doc>
