<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='883' ll='902' type='static std::pair&lt;const void *, const type_info *&gt; pybind11::detail::type_caster_base::src_and_type(const pybind11::detail::type_caster_base::itype * src)'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='905' u='c' c='_ZN8pybind116detail16type_caster_base4castEPKNS0_14intrinsic_typeIT_E4typeENS_19return_value_policyENS_6handleE'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='912' u='c' c='_ZN8pybind116detail16type_caster_base11cast_holderEPKNS0_14intrinsic_typeIT_E4typeEPKv'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='880'>// Returns a (pointer, type_info) pair taking care of necessary type lookup for a
    // polymorphic type (using RTTI by default, but can be overridden by specializing
    // polymorphic_type_hook). If the instance isn&apos;t derived, returns the base version.</doc>
