<dec f='halide/build/include/Halide.h' l='12693' type='bool Halide::Internal::Shuffle::is_broadcast() const'/>
<doc f='halide/build/include/Halide.h' l='12688'>/** Check if this shuffle can be represented as a broadcast.
     * For example:
     * A uint8 shuffle of with 4*n lanes and indices:
     *     0, 1, 2, 3, 0, 1, 2, 3, ....., 0, 1, 2, 3
     * can be represented as a uint32 broadcast with n lanes (factor = 4). */</doc>
<dec f='halide/src/IR.h' l='801' type='bool Halide::Internal::Shuffle::is_broadcast() const'/>
<doc f='halide/src/IR.h' l='796'>/** Check if this shuffle can be represented as a broadcast.
     * For example:
     * A uint8 shuffle of with 4*n lanes and indices:
     *     0, 1, 2, 3, 0, 1, 2, 3, ....., 0, 1, 2, 3
     * can be represented as a uint32 broadcast with n lanes (factor = 4). */</doc>
<use f='halide/src/CodeGen_ARM.cpp' l='1187' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARM21codegen_vector_reduceEPKNS0_12VectorReduceERKNS_4ExprE'/>
<use f='halide/src/HexagonOptimize.cpp' l='367' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_125unbroadcast_lossless_castENS_4TypeENS_4ExprE'/>
<use f='halide/src/HexagonOptimize.cpp' l='1186' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_120VectorReducePatterns5visitEPKNS0_12VectorReduceE'/>
<use f='halide/src/HexagonOptimize.cpp' l='1193' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_120VectorReducePatterns5visitEPKNS0_12VectorReduceE'/>
<def f='halide/src/IR.cpp' l='809' ll='826' type='bool Halide::Internal::Shuffle::is_broadcast() const'/>
<use f='halide/src/IRPrinter.cpp' l='996' u='c' c='_ZN6Halide8Internal9IRPrinter5visitEPKNS0_7ShuffleE'/>
