<dec f='halide/halide-install/include/Halide.h' l='5794' type='3'/>
<doc f='halide/halide-install/include/Halide.h' l='5778'>/** Prevent evaluation beyond the original extent by shifting
     * the tail case inwards, re-evaluating some points near the
     * end. Only legal for pure variables in pure definitions. If
     * the inner loop is very simple, the tail case is treated
     * like a boundary condition and factored out into an
     * epilogue.
     *
     * This is a good trade-off between several factors. Like
     * RoundUp, it supports vectorization well, because the inner
     * loop is always a fixed size with no data-dependent
     * branching. It increases code size slightly for inner loops
     * due to the epilogue handling, but not for outer loops
     * (e.g. loops over tiles). If used on a stage that reads from
     * an input or writes to an output, this stategy only requires
     * that the input/output extent be at least the split factor,
     * instead of a multiple of the split factor as with RoundUp. */</doc>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='208' u='r' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/copy_generator.cpp' l='48' u='r' c='_ZN5hannk4Copy8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='149' u='r' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='150' u='r' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='165' u='r' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/fill_generator.cpp' l='32' u='r' c='_ZN5hannk4Fill8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='113' u='r' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='114' u='r' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='123' u='r' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/hannk/halide/pool_generator.cpp' l='91' u='r' c='_ZN5hannk11AveragePool8generateEv'/>
<use f='halide/apps/hannk/halide/pool_generator.cpp' l='152' u='r' c='_ZN5hannk7MaxPool8generateEv'/>
<dec f='halide/build/include/Halide.h' l='5794' type='3'/>
<doc f='halide/build/include/Halide.h' l='5778'>/** Prevent evaluation beyond the original extent by shifting
     * the tail case inwards, re-evaluating some points near the
     * end. Only legal for pure variables in pure definitions. If
     * the inner loop is very simple, the tail case is treated
     * like a boundary condition and factored out into an
     * epilogue.
     *
     * This is a good trade-off between several factors. Like
     * RoundUp, it supports vectorization well, because the inner
     * loop is always a fixed size with no data-dependent
     * branching. It increases code size slightly for inner loops
     * due to the epilogue handling, but not for outer loops
     * (e.g. loops over tiles). If used on a stage that reads from
     * an input or writes to an output, this stategy only requires
     * that the input/output extent be at least the split factor,
     * instead of a multiple of the split factor as with RoundUp. */</doc>
<use f='halide/python_bindings/src/PyEnums.cpp' l='60' u='r' c='_ZN6Halide14PythonBindings12define_enumsERN8pybind117module_E'/>
<dec f='halide/src/Schedule.h' l='77' type='3'/>
<doc f='halide/src/Schedule.h' l='61'>/** Prevent evaluation beyond the original extent by shifting
     * the tail case inwards, re-evaluating some points near the
     * end. Only legal for pure variables in pure definitions. If
     * the inner loop is very simple, the tail case is treated
     * like a boundary condition and factored out into an
     * epilogue.
     *
     * This is a good trade-off between several factors. Like
     * RoundUp, it supports vectorization well, because the inner
     * loop is always a fixed size with no data-dependent
     * branching. It increases code size slightly for inner loops
     * due to the epilogue handling, but not for outer loops
     * (e.g. loops over tiles). If used on a stage that reads from
     * an input or writes to an output, this stategy only requires
     * that the input/output extent be at least the split factor,
     * instead of a multiple of the split factor as with RoundUp. */</doc>
<use f='halide/src/ApplySplit.cpp' l='80' u='r' c='_ZN6Halide8Internal11apply_splitERKNS0_5SplitEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt3mapIS9_NS_4ExprESt4lessIS9_ESaISt4pairISA_SD_EEE'/>
<use f='halide/src/Func.cpp' l='1081' u='r' c='_ZN6Halide5Stage5splitERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_S8_RKNS_4ExprEbNS_12TailStrategyE'/>
<use f='halide/src/Func.cpp' l='1096' u='r' c='_ZN6Halide5Stage5splitERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_S8_RKNS_4ExprEbNS_12TailStrategyE'/>
<use f='halide/src/Func.cpp' l='1102' u='r' c='_ZN6Halide5Stage5splitERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_S8_RKNS_4ExprEbNS_12TailStrategyE'/>
<use f='halide/src/IRPrinter.cpp' l='153' c='_ZN6HalidelsERSoRKNS_12TailStrategyE'/>
<use f='halide/src/ScheduleFunctions.cpp' l='2031' u='r' c='_ZN6Halide8Internal12_GLOBAL__N_117validate_scheduleENS0_8FunctionERKNS0_4StmtERKNS_6TargetEbRKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaI9230913'/>
<use f='halide/src/autoschedulers/adams2019/LoopNest.cpp' l='1765' u='r' c='_ZNK6Halide8Internal13Autoscheduler8LoopNest5applyENS_9LoopLevelER14PerfectHashMapINS1_11FunctionDAG4Node5StageESt10unique_ptrINS2_18StageScheduleStat9334574'/>
<use f='halide/src/autoschedulers/adams2019/LoopNest.cpp' l='1846' u='r' c='_ZNK6Halide8Internal13Autoscheduler8LoopNest5applyENS_9LoopLevelER14PerfectHashMapINS1_11FunctionDAG4Node5StageESt10unique_ptrINS2_18StageScheduleStat9334574'/>
<use f='halide/src/autoschedulers/adams2019/included_schedule_file.schedule.h' l='34' u='r' c='_Z37apply_schedule_included_schedule_fileN6Halide8PipelineENS_6TargetE'/>
<use f='halide/src/autoschedulers/adams2019/included_schedule_file.schedule.h' l='35' u='r' c='_Z37apply_schedule_included_schedule_fileN6Halide8PipelineENS_6TargetE'/>
<use f='halide/src/autoschedulers/adams2019/included_schedule_file.schedule.h' l='36' u='r' c='_Z37apply_schedule_included_schedule_fileN6Halide8PipelineENS_6TargetE'/>
<use f='halide/src/autoschedulers/adams2019/included_schedule_file.schedule.h' l='52' u='r' c='_Z37apply_schedule_included_schedule_fileN6Halide8PipelineENS_6TargetE'/>
<use f='halide/src/autoschedulers/li2018/GradientAutoscheduler.cpp' l='588' u='r' c='_ZN6Halide8Internal13Autoscheduler12_GLOBAL__N_114apply_scheduleERKNS_13MachineParamsERKNS_6TargetENS_4FuncEiRKSt6vectorIiSaIiEEbRNSt7__cxx1119basic_o10833929'/>
<use f='halide/src/autoschedulers/li2018/GradientAutoscheduler.cpp' l='706' u='r' c='_ZN6Halide8Internal13Autoscheduler12_GLOBAL__N_114apply_scheduleERKNS_13MachineParamsERKNS_6TargetENS_4FuncEiRKSt6vectorIiSaIiEEbRNSt7__cxx1119basic_o10833929'/>
<use f='halide/src/autoschedulers/mullapudi2016/AutoSchedule.cpp' l='2371' c='_ZN6Halide8Internal12_GLOBAL__N_111Partitioner9split_dimERKNS2_5GroupENS_5StageEiRKNS0_10DefinitionEbRKNS_9VarOrRVarERKNS_4ExprERKNSt7__cxx1112basic_s15602673'/>
