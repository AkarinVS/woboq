<def f='halide/build/include/HalideRuntime.h' l='723' ll='748'/>
<use f='halide/build/include/HalideRuntime.h' l='725'/>
<use f='halide/build/include/HalideRuntime.h' l='729'/>
<use f='halide/build/include/HalideRuntime.h' l='732'/>
<use f='halide/build/include/HalideRuntime.h' l='734'/>
<use f='halide/build/include/HalideRuntime.h' l='737'/>
<use f='halide/build/include/HalideRuntime.h' l='744'/>
<use f='halide/build/include/HalideRuntime.h' l='757' c='halide_device_release'/>
<use f='halide/build/include/HalideRuntime.h' l='770' c='halide_copy_to_device'/>
<use f='halide/build/include/HalideRuntime.h' l='783' c='halide_buffer_copy'/>
<use f='halide/build/include/HalideRuntime.h' l='834' c='halide_device_malloc'/>
<use f='halide/build/include/HalideRuntime.h' l='849' c='halide_device_wrap_native'/>
<use f='halide/build/include/HalideRuntime.h' l='1429'/>
<size>128</size>
<doc f='halide/build/include/HalideRuntime.h' l='709'>/** Each GPU API provides a halide_device_interface_t struct pointing
 * to the code that manages device allocations. You can access these
 * functions directly from the struct member function pointers, or by
 * calling the functions declared below. Note that the global
 * functions are not available when using Halide as a JIT compiler.
 * If you are using raw halide_buffer_t in that context you must use
 * the function pointers in the device_interface struct.
 *
 * The function pointers below are currently the same for every GPU
 * API; only the impl field varies. These top-level functions do the
 * bookkeeping that is common across all GPU APIs, and then dispatch
 * to more API-specific functions via another set of function pointers
 * hidden inside the impl field.
 */</doc>
<mbr r='halide_device_interface_t::device_malloc' o='0' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_free' o='64' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_sync' o='128' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_release' o='192' t='void (*)(void *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::copy_to_host' o='256' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::copy_to_device' o='320' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_and_host_malloc' o='384' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_and_host_free' o='448' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::buffer_copy' o='512' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_crop' o='576' t='int (*)(void *, const struct halide_buffer_t *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_slice' o='640' t='int (*)(void *, const struct halide_buffer_t *, int, int, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_release_crop' o='704' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::wrap_native' o='768' t='int (*)(void *, struct halide_buffer_t *, uint64_t, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::detach_native' o='832' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::compute_capability' o='896' t='int (*)(void *, int *, int *)'/>
<mbr r='halide_device_interface_t::impl' o='960' t='const struct halide_device_interface_impl_t *'/>
<def f='halide/build/include/Halide.h' l='821' ll='846'/>
<use f='halide/build/include/Halide.h' l='823'/>
<use f='halide/build/include/Halide.h' l='827'/>
<use f='halide/build/include/Halide.h' l='830'/>
<use f='halide/build/include/Halide.h' l='832'/>
<use f='halide/build/include/Halide.h' l='835'/>
<use f='halide/build/include/Halide.h' l='842'/>
<use f='halide/build/include/Halide.h' l='855' c='halide_device_release'/>
<use f='halide/build/include/Halide.h' l='868' c='halide_copy_to_device'/>
<use f='halide/build/include/Halide.h' l='881' c='halide_buffer_copy'/>
<use f='halide/build/include/Halide.h' l='932' c='halide_device_malloc'/>
<use f='halide/build/include/Halide.h' l='947' c='halide_device_wrap_native'/>
<use f='halide/build/include/Halide.h' l='1527'/>
<use f='halide/build/include/Halide.h' l='3395'/>
<use f='halide/build/include/Halide.h' l='8738' c='_ZN6Halide35get_device_interface_for_device_apiENS_9DeviceAPIERKNS_6TargetEPKc'/>
<use f='halide/build/include/Halide.h' l='10326' c='_ZN6Halide7Runtime6Buffer14copy_to_deviceEPK25halide_device_interface_tPv'/>
<use f='halide/build/include/Halide.h' l='10333' c='_ZN6Halide7Runtime6Buffer13device_mallocEPK25halide_device_interface_tPv'/>
<use f='halide/build/include/Halide.h' l='10360' c='_ZN6Halide7Runtime6Buffer18device_wrap_nativeEPK25halide_device_interface_tmPv'/>
<use f='halide/build/include/Halide.h' l='10390' c='_ZN6Halide7Runtime6Buffer22device_and_host_mallocEPK25halide_device_interface_tPv'/>
<use f='halide/build/include/Halide.h' l='10394' c='_ZN6Halide7Runtime6Buffer20device_and_host_freeEPK25halide_device_interface_tPv'/>
<size>128</size>
<doc f='halide/build/include/Halide.h' l='807'>/** Each GPU API provides a halide_device_interface_t struct pointing
 * to the code that manages device allocations. You can access these
 * functions directly from the struct member function pointers, or by
 * calling the functions declared below. Note that the global
 * functions are not available when using Halide as a JIT compiler.
 * If you are using raw halide_buffer_t in that context you must use
 * the function pointers in the device_interface struct.
 *
 * The function pointers below are currently the same for every GPU
 * API; only the impl field varies. These top-level functions do the
 * bookkeeping that is common across all GPU APIs, and then dispatch
 * to more API-specific functions via another set of function pointers
 * hidden inside the impl field.
 */</doc>
<mbr r='halide_device_interface_t::device_malloc' o='0' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_free' o='64' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_sync' o='128' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_release' o='192' t='void (*)(void *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::copy_to_host' o='256' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::copy_to_device' o='320' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_and_host_malloc' o='384' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_and_host_free' o='448' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::buffer_copy' o='512' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_crop' o='576' t='int (*)(void *, const struct halide_buffer_t *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_slice' o='640' t='int (*)(void *, const struct halide_buffer_t *, int, int, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_release_crop' o='704' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::wrap_native' o='768' t='int (*)(void *, struct halide_buffer_t *, uint64_t, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::detach_native' o='832' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::compute_capability' o='896' t='int (*)(void *, int *, int *)'/>
<mbr r='halide_device_interface_t::impl' o='960' t='const struct halide_device_interface_impl_t *'/>
<def f='halide/src/runtime/HalideRuntime.h' l='723' ll='748'/>
<use f='halide/src/runtime/HalideRuntime.h' l='725'/>
<use f='halide/src/runtime/HalideRuntime.h' l='729'/>
<use f='halide/src/runtime/HalideRuntime.h' l='732'/>
<use f='halide/src/runtime/HalideRuntime.h' l='734'/>
<use f='halide/src/runtime/HalideRuntime.h' l='737'/>
<use f='halide/src/runtime/HalideRuntime.h' l='744'/>
<use f='halide/src/runtime/HalideRuntime.h' l='757' c='halide_device_release'/>
<use f='halide/src/runtime/HalideRuntime.h' l='770' c='halide_copy_to_device'/>
<use f='halide/src/runtime/HalideRuntime.h' l='783' c='halide_buffer_copy'/>
<use f='halide/src/runtime/HalideRuntime.h' l='834' c='halide_device_malloc'/>
<use f='halide/src/runtime/HalideRuntime.h' l='849' c='halide_device_wrap_native'/>
<use f='halide/src/runtime/HalideRuntime.h' l='1429'/>
<use f='halide/src/Type.h' l='174'/>
<use f='halide/src/DeviceInterface.h' l='21' c='_ZN6Halide35get_device_interface_for_device_apiENS_9DeviceAPIERKNS_6TargetEPKc'/>
<use f='halide/src/runtime/HalideBuffer.h' l='1564' c='_ZN6Halide7Runtime6Buffer14copy_to_deviceEPK25halide_device_interface_tPv'/>
<use f='halide/src/runtime/HalideBuffer.h' l='1571' c='_ZN6Halide7Runtime6Buffer13device_mallocEPK25halide_device_interface_tPv'/>
<use f='halide/src/runtime/HalideBuffer.h' l='1598' c='_ZN6Halide7Runtime6Buffer18device_wrap_nativeEPK25halide_device_interface_tmPv'/>
<use f='halide/src/runtime/HalideBuffer.h' l='1628' c='_ZN6Halide7Runtime6Buffer22device_and_host_mallocEPK25halide_device_interface_tPv'/>
<use f='halide/src/runtime/HalideBuffer.h' l='1632' c='_ZN6Halide7Runtime6Buffer20device_and_host_freeEPK25halide_device_interface_tPv'/>
<size>128</size>
<doc f='halide/src/runtime/HalideRuntime.h' l='709'>/** Each GPU API provides a halide_device_interface_t struct pointing
 * to the code that manages device allocations. You can access these
 * functions directly from the struct member function pointers, or by
 * calling the functions declared below. Note that the global
 * functions are not available when using Halide as a JIT compiler.
 * If you are using raw halide_buffer_t in that context you must use
 * the function pointers in the device_interface struct.
 *
 * The function pointers below are currently the same for every GPU
 * API; only the impl field varies. These top-level functions do the
 * bookkeeping that is common across all GPU APIs, and then dispatch
 * to more API-specific functions via another set of function pointers
 * hidden inside the impl field.
 */</doc>
<mbr r='halide_device_interface_t::device_malloc' o='0' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_free' o='64' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_sync' o='128' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_release' o='192' t='void (*)(void *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::copy_to_host' o='256' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::copy_to_device' o='320' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_and_host_malloc' o='384' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_and_host_free' o='448' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::buffer_copy' o='512' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_crop' o='576' t='int (*)(void *, const struct halide_buffer_t *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_slice' o='640' t='int (*)(void *, const struct halide_buffer_t *, int, int, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_release_crop' o='704' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::wrap_native' o='768' t='int (*)(void *, struct halide_buffer_t *, uint64_t, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::detach_native' o='832' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::compute_capability' o='896' t='int (*)(void *, int *, int *)'/>
<mbr r='halide_device_interface_t::impl' o='960' t='const struct halide_device_interface_impl_t *'/>
<use f='halide/src/DeviceInterface.cpp' l='43' c='_ZN6Halide27host_supports_target_deviceERKNS_6TargetE'/>
<use f='halide/src/DeviceInterface.cpp' l='70' c='_ZN6Halide35get_device_interface_for_device_apiENS_9DeviceAPIERKNS_6TargetEPKc'/>
<use f='halide/src/DeviceInterface.cpp' l='89' c='_ZN6Halide35get_device_interface_for_device_apiENS_9DeviceAPIERKNS_6TargetEPKc'/>
<use f='halide/src/DeviceInterface.cpp' l='165' c='_ZN6Halide8Internal26make_device_interface_callENS_9DeviceAPIENS_10MemoryTypeE'/>
<use f='halide/src/DeviceInterface.cpp' l='203' c='_ZN6Halide8Internal26make_device_interface_callENS_9DeviceAPIENS_10MemoryTypeE'/>
<size>128</size>
<use f='halide/src/IROperator.cpp' l='938' c='_ZNK6Halide8Internal13BufferBuilder5buildEv'/>
<size>128</size>
<use f='halide/src/UnpackBuffers.cpp' l='90' c='_ZN6Halide8Internal14unpack_buffersENS0_4StmtE'/>
<size>128</size>
<use f='halide/build/include/HalideRuntimeCuda.h' l='21' c='halide_cuda_device_interface'/>
<use f='halide/build/include/HalideRuntimeHexagonHost.h' l='23' c='halide_hexagon_device_interface'/>
<use f='halide/build/include/HalideRuntimeMetal.h' l='21' c='halide_metal_device_interface'/>
<use f='halide/build/include/HalideRuntimeOpenCL.h' l='21' c='halide_opencl_device_interface'/>
<use f='halide/build/include/HalideRuntimeOpenCL.h' l='22' c='halide_opencl_image_device_interface'/>
<use f='halide/build/include/HalideRuntimeOpenGLCompute.h' l='21' c='halide_openglcompute_device_interface'/>
<size>128</size>
<use f='halide/test/generator/acquire_release_aottest.cpp' l='151' c='_Z8run_testv'/>
<size>128</size>
<use f='halide/test/generator/gpu_multi_context_threaded_aottest.cpp' l='161' c='_Z21run_kernels_on_threadib'/>
<size>128</size>
<def f='halide/build/tutorial/lesson_10_halide.h' l='795' ll='820'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='797'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='801'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='804'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='806'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='809'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='816'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='829' c='halide_device_release'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='842' c='halide_copy_to_device'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='855' c='halide_buffer_copy'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='906' c='halide_device_malloc'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='921' c='halide_device_wrap_native'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='1501'/>
<size>128</size>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='781'>/** Each GPU API provides a halide_device_interface_t struct pointing
 * to the code that manages device allocations. You can access these
 * functions directly from the struct member function pointers, or by
 * calling the functions declared below. Note that the global
 * functions are not available when using Halide as a JIT compiler.
 * If you are using raw halide_buffer_t in that context you must use
 * the function pointers in the device_interface struct.
 *
 * The function pointers below are currently the same for every GPU
 * API; only the impl field varies. These top-level functions do the
 * bookkeeping that is common across all GPU APIs, and then dispatch
 * to more API-specific functions via another set of function pointers
 * hidden inside the impl field.
 */</doc>
<mbr r='halide_device_interface_t::device_malloc' o='0' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_free' o='64' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_sync' o='128' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_release' o='192' t='void (*)(void *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::copy_to_host' o='256' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::copy_to_device' o='320' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_and_host_malloc' o='384' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::device_and_host_free' o='448' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::buffer_copy' o='512' t='int (*)(void *, struct halide_buffer_t *, const struct halide_device_interface_t *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_crop' o='576' t='int (*)(void *, const struct halide_buffer_t *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_slice' o='640' t='int (*)(void *, const struct halide_buffer_t *, int, int, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::device_release_crop' o='704' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::wrap_native' o='768' t='int (*)(void *, struct halide_buffer_t *, uint64_t, const struct halide_device_interface_t *)'/>
<mbr r='halide_device_interface_t::detach_native' o='832' t='int (*)(void *, struct halide_buffer_t *)'/>
<mbr r='halide_device_interface_t::compute_capability' o='896' t='int (*)(void *, int *, int *)'/>
<mbr r='halide_device_interface_t::impl' o='960' t='const struct halide_device_interface_impl_t *'/>
