<def f='halide/build-apps/abseil-cpp/absl/functional/function_ref.h' l='87' ll='134'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/cord.h' l='462' c='_ZNK4absl14lts_2020_02_254Cord12ForEachChunkENS0_11FunctionRefIFvNS0_11string_viewEEEE'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/cord.h' l='573' c='_ZN4absl14lts_2020_02_254Cord15ForEachChunkAuxEPNS0_13cord_internal7CordRepENS0_11FunctionRefIFvNS0_11string_viewEEEE'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/cord.h' l='1043' c='_ZNK4absl14lts_2020_02_254Cord12ForEachChunkENS0_11FunctionRefIFvNS0_11string_viewEEEE'/>
<doc f='halide/build-apps/abseil-cpp/absl/functional/function_ref.h' l='66'>// FunctionRef
//
// An `absl::FunctionRef` is a lightweight wrapper to any invokable object with
// a compatible signature. Generally, an `absl::FunctionRef` should only be used
// as an argument type and should be preferred as an argument over a const
// reference to a `std::function`.
//
// Example:
//
//   // The following function takes a function callback by const reference
//   bool Visitor(const std::function&lt;void(my_proto&amp;,
//                                         absl::string_view)&gt;&amp; callback);
//
//   // Assuming that the function is not stored or otherwise copied, it can be
//   // replaced by an `absl::FunctionRef`:
//   bool Visitor(absl::FunctionRef&lt;void(my_proto&amp;, absl::string_view)&gt;
//                  callback);
//
// Note: the assignment operator within an `absl::FunctionRef` is intentionally
// deleted to prevent misuse; because the `absl::FunctionRef` does not own the
// underlying type, assignment likely indicates misuse.</doc>
<fun r='_ZN4absl14lts_2020_02_2511FunctionRefIFT_DpT0_EEC1ERKTL0__'/>
<fun r='_ZN4absl14lts_2020_02_2511FunctionRefIFT_DpT0_EEC1EPTL0__'/>
<fun r='_ZN4absl14lts_2020_02_2511FunctionRefIFT_DpT0_EEaSERKNS1_IS5_EE'/>
<fun r='_ZNK4absl14lts_2020_02_2511FunctionRefIFT_DpT0_EEclES4_'/>
<mbr r='absl::lts_2020_02_25::FunctionRef::ptr_' t='absl::functional_internal::VoidPtr'/>
<mbr r='absl::lts_2020_02_25::FunctionRef::invoker_' t='absl::functional_internal::Invoker&lt;R, Args...&gt;'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/cord.cc' l='1804' c='_ZN4absl14lts_2020_02_254Cord15ForEachChunkAuxEPNS0_13cord_internal7CordRepENS0_11FunctionRefIFvNS0_11string_viewEEEE'/>
