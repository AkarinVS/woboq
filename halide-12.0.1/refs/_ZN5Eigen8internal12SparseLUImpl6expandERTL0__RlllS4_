<dec f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='35' type='Eigen::Index Eigen::internal::SparseLUImpl::expand(VectorType &amp; vec, Eigen::Index &amp; length, Eigen::Index nbElts, Eigen::Index keep_prev, Eigen::Index &amp; num_expansions)'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_Memory.h' l='61' ll='136' type='Eigen::Index Eigen::internal::SparseLUImpl::expand(VectorType &amp; vec, Eigen::Index &amp; length, Eigen::Index nbElts, Eigen::Index keep_prev, Eigen::Index &amp; num_expansions)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_Memory.h' l='53'>/** 
  * Expand the existing storage to accommodate more fill-ins
  * \param vec Valid pointer to the vector to allocate or expand
  * \param[in,out] length  At input, contain the current length of the vector that is to be increased. At output, length of the newly allocated vector
  * \param[in] nbElts Current number of elements in the factors
  * \param keep_prev  1: use length  and do not expand the vector; 0: compute new_len and expand
  * \param[in,out] num_expansions Number of times the memory has been expanded
  */</doc>
