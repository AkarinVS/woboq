<def f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='333' ll='336' type='llvm::ModRefInfo llvm::createModRefInfo(const llvm::FunctionModRefBehavior FMRB)'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='545' u='c' c='_ZN4llvm9AAResults15onlyReadsMemoryENS_22FunctionModRefBehaviorE'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='551' u='c' c='_ZN4llvm9AAResults17doesNotReadMemoryENS_22FunctionModRefBehaviorE'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='565' u='c' c='_ZN4llvm9AAResults21doesAccessArgPointeesENS_22FunctionModRefBehaviorE'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='578' u='c' c='_ZN4llvm9AAResults25doesAccessInaccessibleMemENS_22FunctionModRefBehaviorE'/>
<doc f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='329'>// Wrapper method strips bits significant only in FunctionModRefBehavior,
// to obtain a valid ModRefInfo. The benefit of using the wrapper is that if
// ModRefInfo enum changes, the wrapper can be updated to &amp; with the new enum
// entry with all bits set to 1.</doc>
