<def f='halide/tools/RunGen.h' l='235' ll='240' type='bool Halide::RunGen::ScalarParser::operator()(const std::string &amp; str, halide_scalar_value_t * v)'/>
<def f='halide/tools/RunGen.h' l='244' ll='254' type='bool Halide::RunGen::ScalarParser&lt;signed char&gt;::operator()(const std::string &amp; str, halide_scalar_value_t * v)'/>
<def f='halide/tools/RunGen.h' l='256' ll='266' type='bool Halide::RunGen::ScalarParser&lt;unsigned char&gt;::operator()(const std::string &amp; str, halide_scalar_value_t * v)'/>
<def f='halide/tools/RunGen.h' l='269' ll='280' type='bool Halide::RunGen::ScalarParser&lt;bool&gt;::operator()(const std::string &amp; str, halide_scalar_value_t * v)'/>
<def f='halide/tools/RunGen.h' l='283' ll='290' type='bool Halide::RunGen::ScalarParser&lt;void *&gt;::operator()(const std::string &amp; str, halide_scalar_value_t * v)'/>
<doc f='halide/tools/RunGen.h' l='243'>// Override for int8 and uint8, to avoid parsing as char variants</doc>
<doc f='halide/tools/RunGen.h' l='268'>// Override for bool, since istream just expects &apos;1&apos; or &apos;0&apos;.</doc>
<doc f='halide/tools/RunGen.h' l='282'>// Override for handle, since we only accept &quot;nullptr&quot;.</doc>
