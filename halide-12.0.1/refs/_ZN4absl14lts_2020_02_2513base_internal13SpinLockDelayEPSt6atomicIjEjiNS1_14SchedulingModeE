<dec f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='58' type='void absl::lts_2020_02_25::base_internal::SpinLockDelay(std::atomic&lt;uint32_t&gt; * w, uint32_t value, int loop, base_internal::SchedulingMode scheduling_mode)'/>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='87' ll='91' type='void absl::lts_2020_02_25::base_internal::SpinLockDelay(std::atomic&lt;uint32_t&gt; * w, uint32_t value, int loop, absl::base_internal::SchedulingMode scheduling_mode)'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='52'>// Wait for an appropriate spin delay on iteration &quot;loop&quot; of a
// spin loop on location *w, whose previously observed value was &quot;value&quot;.
// SpinLockDelay() may do nothing, may yield the CPU, may sleep a clock tick,
// or may wait for a delay that can be truncated by a call to SpinLockWake(w).
// In all cases, it must return in bounded time even if SpinLockWake() is not
// called.</doc>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.cc' l='164' u='c' c='_ZN4absl14lts_2020_02_2513base_internal8SpinLock8SlowLockEv'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.cc' l='49' u='c' c='_ZN4absl14lts_2020_02_2513base_internal12SpinLockWaitEPSt6atomicIjEiPKNS1_22SpinLockWaitTransitionENS1_14SchedulingModeE'/>
