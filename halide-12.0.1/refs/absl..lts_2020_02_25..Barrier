<def f='halide/build-apps/abseil-cpp/absl/synchronization/barrier.h' l='50' ll='75'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/barrier.h' l='56' c='_ZN4absl14lts_2020_02_257BarrierC1ERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/barrier.h' l='57' c='_ZN4absl14lts_2020_02_257BarrieraSERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/barrier.h' l='57' c='_ZN4absl14lts_2020_02_257BarrieraSERKS1_'/>
<size>16</size>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/barrier.h' l='28'>// Barrier
//
// This class creates a barrier which blocks threads until a prespecified
// threshold of threads (`num_threads`) utilizes the barrier. A thread utilizes
// the `Barrier` by calling `Block()` on the barrier, which will block that
// thread; no call to `Block()` will return until `num_threads` threads have
// called it.
//
// Exactly one call to `Block()` will return `true`, which is then responsible
// for destroying the barrier; because stack allocation will cause the barrier
// to be deleted when it is out of scope, barriers should not be stack
// allocated.
//
// Example:
//
//   // Main thread creates a `Barrier`:
//   barrier = new Barrier(num_threads);
//
//   // Each participating thread could then call:
//   if (barrier-&gt;Block()) delete barrier;  // Exactly one call to `Block()`
//                                          // returns `true`; that call
//                                          // deletes the barrier.</doc>
<fun r='_ZN4absl14lts_2020_02_257BarrierC1Ei'/>
<fun r='_ZN4absl14lts_2020_02_257BarrierC1ERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_257BarrieraSERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_257Barrier5BlockEv'/>
<mbr r='absl::lts_2020_02_25::Barrier::lock_' o='0' t='absl::lts_2020_02_25::Mutex'/>
<mbr r='absl::lts_2020_02_25::Barrier::num_to_block_' o='64' t='int'/>
<mbr r='absl::lts_2020_02_25::Barrier::num_to_exit_' o='96' t='int'/>
<fun r='_ZN4absl14lts_2020_02_257Barrier5BlockEv'/>
