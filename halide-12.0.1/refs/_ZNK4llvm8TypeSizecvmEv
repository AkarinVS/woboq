<def f='halide/llvm-install/include/llvm/Support/TypeSize.h' l='448' ll='458' type='llvm::LinearPolySize&lt;llvm::TypeSize&gt;::ScalarTy llvm::TypeSize::operator unsigned long() const'/>
<use f='halide/llvm-install/include/llvm/IR/DerivedTypes.h' l='452' u='c' c='_ZN4llvm10VectorType10getIntegerEPS0_'/>
<use f='halide/llvm-install/include/llvm/IR/DerivedTypes.h' l='483' u='c' c='_ZN4llvm10VectorType29getTruncatedElementVectorTypeEPS0_'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='1846' u='c' c='_ZN4llvm13IRBuilderBase19CreateAtomicCmpXchgEPNS_5ValueES2_S2_NS_14AtomicOrderingES3_h'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='1855' u='c' c='_ZN4llvm13IRBuilderBase15CreateAtomicRMWENS_13AtomicRMWInst5BinOpEPNS_5ValueES4_NS_14AtomicOrderingEh'/>
<doc f='halide/llvm-install/include/llvm/Support/TypeSize.h' l='424'>// All code for this class below this point is needed because of the
  // temporary implicit conversion to uint64_t. The operator overloads are
  // needed because otherwise the conversion of the parent class
  // UnivariateLinearPolyBase -&gt; TypeSize is ambiguous.
  // TODO: Remove the implicit conversion.

  // Casts to a uint64_t if this is a fixed-width size.
  //
  // This interface is deprecated and will be removed in a future version
  // of LLVM in favour of upgrading uses that rely on this implicit conversion
  // to uint64_t. Calls to functions that return a TypeSize should use the
  // proper interfaces to TypeSize.
  // In practice this is mostly calls to MVT/EVT::getSizeInBits().
  //
  // To determine how to upgrade the code:
  //
  //   if (&lt;algorithm works for both scalable and fixed-width vectors&gt;)
  //     use getKnownMinValue()
  //   else if (&lt;algorithm works only for fixed-width vectors&gt;) {
  //     if &lt;algorithm can be adapted for both scalable and fixed-width vectors&gt;
  //       update the algorithm and use getKnownMinValue()
  //     else
  //       bail out early for scalable vectors and use getFixedValue()
  //   }</doc>
<use f='halide/src/CodeGen_LLVM.cpp' l='819' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM29embed_constant_scalar_value_tERKNS_4ExprE'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='2498' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM18codegen_atomic_rmwEPKNS0_5StoreE'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='3156' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM5visitEPKNS0_4CallE'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='4655' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM22create_alloca_at_entryEPN4llvm4TypeEibRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
