<def f='halide/build-apps/eigen/Eigen/src/QR/FullPivHouseholderQR.h' l='246' ll='255' type='Eigen::Index Eigen::FullPivHouseholderQR::rank() const'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/FullPivHouseholderQR.h' l='266' u='c' c='_ZNK5Eigen20FullPivHouseholderQR17dimensionOfKernelEv'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/FullPivHouseholderQR.h' l='279' u='c' c='_ZNK5Eigen20FullPivHouseholderQR11isInjectiveEv'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/FullPivHouseholderQR.h' l='292' u='c' c='_ZNK5Eigen20FullPivHouseholderQR12isSurjectiveEv'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/FullPivHouseholderQR.h' l='546' u='c' c='_ZNK5Eigen20FullPivHouseholderQR11_solve_implERKTL0__RTL0_0_'/>
<use f='halide/build-apps/eigen/Eigen/src/QR/FullPivHouseholderQR.h' l='580' u='c' c='_ZNK5Eigen20FullPivHouseholderQR22_solve_impl_transposedERKTL0_0_RTL0_1_'/>
<doc f='halide/build-apps/eigen/Eigen/src/QR/FullPivHouseholderQR.h' l='240'>/** \returns the rank of the matrix of which *this is the QR decomposition.
      *
      * \note This method has to determine which pivots should be considered nonzero.
      *       For that, it uses the threshold value that you can control by calling
      *       setThreshold(const RealScalar&amp;).
      */</doc>
