<dec f='halide/llvm-install/include/llvm/IR/Verifier.h' l='100' type='bool llvm::verifyModule(const llvm::Module &amp; M, llvm::raw_ostream * OS = nullptr, bool * BrokenDebugInfo = nullptr)'/>
<doc f='halide/llvm-install/include/llvm/IR/Verifier.h' l='90'>/// Check a module for errors.
///
/// If there are no errors, the function returns false. If an error is
/// found, a message describing the error is written to OS (if
/// non-null) and true is returned.
///
/// \return true if the module is broken. If BrokenDebugInfo is
/// supplied, DebugInfo verification failures won&apos;t be considered as
/// error and instead *BrokenDebugInfo will be set to true. Debug
/// info errors can be &quot;recovered&quot; from by stripping the debug info.</doc>
<use f='halide/src/CodeGen_LLVM.cpp' l='517' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM14finish_codegenEv'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='1216' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM15optimize_moduleEv'/>
<use f='halide/src/CodeGen_PTX_Dev.cpp' l='216' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_115CodeGen_PTX_Dev10add_kernelENS0_4StmtERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS0_14DeviceArgumentESaISD_EE'/>
