<dec f='halide/build/include/Halide.h' l='31347' type='Halide::Internal::Interval Halide::Internal::solve_for_outer_interval(const Halide::Expr &amp; c, const std::string &amp; variable)'/>
<doc f='halide/build/include/Halide.h' l='31343'>/** Find the smallest interval such that the condition is either true
 * or false inside of it, but definitely false outside of it. Never
 * returns undefined Exprs, instead it uses variables called &quot;pos_inf&quot;
 * and &quot;neg_inf&quot; to represent positive and negative infinity. */</doc>
<dec f='halide/src/Solve.h' l='35' type='Halide::Internal::Interval Halide::Internal::solve_for_outer_interval(const Halide::Expr &amp; c, const std::string &amp; variable)'/>
<doc f='halide/src/Solve.h' l='31'>/** Find the smallest interval such that the condition is either true
 * or false inside of it, but definitely false outside of it. Never
 * returns undefined Exprs, instead it uses variables called &quot;pos_inf&quot;
 * and &quot;neg_inf&quot; to represent positive and negative infinity. */</doc>
<use f='halide/src/DerivativeUtils.cpp' l='372' u='c' c='_ZN6Halide8Internal13solve_inverseENS_4ExprERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_'/>
<use f='halide/src/PartitionLoops.cpp' l='530' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_114PartitionLoops5visitEPKNS0_3ForE'/>
<def f='halide/src/Solve.cpp' l='1170' ll='1182' type='Halide::Internal::Interval Halide::Internal::solve_for_outer_interval(const Halide::Expr &amp; c, const std::string &amp; var)'/>
<use f='halide/src/Solve.cpp' l='1206' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_114check_intervalERKNS_4ExprERKNS0_8IntervalEb'/>
<use f='halide/src/Solve.cpp' l='1405' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1415' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/TrimNoOps.cpp' l='391' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_19TrimNoOps5visitEPKNS0_3ForE'/>
