<dec f='halide/halide-install/include/Halide.h' l='1801' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<doc f='halide/halide-install/include/Halide.h' l='1791'>/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the &apos;registration&apos; output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter&apos;s argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it&apos;s not null, it&apos;s expected to be a null-terminated list
 * of strings, with an even number of entries. */</doc>
<dec f='halide/halide-install/include/HalideRuntime.h' l='1703' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<doc f='halide/halide-install/include/HalideRuntime.h' l='1693'>/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the &apos;registration&apos; output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter&apos;s argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it&apos;s not null, it&apos;s expected to be a null-terminated list
 * of strings, with an even number of entries. */</doc>
<dec f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='1863' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<doc f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='1853'>/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the &apos;registration&apos; output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter&apos;s argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it&apos;s not null, it&apos;s expected to be a null-terminated list
 * of strings, with an even number of entries. */</doc>
<dec f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='1863' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<doc f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='1853'>/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the &apos;registration&apos; output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter&apos;s argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it&apos;s not null, it&apos;s expected to be a null-terminated list
 * of strings, with an even number of entries. */</doc>
<dec f='halide/build/include/HalideRuntime.h' l='1703' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<doc f='halide/build/include/HalideRuntime.h' l='1693'>/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the &apos;registration&apos; output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter&apos;s argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it&apos;s not null, it&apos;s expected to be a null-terminated list
 * of strings, with an even number of entries. */</doc>
<dec f='halide/build/src/autoschedulers/adams2019/demo.registration.cpp' l='6' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<use f='halide/build/src/autoschedulers/adams2019/demo.registration.cpp' l='29' u='c' c='_ZN17halide_nsreg_demo12_GLOBAL__N_110RegistererC1Ev'/>
<dec f='halide/build/src/autoschedulers/adams2019/included_schedule_file.registration.cpp' l='6' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<use f='halide/build/src/autoschedulers/adams2019/included_schedule_file.registration.cpp' l='29' u='c' c='_ZN35halide_nsreg_included_schedule_file12_GLOBAL__N_110RegistererC1Ev'/>
<dec f='halide/build/src/autoschedulers/li2018/demo_gradient.registration.cpp' l='6' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<use f='halide/build/src/autoschedulers/li2018/demo_gradient.registration.cpp' l='29' u='c' c='_ZN17halide_nsreg_demo12_GLOBAL__N_110RegistererC1Ev'/>
<dec f='halide/build/include/Halide.h' l='1801' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<doc f='halide/build/include/Halide.h' l='1791'>/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the &apos;registration&apos; output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter&apos;s argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it&apos;s not null, it&apos;s expected to be a null-terminated list
 * of strings, with an even number of entries. */</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='1703' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='1693'>/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the &apos;registration&apos; output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter&apos;s argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it&apos;s not null, it&apos;s expected to be a null-terminated list
 * of strings, with an even number of entries. */</doc>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='1775' type='void halide_register_argv_and_metadata(int (*)(void **) filter_argv_call, const struct halide_filter_metadata_t * filter_metadata, const char *const * extra_key_value_pairs)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='1765'>/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the &apos;registration&apos; output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter&apos;s argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it&apos;s not null, it&apos;s expected to be a null-terminated list
 * of strings, with an even number of entries. */</doc>
