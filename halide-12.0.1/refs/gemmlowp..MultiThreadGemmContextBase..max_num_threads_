<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='544' u='w' c='_ZN8gemmlowp26MultiThreadGemmContextBase19set_max_num_threadsEi'/>
<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='546' u='r' c='_ZNK8gemmlowp26MultiThreadGemmContextBase15max_num_threadsEv'/>
<dec f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='563' type='int'/>
<offset>800</offset>
<doc f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='549'>// The maximum number of worker threads to use (including
  // the master thread).
  // The default value 1 means single-threading. That is the default
  // because gemmlowp&apos;s primary target is mobile hardware, where thermal
  // constraints usually mean that it may not be realistic to use more
  // than 1 CPU core even if multiple cores are present.
  // The special value 0 means try to detect the number of hardware threads.
  // Note: this assumes that all CPU cores are equivalent. That assumption
  // is defeated on big.LITTLE ARM devices, where we have no API to query
  // the number of big cores (which is typically what we would want to use,
  // leaving aside above-mentioned thermal issues). That is the other reason
  // why the best compromise here is to let max_num_threads_ default to 1,
  // so users who want multi-threading have to make the decision of how many
  // threads to use by themselves.</doc>
