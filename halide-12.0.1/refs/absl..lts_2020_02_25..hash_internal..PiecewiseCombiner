<use f='halide/build-apps/abseil-cpp/absl/hash/internal/hash.h' l='129'/>
<def f='halide/build-apps/abseil-cpp/absl/hash/internal/hash.h' l='220' ll='253'/>
<use f='halide/build-apps/abseil-cpp/absl/hash/internal/hash.h' l='223' c='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombinerC1ERKS2_'/>
<use f='halide/build-apps/abseil-cpp/absl/hash/internal/hash.h' l='224' c='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombineraSERKS2_'/>
<use f='halide/build-apps/abseil-cpp/absl/hash/internal/hash.h' l='224' c='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombineraSERKS2_'/>
<size>1032</size>
<doc f='halide/build-apps/abseil-cpp/absl/hash/internal/hash.h' l='200'>// PiecewiseCombiner
//
// PiecewiseCombiner is an internal-only helper class for hashing a piecewise
// buffer of `char` or `unsigned char` as though it were contiguous.  This class
// provides two methods:
//
//   H add_buffer(state, data, size)
//   H finalize(state)
//
// `add_buffer` can be called zero or more times, followed by a single call to
// `finalize`.  This will produce the same hash expansion as concatenating each
// buffer piece into a single contiguous buffer, and passing this to
// `H::combine_contiguous`.
//
//  Example usage:
//    PiecewiseCombiner combiner;
//    for (const auto&amp; piece : pieces) {
//      state = combiner.add_buffer(std::move(state), piece.data, piece.size);
//    }
//    return combiner.finalize(std::move(state));</doc>
<fun r='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombinerC1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombinerC1ERKS2_'/>
<fun r='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombineraSERKS2_'/>
<fun r='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombiner10add_bufferET_PKhm'/>
<fun r='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombiner10add_bufferET_PKcm'/>
<fun r='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombiner8finalizeET_'/>
<mbr r='absl::lts_2020_02_25::hash_internal::PiecewiseCombiner::buf_' o='0' t='unsigned char [1024]'/>
<mbr r='absl::lts_2020_02_25::hash_internal::PiecewiseCombiner::position_' o='8192' t='size_t'/>
<fun r='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombiner10add_bufferET_PKhm'/>
<fun r='_ZN4absl14lts_2020_02_2513hash_internal17PiecewiseCombiner8finalizeET_'/>
