<dec f='halide/build/include/Halide.h' l='7123' type='Halide::Expr Halide::Internal::predicate(Halide::Expr e)'/>
<doc f='halide/build/include/Halide.h' l='7119'>/** Expressions tagged with this intrinsic are suggestions that
 * vectorization of loops with guard ifs should be implemented with
 * non-faulting predicated loads and stores, instead of scalarizing
 * an if statement. */</doc>
<dec f='halide/src/IROperator.h' l='318' type='Halide::Expr Halide::Internal::predicate(Halide::Expr e)'/>
<doc f='halide/src/IROperator.h' l='314'>/** Expressions tagged with this intrinsic are suggestions that
 * vectorization of loops with guard ifs should be implemented with
 * non-faulting predicated loads and stores, instead of scalarizing
 * an if statement. */</doc>
<use f='halide/src/ApplySplit.cpp' l='76' u='c' c='_ZN6Halide8Internal11apply_splitERKNS0_5SplitEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt3mapIS9_NS_4ExprESt4lessIS9_ESaISt4pairISA_SD_EEE'/>
<def f='halide/src/IROperator.cpp' l='1045' ll='1049' type='Halide::Expr Halide::Internal::predicate(Halide::Expr e)'/>
