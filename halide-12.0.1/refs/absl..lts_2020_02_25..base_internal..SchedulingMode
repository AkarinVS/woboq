<def f='halide/build-apps/abseil-cpp/absl/base/internal/scheduling_mode.h' l='49' ll='52'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='44' c='_ZN4absl14lts_2020_02_2513base_internal12SpinLockWaitEPSt6atomicIjEiPKNS1_22SpinLockWaitTransitionENS1_14SchedulingModeE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='59' c='_ZN4absl14lts_2020_02_2513base_internal13SpinLockDelayEPSt6atomicIjEjiNS1_14SchedulingModeE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='79' c='AbslInternalSpinLockDelay'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.h' l='89' c='_ZN4absl14lts_2020_02_2513base_internal13SpinLockDelayEPSt6atomicIjEjiNS1_14SchedulingModeE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/call_once.h' l='112' c='_ZN4absl14lts_2020_02_2513base_internal16SchedulingHelperC1ENS1_14SchedulingModeE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/call_once.h' l='125'/>
<use f='halide/build-apps/abseil-cpp/absl/base/call_once.h' l='148' c='_ZN4absl14lts_2020_02_2513base_internal12CallOnceImplEPSt6atomicIjENS1_14SchedulingModeEOT_DpOT0_'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.h' l='76' c='_ZN4absl14lts_2020_02_2513base_internal8SpinLockC1ENS1_14SchedulingModeE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.h' l='78' c='_ZN4absl14lts_2020_02_2513base_internal8SpinLockC1ENS1_17LinkerInitializedENS1_14SchedulingModeE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.h' l='160' c='_ZN4absl14lts_2020_02_2513base_internal8SpinLock13IsCooperativeENS1_14SchedulingModeE'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/scheduling_mode.h' l='27'>// Used to describe how a thread may be scheduled.  Typically associated with
// the declaration of a resource supporting synchronized access.
//
// SCHEDULE_COOPERATIVE_AND_KERNEL:
// Specifies that when waiting, a cooperative thread (e.g. a Fiber) may
// reschedule (using base::scheduling semantics); allowing other cooperative
// threads to proceed.
//
// SCHEDULE_KERNEL_ONLY: (Also described as &quot;non-cooperative&quot;)
// Specifies that no cooperative scheduling semantics may be used, even if the
// current thread is itself cooperatively scheduled.  This means that
// cooperative threads will NOT allow other cooperative threads to execute in
// their place while waiting for a resource of this type.  Host operating system
// semantics (e.g. a futex) may still be used.
//
// When optional, clients should strongly prefer SCHEDULE_COOPERATIVE_AND_KERNEL
// by default.  SCHEDULE_KERNEL_ONLY should only be used for resources on which
// base::scheduling (e.g. the implementation of a Scheduler) may depend.
//
// NOTE: Cooperative resources may not be nested below non-cooperative ones.
// This means that it is invalid to to acquire a SCHEDULE_COOPERATIVE_AND_KERNEL
// resource if a SCHEDULE_KERNEL_ONLY resource is already held.</doc>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.cc' l='70' c='_ZN4absl14lts_2020_02_2513base_internal8SpinLockC1ENS1_14SchedulingModeE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.cc' l='76' c='_ZN4absl14lts_2020_02_2513base_internal8SpinLockC1ENS1_17LinkerInitializedENS1_14SchedulingModeE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.cc' l='154' c='_ZN4absl14lts_2020_02_2513base_internal8SpinLock8SlowLockEv'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_linux.inc' l='53' c='AbslInternalSpinLockDelay'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock_wait.cc' l='41' c='_ZN4absl14lts_2020_02_2513base_internal12SpinLockWaitEPSt6atomicIjEiPKNS1_22SpinLockWaitTransitionENS1_14SchedulingModeE'/>
