<dec f='halide/build/include/Halide.h' l='7759' type='Halide::Expr Halide::log(Halide::Expr x)'/>
<doc f='halide/build/include/Halide.h' l='7752'>/** Return the logarithm of a floating-point expression. If the
 * argument is not floating-point, it is cast to Float(32). For
 * Float(64) arguments, this calls the system log function, and does
 * not vectorize well. For Float(32) arguments, this function is
 * vectorizable, does the right thing for inputs &lt;= 0 (returns -inf or
 * nan), and is accurate up to the last bit of the
 * mantissa. Vectorizes cleanly. */</doc>
<use f='halide/python_bindings/src/PyIROperator.cpp' l='133' u='a' c='_ZN6Halide14PythonBindings16define_operatorsERN8pybind117module_E'/>
<dec f='halide/src/IROperator.h' l='954' type='Halide::Expr Halide::log(Halide::Expr x)'/>
<doc f='halide/src/IROperator.h' l='947'>/** Return the logarithm of a floating-point expression. If the
 * argument is not floating-point, it is cast to Float(32). For
 * Float(64) arguments, this calls the system log function, and does
 * not vectorize well. For Float(32) arguments, this function is
 * vectorizable, does the right thing for inputs &lt;= 0 (returns -inf or
 * nan), and is accurate up to the last bit of the
 * mantissa. Vectorizes cleanly. */</doc>
<use f='halide/src/Derivative.cpp' l='1138' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_126ReverseAccumulationVisitor5visitEPKNS0_4CallE'/>
<def f='halide/src/IROperator.cpp' l='2129' ll='2138' type='Halide::Expr Halide::log(Halide::Expr x)'/>
