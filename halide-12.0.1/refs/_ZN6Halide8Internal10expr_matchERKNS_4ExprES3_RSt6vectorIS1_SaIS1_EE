<dec f='halide/build/include/Halide.h' l='27151' type='bool Halide::Internal::expr_match(const Halide::Expr &amp; pattern, const Halide::Expr &amp; expr, std::vector&lt;Expr&gt; &amp; result)'/>
<doc f='halide/build/include/Halide.h' l='27134'>/** Does the first expression have the same structure as the second?
 * Variables in the first expression with the name * are interpreted
 * as wildcards, and their matching equivalent in the second
 * expression is placed in the vector give as the third argument.
 * Wildcards require the types to match. For the type bits and width,
 * a 0 indicates &quot;match anything&quot;. So an Int(8, 0) will match 8-bit
 * integer vectors of any width (including scalars), and a UInt(0, 0)
 * will match any unsigned integer type.
 *
 * For example:
 \code
 Expr x = Variable::make(Int(32), &quot;*&quot;);
 match(x + x, 3 + (2*k), result)
 \endcode
 * should return true, and set result[0] to 3 and
 * result[1] to 2*k.
 */</doc>
<dec f='halide/src/IRMatch.h' l='37' type='bool Halide::Internal::expr_match(const Halide::Expr &amp; pattern, const Halide::Expr &amp; expr, std::vector&lt;Expr&gt; &amp; result)'/>
<doc f='halide/src/IRMatch.h' l='20'>/** Does the first expression have the same structure as the second?
 * Variables in the first expression with the name * are interpreted
 * as wildcards, and their matching equivalent in the second
 * expression is placed in the vector give as the third argument.
 * Wildcards require the types to match. For the type bits and width,
 * a 0 indicates &quot;match anything&quot;. So an Int(8, 0) will match 8-bit
 * integer vectors of any width (including scalars), and a UInt(0, 0)
 * will match any unsigned integer type.
 *
 * For example:
 \code
 Expr x = Variable::make(Int(32), &quot;*&quot;);
 match(x + x, 3 + (2*k), result)
 \endcode
 * should return true, and set result[0] to 3 and
 * result[1] to 2*k.
 */</doc>
<use f='halide/src/CodeGen_ARM.cpp' l='710' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARM5visitEPKNS0_4CastE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='759' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARM5visitEPKNS0_4CastE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='780' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARM5visitEPKNS0_3SubE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='1091' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARM5visitEPKNS0_4CallE'/>
<use f='halide/src/CodeGen_ARM.cpp' l='1170' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARM21codegen_vector_reduceEPKNS0_12VectorReduceERKNS_4ExprE'/>
<use f='halide/src/CodeGen_PTX_Dev.cpp' l='491' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_115CodeGen_PTX_Dev21codegen_vector_reduceEPKNS0_12VectorReduceERKNS_4ExprE'/>
<use f='halide/src/CodeGen_X86.cpp' l='443' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_X865visitEPKNS0_4CastE'/>
<use f='halide/src/CodeGen_X86.cpp' l='488' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_X865visitEPKNS0_4CallE'/>
<use f='halide/src/CodeGen_X86.cpp' l='555' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_X8621codegen_vector_reduceEPKNS0_12VectorReduceERKNS_4ExprE'/>
<use f='halide/src/HexagonOptimize.cpp' l='302' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_114apply_patternsENS_4ExprERKSt6vectorINS1_7PatternESaIS4_EERKNS_6TargetEPNS0_9IRMutatorE'/>
<use f='halide/src/HexagonOptimize.cpp' l='787' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3MaxE'/>
<use f='halide/src/HexagonOptimize.cpp' l='906' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_4CastE'/>
<use f='halide/src/HexagonOptimize.cpp' l='1170' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_120VectorReducePatterns5visitEPKNS0_12VectorReduceE'/>
<use f='halide/src/HexagonOptimize.cpp' l='2255' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_122ScatterGatherGenerator14is_scatter_accEPKNS0_5StoreE'/>
<use f='halide/src/HexagonOptimize.cpp' l='2256' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_122ScatterGatherGenerator14is_scatter_accEPKNS0_5StoreE'/>
<use f='halide/src/IRMatch.cpp' l='29' u='c' c='_ZN6Halide8Internal15expr_match_testEv'/>
<use f='halide/src/IRMatch.cpp' l='32' u='c' c='_ZN6Halide8Internal15expr_match_testEv'/>
<use f='halide/src/IRMatch.cpp' l='35' u='c' c='_ZN6Halide8Internal15expr_match_testEv'/>
<use f='halide/src/IRMatch.cpp' l='42' u='c' c='_ZN6Halide8Internal15expr_match_testEv'/>
<use f='halide/src/IRMatch.cpp' l='44' u='c' c='_ZN6Halide8Internal15expr_match_testEv'/>
<use f='halide/src/IRMatch.cpp' l='46' u='c' c='_ZN6Halide8Internal15expr_match_testEv'/>
<use f='halide/src/IRMatch.cpp' l='49' u='c' c='_ZN6Halide8Internal15expr_match_testEv'/>
<def f='halide/src/IRMatch.cpp' l='302' ll='319' type='bool Halide::Internal::expr_match(const Halide::Expr &amp; pattern, const Halide::Expr &amp; expr, vector&lt;Halide::Expr&gt; &amp; matches)'/>
<use f='halide/src/LowerWarpShuffles.cpp' l='582' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_117LowerWarpShuffles14make_warp_loadENS_4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_4ExprESC_'/>
<use f='halide/src/LowerWarpShuffles.cpp' l='588' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_117LowerWarpShuffles14make_warp_loadENS_4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_4ExprESC_'/>
<use f='halide/src/SlidingWindow.cpp' l='532' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_130SlidingWindowOnFunctionAndLoop5visitEPKNS0_16ProducerConsumerE'/>
