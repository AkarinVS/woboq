<dec f='halide/build/include/HalideRuntime.h' l='1380' type='int halide_default_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/build/include/HalideRuntime.h' l='1366'>/**
 * This is the default implementation of halide_can_use_target_features; it is provided
 * for convenience of user code that may wish to extend halide_can_use_target_features
 * but continue providing existing support, e.g.
 *
 *     int halide_can_use_target_features(int count, const uint64_t *features) {
 *          if (features[halide_target_somefeature &gt;&gt; 6] &amp; (1LL &lt;&lt; (halide_target_somefeature &amp; 63))) {
 *              if (!can_use_somefeature()) {
 *                  return 0;
 *              }
 *          }
 *          return halide_default_can_use_target_features(count, features);
 *     }
 */</doc>
<dec f='halide/build/include/Halide.h' l='1478' type='int halide_default_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/build/include/Halide.h' l='1464'>/**
 * This is the default implementation of halide_can_use_target_features; it is provided
 * for convenience of user code that may wish to extend halide_can_use_target_features
 * but continue providing existing support, e.g.
 *
 *     int halide_can_use_target_features(int count, const uint64_t *features) {
 *          if (features[halide_target_somefeature &gt;&gt; 6] &amp; (1LL &lt;&lt; (halide_target_somefeature &amp; 63))) {
 *              if (!can_use_somefeature()) {
 *                  return 0;
 *              }
 *          }
 *          return halide_default_can_use_target_features(count, features);
 *     }
 */</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='1380' type='int halide_default_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='1366'>/**
 * This is the default implementation of halide_can_use_target_features; it is provided
 * for convenience of user code that may wish to extend halide_can_use_target_features
 * but continue providing existing support, e.g.
 *
 *     int halide_can_use_target_features(int count, const uint64_t *features) {
 *          if (features[halide_target_somefeature &gt;&gt; 6] &amp; (1LL &lt;&lt; (halide_target_somefeature &amp; 63))) {
 *              if (!can_use_somefeature()) {
 *                  return 0;
 *              }
 *          }
 *          return halide_default_can_use_target_features(count, features);
 *     }
 */</doc>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='1452' type='int halide_default_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='1438'>/**
 * This is the default implementation of halide_can_use_target_features; it is provided
 * for convenience of user code that may wish to extend halide_can_use_target_features
 * but continue providing existing support, e.g.
 *
 *     int halide_can_use_target_features(int count, const uint64_t *features) {
 *          if (features[halide_target_somefeature &gt;&gt; 6] &amp; (1LL &lt;&lt; (halide_target_somefeature &amp; 63))) {
 *              if (!can_use_somefeature()) {
 *                  return 0;
 *              }
 *          }
 *          return halide_default_can_use_target_features(count, features);
 *     }
 */</doc>
