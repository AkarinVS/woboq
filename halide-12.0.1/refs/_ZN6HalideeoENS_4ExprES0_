<dec f='halide/halide-install/include/Halide.h' l='7897' type='Halide::Expr Halide::operator^(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/halide-install/include/Halide.h' l='7893'>/** Return the bitwise xor of two expressions (which need not have the
 * same type).  The result type is the wider of the two expressions.
 * Only integral types are allowed and both expressions must be signed
 * or both must be unsigned. */</doc>
<dec f='halide/build/include/Halide.h' l='7897' type='Halide::Expr Halide::operator^(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/build/include/Halide.h' l='7893'>/** Return the bitwise xor of two expressions (which need not have the
 * same type).  The result type is the wider of the two expressions.
 * Only integral types are allowed and both expressions must be signed
 * or both must be unsigned. */</doc>
<dec f='halide/src/IROperator.h' l='1092' type='Halide::Expr Halide::operator^(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/src/IROperator.h' l='1088'>/** Return the bitwise xor of two expressions (which need not have the
 * same type).  The result type is the wider of the two expressions.
 * Only integral types are allowed and both expressions must be signed
 * or both must be unsigned. */</doc>
<use f='halide/src/Bounds.cpp' l='3162' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3202' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3284' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3288' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/CodeGen_Internal.cpp' l='309' u='c' c='_ZN6Halide8Internal18lower_int_uint_divERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='317' u='c' c='_ZN6Halide8Internal18lower_int_uint_divERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='447' u='c' c='_ZN6Halide8Internal26long_div_mod_round_to_zeroERKNS_4ExprES3_PKm'/>
<use f='halide/src/CodeGen_Internal.cpp' l='566' u='c' c='_ZN6Halide8Internal19lower_euclidean_modENS_4ExprES1_'/>
<use f='halide/src/EmulateFloat16Math.cpp' l='81' u='c' c='_ZN6Halide8Internal18float32_to_float16ENS_4ExprE'/>
<use f='halide/src/FastIntegerDivide.cpp' l='205' u='c' c='_ZN6Halide19fast_integer_divideENS_4ExprES0_'/>
<use f='halide/src/FastIntegerDivide.cpp' l='220' u='c' c='_ZN6Halide19fast_integer_divideENS_4ExprES0_'/>
<use f='halide/src/FindIntrinsics.cpp' l='637' u='c' c='_ZN6Halide8Internal17lower_halving_addERKNS_4ExprES3_'/>
<def f='halide/src/IROperator.cpp' l='2364' ll='2368' type='Halide::Expr Halide::operator^(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/src/Simplify_Call.cpp' l='337' u='c' c='_ZN6Halide8Internal8Simplify5visitEPKNS0_4CallEPNS1_8ExprInfoE'/>
<use f='halide/test/generator/rdom_input_generator.cpp' l='19' u='c' c='_ZN12_GLOBAL__N_19RDomInput8generateEv'/>
