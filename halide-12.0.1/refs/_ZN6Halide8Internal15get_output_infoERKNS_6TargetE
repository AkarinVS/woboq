<dec f='halide/halide-install/include/Halide.h' l='13964' type='std::map&lt;Output, const OutputInfo&gt; Halide::Internal::get_output_info(const Halide::Target &amp; target)'/>
<dec f='halide/build/include/Halide.h' l='13964' type='std::map&lt;Output, const OutputInfo&gt; Halide::Internal::get_output_info(const Halide::Target &amp; target)'/>
<dec f='halide/src/Module.h' l='74' type='std::map&lt;Output, const OutputInfo&gt; Halide::Internal::get_output_info(const Halide::Target &amp; target)'/>
<use f='halide/src/Generator.cpp' l='84' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_120compute_output_filesERKNS_6TargetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt3setINS_6OutputESt4lessISE_ESaISE_EE'/>
<use f='halide/src/Generator.cpp' l='908' u='c' c='_ZN6Halide8Internal26generate_filter_main_innerEiPPcRSo'/>
<def f='halide/src/Module.cpp' l='39' ll='62' type='std::map&lt;Output, const OutputInfo&gt; Halide::Internal::get_output_info(const Halide::Target &amp; target)'/>
<use f='halide/src/Module.cpp' l='145' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116validate_outputsERKSt3mapINS_6OutputENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS3_ESaISt4pairIKS3_S9_EEE'/>
<use f='halide/src/Module.cpp' l='779' u='c' c='_ZN6Halide19compile_multitargetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt3mapINS_6OutputES5_St4lessIS9_ESaISt4pairIKS9_S5_EEERKSt6vec11731248'/>
<doc f='halide/src/Module.cpp' l='27'>// This is the One True Source of the known output types for halide,
// and the appropriate file extension for each output type. If you are
// explicitly managing file extensions somewhere else, you are probably
// doing it wrong; please prefer to use this table as the source of truth.
//
// Note that we deliberately default to &quot;.py.cpp&quot; (rather than .py.c) here for python_extension;
// in theory, the Python extension file we generate can be compiled just
// fine as a plain-C file... but if we are building with cpp-name-mangling
// enabled in the target, we will include generated .h files that can&apos;t be compiled.
// We really don&apos;t want to vary the file extensions based on target flags,
// and in practice, it&apos;s extremely unlikely that anyone needs to rely on this
// being pure C output (vs possibly C++).</doc>
<use f='halide/src/Pipeline.cpp' l='38' u='c' c='_ZN6Halide12_GLOBAL__N_113single_outputERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6ModuleENS_6OutputE'/>
<use f='halide/src/Pipeline.cpp' l='45' u='c' c='_ZN6Halide12_GLOBAL__N_122static_library_outputsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetE'/>
<use f='halide/src/Pipeline.cpp' l='54' u='c' c='_ZN6Halide12_GLOBAL__N_119object_file_outputsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetE'/>
<use f='halide/src/Pipeline.cpp' l='286' u='c' c='_ZN6Halide8Pipeline17compile_to_objectERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EES8_RKNS_6TargetE'/>
<use f='halide/src/Pipeline.cpp' l='361' u='c' c='_ZN6Halide8Pipeline15compile_to_fileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EES8_RKNS_6TargetE'/>
