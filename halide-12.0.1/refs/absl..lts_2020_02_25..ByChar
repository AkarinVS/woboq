<def f='halide/build-apps/abseil-cpp/absl/strings/str_split.h' l='155' ll='162'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_split.h' l='237'/>
<size>1</size>
<doc f='halide/build-apps/abseil-cpp/absl/strings/str_split.h' l='132'>// ByChar
//
// A single character delimiter. `ByChar` is functionally equivalent to a
// 1-char string within a `ByString` delimiter, but slightly more efficient.
//
// Example:
//
//   // Because a char literal is converted to a absl::ByChar,
//   // the following two splits are equivalent.
//   std::vector&lt;std::string&gt; v1 = absl::StrSplit(&quot;a,b,c&quot;, &apos;,&apos;);
//   using absl::ByChar;
//   std::vector&lt;std::string&gt; v2 = absl::StrSplit(&quot;a,b,c&quot;, ByChar(&apos;,&apos;));
//   // v[0] == &quot;a&quot;, v[1] == &quot;b&quot;, v[2] == &quot;c&quot;
//
// `ByChar` is also the default delimiter if a single character is given
// as the delimiter to `StrSplit()`. For example, the following calls are
// equivalent:
//
//   std::vector&lt;std::string&gt; v = absl::StrSplit(&quot;a-b&quot;, &apos;-&apos;);
//
//   using absl::ByChar;
//   std::vector&lt;std::string&gt; v = absl::StrSplit(&quot;a-b&quot;, ByChar(&apos;-&apos;));
//</doc>
<fun r='_ZN4absl14lts_2020_02_256ByCharC1Ec'/>
<fun r='_ZNK4absl14lts_2020_02_256ByChar4FindENS0_11string_viewEm'/>
<mbr r='absl::lts_2020_02_25::ByChar::c_' o='0' t='char'/>
