<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/tensor_utils_common.h' l='159' type='void tflite::tensor_utils::MatrixBatchVectorMultiply(const int8_t * input, int32_t input_zeropoint, const int8_t * input_to_gate_weights, int32_t input_to_gate_effective_scale_a, int32_t input_to_gate_effective_scale_b, int32_t n_batch, int32_t n_input, int32_t n_cell, int8_t * gate_output, int8_t gate_output_zp)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/tensor_utils_common.h' l='155'>// Same as the above 8, 8, 8 integer matmul except for the presence of zero
// point and non-accumulative.
// TODO(b/148688698): remove this function by folding zero point calculation in
// prepare() function.</doc>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/reference/portable_tensor_utils.h' l='149' ll='159' type='void tflite::tensor_utils::MatrixBatchVectorMultiply(const int8_t * input, int32_t input_zeropoint, const int8_t * input_to_gate_weights, int32_t input_to_gate_effective_scale_a, int32_t input_to_gate_effective_scale_b, int32_t n_batch, int32_t n_input, int32_t n_cell, int8_t * gate_output, int8_t gate_output_zp)'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/lstm_eval.cc' l='678' u='c' c='_ZN6tflite3ops7builtin9lstm_eval12_GLOBAL__N_129CalculateLstmGateInteger8x8_8EPKaiS5_iiiiiS5_iS5_iiiiiPKsiiPKiiiii21TfLiteFusedActivationPsPaSC_'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/lstm_eval.cc' l='683' u='c' c='_ZN6tflite3ops7builtin9lstm_eval12_GLOBAL__N_129CalculateLstmGateInteger8x8_8EPKaiS5_iiiiiS5_iS5_iiiiiPKsiiPKiiiii21TfLiteFusedActivationPsPaSC_'/>
