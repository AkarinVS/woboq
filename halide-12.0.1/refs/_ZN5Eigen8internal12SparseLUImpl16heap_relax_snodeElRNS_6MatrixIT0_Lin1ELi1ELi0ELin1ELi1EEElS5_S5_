<dec f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='39' type='void Eigen::internal::SparseLUImpl::heap_relax_snode(const Eigen::Index n, Eigen::internal::SparseLUImpl::IndexVector &amp; et, const Eigen::Index relax_columns, Eigen::internal::SparseLUImpl::IndexVector &amp; descendants, Eigen::internal::SparseLUImpl::IndexVector &amp; relax_end)'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_heap_relax_snode.h' l='45' ll='121' type='void Eigen::internal::SparseLUImpl::heap_relax_snode(const Eigen::Index n, Eigen::internal::SparseLUImpl::IndexVector &amp; et, const Eigen::Index relax_columns, Eigen::internal::SparseLUImpl::IndexVector &amp; descendants, Eigen::internal::SparseLUImpl::IndexVector &amp; relax_end)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_heap_relax_snode.h' l='34'>/** 
 * \brief Identify the initial relaxed supernodes
 * 
 * This routine applied to a symmetric elimination tree. 
 * It assumes that the matrix has been reordered according to the postorder of the etree
 * \param n The number of columns
 * \param et elimination tree 
 * \param relax_columns Maximum number of columns allowed in a relaxed snode 
 * \param descendants Number of descendants of each node in the etree
 * \param relax_end last column in a supernode
 */</doc>
