<dec f='halide/build/include/Halide.h' l='30483' type='Halide::Internal::Stmt Halide::Internal::rewrite_memoized_allocations(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env)'/>
<doc f='halide/build/include/Halide.h' l='30477'>/** This should be called after Storage Flattening has added Allocation
 *  IR nodes. It connects the memoization cache lookups to the Allocations
 *  so they point to the buffers from the memoization cache and those buffers
 *  are released when no longer used.
 *  Should not affect allocations for non-memoized Funcs.
 */</doc>
<dec f='halide/src/Memoization.h' l='36' type='Halide::Internal::Stmt Halide::Internal::rewrite_memoized_allocations(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env)'/>
<use f='halide/src/Lower.cpp' l='279' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
<doc f='halide/src/Memoization.h' l='30'>/** This should be called after Storage Flattening has added Allocation
 *  IR nodes. It connects the memoization cache lookups to the Allocations
 *  so they point to the buffers from the memoization cache and those buffers
 *  are released when no longer used.
 *  Should not affect allocations for non-memoized Funcs.
 */</doc>
<def f='halide/src/Memoization.cpp' l='567' ll='572' type='Halide::Internal::Stmt Halide::Internal::rewrite_memoized_allocations(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env)'/>
