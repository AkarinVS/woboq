<def f='halide/build/include/Halide.h' l='9989' ll='10004' type='Buffer&lt;T, D&gt; Halide::Runtime::Buffer::cropped(int d, int min, int extent) const'/>
<doc f='halide/build/include/Halide.h' l='9985'>/** Make an image that refers to a sub-range of this image along
     * the given dimension. Asserts that the crop region is within
     * the existing bounds: you cannot &quot;crop outwards&quot;, even if you know there
     * is valid Buffer storage (e.g. because you already cropped inwards). */</doc>
<def f='halide/src/runtime/HalideBuffer.h' l='1227' ll='1242' type='Buffer&lt;T, D&gt; Halide::Runtime::Buffer::cropped(int d, int min, int extent) const'/>
<doc f='halide/src/runtime/HalideBuffer.h' l='1223'>/** Make an image that refers to a sub-range of this image along
     * the given dimension. Asserts that the crop region is within
     * the existing bounds: you cannot &quot;crop outwards&quot;, even if you know there
     * is valid Buffer storage (e.g. because you already cropped inwards). */</doc>
<use f='halide/src/autoschedulers/adams2019/DefaultCostModel.cpp' l='201' u='c' c='_ZN6Halide16DefaultCostModel8backpropERKNS_7Runtime6BufferIKfLi4EEEf'/>
<use f='halide/src/autoschedulers/adams2019/DefaultCostModel.cpp' l='278' u='c' c='_ZN6Halide16DefaultCostModel14evaluate_costsEv'/>
<use f='halide/test/generator/buffer_copy_aottest.cpp' l='21' u='c' c='main'/>
<use f='halide/test/generator/buffer_copy_aottest.cpp' l='21' u='c' c='main'/>
