<dec f='halide/build/include/Halide.h' l='7419' type='Halide::Expr Halide::operator!=(Halide::Expr a, int b)'/>
<doc f='halide/build/include/Halide.h' l='7415'>/** Return a boolean expression that tests whether an expression is
 * not equal to a constant integer. Coerces the integer to the type of
 * the expression. Errors if the integer is not representable in that
 * type. */</doc>
<dec f='halide/src/IROperator.h' l='614' type='Halide::Expr Halide::operator!=(Halide::Expr a, int b)'/>
<doc f='halide/src/IROperator.h' l='610'>/** Return a boolean expression that tests whether an expression is
 * not equal to a constant integer. Coerces the integer to the type of
 * the expression. Errors if the integer is not representable in that
 * type. */</doc>
<use f='halide/src/CodeGen_Hexagon.cpp' l='349' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_131SloppyUnpredicateLoadsAndStores5visitEPKNS0_5StoreE'/>
<def f='halide/src/IROperator.cpp' l='1775' ll='1780' type='Halide::Expr Halide::operator!=(Halide::Expr a, int b)'/>
<use f='halide/src/Module.cpp' l='919' u='c' c='_ZN6Halide19compile_multitargetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt3mapINS_6OutputES5_St4lessIS9_ESaISt4pairIKS9_S5_EEERKSt6vec11731248'/>
<use f='halide/src/Simplify_Call.cpp' l='217' u='c' c='_ZN6Halide8Internal8Simplify5visitEPKNS0_4CallEPNS1_8ExprInfoE'/>
<use f='halide/src/Solve.cpp' l='686' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_115SolveExpression9visit_cmpEPKT_'/>
<use f='halide/src/Solve.cpp' l='1295' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1296' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1351' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1352' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1378' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1379' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1382' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1382' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1383' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1384' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1384' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1385' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1385' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1386' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1386' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/Solve.cpp' l='1386' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/UnpackBuffers.cpp' l='138' u='c' c='_ZN6Halide8Internal14unpack_buffersENS0_4StmtE'/>
