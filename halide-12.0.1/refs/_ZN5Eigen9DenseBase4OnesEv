<dec f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='365' type='static const Eigen::DenseBase::ConstantReturnType Eigen::DenseBase::Ones()'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/CwiseNullaryOp.h' l='615' ll='620' type='static const typename DenseBase&lt;Derived&gt;::ConstantReturnType Eigen::DenseBase::Ones()'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/CwiseNullaryOp.h' l='605'>/** \returns an expression of a fixed-size matrix or vector where all coefficients equal one.
  *
  * This variant is only for fixed-size MatrixBase types. For dynamic-size types, you
  * need to use the variants taking size arguments.
  *
  * Example: \include MatrixBase_ones.cpp
  * Output: \verbinclude MatrixBase_ones.out
  *
  * \sa Ones(Index), Ones(Index,Index), isOnes(), class Ones
  */</doc>
