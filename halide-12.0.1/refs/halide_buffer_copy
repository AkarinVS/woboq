<dec f='halide/halide-install/include/Halide.h' l='880' type='int halide_buffer_copy(void * user_context, struct halide_buffer_t * src, const struct halide_device_interface_t * dst_device_interface, struct halide_buffer_t * dst)'/>
<doc f='halide/halide-install/include/Halide.h' l='870'>/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer&apos;s shape must
 * be contained within the source buffer&apos;s shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */</doc>
<dec f='halide/halide-install/include/HalideRuntime.h' l='782' type='int halide_buffer_copy(void * user_context, struct halide_buffer_t * src, const struct halide_device_interface_t * dst_device_interface, struct halide_buffer_t * dst)'/>
<doc f='halide/halide-install/include/HalideRuntime.h' l='772'>/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer&apos;s shape must
 * be contained within the source buffer&apos;s shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */</doc>
<dec f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='942' type='int halide_buffer_copy(void * user_context, struct halide_buffer_t * src, const struct halide_device_interface_t * dst_device_interface, struct halide_buffer_t * dst)'/>
<doc f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='932'>/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer&apos;s shape must
 * be contained within the source buffer&apos;s shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */</doc>
<dec f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='942' type='int halide_buffer_copy(void * user_context, struct halide_buffer_t * src, const struct halide_device_interface_t * dst_device_interface, struct halide_buffer_t * dst)'/>
<doc f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='932'>/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer&apos;s shape must
 * be contained within the source buffer&apos;s shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */</doc>
<dec f='halide/build/include/HalideRuntime.h' l='782' type='int halide_buffer_copy(void * user_context, struct halide_buffer_t * src, const struct halide_device_interface_t * dst_device_interface, struct halide_buffer_t * dst)'/>
<doc f='halide/build/include/HalideRuntime.h' l='772'>/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer&apos;s shape must
 * be contained within the source buffer&apos;s shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */</doc>
<dec f='halide/build/include/Halide.h' l='880' type='int halide_buffer_copy(void * user_context, struct halide_buffer_t * src, const struct halide_device_interface_t * dst_device_interface, struct halide_buffer_t * dst)'/>
<doc f='halide/build/include/Halide.h' l='870'>/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer&apos;s shape must
 * be contained within the source buffer&apos;s shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='782' type='int halide_buffer_copy(void * user_context, struct halide_buffer_t * src, const struct halide_device_interface_t * dst_device_interface, struct halide_buffer_t * dst)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='772'>/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer&apos;s shape must
 * be contained within the source buffer&apos;s shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */</doc>
<use f='halide/test/generator/buffer_copy_aottest.cpp' l='19' u='c' c='main'/>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='854' type='int halide_buffer_copy(void * user_context, struct halide_buffer_t * src, const struct halide_device_interface_t * dst_device_interface, struct halide_buffer_t * dst)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='844'>/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer&apos;s shape must
 * be contained within the source buffer&apos;s shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */</doc>
