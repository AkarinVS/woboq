<def f='halide/build-apps/ruy/ruy/cpu_cache_params.h' l='72' ll='79'/>
<use f='halide/build-apps/ruy/ruy/cpuinfo.h' l='40' c='_ZN3ruy7CpuInfo11CacheParamsEv'/>
<use f='halide/build-apps/ruy/ruy/cpuinfo.h' l='52'/>
<size>8</size>
<doc f='halide/build-apps/ruy/ruy/cpu_cache_params.h' l='21'>// Holds some information about a CPU&apos;s data caches.
//
// Meaning of &apos;local&apos;: a &apos;local&apos; cache means a cache that is used by only one
// CPU core, not shared with other cores. It might still be used by multiple
// &apos;processors&apos; in case of SMT as in Intel HyperThreading. CPUs often have
// multiple levels of local cache, e.g. L1 and L2. We typically return the
// larger one, the assumption being that even the larger one has substantially
// lower latency than any higher (non-local) cache, however as noted below (*)
// the implementation may choose to ignore a cache level.
//
// Meaning of &apos;last level&apos;: this refers to some higher cache level, typically
// shared among multiple CPU cores, so we considered using the terminology
// &apos;shared&apos; instead of &apos;last_level&apos;. However that created some confusion of its
// own, as the meaning of &apos;shared&apos; varies between CPUs, with some CPUs not
// having any level of cache shared among all cores. That is why we stick with
// the &apos;last_level&apos; terminology, however with the following caveats:
//   1. As noted below (*) the implementation may choose to ignore a cache
// level, which could cause the &apos;last level&apos; cache according to ruy not to be
// the actual last level.
//   2. On some systems-on-chip there is a &apos;last level&apos; cache outside of the
// last level cache in the CPU complex. Ruy is not currently doing anything
// specific regarding such caches.
//   3. We haven&apos;t figured out how to amend our terminology to be meaningful
// on NUMA architectures. NUMA hasn&apos;t been part of ruy&apos;s scope so far.
//
// (*) Note on ignoring certain cache levels:
// The implementation may choose to ignore a cache if it&apos;s suspected not to
// have compelling performance. This is true about all cache levels, but more
// likely regarding the &apos;last level&apos; cache. For example, a L4 cache may be
// ignored if we believe that it&apos;s not the right latency/size compromise for us,
// so on such a CPU, the L3 cache may be used as the &apos;last level&apos; cache instead.
//
// (**) Note on CPUs with heterogeneous cores:
// Some CPUs have multiple cores with different local caches. For example, some
// ARM big.LITTLE CPUs have some CPU cores with L1=32k and L2=128k, and some
// other CPU cores with L1=64k and L2=256k or even 512k. On such CPUs, the
// fields in this struct refer to the minimum value over all cores. In other
// words, we use conservative values that do not risk over-estimating local
// cache sizes in case of a migration of our threads to smaller cores.
//
// Example:
// On a Qualcomm S855 SoC, there are 8 CPU cores. Each core has L1 and L2 data
// caches local to it:
// - 4 cores have L1=32k, L2=128k.
// - 3 cores have L1=64k, L2=256k.
// - 1 core has   L1=64k, L2=512k.
// All 8 cores share a L3 cache of size 2M, and there is beyond that a SoC-level
// cache of size 3M.
// On such a system, we should have:
// - local_level_cache_size=128k, the smallest L2 size.
// - last_level_cache_size=2M, the L3 cache size, ignoring the SoC-level cache.</doc>
<mbr r='ruy::CpuCacheParams::local_cache_size' o='0' t='int'/>
<mbr r='ruy::CpuCacheParams::last_level_cache_size' o='32' t='int'/>
<use f='halide/build-apps/ruy/ruy/block_map.h' l='114' c='_ZN3ruy26IsObviouslyLinearTraversalEiiiiiRKNS_14CpuCacheParamsE'/>
<use f='halide/build-apps/ruy/ruy/block_map.h' l='121' c='_ZN3ruy12MakeBlockMapEiiiiiiiiRKNS_14CpuCacheParamsEPNS_8BlockMapE'/>
<use f='halide/build-apps/ruy/ruy/block_map.cc' l='136' c='_ZN3ruy12_GLOBAL__N_117GetTraversalOrderEiiiiiRKNS_14CpuCacheParamsE'/>
<use f='halide/build-apps/ruy/ruy/block_map.cc' l='251' c='_ZN3ruy12_GLOBAL__N_121GetCacheLocalityScoreEiiiiiiiiRKNS_14CpuCacheParamsE'/>
<use f='halide/build-apps/ruy/ruy/block_map.cc' l='323' c='_ZN3ruy26IsObviouslyLinearTraversalEiiiiiRKNS_14CpuCacheParamsE'/>
<use f='halide/build-apps/ruy/ruy/block_map.cc' l='342' c='_ZN3ruy12MakeBlockMapEiiiiiiiiRKNS_14CpuCacheParamsEPNS_8BlockMapE'/>
<size>8</size>
<use f='halide/build-apps/ruy/ruy/cpuinfo.cc' l='18' c='_ZN3ruy12_GLOBAL__N_120MakeDummyCacheParamsEPNS_14CpuCacheParamsE'/>
<use f='halide/build-apps/ruy/ruy/cpuinfo.cc' l='169' c='_ZN3ruy7CpuInfo11CacheParamsEv'/>
<size>8</size>
<use f='halide/build-apps/ruy/ruy/trmul.cc' l='270' c='_ZN3ruy12_GLOBAL__N_116GetUseSimpleLoopEiiiiiiRKNS_14CpuCacheParamsE'/>
<size>8</size>
