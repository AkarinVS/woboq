<dec f='halide/halide-install/include/Halide.h' l='31445' type='Halide::Internal::Stmt Halide::Internal::storage_flattening(Halide::Internal::Stmt s, const std::vector&lt;Function&gt; &amp; outputs, const std::map&lt;std::string, Function&gt; &amp; env, const Halide::Target &amp; target)'/>
<doc f='halide/halide-install/include/Halide.h' l='31442'>/** Take a statement with multi-dimensional Realize, Provide, and Call
 * nodes, and turn it into a statement with single-dimensional
 * Allocate, Store, and Load nodes respectively. */</doc>
<dec f='halide/build/include/Halide.h' l='31445' type='Halide::Internal::Stmt Halide::Internal::storage_flattening(Halide::Internal::Stmt s, const std::vector&lt;Function&gt; &amp; outputs, const std::map&lt;std::string, Function&gt; &amp; env, const Halide::Target &amp; target)'/>
<doc f='halide/build/include/Halide.h' l='31442'>/** Take a statement with multi-dimensional Realize, Provide, and Call
 * nodes, and turn it into a statement with single-dimensional
 * Allocate, Store, and Load nodes respectively. */</doc>
<dec f='halide/src/StorageFlattening.h' l='26' type='Halide::Internal::Stmt Halide::Internal::storage_flattening(Halide::Internal::Stmt s, const std::vector&lt;Function&gt; &amp; outputs, const std::map&lt;std::string, Function&gt; &amp; env, const Halide::Target &amp; target)'/>
<use f='halide/src/Lower.cpp' l='266' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
<doc f='halide/src/StorageFlattening.h' l='23'>/** Take a statement with multi-dimensional Realize, Provide, and Call
 * nodes, and turn it into a statement with single-dimensional
 * Allocate, Store, and Load nodes respectively. */</doc>
<def f='halide/src/StorageFlattening.cpp' l='437' ll='461' type='Halide::Internal::Stmt Halide::Internal::storage_flattening(Halide::Internal::Stmt s, const vector&lt;Halide::Internal::Function&gt; &amp; outputs, const map&lt;std::string, Halide::Internal::Function&gt; &amp; env, const Halide::Target &amp; target)'/>
