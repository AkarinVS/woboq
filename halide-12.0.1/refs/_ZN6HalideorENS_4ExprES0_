<dec f='halide/halide-install/include/Halide.h' l='7884' type='Halide::Expr Halide::operator|(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/halide-install/include/Halide.h' l='7880'>/** Return the bitwise or of two expressions (which need not have the
 * same type).  The result type is the wider of the two expressions.
 * Only integral types are allowed and both expressions must be signed
 * or both must be unsigned. */</doc>
<dec f='halide/build/include/Halide.h' l='7884' type='Halide::Expr Halide::operator|(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/build/include/Halide.h' l='7880'>/** Return the bitwise or of two expressions (which need not have the
 * same type).  The result type is the wider of the two expressions.
 * Only integral types are allowed and both expressions must be signed
 * or both must be unsigned. */</doc>
<dec f='halide/src/IROperator.h' l='1079' type='Halide::Expr Halide::operator|(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/src/IROperator.h' l='1075'>/** Return the bitwise or of two expressions (which need not have the
 * same type).  The result type is the wider of the two expressions.
 * Only integral types are allowed and both expressions must be signed
 * or both must be unsigned. */</doc>
<use f='halide/src/Bounds.cpp' l='3201' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3207' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3208' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/CodeGen_Hexagon.cpp' l='2139' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_115CodeGen_Hexagon29codegen_cache_allocation_sizeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeERKSt62981512'/>
<use f='halide/src/CodeGen_Internal.cpp' l='429' u='c' c='_ZN6Halide8Internal35unsigned_long_div_mod_round_to_zeroERNS_4ExprERKS1_PKm'/>
<use f='halide/src/CodeGen_Internal.cpp' l='465' u='c' c='_ZN6Halide8Internal19lower_euclidean_divENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='531' u='c' c='_ZN6Halide8Internal19lower_euclidean_modENS_4ExprES1_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='563' u='c' c='_ZN6Halide8Internal19lower_euclidean_modENS_4ExprES1_'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='4135' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM15codegen_assertsERKSt6vectorIPKNS0_10AssertStmtESaIS5_EE'/>
<use f='halide/src/CodeGen_Posix.cpp' l='55' u='c' c='_ZN6Halide8Internal13CodeGen_Posix23codegen_allocation_sizeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeERKSt6vectorINS_4ExprESaISC_EERKSC_'/>
<use f='halide/src/EmulateFloat16Math.cpp' l='61' u='c' c='_ZN6Halide8Internal18float16_to_float32ENS_4ExprE'/>
<use f='halide/src/EmulateFloat16Math.cpp' l='110' u='c' c='_ZN6Halide8Internal18float32_to_float16ENS_4ExprE'/>
<use f='halide/src/IROperator.cpp' l='733' u='c' c='_ZN6Halide8Internal16range_reduce_logERKNS_4ExprEPS1_S4_'/>
<use f='halide/src/IROperator.cpp' l='747' u='c' c='_ZN6Halide8Internal10halide_logERKNS_4ExprE'/>
<use f='halide/src/IROperator.cpp' l='985' u='c' c='_ZNK6Halide8Internal13BufferBuilder5buildEv'/>
<def f='halide/src/IROperator.cpp' l='2346' ll='2350' type='Halide::Expr Halide::operator|(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/src/Simplify_Call.cpp' l='296' u='c' c='_ZN6Halide8Internal8Simplify5visitEPKNS0_4CallEPNS1_8ExprInfoE'/>
