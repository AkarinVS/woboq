<dec f='halide/build/include/HalideRuntime.h' l='111' type='void halide_error(void * user_context, const char * )'/>
<doc f='halide/build/include/HalideRuntime.h' l='103'>/** Halide calls this function on runtime errors (for example bounds
 * checking failures). This function can be replaced in JITed code by
 * using Func::set_error_handler, or in AOT code by calling
 * halide_set_error_handler. In AOT code on platforms that support
 * weak linking (i.e. not Windows), you can also override it by simply
 * defining your own halide_error.
 */
// @{</doc>
<dec f='halide/build/include/Halide.h' l='209' type='void halide_error(void * user_context, const char * )'/>
<doc f='halide/build/include/Halide.h' l='201'>/** Halide calls this function on runtime errors (for example bounds
 * checking failures). This function can be replaced in JITed code by
 * using Func::set_error_handler, or in AOT code by calling
 * halide_set_error_handler. In AOT code on platforms that support
 * weak linking (i.e. not Windows), you can also override it by simply
 * defining your own halide_error.
 */
// @{</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='111' type='void halide_error(void * user_context, const char * )'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='103'>/** Halide calls this function on runtime errors (for example bounds
 * checking failures). This function can be replaced in JITed code by
 * using Func::set_error_handler, or in AOT code by calling
 * halide_set_error_handler. In AOT code on platforms that support
 * weak linking (i.e. not Windows), you can also override it by simply
 * defining your own halide_error.
 */
// @{</doc>
<def f='halide/test/generator/msan_aottest.cpp' l='107' ll='113' type='void halide_error(void * user_context, const char * msg)'/>
<use f='halide/tools/RunGenMain.cpp' l='213' u='c' c='_ZN12_GLOBAL__N_119HalideMemoryTracker19tracker_malloc_implEPvm'/>
<use f='halide/tools/RunGenMain.cpp' l='224' u='c' c='_ZN12_GLOBAL__N_119HalideMemoryTracker17tracker_free_implEPvS1_'/>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='183' type='void halide_error(void * user_context, const char * )'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='175'>/** Halide calls this function on runtime errors (for example bounds
 * checking failures). This function can be replaced in JITed code by
 * using Func::set_error_handler, or in AOT code by calling
 * halide_set_error_handler. In AOT code on platforms that support
 * weak linking (i.e. not Windows), you can also override it by simply
 * defining your own halide_error.
 */
// @{</doc>
