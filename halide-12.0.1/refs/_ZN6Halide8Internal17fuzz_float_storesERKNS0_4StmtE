<dec f='halide/halide-install/include/Halide.h' l='22424' type='Halide::Internal::Stmt Halide::Internal::fuzz_float_stores(const Halide::Internal::Stmt &amp; s)'/>
<doc f='halide/halide-install/include/Halide.h' l='22417'>/** On every store of a floating point value, mask off the
 * least-significant-bit of the mantissa. We&apos;ve found that whether or
 * not this dramatically changes the output of a pipeline correlates
 * very well with whether or not a pipeline will produce very
 * different outputs on different architectures (e.g. with and without
 * FMA). It&apos;s also a useful way to detect bad tests, such as those
 * that expect exact floating point equality across platforms. */</doc>
<dec f='halide/build/include/Halide.h' l='22424' type='Halide::Internal::Stmt Halide::Internal::fuzz_float_stores(const Halide::Internal::Stmt &amp; s)'/>
<doc f='halide/build/include/Halide.h' l='22417'>/** On every store of a floating point value, mask off the
 * least-significant-bit of the mantissa. We&apos;ve found that whether or
 * not this dramatically changes the output of a pipeline correlates
 * very well with whether or not a pipeline will produce very
 * different outputs on different architectures (e.g. with and without
 * FMA). It&apos;s also a useful way to detect bad tests, such as those
 * that expect exact floating point equality across platforms. */</doc>
<dec f='halide/src/FuzzFloatStores.h' l='20' type='Halide::Internal::Stmt Halide::Internal::fuzz_float_stores(const Halide::Internal::Stmt &amp; s)'/>
<def f='halide/src/FuzzFloatStores.cpp' l='29' ll='31' type='Halide::Internal::Stmt Halide::Internal::fuzz_float_stores(const Halide::Internal::Stmt &amp; s)'/>
<doc f='halide/src/FuzzFloatStores.h' l='13'>/** On every store of a floating point value, mask off the
 * least-significant-bit of the mantissa. We&apos;ve found that whether or
 * not this dramatically changes the output of a pipeline correlates
 * very well with whether or not a pipeline will produce very
 * different outputs on different architectures (e.g. with and without
 * FMA). It&apos;s also a useful way to detect bad tests, such as those
 * that expect exact floating point equality across platforms. */</doc>
<use f='halide/src/Lower.cpp' l='357' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
