<def f='halide/build-apps/abseil-cpp/absl/base/internal/atomic_hook.h' l='107' ll='111' type='void absl::lts_2020_02_25::base_internal::AtomicHook&lt;type-parameter-0-0 (*)(type-parameter-0-1...)&gt;::Store(absl::lts_2020_02_25::base_internal::AtomicHook&lt;type-parameter-0-0 (*)(type-parameter-0-1...)&gt;::FnPtr fn)'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/atomic_hook.h' l='101'>// Stores the provided function pointer as the value for this hook.
  //
  // This is intended to be called once.  Multiple calls are legal only if the
  // same function pointer is provided for each call.  The store is implemented
  // as a memory_order_release operation, and read accesses are implemented as
  // memory_order_acquire.</doc>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/raw_logging.cc' l='235' u='c' c='_ZN4absl14lts_2020_02_2520raw_logging_internal27RegisterInternalLogFunctionEPFvNS0_11LogSeverityEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.cc' l='66' u='c' c='_ZN4absl14lts_2020_02_2513base_internal24RegisterSpinLockProfilerEPFvPKvlE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='130' u='c' c='_ZN4absl14lts_2020_02_2521RegisterMutexProfilerEPFvlE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='135' u='c' c='_ZN4absl14lts_2020_02_2519RegisterMutexTracerEPFvPKcPKvlE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='139' u='c' c='_ZN4absl14lts_2020_02_2521RegisterCondVarTracerEPFvPKcPKvE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='143' u='c' c='_ZN4absl14lts_2020_02_2518RegisterSymbolizerEPFbPKvPciE'/>
