<dec f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_fixed.h' l='43' type='bool absl::lts_2020_02_25::time_internal::cctz::FixedOffsetFromName(const std::string &amp; name, absl::lts_2020_02_25::time_internal::cctz::seconds * offset)'/>
<def f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_fixed.cc' l='55' ll='82' type='bool absl::lts_2020_02_25::time_internal::cctz::FixedOffsetFromName(const std::string &amp; name, absl::lts_2020_02_25::time_internal::cctz::seconds * offset)'/>
<doc f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_fixed.h' l='28'>// Helper functions for dealing with the names and abbreviations
// of time zones that are a fixed offset (seconds east) from UTC.
// FixedOffsetFromName() extracts the offset from a valid fixed-offset
// name, while FixedOffsetToName() and FixedOffsetToAbbr() generate
// the canonical zone name and abbreviation respectively for the given
// offset.
//
// A fixed-offset name looks like &quot;Fixed/UTC&lt;+-&gt;&lt;hours&gt;:&lt;mins&gt;:&lt;secs&gt;&quot;.
// Its abbreviation is of the form &quot;UTC(&lt;+-&gt;H?H(MM(SS)?)?)?&quot; where the
// optional pieces are omitted when their values are zero.  (Note that
// the sign is the opposite of that used in a POSIX TZ specification.)
//
// Note: FixedOffsetFromName() fails on syntax errors or when the parsed
// offset exceeds 24 hours.  FixedOffsetToName() and FixedOffsetToAbbr()
// both produce &quot;UTC&quot; when the argument offset exceeds 24 hours.</doc>
<use f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_impl.cc' l='55' u='c' c='_ZN4absl14lts_2020_02_2513time_internal4cctz9time_zone4Impl12LoadTimeZoneERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS3_'/>
<use f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_info.cc' l='715' u='c' c='_ZN4absl14lts_2020_02_2513time_internal4cctz12TimeZoneInfo4LoadERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
