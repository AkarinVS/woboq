<dec f='halide/halide-install/include/Halide.h' l='17445' type='Halide::Func &amp; Halide::Func::align_extent(const Halide::Var &amp; var, Halide::Expr modulus)'/>
<use f='halide/halide-install/include/Halide.h' l='25171' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12align_extentEDpOT_'/>
<use f='halide/halide-install/include/Halide.h' l='25171' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12align_extentEDpOT_'/>
<doc f='halide/halide-install/include/Halide.h' l='17438'>/** Expand the region computed so that the extent is a
     * multiple of &apos;modulus&apos;. For example, f.align_extent(x, 2) forces
     * the extent realized to be even. The region computed always contains the
     * region that would have been computed without this directive, so no
     * assertions are injected. (This is essentially equivalent to align_bounds(),
     * but always leaving the min untouched.)
     */</doc>
<dec f='halide/build/include/Halide.h' l='17445' type='Halide::Func &amp; Halide::Func::align_extent(const Halide::Var &amp; var, Halide::Expr modulus)'/>
<use f='halide/build/include/Halide.h' l='25171' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12align_extentEDpOT_'/>
<use f='halide/build/include/Halide.h' l='25171' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12align_extentEDpOT_'/>
<doc f='halide/build/include/Halide.h' l='17438'>/** Expand the region computed so that the extent is a
     * multiple of &apos;modulus&apos;. For example, f.align_extent(x, 2) forces
     * the extent realized to be even. The region computed always contains the
     * region that would have been computed without this directive, so no
     * assertions are injected. (This is essentially equivalent to align_bounds(),
     * but always leaving the min untouched.)
     */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='328' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='1565' type='Halide::Func &amp; Halide::Func::align_extent(const Halide::Var &amp; var, Halide::Expr modulus)'/>
<doc f='halide/src/Func.h' l='1558'>/** Expand the region computed so that the extent is a
     * multiple of &apos;modulus&apos;. For example, f.align_extent(x, 2) forces
     * the extent realized to be even. The region computed always contains the
     * region that would have been computed without this directive, so no
     * assertions are injected. (This is essentially equivalent to align_bounds(),
     * but always leaving the min untouched.)
     */</doc>
<def f='halide/src/Func.cpp' l='2330' ll='2348' type='Halide::Func &amp; Halide::Func::align_extent(const Halide::Var &amp; var, Halide::Expr modulus)'/>
<use f='halide/src/Generator.h' l='2237' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12align_extentEDpOT_'/>
<use f='halide/src/Generator.h' l='2237' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase12align_extentEDpOT_'/>
