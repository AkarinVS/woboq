<dec f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.h' l='205' type='void absl::lts_2020_02_25::base_internal::RegisterSpinLockProfiler(void (*)(const void *, int64_t) fn)'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.h' l='198'>// Register a hook for profiling support.
//
// The function pointer registered here will be called whenever a spinlock is
// contended.  The callback is given an opaque handle to the contended spinlock
// and the number of wait cycles.  This is thread-safe, but only a single
// profiler can be registered.  It is an error to call this function multiple
// times with different arguments.</doc>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.cc' l='64' ll='67' type='void absl::lts_2020_02_25::base_internal::RegisterSpinLockProfiler(void (*)(const void *, int64_t) fn)'/>
