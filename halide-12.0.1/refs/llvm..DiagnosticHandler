<def f='halide/llvm-install/include/llvm/IR/DiagnosticHandler.h' l='24' ll='71'/>
<use f='halide/llvm-install/include/llvm/IR/LLVMContext.h' l='198' c='_ZN4llvm11LLVMContext20setDiagnosticHandlerEOSt10unique_ptrINS_17DiagnosticHandlerESt14default_deleteIS2_EEb'/>
<use f='halide/llvm-install/include/llvm/IR/LLVMContext.h' l='211' c='_ZNK4llvm11LLVMContext17getDiagHandlerPtrEv'/>
<use f='halide/llvm-install/include/llvm/IR/LLVMContext.h' l='215' c='_ZN4llvm11LLVMContext20getDiagnosticHandlerEv'/>
<size>24</size>
<doc f='halide/llvm-install/include/llvm/IR/DiagnosticHandler.h' l='20'>/// This is the base class for diagnostic handling in LLVM.
/// The handleDiagnostics method must be overriden by the subclasses to handle
/// diagnostic. The *RemarkEnabled methods can be overriden to control
/// which remarks are enabled.</doc>
<mbr r='llvm::DiagnosticHandler::DiagnosticContext' o='64' t='void *'/>
<fun r='_ZN4llvm17DiagnosticHandlerC1EPv'/>
<fun r='_ZN4llvm17DiagnosticHandlerD1Ev'/>
<mbr r='llvm::DiagnosticHandler::DiagHandlerCallback' o='128' t='llvm::DiagnosticHandler::DiagnosticHandlerTy'/>
<fun r='_ZN4llvm17DiagnosticHandler17handleDiagnosticsERKNS_14DiagnosticInfoE'/>
<fun r='_ZNK4llvm17DiagnosticHandler23isAnalysisRemarkEnabledENS_9StringRefE'/>
<fun r='_ZNK4llvm17DiagnosticHandler24isMissedOptRemarkEnabledENS_9StringRefE'/>
<fun r='_ZNK4llvm17DiagnosticHandler24isPassedOptRemarkEnabledENS_9StringRefE'/>
<fun r='_ZNK4llvm17DiagnosticHandler18isAnyRemarkEnabledENS_9StringRefE'/>
<fun r='_ZNK4llvm17DiagnosticHandler18isAnyRemarkEnabledEv'/>
