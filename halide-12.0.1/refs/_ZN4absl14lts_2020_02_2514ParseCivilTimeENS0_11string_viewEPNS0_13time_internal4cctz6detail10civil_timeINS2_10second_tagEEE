<dec f='halide/build-apps/abseil-cpp/absl/time/civil_time.h' l='487' type='bool absl::lts_2020_02_25::ParseCivilTime(absl::string_view s, absl::lts_2020_02_25::CivilSecond * c)'/>
<doc f='halide/build-apps/abseil-cpp/absl/time/civil_time.h' l='463'>// absl::ParseCivilTime()
//
// Parses a civil-time value from the specified `absl::string_view` into the
// passed output parameter. Returns `true` upon successful parsing.
//
// The expected form of the input string is as follows:
//
//  Type        | Format
//  ---------------------------------
//  CivilSecond | YYYY-MM-DDTHH:MM:SS
//  CivilMinute | YYYY-MM-DDTHH:MM
//  CivilHour   | YYYY-MM-DDTHH
//  CivilDay    | YYYY-MM-DD
//  CivilMonth  | YYYY-MM
//  CivilYear   | YYYY
//
// Example:
//
//   absl::CivilDay d;
//   bool ok = absl::ParseCivilTime(&quot;2018-01-02&quot;, &amp;d); // OK
//
// Note that parsing will fail if the string&apos;s format does not match the
// expected type exactly. `ParseLenientCivilTime()` below is more lenient.
//</doc>
<def f='halide/build-apps/abseil-cpp/absl/time/civil_time.cc' l='113' ll='115' type='bool absl::lts_2020_02_25::ParseCivilTime(absl::lts_2020_02_25::string_view s, absl::lts_2020_02_25::CivilSecond * c)'/>
