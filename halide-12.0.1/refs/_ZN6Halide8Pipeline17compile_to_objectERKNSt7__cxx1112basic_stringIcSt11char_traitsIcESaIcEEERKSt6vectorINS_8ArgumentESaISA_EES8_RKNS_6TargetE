<dec f='halide/build/include/Halide.h' l='14899' type='void Halide::Pipeline::compile_to_object(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/build/include/Halide.h' l='14894'>/** Statically compile a pipeline with multiple output functions to an
     * object file, with the given filename (which should probably end in
     * .o or .obj), type signature, and C function name (which defaults to
     * the same name as this halide function. You probably don&apos;t want to
     * use this directly; call compile_to_static_library or compile_to_file instead. */</doc>
<use f='halide/python_bindings/src/PyPipeline.cpp' l='71' u='a' c='_ZN6Halide14PythonBindings15define_pipelineERN8pybind117module_E'/>
<dec f='halide/src/Pipeline.h' l='243' type='void Halide::Pipeline::compile_to_object(const std::string &amp; filename, const std::vector&lt;Argument&gt; &amp; , const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/src/Pipeline.h' l='238'>/** Statically compile a pipeline with multiple output functions to an
     * object file, with the given filename (which should probably end in
     * .o or .obj), type signature, and C function name (which defaults to
     * the same name as this halide function. You probably don&apos;t want to
     * use this directly; call compile_to_static_library or compile_to_file instead. */</doc>
<use f='halide/src/Func.cpp' l='3196' u='c' c='_ZN6Halide4Func17compile_to_objectERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EES8_RKNS_6TargetE'/>
<use f='halide/src/Func.cpp' l='3201' u='c' c='_ZN6Halide4Func17compile_to_objectERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorINS_8ArgumentESaISA_EERKNS_6TargetE'/>
<def f='halide/src/Pipeline.cpp' l='281' ll='288' type='void Halide::Pipeline::compile_to_object(const std::string &amp; filename, const vector&lt;Halide::Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
