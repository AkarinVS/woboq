<dec f='halide/halide-install/include/Halide.h' l='20492' type='Halide::Internal::CodeGen_Posix::Allocation Halide::Internal::CodeGen_Posix::create_allocation(const std::string &amp; name, Halide::Type type, Halide::MemoryType memory_type, const std::vector&lt;Expr&gt; &amp; extents, const Halide::Expr &amp; condition, const Halide::Expr &amp; new_expr, std::string free_function)'/>
<doc f='halide/halide-install/include/Halide.h' l='20479'>/** Allocates some memory on either the stack or the heap, and
     * returns an Allocation object describing it. For heap
     * allocations this calls halide_malloc in the runtime, and for
     * stack allocations it either reuses an existing block from the
     * free_stack_blocks list, or it saves the stack pointer and calls
     * alloca.
     *
     * This call returns the allocation, pushes it onto the
     * &apos;allocations&apos; map, and adds an entry to the symbol table called
     * name.host that provides the base pointer.
     *
     * When the allocation can be freed call &apos;free_allocation&apos;, and
     * when it goes out of scope call &apos;destroy_allocation&apos;. */</doc>
<dec f='halide/build/include/Halide.h' l='20492' type='Halide::Internal::CodeGen_Posix::Allocation Halide::Internal::CodeGen_Posix::create_allocation(const std::string &amp; name, Halide::Type type, Halide::MemoryType memory_type, const std::vector&lt;Expr&gt; &amp; extents, const Halide::Expr &amp; condition, const Halide::Expr &amp; new_expr, std::string free_function)'/>
<doc f='halide/build/include/Halide.h' l='20479'>/** Allocates some memory on either the stack or the heap, and
     * returns an Allocation object describing it. For heap
     * allocations this calls halide_malloc in the runtime, and for
     * stack allocations it either reuses an existing block from the
     * free_stack_blocks list, or it saves the stack pointer and calls
     * alloca.
     *
     * This call returns the allocation, pushes it onto the
     * &apos;allocations&apos; map, and adds an entry to the symbol table called
     * name.host that provides the base pointer.
     *
     * When the allocation can be freed call &apos;free_allocation&apos;, and
     * when it goes out of scope call &apos;destroy_allocation&apos;. */</doc>
<dec f='halide/src/CodeGen_Posix.h' l='104' type='Halide::Internal::CodeGen_Posix::Allocation Halide::Internal::CodeGen_Posix::create_allocation(const std::string &amp; name, Halide::Type type, Halide::MemoryType memory_type, const std::vector&lt;Expr&gt; &amp; extents, const Halide::Expr &amp; condition, const Halide::Expr &amp; new_expr, std::string free_function)'/>
<doc f='halide/src/CodeGen_Posix.h' l='91'>/** Allocates some memory on either the stack or the heap, and
     * returns an Allocation object describing it. For heap
     * allocations this calls halide_malloc in the runtime, and for
     * stack allocations it either reuses an existing block from the
     * free_stack_blocks list, or it saves the stack pointer and calls
     * alloca.
     *
     * This call returns the allocation, pushes it onto the
     * &apos;allocations&apos; map, and adds an entry to the symbol table called
     * name.host that provides the base pointer.
     *
     * When the allocation can be freed call &apos;free_allocation&apos;, and
     * when it goes out of scope call &apos;destroy_allocation&apos;. */</doc>
<def f='halide/src/CodeGen_Posix.cpp' l='84' ll='299' type='CodeGen_Posix::Allocation Halide::Internal::CodeGen_Posix::create_allocation(const std::string &amp; name, Halide::Type type, Halide::MemoryType memory_type, const std::vector&lt;Expr&gt; &amp; extents, const Halide::Expr &amp; condition, const Halide::Expr &amp; new_expr, std::string free_function)'/>
<use f='halide/src/CodeGen_Posix.cpp' l='335' u='c' c='_ZN6Halide8Internal13CodeGen_Posix5visitEPKNS0_8AllocateE'/>
