<def f='halide/halide-install/share/tools/halide_benchmark.h' l='84' ll='96' type='double Halide::Tools::benchmark(uint64_t samples, uint64_t iterations, const std::function&lt;void ()&gt; &amp; op)'/>
<use f='halide/halide-install/share/tools/halide_benchmark.h' l='176' u='c' c='_ZN6Halide5Tools9benchmarkERKSt8functionIFvvEERKNS0_15BenchmarkConfigE'/>
<use f='halide/halide-install/share/tools/halide_benchmark.h' l='198' u='c' c='_ZN6Halide5Tools9benchmarkERKSt8functionIFvvEERKNS0_15BenchmarkConfigE'/>
<doc f='halide/halide-install/share/tools/halide_benchmark.h' l='67'>// Benchmark the operation &apos;op&apos;. The number of iterations refers to
// how many times the operation is run for each time measurement, the
// result is the minimum over a number of samples runs. The result is the
// amount of time in seconds for one iteration.
//
// NOTE: it is usually simpler and more accurate to use the adaptive
// version of benchmark() later in this file; this function is provided
// for legacy code.
//
// IMPORTANT NOTE: Using this tool for timing GPU code may be misleading,
// as it does not account for time needed to synchronize to/from the GPU;
// if the callback doesn&apos;t include calls to device_sync(), the reported
// time may only be that to queue the requests; if the callback *does*
// include calls to device_sync(), it might exaggerate the sync overhead
// for real-world use. For now, callers using this to benchmark GPU
// code should measure with extreme caution.</doc>
<use f='halide/apps/bilateral_grid/filter.cpp' l='36' u='c' c='main'/>
<use f='halide/apps/bilateral_grid/filter.cpp' l='44' u='c' c='main'/>
<use f='halide/apps/blur/test.cpp' l='22' u='c' c='_Z4blurN6Halide7Runtime6BufferItLi4EEE'/>
<use f='halide/apps/blur/test.cpp' l='38' u='c' c='_Z9blur_fastN6Halide7Runtime6BufferItLi4EEE'/>
<use f='halide/apps/blur/test.cpp' l='144' u='c' c='_Z11blur_halideN6Halide7Runtime6BufferItLi4EEE'/>
<use f='halide/apps/camera_pipe/process.cpp' l='69' u='c' c='main'/>
<use f='halide/apps/camera_pipe/process.cpp' l='78' u='c' c='main'/>
<use f='halide/apps/conv_layer/process.cpp' l='60' u='c' c='main'/>
<use f='halide/apps/conv_layer/process.cpp' l='67' u='c' c='main'/>
<use f='halide/apps/fft/main.cpp' l='166' u='c' c='main'/>
<use f='halide/apps/fft/main.cpp' l='193' u='c' c='main'/>
<use f='halide/apps/fft/main.cpp' l='218' u='c' c='main'/>
<use f='halide/apps/lens_blur/process.cpp' l='41' u='c' c='main'/>
<use f='halide/apps/lens_blur/process.cpp' l='49' u='c' c='main'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='110' macro='1' u='c' c='_ZN15BenchmarksFloat10bench_copyEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='111' macro='1' u='c' c='_ZN15BenchmarksFloat10bench_scalEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='112' macro='1' u='c' c='_ZN15BenchmarksFloat10bench_axpyEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='113' macro='1' u='c' c='_ZN15BenchmarksFloat9bench_dotEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='114' macro='1' u='c' c='_ZN15BenchmarksFloat10bench_asumEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='116' macro='1' u='c' c='_ZN15BenchmarksFloat18bench_gemv_notransEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='118' macro='1' u='c' c='_ZN15BenchmarksFloat16bench_gemv_transEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='120' macro='1' u='c' c='_ZN15BenchmarksFloat9bench_gerEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='122' macro='1' u='c' c='_ZN15BenchmarksFloat18bench_gemm_notransEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='124' macro='1' u='c' c='_ZN15BenchmarksFloat17bench_gemm_transAEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='126' macro='1' u='c' c='_ZN15BenchmarksFloat17bench_gemm_transBEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='128' macro='1' u='c' c='_ZN15BenchmarksFloat18bench_gemm_transABEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='138' macro='1' u='c' c='_ZN16BenchmarksDouble10bench_copyEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='139' macro='1' u='c' c='_ZN16BenchmarksDouble10bench_scalEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='140' macro='1' u='c' c='_ZN16BenchmarksDouble10bench_axpyEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='141' macro='1' u='c' c='_ZN16BenchmarksDouble9bench_dotEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='142' macro='1' u='c' c='_ZN16BenchmarksDouble10bench_asumEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='144' macro='1' u='c' c='_ZN16BenchmarksDouble18bench_gemv_notransEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='146' macro='1' u='c' c='_ZN16BenchmarksDouble16bench_gemv_transEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='148' macro='1' u='c' c='_ZN16BenchmarksDouble9bench_gerEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='150' macro='1' u='c' c='_ZN16BenchmarksDouble18bench_gemm_notransEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='152' macro='1' u='c' c='_ZN16BenchmarksDouble17bench_gemm_transAEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='154' macro='1' u='c' c='_ZN16BenchmarksDouble17bench_gemm_transBEi'/>
<use f='halide/apps/linear_algebra/benchmarks/cblas_benchmarks.cpp' l='156' macro='1' u='c' c='_ZN16BenchmarksDouble18bench_gemm_transABEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='110' macro='1' u='c' c='_ZN15BenchmarksFloat10bench_copyEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='111' macro='1' u='c' c='_ZN15BenchmarksFloat10bench_scalEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='112' macro='1' u='c' c='_ZN15BenchmarksFloat10bench_axpyEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='113' macro='1' u='c' c='_ZN15BenchmarksFloat9bench_dotEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='114' macro='1' u='c' c='_ZN15BenchmarksFloat10bench_asumEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='116' macro='1' u='c' c='_ZN15BenchmarksFloat18bench_gemv_notransEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='118' macro='1' u='c' c='_ZN15BenchmarksFloat16bench_gemv_transEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='120' macro='1' u='c' c='_ZN15BenchmarksFloat9bench_gerEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='122' macro='1' u='c' c='_ZN15BenchmarksFloat18bench_gemm_notransEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='124' macro='1' u='c' c='_ZN15BenchmarksFloat17bench_gemm_transAEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='126' macro='1' u='c' c='_ZN15BenchmarksFloat17bench_gemm_transBEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='128' macro='1' u='c' c='_ZN15BenchmarksFloat18bench_gemm_transABEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='139' macro='1' u='c' c='_ZN16BenchmarksDouble10bench_copyEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='140' macro='1' u='c' c='_ZN16BenchmarksDouble10bench_scalEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='141' macro='1' u='c' c='_ZN16BenchmarksDouble10bench_axpyEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='142' macro='1' u='c' c='_ZN16BenchmarksDouble9bench_dotEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='143' macro='1' u='c' c='_ZN16BenchmarksDouble10bench_asumEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='145' macro='1' u='c' c='_ZN16BenchmarksDouble18bench_gemv_notransEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='147' macro='1' u='c' c='_ZN16BenchmarksDouble16bench_gemv_transEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='149' macro='1' u='c' c='_ZN16BenchmarksDouble9bench_gerEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='151' macro='1' u='c' c='_ZN16BenchmarksDouble18bench_gemm_notransEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='153' macro='1' u='c' c='_ZN16BenchmarksDouble17bench_gemm_transAEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='155' macro='1' u='c' c='_ZN16BenchmarksDouble17bench_gemm_transBEi'/>
<use f='halide/apps/linear_algebra/benchmarks/halide_benchmarks.cpp' l='157' macro='1' u='c' c='_ZN16BenchmarksDouble18bench_gemm_transABEi'/>
<use f='halide/apps/local_laplacian/process.cpp' l='36' u='c' c='main'/>
<use f='halide/apps/local_laplacian/process.cpp' l='44' u='c' c='main'/>
<use f='halide/apps/nl_means/process.cpp' l='36' u='c' c='main'/>
<use f='halide/apps/nl_means/process.cpp' l='43' u='c' c='main'/>
<use f='halide/apps/resize/resize.cpp' l='148' u='c' c='main'/>
<use f='halide/apps/resize/resize.cpp' l='162' u='c' c='main'/>
<use f='halide/apps/stencil_chain/process.cpp' l='36' u='c' c='main'/>
<use f='halide/apps/stencil_chain/process.cpp' l='44' u='c' c='main'/>
<def f='halide/tools/halide_benchmark.h' l='84' ll='96' type='double Halide::Tools::benchmark(uint64_t samples, uint64_t iterations, const std::function&lt;void ()&gt; &amp; op)'/>
<use f='halide/tools/halide_benchmark.h' l='176' u='c' c='_ZN6Halide5Tools9benchmarkERKSt8functionIFvvEERKNS0_15BenchmarkConfigE'/>
<use f='halide/tools/halide_benchmark.h' l='198' u='c' c='_ZN6Halide5Tools9benchmarkERKSt8functionIFvvEERKNS0_15BenchmarkConfigE'/>
<doc f='halide/tools/halide_benchmark.h' l='67'>// Benchmark the operation &apos;op&apos;. The number of iterations refers to
// how many times the operation is run for each time measurement, the
// result is the minimum over a number of samples runs. The result is the
// amount of time in seconds for one iteration.
//
// NOTE: it is usually simpler and more accurate to use the adaptive
// version of benchmark() later in this file; this function is provided
// for legacy code.
//
// IMPORTANT NOTE: Using this tool for timing GPU code may be misleading,
// as it does not account for time needed to synchronize to/from the GPU;
// if the callback doesn&apos;t include calls to device_sync(), the reported
// time may only be that to queue the requests; if the callback *does*
// include calls to device_sync(), it might exaggerate the sync overhead
// for real-world use. For now, callers using this to benchmark GPU
// code should measure with extreme caution.</doc>
<use f='halide/tutorial/lesson_16_rgb_run.cpp' l='66' u='c' c='main'/>
<use f='halide/tutorial/lesson_16_rgb_run.cpp' l='71' u='c' c='main'/>
<use f='halide/tutorial/lesson_16_rgb_run.cpp' l='92' u='c' c='main'/>
<use f='halide/tutorial/lesson_16_rgb_run.cpp' l='98' u='c' c='main'/>
<use f='halide/tutorial/lesson_16_rgb_run.cpp' l='108' u='c' c='main'/>
<use f='halide/tutorial/lesson_16_rgb_run.cpp' l='118' u='c' c='main'/>
<use f='halide/tutorial/lesson_21_auto_scheduler_run.cpp' l='39' u='c' c='main'/>
<use f='halide/tutorial/lesson_21_auto_scheduler_run.cpp' l='44' u='c' c='main'/>
