<def f='halide/llvm-install/include/llvm/Analysis/IVDescriptors.h' l='79' ll='109'/>
<use f='halide/llvm-install/include/llvm/Analysis/IVDescriptors.h' l='116' c='_ZN4llvm20RecurrenceDescriptor17isRecurrenceInstrEPNS_11InstructionENS_9RecurKindERNS0_8InstDescEb'/>
<use f='halide/llvm-install/include/llvm/Analysis/IVDescriptors.h' l='117' c='_ZN4llvm20RecurrenceDescriptor17isRecurrenceInstrEPNS_11InstructionENS_9RecurKindERNS0_8InstDescEb'/>
<use f='halide/llvm-install/include/llvm/Analysis/IVDescriptors.h' l='131' c='_ZN4llvm20RecurrenceDescriptor24isMinMaxSelectCmpPatternEPNS_11InstructionERKNS0_8InstDescE'/>
<use f='halide/llvm-install/include/llvm/Analysis/IVDescriptors.h' l='132' c='_ZN4llvm20RecurrenceDescriptor24isMinMaxSelectCmpPatternEPNS_11InstructionERKNS0_8InstDescE'/>
<use f='halide/llvm-install/include/llvm/Analysis/IVDescriptors.h' l='136' c='_ZN4llvm20RecurrenceDescriptor23isConditionalRdxPatternENS_9RecurKindEPNS_11InstructionE'/>
<size>32</size>
<doc f='halide/llvm-install/include/llvm/Analysis/IVDescriptors.h' l='78'>/// This POD struct holds information about a potential recurrence operation.</doc>
<fun r='_ZN4llvm20RecurrenceDescriptor8InstDescC1EbPNS_11InstructionES3_'/>
<fun r='_ZN4llvm20RecurrenceDescriptor8InstDescC1EPNS_11InstructionENS_9RecurKindES3_'/>
<fun r='_ZNK4llvm20RecurrenceDescriptor8InstDesc12isRecurrenceEv'/>
<fun r='_ZNK4llvm20RecurrenceDescriptor8InstDesc16hasUnsafeAlgebraEv'/>
<fun r='_ZNK4llvm20RecurrenceDescriptor8InstDesc20getUnsafeAlgebraInstEv'/>
<fun r='_ZNK4llvm20RecurrenceDescriptor8InstDesc10getRecKindEv'/>
<fun r='_ZNK4llvm20RecurrenceDescriptor8InstDesc14getPatternInstEv'/>
<mbr r='llvm::RecurrenceDescriptor::InstDesc::IsRecurrence' o='0' t='bool'/>
<mbr r='llvm::RecurrenceDescriptor::InstDesc::PatternLastInst' o='64' t='llvm::Instruction *'/>
<mbr r='llvm::RecurrenceDescriptor::InstDesc::RecKind' o='128' t='llvm::RecurKind'/>
<mbr r='llvm::RecurrenceDescriptor::InstDesc::UnsafeAlgebraInst' o='192' t='llvm::Instruction *'/>
