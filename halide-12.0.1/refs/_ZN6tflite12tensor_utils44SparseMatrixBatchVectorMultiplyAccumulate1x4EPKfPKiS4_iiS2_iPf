<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/tensor_utils_common.h' l='96' type='void tflite::tensor_utils::SparseMatrixBatchVectorMultiplyAccumulate1x4(const float *__restrict matrix, const int32_t *__restrict segments, const int32_t *__restrict indices, int m_rows, int m_cols, const float *__restrict vector, int n_batch, float *__restrict result)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/tensor_utils_common.h' l='92'>// Same as the function above, but the matrix is a sparse tensor with block
// pattern 1x4.
// This function assumes that m_cols is a multiple of the block size (4 in this
// case) so that there&apos;s no incomplete block.</doc>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/optimized/sparse_ops/fully_connected.h' l='99' u='c' c='_ZN6tflite13optimized_ops33FullyConnectedSparseWeight1x4ImplERK14TfLiteSparsityRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS9_SB_S9_SB_S9_PfiiR15537077'/>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/reference/portable_tensor_utils.h' l='98' ll='104' type='void tflite::tensor_utils::SparseMatrixBatchVectorMultiplyAccumulate1x4(const float *__restrict matrix, const int32_t *__restrict segments, const int32_t *__restrict indices, int m_rows, int m_cols, const float *__restrict vector, int n_batch, float *__restrict result)'/>
