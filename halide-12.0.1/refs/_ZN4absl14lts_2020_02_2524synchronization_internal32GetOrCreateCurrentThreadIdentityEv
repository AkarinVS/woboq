<def f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.h' l='47' ll='54' type='base_internal::ThreadIdentity * absl::lts_2020_02_25::synchronization_internal::GetOrCreateCurrentThreadIdentity()'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.h' l='43'>// Returns the ThreadIdentity object representing the calling thread; guaranteed
// to be unique for its lifetime.  The returned object will remain valid for the
// program&apos;s lifetime; although it may be re-assigned to a subsequent thread.
// If one does not exist for the calling thread, allocate it now.</doc>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/per_thread_sem.cc' l='33' u='c' c='_ZN4absl14lts_2020_02_2524synchronization_internal12PerThreadSem23SetThreadBlockedCounterEPSt6atomicIiE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/per_thread_sem.cc' l='39' u='c' c='_ZN4absl14lts_2020_02_2524synchronization_internal12PerThreadSem23GetThreadBlockedCounterEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/per_thread_sem.cc' l='80' u='c' c='AbslInternalPerThreadSemWait'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='525' u='c' c='_ZN4absl14lts_2020_02_25L18Synch_GetPerThreadEv'/>
