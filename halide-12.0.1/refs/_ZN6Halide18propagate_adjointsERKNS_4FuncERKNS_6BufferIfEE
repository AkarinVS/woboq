<dec f='halide/build/include/Halide.h' l='21056' type='Halide::Derivative Halide::propagate_adjoints(const Halide::Func &amp; output, const Buffer&lt;float&gt; &amp; adjoint)'/>
<doc f='halide/build/include/Halide.h' l='21049'>/**
 *  Given a Func and a corresponding adjoint buffer, (back)propagate the
 *  adjoint to all dependent Funcs, buffers, and parameters.
 *  For each Func the output depends on, and for the pure definition and
 *  each update of that Func, it generates a derivative Func stored in
 *  the Derivative.
 */</doc>
<use f='halide/python_bindings/src/PyDerivative.cpp' l='31' u='a' c='_ZN6Halide14PythonBindings17define_derivativeERN8pybind117module_E'/>
<dec f='halide/src/Derivative.h' l='61' type='Halide::Derivative Halide::propagate_adjoints(const Halide::Func &amp; output, const Buffer&lt;float&gt; &amp; adjoint)'/>
<def f='halide/src/Derivative.cpp' l='1964' ll='1973' type='Halide::Derivative Halide::propagate_adjoints(const Halide::Func &amp; output, const Buffer&lt;float&gt; &amp; adjoint)'/>
<doc f='halide/src/Derivative.h' l='54'>/**
 *  Given a Func and a corresponding adjoint buffer, (back)propagate the
 *  adjoint to all dependent Funcs, buffers, and parameters.
 *  For each Func the output depends on, and for the pure definition and
 *  each update of that Func, it generates a derivative Func stored in
 *  the Derivative.
 */</doc>
