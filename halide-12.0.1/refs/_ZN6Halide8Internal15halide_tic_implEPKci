<dec f='halide/build/include/Halide.h' l='3166' type='void Halide::Internal::halide_tic_impl(const char * file, int line)'/>
<doc f='halide/build/include/Halide.h' l='3158'>// Helpers for timing blocks of code. Put &apos;TIC;&apos; at the start and
// &apos;TOC;&apos; at the end. Timing is reported at the toc via
// debug(0). The calls can be nested and will pretty-print
// appropriately. Took this idea from matlab via Jon Barron.
//
// Note that this uses global state internally, and is not thread-safe
// at all. Only use it for single-threaded debugging sessions.</doc>
<dec f='halide/src/Util.h' l='414' type='void Halide::Internal::halide_tic_impl(const char * file, int line)'/>
<doc f='halide/src/Util.h' l='406'>// Helpers for timing blocks of code. Put &apos;TIC;&apos; at the start and
// &apos;TOC;&apos; at the end. Timing is reported at the toc via
// debug(0). The calls can be nested and will pretty-print
// appropriately. Took this idea from matlab via Jon Barron.
//
// Note that this uses global state internally, and is not thread-safe
// at all. Only use it for single-threaded debugging sessions.</doc>
<def f='halide/src/Util.cpp' l='533' ll='537' type='void Halide::Internal::halide_tic_impl(const char * file, int line)'/>
<use f='halide/src/autoschedulers/adams2019/AutoSchedule.cpp' l='546' macro='1' u='c' c='_ZN6Halide8Internal13Autoscheduler17generate_scheduleERKSt6vectorINS0_8FunctionESaIS3_EERKNS_6TargetERKNS_13MachineParamsEPNS_20AutoSchedulerResultsE'/>
