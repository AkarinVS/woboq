<dec f='halide/halide-install/include/Halide.h' l='20292' type='llvm::Function * Halide::Internal::CodeGen_LLVM::add_argv_wrapper(llvm::Function * fn, const std::string &amp; name, bool result_in_argv = false)'/>
<dec f='halide/build/include/Halide.h' l='20292' type='llvm::Function * Halide::Internal::CodeGen_LLVM::add_argv_wrapper(llvm::Function * fn, const std::string &amp; name, bool result_in_argv = false)'/>
<dec f='halide/src/CodeGen_LLVM.h' l='553' type='llvm::Function * Halide::Internal::CodeGen_LLVM::add_argv_wrapper(llvm::Function * fn, const std::string &amp; name, bool result_in_argv = false)'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='419' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM19compile_trampolinesERKNS_6TargetERN4llvm11LLVMContextERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6ve2948072'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='500' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM7compileERKNS_6ModuleE'/>
<def f='halide/src/CodeGen_LLVM.cpp' l='895' ll='942' type='llvm::Function * Halide::Internal::CodeGen_LLVM::add_argv_wrapper(llvm::Function * fn, const std::string &amp; name, bool result_in_argv = false)'/>
<doc f='halide/src/CodeGen_LLVM.cpp' l='887'>// Make a wrapper to call the function with an array of pointer
// args. This is easier for the JIT to call than a function with an
// unknown (at compile time) argument list. If result_in_argv is false,
// the internal function result is returned as the wrapper function
// result; if result_in_argv is true, the internal function result
// is stored as the last item in the argv list (which must be one
// longer than the number of arguments), and the wrapper&apos;s actual
// return type is always &apos;void&apos;.</doc>
