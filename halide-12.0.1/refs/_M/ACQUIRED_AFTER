<dec f='halide/build-apps/abseil-cpp/absl/base/internal/thread_annotations.h' l='103'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/thread_annotations.h' l='88'>// ACQUIRED_AFTER() / ACQUIRED_BEFORE()
//
// Documents the acquisition order between locks that can be held
// simultaneously by a thread. For any two locks that need to be annotated
// to establish an acquisition order, only one of them needs the annotation.
// (i.e. You don&apos;t have to annotate both locks with both ACQUIRED_AFTER
// and ACQUIRED_BEFORE.)
//
// As with GUARDED_BY, this is only applicable to mutexes that are shared
// fields or global variables.
//
// Example:
//
//   Mutex m1_;
//   Mutex m2_ ACQUIRED_AFTER(m1_);</doc>
