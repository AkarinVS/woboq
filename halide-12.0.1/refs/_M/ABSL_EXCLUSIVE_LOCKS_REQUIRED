<dec f='halide/build-apps/abseil-cpp/absl/base/thread_annotations.h' l='134'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/thread_annotations.h' l='111'>// ABSL_EXCLUSIVE_LOCKS_REQUIRED() / ABSL_SHARED_LOCKS_REQUIRED()
//
// Documents a function that expects a mutex to be held prior to entry.
// The mutex is expected to be held both on entry to, and exit from, the
// function.
//
// An exclusive lock allows read-write access to the guarded data member(s), and
// only one thread can acquire a lock exclusively at any one time. A shared lock
// allows read-only access, and any number of threads can acquire a shared lock
// concurrently.
//
// Generally, non-const methods should be annotated with
// ABSL_EXCLUSIVE_LOCKS_REQUIRED, while const methods should be annotated with
// ABSL_SHARED_LOCKS_REQUIRED.
//
// Example:
//
//   Mutex mu1, mu2;
//   int a ABSL_GUARDED_BY(mu1);
//   int b ABSL_GUARDED_BY(mu2);
//
//   void foo() ABSL_EXCLUSIVE_LOCKS_REQUIRED(mu1, mu2) { ... }
//   void bar() const ABSL_SHARED_LOCKS_REQUIRED(mu1, mu2) { ... }</doc>
<use f='halide/build-apps/abseil-cpp/absl/container/internal/hashtablez_sampler.h' l='69' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='433' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='438' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='464' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='471' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='473' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='479' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/random/internal/pool_urbg.cc' l='69' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1150' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/time/clock.cc' l='438' u='c'/>
