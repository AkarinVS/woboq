<dec f='halide/build-apps/abseil-cpp/absl/base/thread_annotations.h' l='169'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.h' l='183' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/low_level_alloc.cc' l='280' u='c'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/thread_annotations.h' l='162'>// ABSL_SCOPED_LOCKABLE
//
// Documents if a class does RAII locking (such as the `MutexLock` class).
// The constructor should use `LOCK_FUNCTION()` to specify the mutex that is
// acquired, and the destructor should use `UNLOCK_FUNCTION()` with no
// arguments; the analysis will assume that the destructor unlocks whatever the
// constructor locked.</doc>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='539' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='560' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='581' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='859' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='883' u='c'/>
