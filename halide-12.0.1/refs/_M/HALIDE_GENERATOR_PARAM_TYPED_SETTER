<dec f='halide/halide-install/include/Halide.h' l='23346'/>
<use f='halide/halide-install/include/Halide.h' l='23349' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23350' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23351' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23352' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23353' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23354' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23355' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23356' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23357' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23358' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23359' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23360' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23361' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23362' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23363' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23365' u='w'/>
<dec f='halide/halide-install/include/Halide.h' l='23458'/>
<use f='halide/halide-install/include/Halide.h' l='23463' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23464' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23465' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23466' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23467' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23468' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23469' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23470' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23471' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23472' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23473' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23474' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23475' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23476' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23477' u='c'/>
<use f='halide/halide-install/include/Halide.h' l='23479' u='w'/>
<doc f='halide/halide-install/include/Halide.h' l='23338'>// overload the set() function to call the right virtual method based on type.
    // This allows us to attempt to set a GeneratorParam via a
    // plain C++ type, even if we don&apos;t know the specific templated
    // subclass. Attempting to set the wrong type will assert.
    // Notice that there is no typed setter for Enums, for obvious reasons;
    // setting enums in an unknown type must fallback to using set_from_string.
    //
    // It&apos;s always a bit iffy to use macros for this, but IMHO it clarifies the situation here.</doc>
<dec f='halide/build/include/Halide.h' l='23346'/>
<use f='halide/build/include/Halide.h' l='23349' u='c'/>
<use f='halide/build/include/Halide.h' l='23350' u='c'/>
<use f='halide/build/include/Halide.h' l='23351' u='c'/>
<use f='halide/build/include/Halide.h' l='23352' u='c'/>
<use f='halide/build/include/Halide.h' l='23353' u='c'/>
<use f='halide/build/include/Halide.h' l='23354' u='c'/>
<use f='halide/build/include/Halide.h' l='23355' u='c'/>
<use f='halide/build/include/Halide.h' l='23356' u='c'/>
<use f='halide/build/include/Halide.h' l='23357' u='c'/>
<use f='halide/build/include/Halide.h' l='23358' u='c'/>
<use f='halide/build/include/Halide.h' l='23359' u='c'/>
<use f='halide/build/include/Halide.h' l='23360' u='c'/>
<use f='halide/build/include/Halide.h' l='23361' u='c'/>
<use f='halide/build/include/Halide.h' l='23362' u='c'/>
<use f='halide/build/include/Halide.h' l='23363' u='c'/>
<use f='halide/build/include/Halide.h' l='23365' u='w'/>
<dec f='halide/build/include/Halide.h' l='23458'/>
<use f='halide/build/include/Halide.h' l='23463' u='c'/>
<use f='halide/build/include/Halide.h' l='23464' u='c'/>
<use f='halide/build/include/Halide.h' l='23465' u='c'/>
<use f='halide/build/include/Halide.h' l='23466' u='c'/>
<use f='halide/build/include/Halide.h' l='23467' u='c'/>
<use f='halide/build/include/Halide.h' l='23468' u='c'/>
<use f='halide/build/include/Halide.h' l='23469' u='c'/>
<use f='halide/build/include/Halide.h' l='23470' u='c'/>
<use f='halide/build/include/Halide.h' l='23471' u='c'/>
<use f='halide/build/include/Halide.h' l='23472' u='c'/>
<use f='halide/build/include/Halide.h' l='23473' u='c'/>
<use f='halide/build/include/Halide.h' l='23474' u='c'/>
<use f='halide/build/include/Halide.h' l='23475' u='c'/>
<use f='halide/build/include/Halide.h' l='23476' u='c'/>
<use f='halide/build/include/Halide.h' l='23477' u='c'/>
<use f='halide/build/include/Halide.h' l='23479' u='w'/>
<doc f='halide/build/include/Halide.h' l='23338'>// overload the set() function to call the right virtual method based on type.
    // This allows us to attempt to set a GeneratorParam via a
    // plain C++ type, even if we don&apos;t know the specific templated
    // subclass. Attempting to set the wrong type will assert.
    // Notice that there is no typed setter for Enums, for obvious reasons;
    // setting enums in an unknown type must fallback to using set_from_string.
    //
    // It&apos;s always a bit iffy to use macros for this, but IMHO it clarifies the situation here.</doc>
<dec f='halide/src/Generator.h' l='412'/>
<use f='halide/src/Generator.h' l='415' u='c'/>
<use f='halide/src/Generator.h' l='416' u='c'/>
<use f='halide/src/Generator.h' l='417' u='c'/>
<use f='halide/src/Generator.h' l='418' u='c'/>
<use f='halide/src/Generator.h' l='419' u='c'/>
<use f='halide/src/Generator.h' l='420' u='c'/>
<use f='halide/src/Generator.h' l='421' u='c'/>
<use f='halide/src/Generator.h' l='422' u='c'/>
<use f='halide/src/Generator.h' l='423' u='c'/>
<use f='halide/src/Generator.h' l='424' u='c'/>
<use f='halide/src/Generator.h' l='425' u='c'/>
<use f='halide/src/Generator.h' l='426' u='c'/>
<use f='halide/src/Generator.h' l='427' u='c'/>
<use f='halide/src/Generator.h' l='428' u='c'/>
<use f='halide/src/Generator.h' l='429' u='c'/>
<use f='halide/src/Generator.h' l='431' u='w'/>
<dec f='halide/src/Generator.h' l='524'/>
<use f='halide/src/Generator.h' l='529' u='c'/>
<use f='halide/src/Generator.h' l='530' u='c'/>
<use f='halide/src/Generator.h' l='531' u='c'/>
<use f='halide/src/Generator.h' l='532' u='c'/>
<use f='halide/src/Generator.h' l='533' u='c'/>
<use f='halide/src/Generator.h' l='534' u='c'/>
<use f='halide/src/Generator.h' l='535' u='c'/>
<use f='halide/src/Generator.h' l='536' u='c'/>
<use f='halide/src/Generator.h' l='537' u='c'/>
<use f='halide/src/Generator.h' l='538' u='c'/>
<use f='halide/src/Generator.h' l='539' u='c'/>
<use f='halide/src/Generator.h' l='540' u='c'/>
<use f='halide/src/Generator.h' l='541' u='c'/>
<use f='halide/src/Generator.h' l='542' u='c'/>
<use f='halide/src/Generator.h' l='543' u='c'/>
<use f='halide/src/Generator.h' l='545' u='w'/>
<doc f='halide/src/Generator.h' l='404'>// overload the set() function to call the right virtual method based on type.
    // This allows us to attempt to set a GeneratorParam via a
    // plain C++ type, even if we don&apos;t know the specific templated
    // subclass. Attempting to set the wrong type will assert.
    // Notice that there is no typed setter for Enums, for obvious reasons;
    // setting enums in an unknown type must fallback to using set_from_string.
    //
    // It&apos;s always a bit iffy to use macros for this, but IMHO it clarifies the situation here.</doc>
