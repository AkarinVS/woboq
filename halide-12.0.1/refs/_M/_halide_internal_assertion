<dec f='halide/build/include/Halide.h' l='2466'/>
<doc f='halide/build/include/Halide.h' l='2452'>/**
 * _halide_internal_assertion is used to implement our assertion macros
 * in such a way that the messages output for the assertion are only
 * evaluated if the assertion&apos;s value is false.
 *
 * Note that this macro intentionally has no parens internally; in actual
 * use, the implicit grouping will end up being
 *
 *   condition ? (void) : (Voidifier() &amp; (ErrorReport &lt;&lt; arg1 &lt;&lt; arg2 ... &lt;&lt; argN))
 *
 * This (regrettably) requires a macro to work, but has the highly desirable
 * effect that all assertion parameters are totally skipped (not ever evaluated)
 * when the assertion is true.
 */</doc>
<dec f='halide/src/Error.h' l='130'/>
<doc f='halide/src/Error.h' l='116'>/**
 * _halide_internal_assertion is used to implement our assertion macros
 * in such a way that the messages output for the assertion are only
 * evaluated if the assertion&apos;s value is false.
 *
 * Note that this macro intentionally has no parens internally; in actual
 * use, the implicit grouping will end up being
 *
 *   condition ? (void) : (Voidifier() &amp; (ErrorReport &lt;&lt; arg1 &lt;&lt; arg2 ... &lt;&lt; argN))
 *
 * This (regrettably) requires a macro to work, but has the highly desirable
 * effect that all assertion parameters are totally skipped (not ever evaluated)
 * when the assertion is true.
 */</doc>
