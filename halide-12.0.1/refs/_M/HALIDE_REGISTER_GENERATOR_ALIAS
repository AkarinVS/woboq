<dec f='halide/build/include/Halide.h' l='26790'/>
<doc f='halide/build/include/Halide.h' l='26776'>// HALIDE_REGISTER_GENERATOR_ALIAS() can be used to create an an alias-with-a-particular-set-of-param-values
// for a given Generator in the build system. Normally, you wouldn&apos;t want to do this;
// however, some existing Halide clients have build systems that make it challenging to
// specify GeneratorParams inside the build system, and this allows a somewhat simpler
// customization route for them. It&apos;s highly recommended you don&apos;t use this for new code.
//
// The final argument is really an initializer-list of GeneratorParams, in the form
// of an initializer-list for map&lt;string, string&gt;:
//
//    { { &quot;gp-name&quot;, &quot;gp-value&quot;} [, { &quot;gp2-name&quot;, &quot;gp2-value&quot; }] }
//
// It is specified as a variadic template argument to allow for the fact that the embedded commas
// would otherwise confuse the preprocessor; since (in this case) all we&apos;re going to do is
// pass it thru as-is, this is fine (and even MSVC&apos;s &apos;broken&apos; __VA_ARGS__ should be OK here).</doc>
<dec f='halide/src/Generator.h' l='3856'/>
<doc f='halide/src/Generator.h' l='3842'>// HALIDE_REGISTER_GENERATOR_ALIAS() can be used to create an an alias-with-a-particular-set-of-param-values
// for a given Generator in the build system. Normally, you wouldn&apos;t want to do this;
// however, some existing Halide clients have build systems that make it challenging to
// specify GeneratorParams inside the build system, and this allows a somewhat simpler
// customization route for them. It&apos;s highly recommended you don&apos;t use this for new code.
//
// The final argument is really an initializer-list of GeneratorParams, in the form
// of an initializer-list for map&lt;string, string&gt;:
//
//    { { &quot;gp-name&quot;, &quot;gp-value&quot;} [, { &quot;gp2-name&quot;, &quot;gp2-value&quot; }] }
//
// It is specified as a variadic template argument to allow for the fact that the embedded commas
// would otherwise confuse the preprocessor; since (in this case) all we&apos;re going to do is
// pass it thru as-is, this is fine (and even MSVC&apos;s &apos;broken&apos; __VA_ARGS__ should be OK here).</doc>
<use f='halide/test/generator/alias_generator.cpp' l='20' u='c'/>
