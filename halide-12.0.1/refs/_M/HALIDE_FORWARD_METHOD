<dec f='halide/build/include/Halide.h' l='24568'/>
<use f='halide/build/include/Halide.h' l='24716' u='c'/>
<use f='halide/build/include/Halide.h' l='24719' u='c'/>
<use f='halide/build/include/Halide.h' l='24720' u='c'/>
<use f='halide/build/include/Halide.h' l='25169' u='c'/>
<use f='halide/build/include/Halide.h' l='25170' u='c'/>
<use f='halide/build/include/Halide.h' l='25171' u='c'/>
<use f='halide/build/include/Halide.h' l='25172' u='c'/>
<use f='halide/build/include/Halide.h' l='25174' u='c'/>
<use f='halide/build/include/Halide.h' l='25175' u='c'/>
<use f='halide/build/include/Halide.h' l='25176' u='c'/>
<use f='halide/build/include/Halide.h' l='25177' u='c'/>
<use f='halide/build/include/Halide.h' l='25178' u='c'/>
<use f='halide/build/include/Halide.h' l='25179' u='c'/>
<use f='halide/build/include/Halide.h' l='25180' u='c'/>
<use f='halide/build/include/Halide.h' l='25181' u='c'/>
<use f='halide/build/include/Halide.h' l='25182' u='c'/>
<use f='halide/build/include/Halide.h' l='25184' u='c'/>
<use f='halide/build/include/Halide.h' l='25185' u='c'/>
<use f='halide/build/include/Halide.h' l='25186' u='c'/>
<use f='halide/build/include/Halide.h' l='25187' u='c'/>
<use f='halide/build/include/Halide.h' l='25188' u='c'/>
<use f='halide/build/include/Halide.h' l='25189' u='c'/>
<use f='halide/build/include/Halide.h' l='25190' u='c'/>
<use f='halide/build/include/Halide.h' l='25192' u='c'/>
<use f='halide/build/include/Halide.h' l='25193' u='c'/>
<use f='halide/build/include/Halide.h' l='25194' u='c'/>
<use f='halide/build/include/Halide.h' l='25198' u='c'/>
<use f='halide/build/include/Halide.h' l='25199' u='c'/>
<use f='halide/build/include/Halide.h' l='25200' u='c'/>
<use f='halide/build/include/Halide.h' l='25201' u='c'/>
<use f='halide/build/include/Halide.h' l='25202' u='c'/>
<use f='halide/build/include/Halide.h' l='25203' u='c'/>
<use f='halide/build/include/Halide.h' l='25205' u='c'/>
<use f='halide/build/include/Halide.h' l='25206' u='c'/>
<use f='halide/build/include/Halide.h' l='25207' u='c'/>
<use f='halide/build/include/Halide.h' l='25208' u='c'/>
<use f='halide/build/include/Halide.h' l='25209' u='c'/>
<use f='halide/build/include/Halide.h' l='25210' u='c'/>
<use f='halide/build/include/Halide.h' l='25211' u='c'/>
<use f='halide/build/include/Halide.h' l='25212' u='c'/>
<use f='halide/build/include/Halide.h' l='25213' u='c'/>
<use f='halide/build/include/Halide.h' l='25214' u='c'/>
<use f='halide/build/include/Halide.h' l='25215' u='c'/>
<use f='halide/build/include/Halide.h' l='25221' u='c'/>
<use f='halide/build/include/Halide.h' l='25501' u='c'/>
<use f='halide/build/include/Halide.h' l='25504' u='c'/>
<use f='halide/build/include/Halide.h' l='25505' u='c'/>
<doc f='halide/build/include/Halide.h' l='24560'>// When forwarding methods to ImageParam, Func, etc., we must take
// care with the return types: many of the methods return a reference-to-self
// (e.g., ImageParam&amp;); since we create temporaries for most of these forwards,
// returning a ref will crater because it refers to a now-defunct section of the
// stack. Happily, simply removing the reference is solves this, since all of the
// types in question satisfy the property of copies referring to the same underlying
// structure (returning references is just an optimization). Since this is verbose
// and used in several places, we&apos;ll use a helper macro:</doc>
<dec f='halide/src/Generator.h' l='1634'/>
<use f='halide/src/Generator.h' l='1782' u='c'/>
<use f='halide/src/Generator.h' l='1785' u='c'/>
<use f='halide/src/Generator.h' l='1786' u='c'/>
<use f='halide/src/Generator.h' l='2235' u='c'/>
<use f='halide/src/Generator.h' l='2236' u='c'/>
<use f='halide/src/Generator.h' l='2237' u='c'/>
<use f='halide/src/Generator.h' l='2238' u='c'/>
<use f='halide/src/Generator.h' l='2240' u='c'/>
<use f='halide/src/Generator.h' l='2241' u='c'/>
<use f='halide/src/Generator.h' l='2242' u='c'/>
<use f='halide/src/Generator.h' l='2243' u='c'/>
<use f='halide/src/Generator.h' l='2244' u='c'/>
<use f='halide/src/Generator.h' l='2245' u='c'/>
<use f='halide/src/Generator.h' l='2246' u='c'/>
<use f='halide/src/Generator.h' l='2247' u='c'/>
<use f='halide/src/Generator.h' l='2248' u='c'/>
<use f='halide/src/Generator.h' l='2250' u='c'/>
<use f='halide/src/Generator.h' l='2251' u='c'/>
<use f='halide/src/Generator.h' l='2252' u='c'/>
<use f='halide/src/Generator.h' l='2253' u='c'/>
<use f='halide/src/Generator.h' l='2254' u='c'/>
<use f='halide/src/Generator.h' l='2255' u='c'/>
<use f='halide/src/Generator.h' l='2256' u='c'/>
<use f='halide/src/Generator.h' l='2258' u='c'/>
<use f='halide/src/Generator.h' l='2259' u='c'/>
<use f='halide/src/Generator.h' l='2260' u='c'/>
<use f='halide/src/Generator.h' l='2264' u='c'/>
<use f='halide/src/Generator.h' l='2265' u='c'/>
<use f='halide/src/Generator.h' l='2266' u='c'/>
<use f='halide/src/Generator.h' l='2267' u='c'/>
<use f='halide/src/Generator.h' l='2268' u='c'/>
<use f='halide/src/Generator.h' l='2269' u='c'/>
<use f='halide/src/Generator.h' l='2271' u='c'/>
<use f='halide/src/Generator.h' l='2272' u='c'/>
<use f='halide/src/Generator.h' l='2273' u='c'/>
<use f='halide/src/Generator.h' l='2274' u='c'/>
<use f='halide/src/Generator.h' l='2275' u='c'/>
<use f='halide/src/Generator.h' l='2276' u='c'/>
<use f='halide/src/Generator.h' l='2277' u='c'/>
<use f='halide/src/Generator.h' l='2278' u='c'/>
<use f='halide/src/Generator.h' l='2279' u='c'/>
<use f='halide/src/Generator.h' l='2280' u='c'/>
<use f='halide/src/Generator.h' l='2281' u='c'/>
<use f='halide/src/Generator.h' l='2287' u='c'/>
<use f='halide/src/Generator.h' l='2567' u='c'/>
<use f='halide/src/Generator.h' l='2570' u='c'/>
<use f='halide/src/Generator.h' l='2571' u='c'/>
<doc f='halide/src/Generator.h' l='1626'>// When forwarding methods to ImageParam, Func, etc., we must take
// care with the return types: many of the methods return a reference-to-self
// (e.g., ImageParam&amp;); since we create temporaries for most of these forwards,
// returning a ref will crater because it refers to a now-defunct section of the
// stack. Happily, simply removing the reference is solves this, since all of the
// types in question satisfy the property of copies referring to the same underlying
// structure (returning references is just an optimization). Since this is verbose
// and used in several places, we&apos;ll use a helper macro:</doc>
