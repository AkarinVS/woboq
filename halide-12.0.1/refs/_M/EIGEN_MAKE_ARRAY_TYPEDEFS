<dec f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='329'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='357' u='w'/>
<dec f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='362'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='382' u='c'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='383' u='c'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='384' u='c'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='385' u='c'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='390' u='w'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Array.h' l='304'>/** \defgroup arraytypedefs Global array typedefs
  * \ingroup Core_Module
  *
  * %Eigen defines several typedef shortcuts for most common 1D and 2D array types.
  *
  * The general patterns are the following:
  *
  * \c ArrayRowsColsType where \c Rows and \c Cols can be \c 2,\c 3,\c 4 for fixed size square matrices or \c X for dynamic size,
  * and where \c Type can be \c i for integer, \c f for float, \c d for double, \c cf for complex float, \c cd
  * for complex double.
  *
  * For example, \c Array33d is a fixed-size 3x3 array type of doubles, and \c ArrayXXf is a dynamic-size matrix of floats.
  *
  * There are also \c ArraySizeType which are self-explanatory. For example, \c Array4cf is
  * a fixed-size 1D array of 4 complex floats.
  *
  * With \cpp11, template alias are also defined for common sizes.
  * They follow the same pattern as above except that the scalar type suffix is replaced by a
  * template parameter, i.e.:
  *   - `ArrayRowsCols&lt;Type&gt;` where `Rows` and `Cols` can be \c 2,\c 3,\c 4, or \c X for fixed or dynamic size.
  *   - `ArraySize&lt;Type&gt;` where `Size` can be \c 2,\c 3,\c 4 or \c X for fixed or dynamic size 1D arrays.
  * 
  * \sa class Array
  */</doc>
