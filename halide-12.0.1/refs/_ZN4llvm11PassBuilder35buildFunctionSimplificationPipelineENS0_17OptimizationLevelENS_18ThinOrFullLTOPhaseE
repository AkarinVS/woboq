<dec f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='332' type='llvm::FunctionPassManager llvm::PassBuilder::buildFunctionSimplificationPipeline(llvm::PassBuilder::OptimizationLevel Level, llvm::ThinOrFullLTOPhase Phase)'/>
<doc f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='317'>/// Construct the core LLVM function canonicalization and simplification
  /// pipeline.
  ///
  /// This is a long pipeline and uses most of the per-function optimization
  /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run
  /// repeatedly over the IR and is not expected to destroy important
  /// information about the semantics of the IR.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.
  ///
  /// \p Phase indicates the current ThinLTO phase.</doc>
