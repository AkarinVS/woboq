<dec f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='41' type='Eigen::bfloat16_impl::__bfloat16_raw Eigen::bfloat16_impl::float_to_bfloat16_rtne(float ff)'/>
<dec f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='45' type='Eigen::bfloat16_impl::__bfloat16_raw Eigen::bfloat16_impl::float_to_bfloat16_rtne(float ff)'/>
<dec f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='47' type='Eigen::bfloat16_impl::__bfloat16_raw Eigen::bfloat16_impl::float_to_bfloat16_rtne(float ff)'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='74' u='c' c='_ZN5Eigen8bfloat16C1Ef'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='80' u='c' c='_ZN5Eigen8bfloat16C1ERKSt7complexIT_E'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='283' ll='454' type='Eigen::bfloat16_impl::__bfloat16_raw Eigen::bfloat16_impl::float_to_bfloat16_rtne(float ff)'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='450' u='c' c='_ZN5Eigen13bfloat16_impl22float_to_bfloat16_rtneEf'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='460' ll='475' type='Eigen::bfloat16_impl::__bfloat16_raw Eigen::bfloat16_impl::float_to_bfloat16_rtne(float ff)'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='42'>// Forward declarations of template specializations, to avoid Visual C++ 2019 errors, saying:
// &gt; error C2908: explicit specialization; &apos;float_to_bfloat16_rtne&apos; has already been instantiated</doc>
<doc f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='281'>// float_to_bfloat16_rtne template specialization that does not make any
// assumption about the value of its function argument (ff).</doc>
<doc f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/BFloat16.h' l='456'>// float_to_bfloat16_rtne template specialization that assumes that its function
// argument (ff) is either a normal floating point number, or +/-infinity, or
// zero. Used to improve the runtime performance of conversion from an integer
// type to bfloat16.  </doc>
