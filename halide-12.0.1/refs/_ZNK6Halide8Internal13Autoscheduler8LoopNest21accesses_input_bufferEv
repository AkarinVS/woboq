<dec f='halide/src/autoschedulers/adams2019/LoopNest.h' l='177' type='bool Halide::Internal::Autoscheduler::LoopNest::accesses_input_buffer() const'/>
<doc f='halide/src/autoschedulers/adams2019/LoopNest.h' l='170'>// Does this loop nest access an input buffer? Used to select
    // trail strategies when splitting loops. We don&apos;t want to read
    // out of bounds on inputs, even if we don&apos;t intend to use the
    // values read. It could create annoying assertion failures for
    // the user. It&apos;s OK to read out of range of the values computed
    // on internal Funcs though. Allocation bounds inference just pads
    // out the bounds so that it won&apos;t fault.</doc>
<def f='halide/src/autoschedulers/adams2019/LoopNest.cpp' l='1190' ll='1224' type='bool Halide::Internal::Autoscheduler::LoopNest::accesses_input_buffer() const'/>
<use f='halide/src/autoschedulers/adams2019/LoopNest.cpp' l='1192' u='c' c='_ZNK6Halide8Internal13Autoscheduler8LoopNest21accesses_input_bufferEv'/>
<use f='halide/src/autoschedulers/adams2019/LoopNest.cpp' l='1756' u='c' c='_ZNK6Halide8Internal13Autoscheduler8LoopNest5applyENS_9LoopLevelER14PerfectHashMapINS1_11FunctionDAG4Node5StageESt10unique_ptrINS2_18StageScheduleStat9334574'/>
<doc f='halide/src/autoschedulers/adams2019/LoopNest.cpp' l='1183'>// Does this loop nest access an input buffer? Used to select
// trail strategies when splitting loops. We don&apos;t want to read
// out of bounds on inputs, even if we don&apos;t intend to use the
// values read. It could create annoying assertion failures for
// the user. It&apos;s OK to read out of range of the values computed
// on internal Funcs though. Allocation bounds inference just pads
// out the bounds so that it won&apos;t fault.</doc>
