<dec f='halide/halide-install/include/Halide.h' l='5776' type='2'/>
<doc f='halide/halide-install/include/Halide.h' l='5768'>/** Guard the inner loop with an if statement that prevents
     * evaluation beyond the original extent, with a hint that the
     * if statement should be implemented with predicated operations.
     * Always legal. The if statement is treated like a boundary
     * condition, and factored out into a loop epilogue if possible.
     * Pros: no redundant re-evaluation; does not constrain input our
     * output sizes. Cons: increases code size due to separate
     * tail-case handling. */</doc>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='217' u='a' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='169' u='a' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/elementwise_generator.cpp' l='45' u='r' c='_ZN5hannk3Add8generateEv'/>
<use f='halide/apps/hannk/halide/elementwise_generator.cpp' l='86' u='r' c='_ZN5hannk3Mul8generateEv'/>
<use f='halide/apps/hannk/halide/elementwise_generator.cpp' l='188' u='r' c='_ZN5hannk11Elementwise5buildEv'/>
<use f='halide/apps/hannk/halide/normalizations_generator.cpp' l='43' u='r' c='_ZN5hannk15L2Normalization8generateEv'/>
<use f='halide/apps/hannk/halide/normalizations_generator.cpp' l='113' u='a' c='_ZN5hannk7Softmax8generateEv'/>
<dec f='halide/build/include/Halide.h' l='5776' type='2'/>
<doc f='halide/build/include/Halide.h' l='5768'>/** Guard the inner loop with an if statement that prevents
     * evaluation beyond the original extent, with a hint that the
     * if statement should be implemented with predicated operations.
     * Always legal. The if statement is treated like a boundary
     * condition, and factored out into a loop epilogue if possible.
     * Pros: no redundant re-evaluation; does not constrain input our
     * output sizes. Cons: increases code size due to separate
     * tail-case handling. */</doc>
<dec f='halide/src/Schedule.h' l='59' type='2'/>
<doc f='halide/src/Schedule.h' l='51'>/** Guard the inner loop with an if statement that prevents
     * evaluation beyond the original extent, with a hint that the
     * if statement should be implemented with predicated operations.
     * Always legal. The if statement is treated like a boundary
     * condition, and factored out into a loop epilogue if possible.
     * Pros: no redundant re-evaluation; does not constrain input our
     * output sizes. Cons: increases code size due to separate
     * tail-case handling. */</doc>
<use f='halide/src/ApplySplit.cpp' l='53' u='r' c='_ZN6Halide8Internal11apply_splitERKNS0_5SplitEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt3mapIS9_NS_4ExprESt4lessIS9_ESaISt4pairISA_SD_EEE'/>
<use f='halide/src/ApplySplit.cpp' l='74' u='r' c='_ZN6Halide8Internal11apply_splitERKNS0_5SplitEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt3mapIS9_NS_4ExprESt4lessIS9_ESaISt4pairISA_SD_EEE'/>
<use f='halide/src/Func.cpp' l='1109' u='r' c='_ZN6Halide5Stage5splitERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_S8_RKNS_4ExprEbNS_12TailStrategyE'/>
<use f='halide/src/IRPrinter.cpp' l='150' c='_ZN6HalidelsERSoRKNS_12TailStrategyE'/>
