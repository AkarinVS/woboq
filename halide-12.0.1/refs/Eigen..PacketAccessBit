<def f='halide/build-apps/eigen/Eigen/src/Core/util/Constants.h' l='93' type='const unsigned int'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/util/Constants.h' l='104' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='509' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='567' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='653' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='748' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='900' u='r' c='_ZN5Eigen8internal17mapbase_evaluatorC1ERKT_'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='990' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='1055'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='1496' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='1500' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='30'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Reshaped.h' l='77'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Transpose.h' l='236' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/TriangularMatrix.h' l='180' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/SelfAdjointView.h' l='43' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='567' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='568' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='577' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='844' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='847' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/ProductEvaluators.h' l='849' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/PartialReduxEvaluator.h' l='152' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/PartialReduxEvaluator.h' l='159' u='r'/>
<use f='halide/build-apps/eigen/Eigen/src/Jacobi/Jacobi.h' l='456' u='r' c='_ZN5Eigen8internal27apply_rotation_in_the_planeERNS_9DenseBaseIT_EERNS1_IT0_EERKNS_14JacobiRotationIT1_EE'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/OrthoMethods.h' l='55' u='r'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/util/Constants.h' l='77'>/** \ingroup flags
  *
  * Short version: means the expression might be vectorized
  *
  * Long version: means that the coefficients can be handled by packets
  * and start at a memory location whose alignment meets the requirements
  * of the present CPU architecture for optimized packet access. In the fixed-size
  * case, there is the additional condition that it be possible to access all the
  * coefficients by packets (this implies the requirement that the size be a multiple of 16 bytes,
  * and that any nontrivial strides don&apos;t break the alignment). In the dynamic-size case,
  * there is no such condition on the total size and strides, so it might not be possible to access
  * all coeffs by packets.
  *
  * \note This bit can be set regardless of whether vectorization is actually enabled.
  *       To check for actual vectorizability, see \a ActualPacketAccessBit.
  */</doc>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/Tensor/TensorTraits.h' l='39'/>
