<def f='halide/build-apps/abseil-cpp/absl/container/internal/raw_hash_set.h' l='1110' ll='1126'/>
<use f='halide/build-apps/abseil-cpp/absl/container/internal/raw_hash_set.h' l='1133' c='_ZN4absl14lts_2020_02_2518container_internal12raw_hash_set12lazy_emplaceERKNS1_6KeyArgIXaasr13IsTransparentIT1_EE5valuesr13IsTransparentIT0_EE5valueEE9631939'/>
<doc f='halide/build-apps/abseil-cpp/absl/container/internal/raw_hash_set.h' l='1083'>// Extension API: support for lazy emplace.
  //
  // Looks up key in the table. If found, returns the iterator to the element.
  // Otherwise calls `f` with one argument of type `raw_hash_set::constructor`.
  //
  // `f` must abide by several restrictions:
  //  - it MUST call `raw_hash_set::constructor` with arguments as if a
  //    `raw_hash_set::value_type` is constructed,
  //  - it MUST NOT access the container before the call to
  //    `raw_hash_set::constructor`, and
  //  - it MUST NOT erase the lazily emplaced element.
  // Doing any of these is undefined behavior.
  //
  // For example:
  //
  //   std::unordered_set&lt;ArenaString&gt; s;
  //   // Makes ArenaStr even if &quot;abc&quot; is in the map.
  //   s.insert(ArenaString(&amp;arena, &quot;abc&quot;));
  //
  //   flat_hash_set&lt;ArenaStr&gt; s;
  //   // Makes ArenaStr only if &quot;abc&quot; is not in the map.
  //   s.lazy_emplace(&quot;abc&quot;, [&amp;](const constructor&amp; ctor) {
  //     ctor(&amp;arena, &quot;abc&quot;);
  //   });
  //
  // WARNING: This API is currently experimental. If there is a way to implement
  // the same thing with the rest of the API, prefer that.</doc>
<fun r='_ZNK4absl14lts_2020_02_2518container_internal12raw_hash_set11constructorclEDpOTL0__'/>
<fun r='_ZN4absl14lts_2020_02_2518container_internal12raw_hash_set11constructorC1EPT2_PPNS1_18hash_policy_traitsIT_vE9slot_typeE'/>
<mbr r='absl::lts_2020_02_25::container_internal::raw_hash_set::constructor::alloc_' t='absl::lts_2020_02_25::container_internal::raw_hash_set::allocator_type *'/>
<mbr r='absl::lts_2020_02_25::container_internal::raw_hash_set::constructor::slot_' t='absl::lts_2020_02_25::container_internal::raw_hash_set::slot_type **'/>
