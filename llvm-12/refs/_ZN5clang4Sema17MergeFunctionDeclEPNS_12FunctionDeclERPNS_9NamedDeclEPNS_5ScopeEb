<dec f='llvm/clang/include/clang/Sema/Sema.h' l='3320' type='bool clang::Sema::MergeFunctionDecl(clang::FunctionDecl * New, clang::NamedDecl *&amp; Old, clang::Scope * S, bool MergeTypeWithOld)'/>
<def f='llvm/clang/lib/Sema/SemaDecl.cpp' l='3214' ll='3804' type='bool clang::Sema::MergeFunctionDecl(clang::FunctionDecl * New, clang::NamedDecl *&amp; OldD, clang::Scope * S, bool MergeTypeWithOld)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='10780' u='c' c='_ZN5clang4Sema24CheckFunctionDeclarationEPNS_5ScopeEPNS_12FunctionDeclERNS_12LookupResultEb'/>
<doc f='llvm/clang/lib/Sema/SemaDecl.cpp' l='3203'>/// MergeFunctionDecl - We just parsed a function &apos;New&apos; from
/// declarator D which has the same name and scope as a previous
/// declaration &apos;Old&apos;.  Figure out how to resolve this situation,
/// merging decls or emitting diagnostics as appropriate.
///
/// In C++, New and Old must be declarations that are not
/// overloaded. Use IsOverload to determine whether New and Old are
/// overloaded, and to select the Old declaration that New should be
/// merged with.
///
/// Returns true if there was an error, false otherwise.</doc>
