<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ASTStructExtractor.h' l='51' type='void lldb_private::ASTStructExtractor::ASTStructExtractor(clang::ASTConsumer * passthrough, const char * struct_name, lldb_private::ClangFunctionCaller &amp; function)'/>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ASTStructExtractor.cpp' l='29' ll='39' type='void lldb_private::ASTStructExtractor::ASTStructExtractor(clang::ASTConsumer * passthrough, const char * struct_name, lldb_private::ClangFunctionCaller &amp; function)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ASTStructExtractor.h' l='35'>/// Constructor
  ///
  /// \param[in] passthrough
  ///     Since the ASTs must typically go through to the Clang code generator
  ///     in order to produce LLVM IR, this SemaConsumer must allow them to
  ///     pass to the next step in the chain after processing.  Passthrough is
  ///     the next ASTConsumer, or NULL if none is required.
  ///
  /// \param[in] struct_name
  ///     The name of the structure to extract from the wrapper function.
  ///
  /// \param[in] function
  ///     The caller object whose members should be populated with information
  ///     about the argument struct.  ClangFunctionCaller friends
  ///     ASTStructExtractor
  ///     for this purpose.</doc>
