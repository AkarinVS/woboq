<dec f='llvm/clang/include/clang/Basic/TargetID.h' l='53' type='llvm::Optional&lt;std::pair&lt;llvm::StringRef, llvm::StringRef&gt; &gt; clang::getConflictTargetIDCombination(const std::set&lt;llvm::StringRef&gt; &amp; TargetIDs)'/>
<def f='llvm/clang/lib/Basic/TargetID.cpp' l='144' ll='167' type='llvm::Optional&lt;std::pair&lt;llvm::StringRef, llvm::StringRef&gt; &gt; clang::getConflictTargetIDCombination(const std::set&lt;llvm::StringRef&gt; &amp; TargetIDs)'/>
<doc f='llvm/clang/lib/Basic/TargetID.cpp' l='141'>// For a specific processor, a feature either shows up in all target IDs, or
// does not show up in any target IDs. Otherwise the target ID combination
// is invalid.</doc>
<doc f='llvm/clang/include/clang/Basic/TargetID.h' l='49'>/// Get the conflicted pair of target IDs for a compilation or a bundled code
/// object, assuming \p TargetIDs are canonicalized. If there is no conflicts,
/// returns None.</doc>
<use f='llvm/clang/lib/Driver/Driver.cpp' l='2815' u='c' c='_ZN12_GLOBAL__N_123OffloadingActionBuilder16HIPActionBuilder33getConflictOffloadArchCombinationERKSt3setIN4llvm9StringRefESt4lessIS4_ESaIS4_EE'/>
