<dec f='llvm/llvm/include/llvm/Transforms/Utils/GuardUtils.h' l='29' type='void llvm::makeGuardControlFlowExplicit(llvm::Function * DeoptIntrinsic, llvm::CallInst * Guard, bool UseWC)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/GuardUtils.h' l='22'>/// Splits control flow at point of \p Guard, replacing it with explicit branch
/// by the condition of guard&apos;s first argument. The taken branch then goes to
/// the block that contains  \p Guard&apos;s successors, and the non-taken branch
/// goes to a newly-created deopt block that contains a sole call of the
/// deoptimize function \p DeoptIntrinsic.  If &apos;UseWC&apos; is set, preserve the
/// widenable nature of the guard by lowering to equivelent form.  If not set,
/// lower to a form without widenable semantics.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LowerGuardIntrinsic.cpp' l='64' u='c' c='_ZL19lowerGuardIntrinsicRN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MakeGuardsExplicit.cpp' l='62' u='c' c='_ZL18turnToExplicitFormPN4llvm8CallInstEPNS_8FunctionE'/>
<def f='llvm/llvm/lib/Transforms/Utils/GuardUtils.cpp' l='30' ll='79' type='void llvm::makeGuardControlFlowExplicit(llvm::Function * DeoptIntrinsic, llvm::CallInst * Guard, bool UseWC)'/>
