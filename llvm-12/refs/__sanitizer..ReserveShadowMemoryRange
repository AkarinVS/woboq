<dec f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='140' type='void __sanitizer::ReserveShadowMemoryRange(__sanitizer::uptr beg, __sanitizer::uptr end, const char * name, bool madvise_shadow = true)'/>
<use f='llvm/compiler-rt/lib/asan/asan_poisoning.h' l='73' u='c' c='__asan::FastPoisonShadow'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='138'>// Reserve memory range [beg, end]. If madvise_shadow is true then apply
// madvise (e.g. hugepages, core dumping) requested by options.</doc>
<use f='llvm/compiler-rt/lib/asan/asan_shadow_setup.cpp' l='38' u='c' c='__asan::ProtectGap'/>
<use f='llvm/compiler-rt/lib/asan/asan_shadow_setup.cpp' l='92' u='c' c='__asan::InitializeShadowMemory'/>
<use f='llvm/compiler-rt/lib/asan/asan_shadow_setup.cpp' l='94' u='c' c='__asan::InitializeShadowMemory'/>
<use f='llvm/compiler-rt/lib/asan/asan_shadow_setup.cpp' l='103' u='c' c='__asan::InitializeShadowMemory'/>
<use f='llvm/compiler-rt/lib/asan/asan_shadow_setup.cpp' l='105' u='c' c='__asan::InitializeShadowMemory'/>
<use f='llvm/compiler-rt/lib/asan/asan_shadow_setup.cpp' l='107' u='c' c='__asan::InitializeShadowMemory'/>
<use f='llvm/compiler-rt/lib/hwasan/hwasan_linux.cpp' l='190' u='c' c='__hwasan::InitShadow'/>
<use f='llvm/compiler-rt/lib/hwasan/hwasan_linux.cpp' l='191' u='c' c='__hwasan::InitShadow'/>
<use f='llvm/compiler-rt/lib/hwasan/hwasan_linux.cpp' l='212' u='c' c='__hwasan::InitThreads'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_allocator.cpp' l='442' u='c' c='__memprof::ClearShadow'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_shadow_setup.cpp' l='33' u='c' c='__memprof::ProtectGap'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_shadow_setup.cpp' l='54' u='c' c='__memprof::InitializeShadowMemory'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_shadow_setup.cpp' l='56' u='c' c='__memprof::InitializeShadowMemory'/>
<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common_libcdep.cpp' l='146' ll='162' type='void __sanitizer::ReserveShadowMemoryRange(__sanitizer::uptr beg, __sanitizer::uptr end, const char * name, bool madvise_shadow = true)'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common_libcdep.cpp' l='144'>// Reserve memory range [beg, end].
// We need to use inclusive range because end+1 may not be representable.</doc>
