<dec f='llvm/polly/include/polly/PolyhedralInfo.h' l='63' type='isl_union_map * polly::PolyhedralInfo::getScheduleForLoop(const polly::Scop * S, llvm::Loop * L) const'/>
<use f='llvm/polly/lib/Analysis/PolyhedralInfo.cpp' l='91' u='c' c='_ZNK5polly14PolyhedralInfo13checkParallelEPN4llvm4LoopEPP10isl_pw_aff'/>
<def f='llvm/polly/lib/Analysis/PolyhedralInfo.cpp' l='124' ll='151' type='isl_union_map * polly::PolyhedralInfo::getScheduleForLoop(const polly::Scop * S, llvm::Loop * L) const'/>
<doc f='llvm/polly/lib/Analysis/PolyhedralInfo.cpp' l='111'>//  Given a Loop and the containing SCoP, we compute the partial schedule
//  by taking union of individual schedules of each ScopStmt within the loop
//  and projecting out the inner dimensions from the range of the schedule.
//   for (i = 0; i &lt; n; i++)
//      for (j = 0; j &lt; n; j++)
//        A[j] = 1;  //Stmt
//
//  The original schedule will be
//    Stmt[i0, i1] -&gt; [i0, i1]
//  The schedule for the outer loop will be
//    Stmt[i0, i1] -&gt; [i0]
//  The schedule for the inner loop will be
//    Stmt[i0, i1] -&gt; [i0, i1]</doc>
<doc f='llvm/polly/include/polly/PolyhedralInfo.h' l='57'>/// Computes the partial schedule for the given @p L loop.
  ///
  /// @param S The SCoP containing the given loop
  /// @param L The loop.
  ///
  /// @return  Returns the partial schedule for the given loop</doc>
