<def f='llvm/llvm/include/llvm/ADT/SmallVector.h' l='84' ll='87' type='void llvm::SmallVectorBase::set_size(size_t N)'/>
<doc f='llvm/llvm/include/llvm/ADT/SmallVector.h' l='75'>/// Set the array size to \p N, which the current array must have enough
  /// capacity for.
  ///
  /// This does not construct or destroy any elements in the vector.
  ///
  /// Clients can use this in conjunction with capacity() to write past the end
  /// of the buffer when they know that more elements are available, and only
  /// update the size later. This avoids the cost of value initializing elements
  /// which will only be overwritten.</doc>
<use f='llvm/clang/include/clang/AST/UnresolvedSet.h' l='124' u='c' c='_ZN5clang17UnresolvedSetImpl8set_sizeEj'/>
<use f='llvm/llvm/lib/Support/Compression.cpp' l='59' u='c' c='_ZN4llvm4zlib8compressENS_9StringRefERNS_15SmallVectorImplIcEEi'/>
<use f='llvm/llvm/lib/Support/Compression.cpp' l='80' u='c' c='_ZN4llvm4zlib10uncompressENS_9StringRefERNS_15SmallVectorImplIcEEm'/>
<use f='llvm/llvm/lib/Support/MemoryBuffer.cpp' l='237' u='c' c='_ZL24getMemoryBufferForStreamiRKN4llvm5TwineE'/>
<use f='llvm/llvm/lib/Support/Path.cpp' l='475' u='c' c='_ZN4llvm3sys4path15remove_filenameERNS_15SmallVectorImplIcEENS1_5StyleE'/>
<use f='llvm/llvm/lib/Support/Path.cpp' l='487' u='c' c='_ZN4llvm3sys4path17replace_extensionERNS_15SmallVectorImplIcEERKNS_5TwineENS1_5StyleE'/>
<use f='llvm/llvm/lib/Support/Unix/Path.inc' l='371' u='c' c='_ZN4llvm3sys2fs12current_pathERNS_15SmallVectorImplIcEE'/>
