<dec f='llvm/llvm/lib/Target/Mips/MipsTargetStreamer.h' l='286' type='bool llvm::MipsTargetAsmStreamer::emitDirectiveCpRestore(int Offset, function_ref&lt;unsigned int ()&gt; GetATReg, llvm::SMLoc IDLoc, const llvm::MCSubtargetInfo * STI)'/>
<doc f='llvm/llvm/lib/Target/Mips/MipsTargetStreamer.h' l='279'>/// Emit a .cprestore directive.  If the offset is out of range then it will
  /// be synthesized using the assembler temporary.
  ///
  /// GetATReg() is a callback that can be used to obtain the current assembler
  /// temporary and is only called when the assembler temporary is required. It
  /// must handle the case where no assembler temporary is available (typically
  /// by reporting an error).</doc>
<inh f='llvm/llvm/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp' l='133' c='_ZN4llvm18MipsTargetStreamer22emitDirectiveCpRestoreEiNS_12function_refIFjvEEENS_5SMLocEPKNS_15MCSubtargetInfoE'/>
<def f='llvm/llvm/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp' l='684' ll='690' type='bool llvm::MipsTargetAsmStreamer::emitDirectiveCpRestore(int Offset, function_ref&lt;unsigned int ()&gt; GetATReg, llvm::SMLoc IDLoc, const llvm::MCSubtargetInfo * STI)'/>
