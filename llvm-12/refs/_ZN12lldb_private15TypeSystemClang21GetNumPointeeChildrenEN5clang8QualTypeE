<dec f='llvm/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.h' l='796' type='static uint32_t lldb_private::TypeSystemClang::GetNumPointeeChildren(clang::QualType type)'/>
<use f='llvm/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp' l='5284' u='c' c='_ZN12lldb_private15TypeSystemClang14GetNumChildrenEPvbPKNS_16ExecutionContextE'/>
<def f='llvm/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp' l='5833' ll='5964' type='static uint32_t lldb_private::TypeSystemClang::GetNumPointeeChildren(clang::QualType type)'/>
<doc f='llvm/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp' l='5828'>// If a pointer to a pointee type (the clang_type arg) says that it has no
// children, then we either need to trust it, or override it and return a
// different result. For example, an &quot;int *&quot; has one child that is an integer,
// but a function pointer doesn&apos;t have any children. Likewise if a Record type
// claims it has no children, then there really is nothing to show.</doc>
