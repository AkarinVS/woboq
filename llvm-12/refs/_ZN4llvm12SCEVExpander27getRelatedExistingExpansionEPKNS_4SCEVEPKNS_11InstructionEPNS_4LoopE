<dec f='llvm/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h' l='375' type='Optional&lt;ScalarEvolution::ValueOffsetPair&gt; llvm::SCEVExpander::getRelatedExistingExpansion(const llvm::SCEV * S, const llvm::Instruction * At, llvm::Loop * L)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h' l='362'>/// Try to find the ValueOffsetPair for S. The function is mainly used to
  /// check whether S can be expanded cheaply.  If this returns a non-None
  /// value, we know we can codegen the `ValueOffsetPair` into a suitable
  /// expansion identical with S so that S can be expanded cheaply.
  ///
  /// L is a hint which tells in which loop to look for the suitable value.
  /// On success return value which is equivalent to the expanded S at point
  /// At. Return nullptr if value was not found.
  ///
  /// Note that this function does not perform an exhaustive search. I.e if it
  /// didn&apos;t find any value it does not mean that there is no such value.
  ///</doc>
<def f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='2144' ll='2180' type='Optional&lt;ScalarEvolution::ValueOffsetPair&gt; llvm::SCEVExpander::getRelatedExistingExpansion(const llvm::SCEV * S, const llvm::Instruction * At, llvm::Loop * L)'/>
<use f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='2336' u='c' c='_ZN4llvm12SCEVExpander25isHighCostExpansionHelperERKNS_11SCEVOperandEPNS_4LoopERKNS_11InstructionERiRKNS_19TargetTransformInfoERNS_15SmallPtrSetImplIP205181'/>
<use f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='2378' u='c' c='_ZN4llvm12SCEVExpander25isHighCostExpansionHelperERKNS_11SCEVOperandEPNS_4LoopERKNS_11InstructionERiRKNS_19TargetTransformInfoERNS_15SmallPtrSetImplIP205181'/>
