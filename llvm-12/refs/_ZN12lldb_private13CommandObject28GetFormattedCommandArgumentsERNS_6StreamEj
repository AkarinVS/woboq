<dec f='llvm/lldb/include/lldb/Interpreter/CommandObject.h' l='216' type='void lldb_private::CommandObject::GetFormattedCommandArguments(lldb_private::Stream &amp; str, uint32_t opt_set_mask = 4294967295U)'/>
<doc f='llvm/lldb/include/lldb/Interpreter/CommandObject.h' l='211'>// Generates a nicely formatted command args string for help command output.
  // By default, all possible args are taken into account, for example, &apos;&lt;expr
  // | variable-name&gt;&apos;.  This can be refined by passing a second arg specifying
  // which option set(s) we are interested, which could then, for example,
  // produce either &apos;&lt;expr&gt;&apos; or &apos;&lt;variable-name&gt;&apos;.</doc>
<use f='llvm/lldb/source/Interpreter/CommandObject.cpp' l='76' u='c' c='_ZN12lldb_private13CommandObject9GetSyntaxEv'/>
<def f='llvm/lldb/source/Interpreter/CommandObject.cpp' l='454' ll='543' type='void lldb_private::CommandObject::GetFormattedCommandArguments(lldb_private::Stream &amp; str, uint32_t opt_set_mask = 4294967295U)'/>
<doc f='llvm/lldb/source/Interpreter/CommandObject.cpp' l='450'>// Default parameter value of opt_set_mask is LLDB_OPT_SET_ALL, which means
// take all the argument data into account.  On rare cases where some argument
// sticks with certain option sets, this function returns the option set
// filtered args.</doc>
<use f='llvm/lldb/source/Interpreter/Options.cpp' l='403' u='c' c='_ZN12lldb_private7Options19GenerateOptionUsageERNS_6StreamEPNS_13CommandObjectEj'/>
<use f='llvm/lldb/source/Interpreter/Options.cpp' l='437' u='c' c='_ZN12lldb_private7Options19GenerateOptionUsageERNS_6StreamEPNS_13CommandObjectEj'/>
