<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='852' type='void llvm::LazyCallGraph::RefSCC::insertTrivialRefEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='843'>/// A convenience wrapper around the above to handle trivial cases of
    /// inserting a new ref edge.
    ///
    /// This is trivial whenever the target is in the same RefSCC as the source
    /// or the edge is an outgoing edge to some descendant RefSCC. In these
    /// cases there is no change to the cyclic structure of the RefSCCs.
    ///
    /// To further make calling this convenient, it also handles inserting
    /// already existing edges.</doc>
<use f='llvm/llvm/lib/Analysis/CGSCCPassManager.cpp' l='986' u='c' c='_ZL33updateCGAndAnalysisManagerForPassRN4llvm13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultERNS6_INS_8FunctionEJEEEb'/>
<use f='llvm/llvm/lib/Analysis/CGSCCPassManager.cpp' l='999' u='c' c='_ZL33updateCGAndAnalysisManagerForPassRN4llvm13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultERNS6_INS_8FunctionEJEEEb'/>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1452' ll='1476' type='void llvm::LazyCallGraph::RefSCC::insertTrivialRefEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
