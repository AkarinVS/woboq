<dec f='llvm/polly/lib/External/isl/include/isl/schedule_node.h' l='222' type='isl_multi_union_pw_aff * isl_schedule_node_get_prefix_schedule_multi_union_pw_aff(isl_schedule_node * node)'/>
<use f='llvm/polly/lib/External/isl/include/isl/isl-noexceptions.h' l='14216' u='c' c='_ZNK3isl12noexceptions13schedule_node38get_prefix_schedule_multi_union_pw_affEv'/>
<def f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='682' ll='713' type='isl_multi_union_pw_aff * isl_schedule_node_get_prefix_schedule_multi_union_pw_aff(isl_schedule_node * node)'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='3235' u='c' c='isl_schedule_node_group'/>
<doc f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='668'>/* Return the concatenation of the partial schedules of all outer band
 * nodes of &quot;node&quot; interesected with all outer filters
 * as an isl_multi_union_pw_aff.
 * None of the ancestors of &quot;node&quot; may be an extension node, unless
 * there is also a filter ancestor that filters out all the extended
 * domain elements.
 *
 * If &quot;node&quot; is pointing at the root of the schedule tree, then
 * there are no domain elements reaching the current node, so
 * we return an empty result.
 *
 * We collect all the filters and partial schedules in collect_filter_prefix
 * and intersect the domain of the combined schedule with the combined filter.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='10288' u='c' c='test_schedule_tree_prefix'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='4474' u='c' c='get_local_coincidence'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1510' u='c' c='check_can_be_private_live_ranges'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='117' u='c' c='get_prefix'/>
<use f='llvm/polly/lib/External/ppcg/hybrid.c' l='1096' u='c' c='collect_deps'/>
