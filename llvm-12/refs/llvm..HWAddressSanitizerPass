<inh f='llvm/llvm/include/llvm/IR/PassManager.h' l='374' c='llvm::PassInfoMixin'/>
<def f='llvm/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h' l='25' ll='35'/>
<use f='llvm/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h' l='25'/>
<use f='llvm/clang/lib/CodeGen/BackendUtil.cpp' l='1313' c='_ZN12_GLOBAL__N_118EmitAssemblyHelper30EmitAssemblyWithNewPassManagerEN5clang13BackendActionESt10unique_ptrIN4llvm17raw_pwrite_streamESt14default_deleteIS5_EE'/>
<size>2</size>
<doc f='llvm/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h' l='22'>/// This is a public interface to the hardware address sanitizer pass for
/// instrumenting code to check for various memory errors at runtime, similar to
/// AddressSanitizer but based on partial hardware assistance.</doc>
<fun r='_ZN4llvm22HWAddressSanitizerPassC1Ebb'/>
<fun r='_ZN4llvm22HWAddressSanitizerPass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<fun r='_ZN4llvm22HWAddressSanitizerPass10isRequiredEv'/>
<mbr r='llvm::HWAddressSanitizerPass::CompileKernel' o='0' t='bool'/>
<mbr r='llvm::HWAddressSanitizerPass::Recover' o='8' t='bool'/>
<use f='llvm/llvm/lib/Passes/PassRegistry.def' l='61' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementE'/>
<use f='llvm/llvm/lib/Passes/PassRegistry.def' l='62' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementE'/>
<size>2</size>
