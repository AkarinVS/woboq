<dec f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='141' type='static bool llvm::AArch64InstrInfo::getMemOpInfo(unsigned int Opcode, llvm::TypeSize &amp; Scale, unsigned int &amp; Width, int64_t &amp; MinOffset, int64_t &amp; MaxOffset)'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='137'>/// Returns true if opcode \p Opc is a memory operation. If it is, set
  /// \p Scale, \p Width, \p MinOffset, and \p MaxOffset accordingly.
  ///
  /// For unscaled instructions, \p Scale is set to 1.</doc>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='2321' u='c' c='_ZNK4llvm16AArch64InstrInfo28getMemOperandWithOffsetWidthERKNS_12MachineInstrERPKNS_14MachineOperandERlRbRjPKNS_18TargetRegisterInfoE'/>
<def f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='2351' ll='2629' type='static bool llvm::AArch64InstrInfo::getMemOpInfo(unsigned int Opcode, llvm::TypeSize &amp; Scale, unsigned int &amp; Width, int64_t &amp; MinOffset, int64_t &amp; MaxOffset)'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='3966' u='c' c='_ZN4llvm25isAArch64FrameOffsetLegalERKNS_12MachineInstrERNS_11StackOffsetEPbPjPl'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='3986' u='c' c='_ZN4llvm25isAArch64FrameOffsetLegalERKNS_12MachineInstrERNS_11StackOffsetEPbPjPl'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='6302' u='c' c='_ZNK4llvm16AArch64InstrInfo25getOutliningCandidateInfoERSt6vectorINS_8outliner9CandidateESaIS3_EE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='6774' u='c' c='_ZNK4llvm16AArch64InstrInfo16fixupPostOutlineERNS_17MachineBasicBlockE'/>
