<inh f='llvm/clang/include/clang/Tooling/Syntax/Tree.h' l='169' c='clang::syntax::Tree'/>
<def f='llvm/clang/include/clang/Tooling/Syntax/Nodes.h' l='491' ll='495'/>
<ovr f='llvm/clang/include/clang/Tooling/Syntax/Nodes.h' l='499' c='clang::syntax::SimpleDeclarator'/>
<use f='llvm/clang/include/clang/Tooling/Syntax/Nodes.h' l='499'/>
<use f='llvm/clang/include/clang/Tooling/Syntax/Nodes.h' l='501' c='_ZN5clang6syntax16SimpleDeclaratorC1Ev'/>
<ovr f='llvm/clang/include/clang/Tooling/Syntax/Nodes.h' l='508' c='clang::syntax::ParenDeclarator'/>
<use f='llvm/clang/include/clang/Tooling/Syntax/Nodes.h' l='508'/>
<use f='llvm/clang/include/clang/Tooling/Syntax/Nodes.h' l='510' c='_ZN5clang6syntax15ParenDeclaratorC1Ev'/>
<size>48</size>
<doc f='llvm/clang/include/clang/Tooling/Syntax/Nodes.h' l='479'>/// Covers a name, an initializer and a part of the type outside declaration
/// specifiers. Examples are:
///     `*a` in `int *a`
///     `a[10]` in `int a[10]`
///     `*a = nullptr` in `int *a = nullptr`
/// Declarators can be unnamed too:
///     `**` in `new int**`
///     `* = nullptr` in `void foo(int* = nullptr)`
/// Most declarators you encounter are instances of SimpleDeclarator. They may
/// contain an inner declarator inside parentheses, we represent it as
/// ParenDeclarator. E.g.
///     `(*a)` in `int (*a) = 10`</doc>
<fun r='_ZN5clang6syntax10DeclaratorC1ENS0_8NodeKindE'/>
<fun r='_ZN5clang6syntax10Declarator7classofEPKNS0_4NodeE'/>
<fun r='_ZN5clang6syntax10Declarator7classofEPKNS0_4NodeE'/>
