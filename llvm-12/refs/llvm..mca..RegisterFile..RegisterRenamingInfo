<def f='llvm/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h' l='117' ll='125'/>
<use f='llvm/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h' l='139'/>
<use f='llvm/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h' l='167' c='_ZN4llvm3mca12RegisterFile16allocatePhysRegsERKNS1_20RegisterRenamingInfoENS_15MutableArrayRefIjEE'/>
<use f='llvm/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h' l='172' c='_ZN4llvm3mca12RegisterFile12freePhysRegsERKNS1_20RegisterRenamingInfoENS_15MutableArrayRefIjEE'/>
<size>16</size>
<doc f='llvm/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h' l='98'>// Struct RegisterRenamingInfo is used to map logical registers to register
  // files.
  //
  // There is a RegisterRenamingInfo object for every logical register defined
  // by the target. RegisteRenamingInfo objects are stored into vector
  // `RegisterMappings`, and MCPhysReg IDs can be used to reference
  // elements in that vector.
  //
  // Each RegisterRenamingInfo is owned by a PRF, and field `IndexPlusCost`
  // specifies both the owning PRF, as well as the number of physical registers
  // consumed at register renaming stage.
  //
  // Field `AllowMoveElimination` is set for registers that are used as
  // destination by optimizable register moves.
  //
  // Field `AliasRegID` is set by writes from register moves that have been
  // eliminated at register renaming stage. A move eliminated at register
  // renaming stage is effectively bypassed, and its write aliases the source
  // register definition.</doc>
<mbr r='llvm::mca::RegisterFile::RegisterRenamingInfo::IndexPlusCost' o='0' t='llvm::mca::RegisterFile::IndexPlusCostPairTy'/>
<mbr r='llvm::mca::RegisterFile::RegisterRenamingInfo::RenameAs' o='64' t='llvm::MCPhysReg'/>
<mbr r='llvm::mca::RegisterFile::RegisterRenamingInfo::AliasRegID' o='80' t='llvm::MCPhysReg'/>
<mbr r='llvm::mca::RegisterFile::RegisterRenamingInfo::AllowMoveElimination' o='96' t='bool'/>
<fun r='_ZN4llvm3mca12RegisterFile20RegisterRenamingInfoC1Ev'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='28' c='_ZN4llvm3mca12RegisterFileC1ERKNS_12MCSchedModelERKNS_14MCRegisterInfoEj'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='90' c='_ZN4llvm3mca12RegisterFile15addRegisterFileERKNS_18MCRegisterFileDescENS_8ArrayRefINS_19MCRegisterCostEntryEEE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='105' c='_ZN4llvm3mca12RegisterFile15addRegisterFileERKNS_18MCRegisterFileDescENS_8ArrayRefINS_19MCRegisterCostEntryEEE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='117' c='_ZN4llvm3mca12RegisterFile16allocatePhysRegsERKNS1_20RegisterRenamingInfoENS_15MutableArrayRefIjEE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='132' c='_ZN4llvm3mca12RegisterFile12freePhysRegsERKNS1_20RegisterRenamingInfoENS_15MutableArrayRefIjEE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='174' c='_ZN4llvm3mca12RegisterFile16addRegisterWriteENS0_8WriteRefENS_15MutableArrayRefIjEE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='287' c='_ZN4llvm3mca12RegisterFile16tryEliminateMoveERNS0_10WriteStateERNS0_9ReadStateE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='288' c='_ZN4llvm3mca12RegisterFile16tryEliminateMoveERNS0_10WriteStateERNS0_9ReadStateE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='329' c='_ZN4llvm3mca12RegisterFile16tryEliminateMoveERNS0_10WriteStateERNS0_9ReadStateE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='355' c='_ZNK4llvm3mca12RegisterFile13collectWritesERKNS0_9ReadStateERNS_15SmallVectorImplINS0_8WriteRefEEE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='392' c='_ZNK4llvm3mca12RegisterFile15addRegisterReadERNS0_9ReadStateERKNS_15MCSubtargetInfoE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='423' c='_ZNK4llvm3mca12RegisterFile11isAvailableENS_8ArrayRefItEE'/>
<size>16</size>
