<dec f='llvm/lldb/include/lldb/Target/Trace.h' l='97' type='static llvm::Expected&lt;lldb::TraceSP&gt; lldb_private::Trace::FindPlugin(lldb_private::Debugger &amp; debugger, const llvm::json::Value &amp; trace_session_file, llvm::StringRef session_file_dir)'/>
<doc f='llvm/lldb/include/lldb/Target/Trace.h' l='58'>/// Find a trace plug-in using JSON data.
  ///
  /// When loading trace data from disk, the information for the trace data
  /// can be contained in multiple files and require plug-in specific
  /// information about the CPU. Using data like JSON provides an
  /// easy way to specify all of the settings and information that we will need
  /// to load trace data into LLDB. This structured data can include:
  ///   - The plug-in name (this allows a specific plug-in to be selected)
  ///   - Architecture or target triple
  ///   - one or more paths to the trace data file on disk
  ///     - core trace data
  ///     - thread events or related information
  ///   - shared library load information to use for this trace data that
  ///     allows a target to be created so the trace information can be
  ///     symbolicated so that the trace information can be displayed to the
  ///     user
  ///     - shared library path
  ///     - load address
  ///     - information on how to fetch the shared library
  ///       - path to locally cached file on disk
  ///       - URL to download the file
  ///   - Any information needed to load the trace file
  ///     - CPU information
  ///     - Custom plug-in information needed to decode the trace information
  ///       correctly.
  ///
  /// \param[in] debugger
  ///     The debugger instance where new Targets will be created as part of the
  ///     JSON data parsing.
  ///
  /// \param[in] trace_session_file
  ///     The contents of the trace session file describing the trace session.
  ///     See \a TraceSessionFileParser::BuildSchema for more information about
  ///     the schema of this JSON file.
  ///
  /// \param[in] session_file_dir
  ///     The path to the directory that contains the session file. It&apos;s used to
  ///     resolved relative paths in the session file.</doc>
<use f='llvm/lldb/source/Commands/CommandObjectTrace.cpp' l='116' u='c' c='_ZN22CommandObjectTraceLoad9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Target/Trace.cpp' l='60' ll='73' type='static Expected&lt;lldb::TraceSP&gt; lldb_private::Trace::FindPlugin(lldb_private::Debugger &amp; debugger, const json::Value &amp; trace_session_file, llvm::StringRef session_file_dir)'/>
