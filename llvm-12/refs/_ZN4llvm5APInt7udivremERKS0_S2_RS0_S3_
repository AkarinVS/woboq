<dec f='llvm/llvm/include/llvm/ADT/APInt.h' l='1103' type='static void llvm::APInt::udivrem(const llvm::APInt &amp; LHS, const llvm::APInt &amp; RHS, llvm::APInt &amp; Quotient, llvm::APInt &amp; Remainder)'/>
<doc f='llvm/llvm/include/llvm/ADT/APInt.h' l='1096'>/// Dual division/remainder interface.
  ///
  /// Sometimes it is convenient to divide two APInt values and obtain both the
  /// quotient and remainder. This function does both operations in the same
  /// computation making it a little more efficient. The pair of input arguments
  /// may overlap with the pair of output arguments. It is safe to call
  /// udivrem(X, Y, X, Y), for example.</doc>
<use f='llvm/clang/lib/AST/ExprConstant.cpp' l='6600' u='c' c='_ZL21HandleOperatorNewCallRN12_GLOBAL__N_18EvalInfoEPKN5clang8CallExprERNS_6LValueE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='6492' u='c' c='_ZL21extractShiftForRotateRN4llvm12SelectionDAGENS_7SDValueES2_RS2_RKNS_5SDLocE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp' l='5470' u='c' c='_ZNK4llvm14TargetLowering17prepareUREMEqFoldENS_3EVTENS_7SDValueES2_NS_3ISD8CondCodeERNS0_15DAGCombinerInfoERKNS_5SDLocERNS_15SmallVectorImplIPNS_6SDNodeEEE'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='3860' u='c' c='_ZNK4llvm6detail9IEEEFloat8toStringERNS_15SmallVectorImplIcEEjjb'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1200' u='c' c='_ZNK4llvm5APInt21multiplicativeInverseERKS0_'/>
<def f='llvm/llvm/lib/Support/APInt.cpp' l='1785' ll='1854' type='static void llvm::APInt::udivrem(const llvm::APInt &amp; LHS, const llvm::APInt &amp; RHS, llvm::APInt &amp; Quotient, llvm::APInt &amp; Remainder)'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1921' u='c' c='_ZN4llvm5APInt7sdivremERKS0_S2_RS0_S3_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1923' u='c' c='_ZN4llvm5APInt7sdivremERKS0_S2_RS0_S3_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1928' u='c' c='_ZN4llvm5APInt7sdivremERKS0_S2_RS0_S3_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1931' u='c' c='_ZN4llvm5APInt7sdivremERKS0_S2_RS0_S3_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='2825' u='c' c='_ZN4llvm8APIntOps12RoundingUDivERKNS_5APIntES3_NS1_8RoundingE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='715' u='c' c='_ZL10isMultipleRKN4llvm5APIntES2_RS0_b'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='920' u='c' c='_ZN12_GLOBAL__N_17testDivEN4llvm5APIntES1_S1_'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='936' u='c' c='_ZN12_GLOBAL__N_17testDivEN4llvm5APIntES1_S1_'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1072' u='c' c='_ZN12_GLOBAL__N_128APIntTest_divrem_simple_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1081' u='c' c='_ZN12_GLOBAL__N_128APIntTest_divrem_simple_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1090' u='c' c='_ZN12_GLOBAL__N_128APIntTest_divrem_simple_Test8TestBodyEv'/>
