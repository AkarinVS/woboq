<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='119' type='DenseMap&lt;llvm::Instruction *, llvm::Value *&gt; llvm::JumpThreadingPass::cloneInstructions(BasicBlock::iterator BI, BasicBlock::iterator BE, llvm::BasicBlock * NewBB, llvm::BasicBlock * PredBB)'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2061' ll='2108' type='DenseMap&lt;llvm::Instruction *, llvm::Value *&gt; llvm::JumpThreadingPass::cloneInstructions(BasicBlock::iterator BI, BasicBlock::iterator BE, llvm::BasicBlock * NewBB, llvm::BasicBlock * PredBB)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2274' u='c' c='_ZN4llvm17JumpThreadingPass27threadThroughTwoBasicBlocksEPNS_10BasicBlockES2_S2_S2_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2392' u='c' c='_ZN4llvm17JumpThreadingPass10threadEdgeEPNS_10BasicBlockERKNS_15SmallVectorImplIS2_EES2_'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2058'>/// Clone instructions in range [BI, BE) to NewBB.  For PHI nodes, we only clone
/// arguments that come from PredBB.  Return the map from the variables in the
/// source basic block to the variables in the newly created basic block.</doc>
