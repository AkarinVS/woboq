<dec f='llvm/llvm/include/llvm/Analysis/BasicAliasAnalysis.h' l='216' type='bool llvm::BasicAAResult::constantOffsetHeuristic(const SmallVectorImpl&lt;llvm::BasicAAResult::VariableGEPIndex&gt; &amp; VarIndices, llvm::LocationSize V1Size, llvm::LocationSize V2Size, const llvm::APInt &amp; BaseOffset, llvm::AssumptionCache * AC, llvm::DominatorTree * DT)'/>
<doc f='llvm/llvm/include/llvm/Analysis/BasicAliasAnalysis.h' l='207'>/// A Heuristic for aliasGEP that searches for a constant offset
  /// between the variables.
  ///
  /// GetLinearExpression has some limitations, as generally zext(%x + 1)
  /// != zext(%x) + zext(1) if the arithmetic overflows. GetLinearExpression
  /// will therefore conservatively refuse to decompose these expressions.
  /// However, we know that, for all %x, zext(%x) != zext(%x + 1), even if
  /// the addition overflows.</doc>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1296' u='c' c='_ZN4llvm13BasicAAResult8aliasGEPEPKNS_11GEPOperatorENS_12LocationSizeERKNS_9AAMDNodesEPKNS_5ValueES4_S7_SA_SA_RNS_11AAQueryInfoE'/>
<def f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1769' ll='1825' type='bool llvm::BasicAAResult::constantOffsetHeuristic(const SmallVectorImpl&lt;llvm::BasicAAResult::VariableGEPIndex&gt; &amp; VarIndices, llvm::LocationSize MaybeV1Size, llvm::LocationSize MaybeV2Size, const llvm::APInt &amp; BaseOffset, llvm::AssumptionCache * AC, llvm::DominatorTree * DT)'/>
