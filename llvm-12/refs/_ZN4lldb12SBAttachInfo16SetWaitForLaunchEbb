<dec f='llvm/lldb/include/lldb/API/SBAttachInfo.h' l='108' type='void lldb::SBAttachInfo::SetWaitForLaunch(bool b, bool async)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='5681' u='c' c='_ZL43_wrap_SBAttachInfo_SetWaitForLaunch__SWIG_1P7_objectlPS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBAttachInfo.h' l='88'>/// Set attach by process name settings.
  ///
  /// Designed to be used after a call to SBAttachInfo::SetExecutable().
  /// Future calls to SBTarget::Attach(...) will be synchronous or
  /// asynchronous depending on the \a async argument.
  ///
  /// \param[in] b
  ///     If \b false, attach to an existing process whose name matches.
  ///     If \b true, then wait for the next process whose name matches.
  ///
  /// \param[in] async
  ///     If \b false, then the SBTarget::Attach(...) call will be a
  ///     synchronous call with no way to cancel the attach in
  ///     progress.
  ///     If \b true, then the SBTarget::Attach(...) function will
  ///     return immediately and clients are expected to wait for a
  ///     process eStateStopped event if a suitable process is
  ///     eventually found. If the client wants to cancel the event,
  ///     SBProcess::Stop() can be called and an eStateExited process
  ///     event will be delivered.</doc>
<def f='llvm/lldb/source/API/SBAttachInfo.cpp' l='138' ll='144' type='void lldb::SBAttachInfo::SetWaitForLaunch(bool b, bool async)'/>
<use f='llvm/lldb/source/API/SBAttachInfo.cpp' l='139' u='a' c='_ZN4lldb12SBAttachInfo16SetWaitForLaunchEbb'/>
<use f='llvm/lldb/source/API/SBAttachInfo.cpp' l='139' u='a' c='_ZN4lldb12SBAttachInfo16SetWaitForLaunchEbb'/>
<use f='llvm/lldb/source/API/SBAttachInfo.cpp' l='285' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='531' u='c' c='_ZN12_GLOBAL__N_114request_attachERKN4llvm4json6ObjectE'/>
