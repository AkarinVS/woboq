<dec f='llvm/lldb/include/lldb/Target/Thread.h' l='682' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOverRange(bool abort_other_plans, const lldb_private::AddressRange &amp; range, const lldb_private::SymbolContext &amp; addr_context, lldb::RunMode stop_other_threads, lldb_private::Status &amp; status, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='644'>/// Queues the plan used to step through an address range, stepping  over
  /// function calls.
  ///
  /// \param[in] abort_other_plans
  ///    \b true if we discard the currently queued plans and replace them with
  ///    this one.
  ///    Otherwise this plan will go on the end of the plan stack.
  ///
  /// \param[in] type
  ///    Type of step to do, only eStepTypeInto and eStepTypeOver are supported
  ///    by this plan.
  ///
  /// \param[in] range
  ///    The address range to step through.
  ///
  /// \param[in] addr_context
  ///    When dealing with stepping through inlined functions the current PC is
  ///    not enough information to know
  ///    what &quot;step&quot; means.  For instance a series of nested inline functions
  ///    might start at the same address.
  //     The \a addr_context provides the current symbol context the step
  ///    is supposed to be out of.
  //   FIXME: Currently unused.
  ///
  /// \param[in] stop_other_threads
  ///    \b true if we will stop other threads while we single step this one.
  ///
  /// \param[out] status
  ///     A status with an error if queuing failed.
  ///
  /// \param[in] step_out_avoids_code_without_debug_info
  ///    If eLazyBoolYes, if the step over steps out it will continue to step
  ///    out till it comes to a frame with debug info.
  ///    If eLazyBoolCalculate, we will consult the default set in the thread.
  ///
  /// \return
  ///     A shared pointer to the newly queued thread plan, or nullptr if the
  ///     plan could not be queued.</doc>
<use f='llvm/lldb/source/API/SBThreadPlan.cpp' l='254' u='c' c='_ZN4lldb12SBThreadPlan31QueueThreadPlanForStepOverRangeERNS_9SBAddressEmRNS_7SBErrorE'/>
<def f='llvm/lldb/source/Target/Thread.cpp' l='1259' ll='1270' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOverRange(bool abort_other_plans, const lldb_private::AddressRange &amp; range, const lldb_private::SymbolContext &amp; addr_context, lldb::RunMode stop_other_threads, lldb_private::Status &amp; status, lldb_private::LazyBool step_out_avoids_code_withoug_debug_info = eLazyBoolCalculate)'/>
<use f='llvm/lldb/source/Target/Thread.cpp' l='1281' u='c' c='_ZN12lldb_private6Thread31QueueThreadPlanForStepOverRangeEbRKNS_9LineEntryERKNS_13SymbolContextEN4lldb7RunModeERNS_6StatusENS_8LazyBoolE'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepOverRange.cpp' l='293' u='c' c='_ZN12lldb_private23ThreadPlanStepOverRange10ShouldStopEPNS_5EventE'/>
