<def f='llvm/llvm/include/llvm/Analysis/ScopedNoAliasAA.h' l='36' ll='39' type='bool llvm::ScopedNoAliasAAResult::invalidate(llvm::Function &amp; , const llvm::PreservedAnalyses &amp; , FunctionAnalysisManager::Invalidator &amp; )'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScopedNoAliasAA.h' l='33'>/// Handle invalidation events from the new pass manager.
  ///
  /// By definition, this result is stateless and so remains valid.</doc>
