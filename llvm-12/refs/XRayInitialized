<def f='llvm/compiler-rt/lib/xray/xray_init.cpp' l='49' type='__sanitizer::atomic_uint8_t'/>
<use f='llvm/compiler-rt/lib/xray/xray_init.cpp' l='66' u='a' c='__xray_init'/>
<use f='llvm/compiler-rt/lib/xray/xray_init.cpp' l='106' u='a' c='__xray_init'/>
<doc f='llvm/compiler-rt/lib/xray/xray_init.cpp' l='42'>// When set to &apos;true&apos; this means the XRay runtime has been initialised. We use
// the weak symbols defined above (__start_xray_inst_map and
// __stop_xray_instr_map) to initialise the instrumentation map that XRay uses
// for runtime patching/unpatching of instrumentation points.
//
// FIXME: Support DSO instrumentation maps too. The current solution only works
// for statically linked executables.</doc>
<dec f='llvm/compiler-rt/lib/xray/xray_interface.cpp' l='38' type='__sanitizer::atomic_uint8_t'/>
<use f='llvm/compiler-rt/lib/xray/xray_interface.cpp' l='207' u='a' c='__xray::(anonymousnamespace)::patchFunction'/>
<use f='llvm/compiler-rt/lib/xray/xray_interface.cpp' l='258' u='a' c='__xray::(anonymousnamespace)::controlPatching'/>
<use f='llvm/compiler-rt/lib/xray/xray_interface.cpp' l='403' u='a' c='__xray_set_handler'/>
<use f='llvm/compiler-rt/lib/xray/xray_interface.cpp' l='416' u='a' c='__xray_set_customevent_handler'/>
<use f='llvm/compiler-rt/lib/xray/xray_interface.cpp' l='428' u='a' c='__xray_set_typedevent_handler'/>
<use f='llvm/compiler-rt/lib/xray/xray_interface.cpp' l='479' u='a' c='__xray_set_handler_arg1'/>
