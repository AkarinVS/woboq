<dec f='llvm/polly/include/polly/ScopBuilder.h' l='488' type='void polly::ScopBuilder::buildEscapingDependences(llvm::Instruction * Inst)'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1302' ll='1308' type='void polly::ScopBuilder::buildEscapingDependences(llvm::Instruction * Inst)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1928' u='c' c='_ZN5polly11ScopBuilder20buildAccessFunctionsEv'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='481'>/// Build the escaping dependences for @p Inst.
  ///
  /// Search for uses of the llvm::Value defined by @p Inst that are not
  /// within the SCoP. If there is such use, add a SCALAR WRITE such that
  /// it is available after the SCoP as escaping value.
  ///
  /// @param Inst The instruction to be analyzed.</doc>
