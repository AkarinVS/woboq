<dec f='llvm/lldb/include/lldb/Core/Module.h' l='842' type='bool lldb_private::Module::FindSourceFile(const lldb_private::FileSpec &amp; orig_spec, lldb_private::FileSpec &amp; new_spec) const'/>
<doc f='llvm/lldb/include/lldb/Core/Module.h' l='824'>/// Finds a source file given a file spec using the module source path
  /// remappings (if any).
  ///
  /// Tries to resolve \a orig_spec by checking the module source path
  /// remappings. It makes sure the file exists, so this call can be expensive
  /// if the remappings are on a network file system, so use this function
  /// sparingly (not in a tight debug info parsing loop).
  ///
  /// \param[in] orig_spec
  ///     The original source file path to try and remap.
  ///
  /// \param[out] new_spec
  ///     The newly remapped filespec that is guaranteed to exist.
  ///
  /// \return
  ///     /b true if \a orig_spec was successfully located and
  ///     \a new_spec is filled in with an existing file spec,
  ///     \b false otherwise.</doc>
<def f='llvm/lldb/source/Core/Module.cpp' l='1595' ll='1599' type='bool lldb_private::Module::FindSourceFile(const lldb_private::FileSpec &amp; orig_spec, lldb_private::FileSpec &amp; new_spec) const'/>
<use f='llvm/lldb/source/Core/ModuleList.cpp' l='565' u='c' c='_ZNK12lldb_private10ModuleList14FindSourceFileERKNS_8FileSpecERS1_'/>
