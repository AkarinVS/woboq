<def f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl.h' l='269' ll='271' type='void __tsan::Shadow::MarkAsFreed()'/>
<doc f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl.h' l='260'>// The idea behind the freed bit is as follows.
  // When the memory is freed (or otherwise unaccessible) we write to the shadow
  // values with tid/epoch related to the free and the freed bit set.
  // During memory accesses processing the freed bit is considered
  // as msb of tid. So any access races with shadow with freed bit set
  // (it is as if write from a thread with which we never synchronized before).
  // This allows us to detect accesses to freed memory w/o additional
  // overheads in memory access processing and at the same time restore
  // tid/epoch of free.</doc>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl.cpp' l='995' u='c' c='__tsan::MemoryRangeFreed'/>
