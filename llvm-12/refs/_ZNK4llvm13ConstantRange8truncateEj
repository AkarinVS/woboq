<dec f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='329' type='llvm::ConstantRange llvm::ConstantRange::truncate(uint32_t BitWidth) const'/>
<doc f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='325'>/// Return a new range in the specified integer type, which must be
  /// strictly smaller than the current type.  The returned range will
  /// correspond to the possible range of values if the source range had been
  /// truncated to the specified type.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='1576' u='c' c='_ZN4llvm15ScalarEvolution17getZeroExtendExprEPKNS_4SCEVEPNS_4TypeEj'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='1883' u='c' c='_ZN4llvm15ScalarEvolution17getSignExtendExprEPKNS_4SCEVEPNS_4TypeEj'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='5753' u='c' c='_ZN4llvm15ScalarEvolution11getRangeRefEPKNS_4SCEVENS0_13RangeSignHintE'/>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='648' u='c' c='_ZNK4llvm13ConstantRange6castOpENS_11Instruction7CastOpsEj'/>
<def f='llvm/llvm/lib/IR/ConstantRange.cpp' l='720' ll='772' type='llvm::ConstantRange llvm::ConstantRange::truncate(uint32_t DstTySize) const'/>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='777' u='c' c='_ZNK4llvm13ConstantRange11zextOrTruncEj'/>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='786' u='c' c='_ZNK4llvm13ConstantRange11sextOrTruncEj'/>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1023' u='c' c='_ZNK4llvm13ConstantRange8multiplyERKS0_'/>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1048' u='c' c='_ZNK4llvm13ConstantRange8multiplyERKS0_'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='352' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='353' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='354' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='355' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='356' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='366' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='366' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='370' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='374' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='374' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='378' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='378' u='c' c='_ZN12_GLOBAL__N_128ConstantRangeTest_Trunc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='691' u='c' c='_ZN12_GLOBAL__N_156ConstantRangeTest_losslessUnsignedTruncationZeroext_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='717' u='c' c='_ZN12_GLOBAL__N_154ConstantRangeTest_losslessSignedTruncationSignext_Test8TestBodyEv'/>
