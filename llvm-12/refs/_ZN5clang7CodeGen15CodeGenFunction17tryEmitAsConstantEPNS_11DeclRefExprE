<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='3845' type='clang::CodeGen::CodeGenFunction::ConstantEmission clang::CodeGen::CodeGenFunction::tryEmitAsConstant(clang::DeclRefExpr * refExpr)'/>
<def f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='1483' ll='1567' type='CodeGenFunction::ConstantEmission clang::CodeGen::CodeGenFunction::tryEmitAsConstant(clang::DeclRefExpr * refExpr)'/>
<use f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='1584' u='c' c='_ZN5clang7CodeGen15CodeGenFunction17tryEmitAsConstantEPKNS_10MemberExprE'/>
<doc f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='1477'>/// Try to emit a reference to the given value without producing it as
/// an l-value.  This is just an optimization, but it avoids us needing
/// to emit global copies of variables if they&apos;re named without triggering
/// a formal use in a context where we can&apos;t emit a direct reference to them,
/// for instance if a block or lambda or a member of a local class uses a
/// const int variable or constexpr variable from an enclosing function.</doc>
<use f='llvm/clang/lib/CodeGen/CGExprComplex.cpp' l='144' u='c' c='_ZN12_GLOBAL__N_118ComplexExprEmitter16VisitDeclRefExprEPN5clang11DeclRefExprE'/>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='497' u='c' c='_ZN12_GLOBAL__N_117ScalarExprEmitter16VisitDeclRefExprEPN5clang11DeclRefExprE'/>
<use f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='2884' u='c' c='_ZL28tryEmitARCRetainLoadOfScalarRN5clang7CodeGen15CodeGenFunctionEPKNS_4ExprE'/>
<use f='llvm/clang/lib/CodeGen/CGStmtOpenMP.cpp' l='824' u='c' c='_ZN5clang7CodeGen15CodeGenFunction25EmitOMPFirstprivateClauseERKNS_22OMPExecutableDirectiveERNS1_15OMPPrivateScopeE'/>
