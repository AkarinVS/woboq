<dec f='llvm/lldb/include/lldb/Host/common/NativeRegisterContext.h' l='102' type='lldb::addr_t lldb_private::NativeRegisterContext::GetWatchpointHitAddress(uint32_t wp_index)'/>
<doc f='llvm/lldb/include/lldb/Host/common/NativeRegisterContext.h' l='93'>// MIPS Linux kernel returns a masked address (last 3bits are masked)
  // when a HW watchpoint is hit. However user may not have set a watchpoint on
  // this address. This function emulates the instruction at PC and finds the
  // base address used in the load/store instruction. This gives the exact
  // address used to read/write the variable being watched. For example: &apos;n&apos; is
  // at 0x120010d00 and &apos;m&apos; is 0x120010d04. When a watchpoint is set at &apos;m&apos;,
  // then watch exception is generated even when &apos;n&apos; is read/written. This
  // function returns address of &apos;n&apos; so that client can check whether a
  // watchpoint is set on this address or not.</doc>
<def f='llvm/lldb/source/Host/common/NativeRegisterContext.cpp' l='298' ll='300' type='lldb::addr_t lldb_private::NativeRegisterContext::GetWatchpointHitAddress(uint32_t wp_index)'/>
<use f='llvm/lldb/source/Plugins/Process/Linux/NativeThreadLinux.cpp' l='369' u='c' c='_ZN12lldb_private13process_linux17NativeThreadLinux22SetStoppedByWatchpointEj'/>
