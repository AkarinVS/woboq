<dec f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='191' type='IRBuilder&lt;&gt;::InsertPoint llvm::OpenMPIRBuilder::createParallel(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::OpenMPIRBuilder::InsertPointTy AllocaIP, llvm::OpenMPIRBuilder::BodyGenCallbackTy BodyGenCB, llvm::OpenMPIRBuilder::PrivatizeCallbackTy PrivCB, llvm::OpenMPIRBuilder::FinalizeCallbackTy FiniCB, llvm::Value * IfCondition, llvm::Value * NumThreads, omp::ProcBindKind ProcBind, bool IsCancellable)'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='177'>/// Generator for &apos;#omp parallel&apos;
  ///
  /// \param Loc The insert and source location description.
  /// \param AllocaIP The insertion points to be used for alloca instructions.
  /// \param BodyGenCB Callback that will generate the region code.
  /// \param PrivCB Callback to copy a given variable (think copy constructor).
  /// \param FiniCB Callback to finalize variable copies.
  /// \param IfCondition The evaluated &apos;if&apos; clause expression, if any.
  /// \param NumThreads The evaluated &apos;num_threads&apos; clause expression, if any.
  /// \param ProcBind The value of the &apos;proc_bind&apos; clause (see ProcBindKind).
  /// \param IsCancellable Flag to indicate a cancellable parallel region.
  ///
  /// \returns The insertion position *after* the parallel.</doc>
<use f='llvm/clang/lib/CodeGen/CGStmtOpenMP.cpp' l='1721' u='c' c='_ZN5clang7CodeGen15CodeGenFunction24EmitOMPParallelDirectiveERKNS_20OMPParallelDirectiveE'/>
<def f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='443' ll='804' type='IRBuilder&lt;&gt;::InsertPoint llvm::OpenMPIRBuilder::createParallel(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::OpenMPIRBuilder::InsertPointTy OuterAllocaIP, llvm::OpenMPIRBuilder::BodyGenCallbackTy BodyGenCB, llvm::OpenMPIRBuilder::PrivatizeCallbackTy PrivCB, llvm::OpenMPIRBuilder::FinalizeCallbackTy FiniCB, llvm::Value * IfCondition, llvm::Value * NumThreads, omp::ProcBindKind ProcBind, bool IsCancellable)'/>
<use f='llvm/llvm/lib/Transforms/IPO/OpenMPOpt.cpp' l='791' u='c' c='_ZN12_GLOBAL__N_19OpenMPOpt20mergeParallelRegionsEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='481' u='c' c='_ZN12_GLOBAL__N_139OpenMPIRBuilderTest_ParallelSimple_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='562' u='c' c='_ZN12_GLOBAL__N_139OpenMPIRBuilderTest_ParallelNested_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='573' u='c' c='_ZN12_GLOBAL__N_139OpenMPIRBuilderTest_ParallelNested_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='658' u='c' c='_ZN12_GLOBAL__N_145OpenMPIRBuilderTest_ParallelNested2Inner_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='665' u='c' c='_ZN12_GLOBAL__N_145OpenMPIRBuilderTest_ParallelNested2Inner_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='676' u='c' c='_ZN12_GLOBAL__N_145OpenMPIRBuilderTest_ParallelNested2Inner_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='789' u='c' c='_ZN12_GLOBAL__N_139OpenMPIRBuilderTest_ParallelIfCond_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='919' u='c' c='_ZN12_GLOBAL__N_146OpenMPIRBuilderTest_ParallelCancelBarrier_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1005' u='c' c='_ZN12_GLOBAL__N_150OpenMPIRBuilderTest_ParallelForwardAsPointers_Test8TestBodyEv'/>
