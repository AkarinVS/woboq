<dec f='llvm/polly/include/polly/ScopInfo.h' l='168' type='2'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='268' u='r' c='_ZNK5polly13ScopArrayInfo21getNumberOfDimensionsEv'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='324' u='r' c='_ZNK5polly13ScopArrayInfo9isPHIKindEv'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='990' u='r' c='_ZNK5polly12MemoryAccess17isOriginalPHIKindEv'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='995' u='r' c='_ZNK5polly12MemoryAccess15isLatestPHIKindEv'/>
<doc f='llvm/polly/include/polly/ScopInfo.h' l='133'>/// MemoryKind::PHI: Models PHI nodes within the SCoP
  ///
  /// Besides the MemoryKind::Value memory object used to model the normal
  /// llvm::Value dependences described above, PHI nodes require an additional
  /// memory object of type MemoryKind::PHI to describe the forwarding of values
  /// to
  /// the PHI node.
  ///
  /// As an example, a PHIInst instructions
  ///
  /// %PHI = phi float [ %Val1, %IncomingBlock1 ], [ %Val2, %IncomingBlock2 ]
  ///
  /// is modeled as if the accesses occurred this way:
  ///
  ///                    _______________________________
  ///                    |entry:                       |
  ///                    |  %PHI.phiops = alloca float |
  ///                    -------------------------------
  ///                           |              |
  /// __________________________________  __________________________________
  /// |IncomingBlock1:                 |  |IncomingBlock2:                 |
  /// |  ...                           |  |  ...                           |
  /// |  store float %Val1 %PHI.phiops |  |  store float %Val2 %PHI.phiops |
  /// |  br label % JoinBlock          |  |  br label %JoinBlock           |
  /// ----------------------------------  ----------------------------------
  ///                             \            /
  ///                              \          /
  ///               _________________________________________
  ///               |JoinBlock:                             |
  ///               |  %PHI = load float, float* PHI.phiops |
  ///               -----------------------------------------
  ///
  /// Note that there can also be a scalar write access for %PHI if used in a
  /// different BasicBlock, i.e. there can be a memory object %PHI.phiops as
  /// well as a memory object %PHI.s2a.</doc>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2294' u='r' c='_ZN5polly11ScopBuilder15addMemoryAccessEPNS_8ScopStmtEPN4llvm11InstructionENS_12MemoryAccess10AccessTypeEPNS3_5ValueEPNS3_4TypeEbS9_NS3_8ArrayRefIPKNS8876880'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2629' u='r' c='_ZN5polly11ScopBuilder14ensurePHIWriteEPN4llvm7PHINodeEPNS_8ScopStmtEPNS1_10BasicBlockEPNS1_5ValueEb'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2637' u='r' c='_ZN5polly11ScopBuilder16addPHIReadAccessEPNS_8ScopStmtEPN4llvm7PHINodeE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3224' u='r' c='_ZN5polly11ScopBuilder20buildAccessRelationsERNS_8ScopStmtE'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='236' u='r' c='_ZN5polly13ScopArrayInfoC1EPN4llvm5ValueEPNS1_4TypeEN3isl12noexceptions3ctxENS1_8ArrayRefIPKNS1_4SCEVEEENS_10MemoryKindERKNS1_10DataLayoutEPNS_4ScopEPKc'/>
<use f='llvm/polly/lib/Support/VirtualInstruction.cpp' l='40' u='r' c='_ZN5polly10VirtualUse6createEPNS_4ScopERKN4llvm3UseEPNS3_8LoopInfoEb'/>
