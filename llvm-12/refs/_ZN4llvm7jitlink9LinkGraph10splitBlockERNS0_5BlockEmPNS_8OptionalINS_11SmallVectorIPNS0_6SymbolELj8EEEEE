<dec f='llvm/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h' l='878' type='llvm::jitlink::Block &amp; llvm::jitlink::LinkGraph::splitBlock(llvm::jitlink::Block &amp; B, size_t SplitIndex, llvm::jitlink::LinkGraph::SplitBlockCache * Cache = nullptr)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h' l='854'>/// Splits block B at the given index which must be greater than zero.
  /// If SplitIndex == B.getSize() then this function is a no-op and returns B.
  /// If SplitIndex &lt; B.getSize() then this function returns a new block
  /// covering the range [ 0, SplitIndex ), and B is modified to cover the range
  /// [ SplitIndex, B.size() ).
  ///
  /// The optional Cache parameter can be used to speed up repeated calls to
  /// splitBlock for a single block. If the value is None the cache will be
  /// treated as uninitialized and splitBlock will populate it. Otherwise it
  /// is assumed to contain the list of Symbols pointing at B, sorted in
  /// descending order of offset.
  ///
  /// Notes:
  ///
  /// 1. The newly introduced block will have a new ordinal which will be
  ///    higher than any other ordinals in the section. Clients are responsible
  ///    for re-assigning block ordinals to restore a compatible order if
  ///    needed.
  ///
  /// 2. The cache is not automatically updated if new symbols are introduced
  ///    between calls to splitBlock. Any newly introduced symbols may be
  ///    added to the cache manually (descending offset order must be
  ///    preserved), or the cache can be set to None and rebuilt by
  ///    splitBlock on the next call.</doc>
<use f='llvm/llvm/lib/ExecutionEngine/JITLink/EHFrameSupport.cpp' l='115' u='c' c='_ZN4llvm7jitlink15EHFrameSplitter12processBlockERNS0_9LinkGraphERNS0_5BlockERNS_8OptionalINS_11SmallVectorIPNS0_6SymbolELj8EEEEE'/>
<def f='llvm/llvm/lib/ExecutionEngine/JITLink/JITLink.cpp' l='179' ll='252' type='llvm::jitlink::Block &amp; llvm::jitlink::LinkGraph::splitBlock(llvm::jitlink::Block &amp; B, size_t SplitIndex, llvm::jitlink::LinkGraph::SplitBlockCache * Cache = nullptr)'/>
<use f='llvm/llvm/unittests/ExecutionEngine/JITLink/LinkGraphTests.cpp' l='129' u='c' c='_ZN29LinkGraphTest_SplitBlock_Test8TestBodyEv'/>
