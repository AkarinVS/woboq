<dec f='llvm/clang/include/clang/Sema/Sema.h' l='8456' type='clang::FunctionTemplateDecl * clang::Sema::getMoreSpecializedTemplate(clang::FunctionTemplateDecl * FT1, clang::FunctionTemplateDecl * FT2, clang::SourceLocation Loc, clang::TemplatePartialOrderingContext TPOC, unsigned int NumCallArguments1, unsigned int NumCallArguments2, bool Reversed = false)'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='9762' u='c' c='_ZN5clang25isBetterOverloadCandidateERNS_4SemaERKNS_17OverloadCandidateES4_NS_14SourceLocationENS_20OverloadCandidateSet16CandidateSetKindE'/>
<def f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='5263' ll='5306' type='clang::FunctionTemplateDecl * clang::Sema::getMoreSpecializedTemplate(clang::FunctionTemplateDecl * FT1, clang::FunctionTemplateDecl * FT2, clang::SourceLocation Loc, clang::TemplatePartialOrderingContext TPOC, unsigned int NumCallArguments1, unsigned int NumCallArguments2, bool Reversed = false)'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='5371' u='c' c='_ZN5clang4Sema18getMostSpecializedENS_21UnresolvedSetIteratorES1_RNS_24TemplateSpecCandidateSetENS_14SourceLocationERKNS_17PartialDiagnosticES7_S7_bNS_8QualTypeE'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='5386' u='c' c='_ZN5clang4Sema18getMostSpecializedENS_21UnresolvedSetIteratorES1_RNS_24TemplateSpecCandidateSetENS_14SourceLocationERKNS_17PartialDiagnosticES7_S7_bNS_8QualTypeE'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='5241'>/// Returns the more specialized function template according
/// to the rules of function template partial ordering (C++ [temp.func.order]).
///
/// \param FT1 the first function template
///
/// \param FT2 the second function template
///
/// \param TPOC the context in which we are performing partial ordering of
/// function templates.
///
/// \param NumCallArguments1 The number of arguments in the call to FT1, used
/// only when \c TPOC is \c TPOC_Call.
///
/// \param NumCallArguments2 The number of arguments in the call to FT2, used
/// only when \c TPOC is \c TPOC_Call.
///
/// \param Reversed If \c true, exactly one of FT1 and FT2 is an overload
/// candidate with a reversed parameter order. In this case, the corresponding
/// P/A pairs between FT1 and FT2 are reversed.
///
/// \returns the more specialized function template. If neither
/// template is more specialized, returns NULL.</doc>
