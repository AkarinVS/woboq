<dec f='llvm/polly/lib/External/isl/isl_tab.h' l='330' type='int isl_tab_insert_div(struct isl_tab * tab, int pos, isl_vec * div, isl_stat (*)(void *, isl_int *) add_ineq, void * user)'/>
<def f='llvm/polly/lib/External/isl/isl_tab.c' l='2321' ll='2367' type='int isl_tab_insert_div(struct isl_tab * tab, int pos, isl_vec * div, isl_stat (*)(void *, isl_int *) add_ineq, void * user)'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='2376' u='c' c='isl_tab_add_div'/>
<doc f='llvm/polly/lib/External/isl/isl_tab.c' l='2310'>/* Insert an extra div, prescribed by &quot;div&quot;, to the tableau and
 * the associated bmap (which is assumed to be non-NULL).
 * The extra integer division is inserted at (tableau) position &quot;pos&quot;.
 * Return &quot;pos&quot; or -1 if an error occurred.
 *
 * If add_ineq is not NULL, then this function is used instead
 * of isl_tab_add_ineq to add the div constraints.
 * This complication is needed because the code in isl_tab_pip
 * wants to perform some extra processing when an inequality
 * is added to the tableau.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_tab_pip.c' l='2054' u='c' c='context_tab_insert_div'/>
