<dec f='llvm/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h' l='449' type='llvm::MemDepResult llvm::MemoryDependenceResults::getPointerDependencyFrom(const llvm::MemoryLocation &amp; Loc, bool isLoad, BasicBlock::iterator ScanIt, llvm::BasicBlock * BB, llvm::Instruction * QueryInst = nullptr, unsigned int * Limit = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h' l='436'>/// Returns the instruction on which a memory location depends.
  ///
  /// If isLoad is true, this routine ignores may-aliases with read-only
  /// operations.  If isLoad is false, this routine ignores may-aliases
  /// with reads from read-only locations. If possible, pass the query
  /// instruction as well; this function may take advantage of the metadata
  /// annotated to the query instruction to refine the result. \p Limit
  /// can be used to set the maximum number of instructions that will be
  /// examined to find the pointer dependency. On return, it will be set to
  /// the number of instructions left to examine. If a null pointer is passed
  /// in, the limit will default to the value of -memdep-block-scan-limit.
  ///
  /// Note that this is an uncached query, and thus may be inefficient.</doc>
<def f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='256' ll='281' type='llvm::MemDepResult llvm::MemoryDependenceResults::getPointerDependencyFrom(const llvm::MemoryLocation &amp; MemLoc, bool isLoad, BasicBlock::iterator ScanIt, llvm::BasicBlock * BB, llvm::Instruction * QueryInst = nullptr, unsigned int * Limit = nullptr)'/>
<use f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='689' u='c' c='_ZN4llvm23MemoryDependenceResults13getDependencyEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='962' u='c' c='_ZN4llvm23MemoryDependenceResults23GetNonLocalInfoForBlockEPNS_11InstructionERKNS_14MemoryLocationEbPNS_10BasicBlockEPSt6vectorINS_16NonLocalDepEntryESaIS9_EEj'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUAnnotateUniformValues.cpp' l='108' u='c' c='_ZN12_GLOBAL__N_127AMDGPUAnnotateUniformValues21isClobberedInFunctionEPN4llvm8LoadInstE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp' l='287' u='c' c='_ZN12_GLOBAL__N_125AMDGPURewriteOutArguments13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp' l='839' u='c' c='_ZL10handleFreePN4llvm8CallInstEPNS_9AAResultsEPNS_23MemoryDependenceResultsEPNS_13DominatorTreeEPKNS_17TargetLibraryInfoERNS_8DenseMapIPNS_11Instruct15235578'/>
<use f='llvm/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp' l='869' u='c' c='_ZL10handleFreePN4llvm8CallInstEPNS_9AAResultsEPNS_23MemoryDependenceResultsEPNS_13DominatorTreeEPKNS_17TargetLibraryInfoERNS_8DenseMapIPNS_11Instruct15235578'/>
<use f='llvm/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp' l='1493' u='c' c='_ZL19eliminateDeadStoresRN4llvm10BasicBlockEPNS_9AAResultsEPNS_23MemoryDependenceResultsEPNS_13DominatorTreeEPKNS_17TargetLibraryInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1076' u='c' c='_ZN4llvm13MemCpyOptPass29processMemCpyMemCpyDependenceEPNS_10MemCpyInstES2_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1160' u='c' c='_ZN4llvm13MemCpyOptPass29processMemSetMemCpyDependenceEPNS_10MemCpyInstEPNS_10MemSetInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1299' u='c' c='_ZN4llvm13MemCpyOptPass26performMemCpyToMemSetOptznEPNS_10MemCpyInstEPNS_10MemSetInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1474' u='c' c='_ZN4llvm13MemCpyOptPass13processMemCpyEPNS_10MemCpyInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1549' u='c' c='_ZN4llvm13MemCpyOptPass20processByValArgumentERNS_8CallBaseEj'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1599' u='c' c='_ZN4llvm13MemCpyOptPass20processByValArgumentERNS_8CallBaseEj'/>
