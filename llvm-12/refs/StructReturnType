<def f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='3136' ll='3140'/>
<use f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='3141' c='_ZL18callIsStructReturnN4llvm8ArrayRefINS_3ISD9OutputArgEEEb'/>
<use f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='3155' c='_ZL19argsAreStructReturnN4llvm8ArrayRefINS_3ISD8InputArgEEEb'/>
<use f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='3907' c='_ZNK4llvm17X86TargetLowering9LowerCallERNS_14TargetLowering16CallLoweringInfoERNS_15SmallVectorImplINS_7SDValueEEE'/>
<doc f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='3124'>//===----------------------------------------------------------------------===//
//                C &amp; StdCall &amp; Fast Calling Convention implementation
//===----------------------------------------------------------------------===//
//  StdCall calling convention seems to be standard for many Windows&apos; API
//  routines and around. It differs from C calling convention just a little:
//  callee should clean up the stack, not caller. Symbols should be also
//  decorated in some fancy way :) It doesn&apos;t support any vector arguments.
//  For info on fast calling convention see Fast Calling Convention (tail call)
//  implementation LowerX86_32FastCCCallTo.

/// CallIsStructReturn - Determines whether a call uses struct return
/// semantics.</doc>
