<def f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='980' ll='982' type='llvm::CmpInst::Predicate llvm::CmpInst::getFlippedSignednessPredicate()'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='977'>/// For example, SLT-&gt;ULT, ULT-&gt;SLT, SLE-&gt;ULE, ULE-&gt;SLE, EQ-&gt;Failed assert
  /// @returns the unsigned version of the signed predicate pred or
  ///          the signed version of the signed predicate pred.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='1578' u='c' c='_ZN4llvm16InstCombinerImpl19foldICmpXorConstantERNS_8ICmpInstEPNS_14BinaryOperatorERKNS_5APIntE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='1584' u='c' c='_ZN4llvm16InstCombinerImpl19foldICmpXorConstantERNS_8ICmpInstEPNS_14BinaryOperatorERKNS_5APIntE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='4027' u='c' c='_ZN4llvm16InstCombinerImpl13foldICmpBinOpERNS_8ICmpInstERKNS_13SimplifyQueryE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='4033' u='c' c='_ZN4llvm16InstCombinerImpl13foldICmpBinOpERNS_8ICmpInstERKNS_13SimplifyQueryE'/>
