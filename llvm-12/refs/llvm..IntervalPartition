<inh f='llvm/llvm/include/llvm/Pass.h' l='298' c='llvm::FunctionPass'/>
<def f='llvm/llvm/include/llvm/Analysis/IntervalPartition.h' l='42' ll='104'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalPartition.h' l='61' c='_ZN4llvm17IntervalPartitionC1ERS0_b'/>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='234' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<size>112</size>
<doc f='llvm/llvm/include/llvm/Analysis/IntervalPartition.h' l='34'>//===----------------------------------------------------------------------===//
//
// IntervalPartition - This class builds and holds an &quot;interval partition&quot; for
// a function.  This partition divides the control flow graph into a set of
// maximal intervals, as defined with the properties above.  Intuitively, an
// interval is a (possibly nonexistent) loop with a &quot;tail&quot; of non-looping
// nodes following it.
//</doc>
<mbr r='llvm::IntervalPartition::IntervalMap' o='256' t='llvm::IntervalPartition::IntervalMapTy'/>
<mbr r='llvm::IntervalPartition::RootInterval' o='640' t='llvm::Interval *'/>
<mbr r='llvm::IntervalPartition::Intervals' o='704' t='std::vector&lt;Interval *&gt;'/>
<smbr r='llvm::IntervalPartition::ID' t='char'/>
<fun r='_ZN4llvm17IntervalPartitionC1Ev'/>
<fun r='_ZN4llvm17IntervalPartition13runOnFunctionERNS_8FunctionE'/>
<fun r='_ZN4llvm17IntervalPartitionC1ERS0_b'/>
<fun r='_ZNK4llvm17IntervalPartition5printERNS_11raw_ostreamEPKNS_6ModuleE'/>
<fun r='_ZN4llvm17IntervalPartition15getRootIntervalEv'/>
<fun r='_ZN4llvm17IntervalPartition21isDegeneratePartitionEv'/>
<fun r='_ZN4llvm17IntervalPartition16getBlockIntervalEPNS_10BasicBlockE'/>
<fun r='_ZNK4llvm17IntervalPartition16getAnalysisUsageERNS_13AnalysisUsageE'/>
<fun r='_ZNK4llvm17IntervalPartition12getIntervalsEv'/>
<fun r='_ZN4llvm17IntervalPartition13releaseMemoryEv'/>
<fun r='_ZN4llvm17IntervalPartition22addIntervalToPartitionEPNS_8IntervalE'/>
<fun r='_ZN4llvm17IntervalPartition18updatePredecessorsEPNS_8IntervalE'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='64' c='_ZN4llvm18getSourceGraphNodeEPNS_17IntervalPartitionEPNS_10BasicBlockE'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='114' c='_ZN4llvm16IntervalIteratorC1ERNS_17IntervalPartitionEb'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='244'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='255' c='_ZN4llvm15intervals_beginERNS_17IntervalPartitionEb'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='259' c='_ZN4llvm13intervals_endERNS_17IntervalPartitionE'/>
<use f='llvm/llvm/lib/Analysis/IntervalPartition.cpp' l='30' c='_ZL35initializeIntervalPartitionPassOnceRN4llvm12PassRegistryE'/>
<use f='llvm/llvm/lib/Analysis/IntervalPartition.cpp' l='98' c='_ZN4llvm17IntervalPartitionC1ERS0_b'/>
<size>112</size>
<smbr r='llvm::IntervalPartition::ID' t='char'/>
<fun r='_ZN4llvm17IntervalPartitionC1Ev'/>
<fun r='_ZN4llvm17IntervalPartition13releaseMemoryEv'/>
<fun r='_ZNK4llvm17IntervalPartition5printERNS_11raw_ostreamEPKNS_6ModuleE'/>
<fun r='_ZN4llvm17IntervalPartition22addIntervalToPartitionEPNS_8IntervalE'/>
<fun r='_ZN4llvm17IntervalPartition18updatePredecessorsEPNS_8IntervalE'/>
<fun r='_ZN4llvm17IntervalPartition13runOnFunctionERNS_8FunctionE'/>
<fun r='_ZN4llvm17IntervalPartitionC1ERS0_b'/>
