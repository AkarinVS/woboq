<dec f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='1180' type='int llvm::TargetTransformInfo::getArithmeticReductionCost(unsigned int Opcode, llvm::VectorType * Ty, bool IsPairwiseForm, TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='1167'>/// Calculate the cost of performing a vector reduction.
  ///
  /// This is the cost of reducing the vector value of type \p Ty to a scalar
  /// value using the operation denoted by \p Opcode. The form of the reduction
  /// can either be a pairwise reduction or a reduction that splits the vector
  /// at every reduction level.
  ///
  /// Pairwise:
  ///  (v0, v1, v2, v3)
  ///  ((v0+v1), (v2+v3), undef, undef)
  /// Split:
  ///  (v0, v1, v2, v3)
  ///  ((v0+v2), (v1+v3), undef, undef)</doc>
<def f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='931' ll='939' type='int llvm::TargetTransformInfo::getArithmeticReductionCost(unsigned int Opcode, llvm::VectorType * Ty, bool IsPairwiseForm, TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput) const'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6872' u='c' c='_ZN4llvm26LoopVectorizationCostModel23getReductionPatternCostEPNS_11InstructionENS_12ElementCountEPNS_4TypeENS_19TargetTransformInfo14TargetCostKindE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='7025' u='c' c='_ZN12_GLOBAL__N_119HorizontalReduction16getReductionCostEPN4llvm19TargetTransformInfoEPNS1_5ValueEj'/>
