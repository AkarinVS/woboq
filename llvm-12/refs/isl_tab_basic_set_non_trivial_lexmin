<dec f='llvm/polly/lib/External/isl/isl_tab.h' l='273' type='isl_vec * isl_tab_basic_set_non_trivial_lexmin(isl_basic_map * bset, int n_op, int n_region, struct isl_trivial_region * region, int (*)(int, void *) conflict, void * user)'/>
<use f='llvm/polly/lib/External/isl/isl_scheduler.c' l='3128' u='c' c='solve_lp'/>
<def f='llvm/polly/lib/External/isl/isl_tab_pip.c' l='5494' ll='5547' type='isl_vec * isl_tab_basic_set_non_trivial_lexmin(isl_basic_map * bset, int n_op, int n_region, struct isl_trivial_region * region, int (*)(int, void *) conflict, void * user)'/>
<doc f='llvm/polly/lib/External/isl/isl_tab_pip.c' l='5458'>/* Return the lexicographically smallest non-trivial solution of the
 * given ILP problem.
 *
 * All variables are assumed to be non-negative.
 *
 * n_op is the number of initial coordinates to optimize.
 * That is, once a solution has been found, we will only continue looking
 * for solutions that result in significantly better values for those
 * initial coordinates.  That is, we only continue looking for solutions
 * that increase the number of initial zeros in this sequence.
 *
 * A solution is non-trivial, if it is non-trivial on each of the
 * specified regions.  Each region represents a sequence of
 * triviality directions on a sequence of variables that starts
 * at a given position.  A solution is non-trivial on such a region if
 * at least one of the triviality directions is non-zero
 * on that sequence of variables.
 *
 * Whenever a conflict is encountered, all constraints involved are
 * reported to the caller through a call to &quot;conflict&quot;.
 *
 * We perform a simple branch-and-bound backtracking search.
 * Each level in the search represents an initially trivial region
 * that is forced to be non-trivial.
 * At each level we consider 2 * n cases, where n
 * is the number of triviality directions.
 * In terms of those n directions v_i, we consider the cases
 *	v_0 &gt;= 1
 *	v_0 &lt;= -1
 *	v_0 = 0 and v_1 &gt;= 1
 *	v_0 = 0 and v_1 &lt;= -1
 *	v_0 = 0 and v_1 = 0 and v_2 &gt;= 1
 *	v_0 = 0 and v_1 = 0 and v_2 &lt;= -1
 *	...
 * in this order.
 */</doc>
