<dec f='llvm/lldb/include/lldb/Interpreter/Options.h' l='124' type='llvm::Expected&lt;Args&gt; lldb_private::Options::Parse(const lldb_private::Args &amp; args, lldb_private::ExecutionContext * execution_context, lldb::PlatformSP platform_sp, bool require_validation)'/>
<doc f='llvm/lldb/include/lldb/Interpreter/Options.h' l='108'>/// Parse the provided arguments.
  ///
  /// The parsed options are set via calls to SetOptionValue. In case of a
  /// successful parse, the function returns a copy of the input arguments
  /// with the parsed options removed. Otherwise, it returns an error.
  ///
  /// param[in] platform_sp
  ///   The platform used for option validation.  This is necessary
  ///   because an empty execution_context is not enough to get us
  ///   to a reasonable platform.  If the platform isn&apos;t given,
  ///   we&apos;ll try to get it from the execution context.  If we can&apos;t
  ///   get it from the execution context, we&apos;ll skip validation.
  ///
  /// param[in] require_validation
  ///   When true, it will fail option parsing if validation could
  ///   not occur due to not having a platform.</doc>
<use f='llvm/lldb/source/Interpreter/CommandObject.cpp' l='117' u='c' c='_ZN12lldb_private13CommandObject12ParseOptionsERNS_4ArgsERNS_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Interpreter/Options.cpp' l='1287' ll='1397' type='llvm::Expected&lt;Args&gt; lldb_private::Options::Parse(const lldb_private::Args &amp; args, lldb_private::ExecutionContext * execution_context, lldb::PlatformSP platform_sp, bool require_validation)'/>
<use f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.cpp' l='1012' u='c' c='_ZN19sddarwinlog_private22ParseAutoEnableOptionsERN12lldb_private6StatusERNS0_8DebuggerE'/>
