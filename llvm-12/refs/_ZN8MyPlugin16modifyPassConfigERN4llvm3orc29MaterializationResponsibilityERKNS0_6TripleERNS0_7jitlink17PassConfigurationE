<inh f='llvm/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h' l='68' c='_ZN4llvm3orc18ObjectLinkingLayer6Plugin16modifyPassConfigERNS0_29MaterializationResponsibilityERKNS_6TripleERNS_7jitlink17PassConfigurationE'/>
<def f='llvm/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp' l='54' ll='64' type='void MyPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &amp; MR, const llvm::Triple &amp; TT, jitlink::PassConfiguration &amp; Config)'/>
<doc f='llvm/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp' l='46'>// The modifyPassConfig callback gives us a chance to inspect the
  // MaterializationResponsibility and target triple for the object being
  // linked, then add any JITLink passes that we would like to run on the
  // link graph. A pass is just a function object that is callable as
  // Error(jitlink::LinkGraph&amp;). In this case we will add two passes
  // defined as lambdas that call the printLinkerGraph method on our
  // plugin: One to run before the linker applies fixups and another to
  // run afterwards.</doc>
