<def f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='403' ll='414' type='void llvm::MustBeExecutedContextExplorer::MustBeExecutedContextExplorer(bool ExploreInterBlock, bool ExploreCFGForward, bool ExploreCFGBackward, GetterTy&lt;const llvm::LoopInfo&gt; LIGetter = [](const llvm::Function &amp;) {
    return nullptr;
}, GetterTy&lt;const llvm::DominatorTree&gt; DTGetter = [](const llvm::Function &amp;) {
    return nullptr;
}, GetterTy&lt;const llvm::PostDominatorTree&gt; PDTGetter = [](const llvm::Function &amp;) {
    return nullptr;
})'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='752' u='c' c='_ZN4llvm16InformationCacheC1ERKNS_6ModuleERNS_14AnalysisGetterERNS_20BumpPtrAllocatorImplINS_15MallocAllocatorELm4096ELm4096ELm128EEEPNS_9SetVectorIPN13877892'/>
<doc f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='390'>/// In the description of the parameters we use PP to denote a program point
  /// for which the must be executed context is explored, or put differently,
  /// for which the MustBeExecutedIterator is created.
  ///
  /// \param ExploreInterBlock    Flag to indicate if instructions in blocks
  ///                             other than the parent of PP should be
  ///                             explored.
  /// \param ExploreCFGForward    Flag to indicate if instructions located after
  ///                             PP in the CFG, e.g., post-dominating PP,
  ///                             should be explored.
  /// \param ExploreCFGBackward   Flag to indicate if instructions located
  ///                             before PP in the CFG, e.g., dominating PP,
  ///                             should be explored.</doc>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='382' u='c' c='_ZN12_GLOBAL__N_128MustBeExecutedContextPrinter11runOnModuleERN4llvm6ModuleE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='866' u='c' c='_ZN4llvm32MustBeExecutedContextPrinterPass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
