<def f='llvm/llvm/include/llvm/Analysis/LoopCacheAnalysis.h' l='200' ll='205' type='llvm::CacheCostTy llvm::CacheCost::getLoopCost(const llvm::Loop &amp; L) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopCacheAnalysis.h' l='198'>/// Return the estimated cost of loop \p L if the given loop is part of the
  /// loop nest associated with this object. Return -1 otherwise.</doc>
