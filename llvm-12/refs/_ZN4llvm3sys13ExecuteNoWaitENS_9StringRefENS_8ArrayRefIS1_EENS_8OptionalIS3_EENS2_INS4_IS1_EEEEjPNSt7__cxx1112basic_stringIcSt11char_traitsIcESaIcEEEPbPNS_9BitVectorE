<dec f='llvm/llvm/include/llvm/Support/Program.h' l='141' type='llvm::sys::ProcessInfo llvm::sys::ExecuteNoWait(llvm::StringRef Program, ArrayRef&lt;llvm::StringRef&gt; Args, Optional&lt;ArrayRef&lt;llvm::StringRef&gt; &gt; Env, ArrayRef&lt;Optional&lt;llvm::StringRef&gt; &gt; Redirects = {}, unsigned int MemoryLimit = 0, std::string * ErrMsg = nullptr, bool * ExecutionFailed = nullptr, llvm::BitVector * AffinityMask = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Support/Program.h' l='136'>/// Similar to ExecuteAndWait, but returns immediately.
  /// @returns The \see ProcessInfo of the newly launched process.
  /// \note On Microsoft Windows systems, users will need to either call
  /// \see Wait until the process finished execution or win32 CloseHandle() API
  /// on ProcessInfo.ProcessHandle to avoid memory leaks.</doc>
<use f='llvm/llvm/lib/Support/GraphWriter.cpp' l='129' u='c' c='_ZL15ExecGraphViewerN4llvm9StringRefERSt6vectorIS0_SaIS0_EES0_bRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<def f='llvm/llvm/lib/Support/Program.cpp' l='57' ll='72' type='llvm::sys::ProcessInfo llvm::sys::ExecuteNoWait(llvm::StringRef Program, ArrayRef&lt;llvm::StringRef&gt; Args, Optional&lt;ArrayRef&lt;llvm::StringRef&gt; &gt; Env, ArrayRef&lt;Optional&lt;llvm::StringRef&gt; &gt; Redirects = {}, unsigned int MemoryLimit = 0, std::string * ErrMsg = nullptr, bool * ExecutionFailed = nullptr, llvm::BitVector * AffinityMask = nullptr)'/>
<use f='llvm/llvm/unittests/Support/ProgramTest.cpp' l='211' u='c' c='_ZN12_GLOBAL__N_137ProgramEnvTest_TestExecuteNoWait_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/ProgramTest.cpp' l='230' u='c' c='_ZN12_GLOBAL__N_137ProgramEnvTest_TestExecuteNoWait_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/ProgramTest.cpp' l='290' u='c' c='_ZN12_GLOBAL__N_136ProgramTest_TestExecuteNegative_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/ProgramTest.cpp' l='401' u='c' c='_ZN12_GLOBAL__N_132ProgramEnvTest_TestLockFile_Test8TestBodyEv'/>
