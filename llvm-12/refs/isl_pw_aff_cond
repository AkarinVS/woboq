<dec f='llvm/polly/lib/External/isl/include/isl/aff.h' l='348' type='isl_pw_aff * isl_pw_aff_cond(isl_pw_aff * cond, isl_pw_aff * pwaff_true, isl_pw_aff * pwaff_false)'/>
<use f='llvm/polly/lib/External/isl/include/isl/isl-noexceptions.h' l='11503' u='c' c='_ZNK3isl12noexceptions6pw_aff4condES1_S1_'/>
<def f='llvm/polly/lib/External/isl/isl_aff.c' l='3331' ll='3372' type='isl_pw_aff * isl_pw_aff_cond(isl_pw_aff * cond, isl_pw_aff * pwaff_true, isl_pw_aff * pwaff_false)'/>
<use f='llvm/polly/lib/External/isl/isl_aff.c' l='3575' u='c' c='isl_pw_aff_tdiv_q'/>
<doc f='llvm/polly/lib/External/isl/isl_aff.c' l='3319'>/* Return an affine expression that is equal to pwaff_true for elements
 * where &quot;cond&quot; is non-zero and to pwaff_false for elements where &quot;cond&quot;
 * is zero.
 * That is, return cond ? pwaff_true : pwaff_false;
 *
 * If &quot;cond&quot; involves and NaN, then we conservatively return a NaN
 * on its entire domain.  In principle, we could consider the pieces
 * where it is NaN separately from those where it is not.
 *
 * If &quot;pwaff_true&quot; and &quot;pwaff_false&quot; are obviously equal to each other,
 * then only use the domain of &quot;cond&quot; to restrict the domain.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_input.c' l='765' u='c' c='accept_ternary'/>
