<dec f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.h' l='207' type='__sanitizer::u32'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='120' u='w' c='__tsan::ThreadClock::ThreadClock'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='130' u='r' c='__tsan::ThreadClock::ResetCached'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='131' u='r' c='__tsan::ThreadClock::ResetCached'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='132' u='w' c='__tsan::ThreadClock::ResetCached'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='290' u='r' c='__tsan::ThreadClock::ReleaseStore'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='298' u='r' c='__tsan::ThreadClock::ReleaseStore'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='299' u='r' c='__tsan::ThreadClock::ReleaseStore'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='348' u='r' c='__tsan::ThreadClock::ReleaseStore'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.cpp' l='355' u='w' c='__tsan::ThreadClock::ReleaseStore'/>
<offset>192</offset>
<doc f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.h' l='202'>// Cached SyncClock (without dirty entries and release_store_tid_).
  // We reuse it for subsequent store-release operations without intervening
  // acquire operations. Since it is shared (and thus constant), clock value
  // for the current thread is then stored in dirty entries in the SyncClock.
  // We host a refernece to the table while it is cached here.</doc>
