<dec f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='1551' type='static void llvm::Attributor::createShallowWrapper(llvm::Function &amp; F)'/>
<doc f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='1537'>/// Create a shallow wrapper for \p F such that \p F has internal linkage
  /// afterwards. It also sets the original \p F &apos;s name to anonymous
  ///
  /// A wrapper is a function with the same type (and attributes) as \p F
  /// that will only call \p F and return the result, if any.
  ///
  /// Assuming the declaration of looks like:
  ///   rty F(aty0 arg0, ..., atyN argN);
  ///
  /// The wrapper will then look as follows:
  ///   rty wrapper(aty0 arg0, ..., atyN argN) {
  ///     return F(arg0, ..., argN);
  ///   }
  ///</doc>
<def f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='1441' ll='1486' type='static void llvm::Attributor::createShallowWrapper(llvm::Function &amp; F)'/>
<use f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='2293' u='c' c='_ZL24runAttributorOnFunctionsRN4llvm16InformationCacheERNS_9SetVectorIPNS_8FunctionESt6vectorIS4_SaIS4_EENS_8DenseSetIS4_NS_12DenseMapInfoIS4_EEEEEERN2270559'/>
