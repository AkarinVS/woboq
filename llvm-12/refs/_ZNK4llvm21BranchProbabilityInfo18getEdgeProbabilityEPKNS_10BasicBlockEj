<dec f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='153' type='llvm::BranchProbability llvm::BranchProbabilityInfo::getEdgeProbability(const llvm::BasicBlock * Src, unsigned int IndexInSuccessors) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='147'>/// Get an edge&apos;s probability, relative to other out-edges of the Src.
  ///
  /// This routine provides access to the fractional probability between zero
  /// (0%) and one (100%) of this edge executing, relative to other edges
  /// leaving the &apos;Src&apos; block. The returned probability is never zero, and can
  /// only be one if the source block has only one successor.</doc>
<def f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='1136' ll='1149' type='llvm::BranchProbability llvm::BranchProbabilityInfo::getEdgeProbability(const llvm::BasicBlock * Src, unsigned int IndexInSuccessors) const'/>
<use f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='1154' u='c' c='_ZNK4llvm21BranchProbabilityInfo18getEdgeProbabilityEPKNS_10BasicBlockENS_12SuccIteratorIKNS_11InstructionES2_EE'/>
<doc f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='1132'>/// Get the raw edge probability for the edge. If can&apos;t find it, return a
/// default probability 1/N where N is the number of successors. Here an edge is
/// specified using PredBlock and an
/// index to the successors.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='695' u='c' c='_ZN4llvm12IRTranslator15translateSwitchERKNS_4UserERNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp' l='10322' u='c' c='_ZN4llvm19SelectionDAGBuilder13lowerWorkItemENS_8SwitchCG18SwitchWorkListItemEPNS_5ValueEPNS_17MachineBasicBlockES6_'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp' l='10733' u='c' c='_ZN4llvm19SelectionDAGBuilder11visitSwitchERKNS_10SwitchInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='418' u='c' c='_ZN12_GLOBAL__N_119InductiveRangeCheck28extractRangeChecksFromBranchEPN4llvm10BranchInstEPNS1_4LoopERNS1_15ScalarEvolutionEPNS1_21BranchProbabilityInf7331769'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='1867' u='c' c='_ZN12_GLOBAL__N_130InductiveRangeCheckElimination23isProfitableToTransformERKN4llvm4LoopERNS_13LoopStructureE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopPredication.cpp' l='938' u='c' c='_ZN12_GLOBAL__N_115LoopPredication27isLoopProfitableToPredicateEv'/>
<use f='llvm/llvm/lib/Transforms/Utils/BreakCriticalEdges.cpp' l='418' u='c' c='_ZN4llvm28SplitIndirectBrCriticalEdgesERNS_8FunctionEPNS_21BranchProbabilityInfoEPNS_18BlockFrequencyInfoE'/>
<use f='llvm/llvm/unittests/Transforms/Utils/BasicBlockUtilsTest.cpp' l='411' u='c' c='_ZN48BasicBlockUtils_SplitIndirectBrCriticalEdge_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/BasicBlockUtilsTest.cpp' l='412' u='c' c='_ZN48BasicBlockUtils_SplitIndirectBrCriticalEdge_Test8TestBodyEv'/>
