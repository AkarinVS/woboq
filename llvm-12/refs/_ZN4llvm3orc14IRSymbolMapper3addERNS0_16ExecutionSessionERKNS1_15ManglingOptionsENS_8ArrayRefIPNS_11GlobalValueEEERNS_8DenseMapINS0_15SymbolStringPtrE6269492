<dec f='llvm/llvm/include/llvm/ExecutionEngine/Orc/Mangling.h' l='53' type='static void llvm::orc::IRSymbolMapper::add(llvm::orc::ExecutionSession &amp; ES, const llvm::orc::IRSymbolMapper::ManglingOptions &amp; MO, ArrayRef&lt;llvm::GlobalValue *&gt; GVs, llvm::orc::SymbolFlagsMap &amp; SymbolFlags, llvm::orc::IRSymbolMapper::SymbolNameToDefinitionMap * SymbolToDefinition = nullptr)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/Orc/Mangling.h' l='47'>/// Add mangled symbols for the given GlobalValues to SymbolFlags.
  /// If a SymbolToDefinitionMap pointer is supplied then it will be populated
  /// with Name-to-GlobalValue* mappings. Note that this mapping is not
  /// necessarily one-to-one: thread-local GlobalValues, for example, may
  /// produce more than one symbol, in which case the map will contain duplicate
  /// values.</doc>
<use f='llvm/llvm/lib/ExecutionEngine/Orc/CompileOnDemandLayer.cpp' l='322' u='c' c='_ZN4llvm3orc20CompileOnDemandLayer13emitPartitionESt10unique_ptrINS0_29MaterializationResponsibilityESt14default_deleteIS3_EENS0_16ThreadSafeModuleESt12796090'/>
<def f='llvm/llvm/lib/ExecutionEngine/Orc/Mangling.cpp' l='33' ll='83' type='static void llvm::orc::IRSymbolMapper::add(llvm::orc::ExecutionSession &amp; ES, const llvm::orc::IRSymbolMapper::ManglingOptions &amp; MO, ArrayRef&lt;llvm::GlobalValue *&gt; GVs, llvm::orc::SymbolFlagsMap &amp; SymbolFlags, llvm::orc::IRSymbolMapper::SymbolNameToDefinitionMap * SymbolToDefinition = nullptr)'/>
