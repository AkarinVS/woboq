<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1880' type='bool clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec &amp; SS, clang::ParsedType ObjectType, bool ObjectHasErrors, bool EnteringContext, bool * MayBePseudoDestructor = nullptr, bool IsTypename = false, clang::IdentifierInfo ** LastII = nullptr, bool OnlyNamespace = false, bool InUsingDeclaration = false)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='4408' u='c' c='_ZN5clang6Parser18ParseEnumSpecifierENS_14SourceLocationERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextE'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5285' u='c' c='_ZN5clang6Parser23isConstructorDeclaratorEbb'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5665' u='c' c='_ZN5clang6Parser23ParseDeclaratorInternalERNS_10DeclaratorEMS0_FvS2_E'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5893' u='c' c='_ZN5clang6Parser21ParseDirectDeclaratorERNS_10DeclaratorE'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='293' u='c' c='_ZN5clang6Parser19ParseNamespaceAliasENS_14SourceLocationES1_PNS_14IdentifierInfoERS1_'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='535' u='c' c='_ZN5clang6Parser19ParseUsingDirectiveENS_17DeclaratorContextENS_14SourceLocationERS2_RNS_16ParsedAttributesE'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='604' u='c' c='_ZN5clang6Parser20ParseUsingDeclaratorENS_17DeclaratorContextERNS0_15UsingDeclaratorE'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='1131' u='c' c='_ZN5clang6Parser22ParseBaseTypeSpecifierERNS_14SourceLocationES2_'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='1556' u='c' c='_ZN5clang6Parser19ParseClassSpecifierENS_3tok9TokenKindENS_14SourceLocationERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierEbNS0_15DeclS11386427'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='2525' u='c' c='_ZN5clang6Parser30ParseCXXClassMemberDeclarationENS_15AccessSpecifierERNS_16ParsedAttributesERKNS0_18ParsedTemplateInfoEPNS_21ParsingDeclRAIIObjectE'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='3545' u='c' c='_ZN5clang6Parser19ParseMemInitializerEPNS_4DeclE'/>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='1585' u='c' c='_ZN5clang6Parser19ParseCastExpressionENS0_13CastParseKindEbRbNS0_13TypeCastStateEbPb'/>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='2115' u='c' c='_ZN5clang6Parser28ParsePostfixExpressionSuffixENS_12ActionResultIPNS_4ExprELb1EEE'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='154' ll='555' type='bool clang::Parser::ParseOptionalCXXScopeSpecifier(clang::CXXScopeSpec &amp; SS, clang::ParsedType ObjectType, bool ObjectHadErrors, bool EnteringContext, bool * MayBePseudoDestructor = nullptr, bool IsTypename = false, clang::IdentifierInfo ** LastII = nullptr, bool OnlyNamespace = false, bool InUsingDeclaration = false)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='670' u='c' c='_ZN5clang6Parser20ParseCXXIdExpressionEb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2981' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbbbbbPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='105'>/// Parse global scope or nested-name-specifier if present.
///
/// Parses a C++ global scope specifier (&apos;::&apos;) or nested-name-specifier (which
/// may be preceded by &apos;::&apos;). Note that this routine will not parse ::new or
/// ::delete; it will just leave them in the token stream.
///
///       &apos;::&apos;[opt] nested-name-specifier
///       &apos;::&apos;
///
///       nested-name-specifier:
///         type-name &apos;::&apos;
///         namespace-name &apos;::&apos;
///         nested-name-specifier identifier &apos;::&apos;
///         nested-name-specifier &apos;template&apos;[opt] simple-template-id &apos;::&apos;
///
///
/// \param SS the scope specifier that will be set to the parsed
/// nested-name-specifier (or empty)
///
/// \param ObjectType if this nested-name-specifier is being parsed following
/// the &quot;.&quot; or &quot;-&gt;&quot; of a member access expression, this parameter provides the
/// type of the object whose members are being accessed.
///
/// \param ObjectHadErrors if this unqualified-id occurs within a member access
/// expression, indicates whether the original subexpressions had any errors.
/// When true, diagnostics for missing &apos;template&apos; keyword will be supressed.
///
/// \param EnteringContext whether we will be entering into the context of
/// the nested-name-specifier after parsing it.
///
/// \param MayBePseudoDestructor When non-NULL, points to a flag that
/// indicates whether this nested-name-specifier may be part of a
/// pseudo-destructor name. In this case, the flag will be set false
/// if we don&apos;t actually end up parsing a destructor name. Moreover,
/// if we do end up determining that we are parsing a destructor name,
/// the last component of the nested-name-specifier is not parsed as
/// part of the scope specifier.
///
/// \param IsTypename If \c true, this nested-name-specifier is known to be
/// part of a type name. This is used to improve error recovery.
///
/// \param LastII When non-NULL, points to an IdentifierInfo* that will be
/// filled in with the leading identifier in the last component of the
/// nested-name-specifier, if any.
///
/// \param OnlyNamespace If true, only considers namespaces in lookup.
///
///
/// \returns true if there was an error parsing a scope specifier</doc>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='2597' u='c' c='_ZN5clang6Parser24ParseOpenMPSimpleVarListEN4llvm3omp9DirectiveERKNS1_12function_refIFvRNS_12CXXScopeSpecENS_19DeclarationNameInfoEEEEb'/>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='3291' u='c' c='_ZN5clang6Parser19parseMapperModifierERNS0_19OpenMPVarListDataTyE'/>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='3522' u='c' c='_ZN5clang6Parser18ParseOpenMPVarListEN4llvm3omp9DirectiveENS2_6ClauseERNS1_15SmallVectorImplIPNS_4ExprEEERNS0_19OpenMPVarListDataTyE'/>
<use f='llvm/clang/lib/Parse/ParseStmtAsm.cpp' l='224' u='c' c='_ZN5clang6Parser20ParseMSAsmIdentifierERN4llvm15SmallVectorImplINS_5TokenEEERjb'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='372' u='c' c='_ZN5clang6Parser22ParseConceptDefinitionERKNS0_18ParsedTemplateInfoERNS_14SourceLocationE'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='697' u='c' c='_ZN5clang6Parser25TryAnnotateTypeConstraintEv'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='769' u='c' c='_ZN5clang6Parser18ParseTypeParameterEjj'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='1446' u='c' c='_ZN5clang6Parser29ParseTemplateTemplateArgumentEv'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1632' u='c' c='_ZN5clang6Parser15TryAnnotateNameEPNS_27CorrectionCandidateCallbackE'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1870' u='c' c='_ZN5clang6Parser27TryAnnotateTypeOrScopeTokenEv'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1941' u='c' c='_ZN5clang6Parser27TryAnnotateTypeOrScopeTokenEv'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='2072' u='c' c='_ZN5clang6Parser24TryAnnotateCXXScopeTokenEb'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='2183' u='c' c='_ZN5clang6Parser31ParseMicrosoftIfExistsConditionERNS0_17IfExistsConditionE'/>
