<dec f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='391' type='void llvm::LoopBase::replaceChildLoopWith(LoopT * OldChild, LoopT * NewChild)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='387'>/// This is used when splitting loops up. It replaces the OldChild entry in
  /// our children list with NewChild, and updates the parent pointer of
  /// OldChild to be null and the NewChild to be this loop.
  /// This updates the loop depth of the new child.</doc>
<def f='llvm/llvm/include/llvm/Analysis/LoopInfoImpl.h' l='270' ll='281' type='void llvm::LoopBase::replaceChildLoopWith(LoopT * OldChild, LoopT * NewChild)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfoImpl.h' l='266'>/// replaceChildLoopWith - This is used when splitting loops up.  It replaces
/// the OldChild entry in our children list with NewChild, and updates the
/// parent pointer of OldChild to be null and the NewChild to be this loop.
/// This updates the loop depth of the new child.</doc>
<use f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='291' u='c' c='_ZL18separateNestedLoopPN4llvm4LoopEPNS_10BasicBlockEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_15ScalarEvolutionEbPNS_15AssumptionCacheEPNS_16MemorySSAUpdaterE'/>
