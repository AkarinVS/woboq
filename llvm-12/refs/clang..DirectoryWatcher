<def f='llvm/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h' l='64' ll='120'/>
<use f='llvm/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h' l='106' c='_ZN5clang16DirectoryWatcher6createEN4llvm9StringRefESt8functionIFvNS1_8ArrayRefINS0_5EventEEEbEEb'/>
<use f='llvm/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h' l='114' c='_ZN5clang16DirectoryWatcherC1ERKS0_'/>
<use f='llvm/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h' l='115' c='_ZN5clang16DirectoryWatcheraSERKS0_'/>
<use f='llvm/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h' l='115' c='_ZN5clang16DirectoryWatcheraSERKS0_'/>
<use f='llvm/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h' l='116' c='_ZN5clang16DirectoryWatcherC1EOS0_'/>
<size>8</size>
<doc f='llvm/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h' l='20'>/// Provides notifications for file changes in a directory.
///
/// Invokes client-provided function on every filesystem event in the watched
/// directory. Initially the the watched directory is scanned and for every file
/// found, an event is synthesized as if the file was added.
///
/// This is not a general purpose directory monitoring tool - list of
/// limitations follows.
///
/// Only flat directories with no subdirectories are supported. In case
/// subdirectories are present the behavior is unspecified - events *might* be
/// passed to Receiver on macOS (due to FSEvents being used) while they
/// *probably* won&apos;t be passed on Linux (due to inotify being used).
///
/// Known potential inconsistencies
/// - For files that are deleted befor the initial scan processed them, clients
/// might receive Removed notification without any prior Added notification.
/// - Multiple notifications might be produced when a file is added to the
/// watched directory during the initial scan. We are choosing the lesser evil
/// here as the only known alternative strategy would be to invalidate the
/// watcher instance and force user to create a new one whenever filesystem
/// event occurs during the initial scan but that would introduce continuous
/// restarting failure mode (watched directory is not always &quot;owned&quot; by the same
/// process that is consuming it). Since existing clients can handle duplicate
/// events well, we decided for simplicity.
///
/// Notifications are provided only for changes done through local user-space
/// filesystem interface. Specifically, it&apos;s unspecified if notification would
/// be provided in case of a:
/// - a file mmap-ed and changed
/// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored
/// directory
/// - another filesystem mounted to the watched directory
///
/// No support for LLVM VFS.
///
/// It is unspecified whether notifications for files being deleted are sent in
/// case the whole watched directory is sent.
///
/// Directories containing &quot;too many&quot; files and/or receiving events &quot;too
/// frequently&quot; are not supported - if the initial scan can&apos;t be finished before
/// the watcher instance gets invalidated (see WatcherGotInvalidated) there&apos;s no
/// good error handling strategy - the only option for client is to destroy the
/// watcher, restart watching with new instance and hope it won&apos;t repeat.</doc>
<fun r='_ZN5clang16DirectoryWatcher6createEN4llvm9StringRefESt8functionIFvNS1_8ArrayRefINS0_5EventEEEbEEb'/>
<fun r='_ZN5clang16DirectoryWatcherD1Ev'/>
<fun r='_ZN5clang16DirectoryWatcherC1ERKS0_'/>
<fun r='_ZN5clang16DirectoryWatcheraSERKS0_'/>
<fun r='_ZN5clang16DirectoryWatcherC1EOS0_'/>
<fun r='_ZN5clang16DirectoryWatcherC1Ev'/>
<ovr f='llvm/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp' l='115' c='(anonymousnamespace)::DirectoryWatcherLinux'/>
<use f='llvm/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp' l='115'/>
<use f='llvm/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp' l='323' c='_ZN5clang16DirectoryWatcher6createEN4llvm9StringRefESt8functionIFvNS1_8ArrayRefINS0_5EventEEEbEEb'/>
<size>8</size>
<fun r='_ZN5clang16DirectoryWatcher6createEN4llvm9StringRefESt8functionIFvNS1_8ArrayRefINS0_5EventEEEbEEb'/>
<use f='llvm/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp' l='280' c='_ZN41DirectoryWatcherTest_InitialScanSync_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp' l='313' c='_ZN42DirectoryWatcherTest_InitialScanAsync_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp' l='335' c='_ZN34DirectoryWatcherTest_AddFiles_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp' l='362' c='_ZN36DirectoryWatcherTest_ModifyFile_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp' l='394' c='_ZN36DirectoryWatcherTest_DeleteFile_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp' l='417' c='_ZN42DirectoryWatcherTest_DeleteWatchedDir_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp' l='439' c='_ZN44DirectoryWatcherTest_InvalidatedWatcher_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp' l='475' c='_ZN49DirectoryWatcherTest_InvalidatedWatcherAsync_Test8TestBodyEv'/>
<size>8</size>
