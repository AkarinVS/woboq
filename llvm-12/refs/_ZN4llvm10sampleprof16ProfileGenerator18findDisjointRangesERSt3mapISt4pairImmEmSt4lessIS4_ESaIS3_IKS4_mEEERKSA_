<dec f='llvm/llvm/tools/llvm-profgen/ProfileGenerator.h' l='52' type='void llvm::sampleprof::ProfileGenerator::findDisjointRanges(llvm::sampleprof::RangeSample &amp; DisjointRanges, const llvm::sampleprof::RangeSample &amp; Ranges)'/>
<doc f='llvm/llvm/tools/llvm-profgen/ProfileGenerator.h' l='37'>/*
  For each region boundary point, mark if it is begin or end (or both) of
  the region. Boundary points are inclusive. Log the sample count as well
  so we can use it when we compute the sample count of each disjoint region
  later. Note that there might be multiple ranges with different sample
  count that share same begin/end point. We need to accumulate the sample
  count for the boundary point for such case, because for the example
  below,

  |&lt;--100--&gt;|
  |&lt;------200------&gt;|
  A         B       C

  sample count for disjoint region [A,B] would be 300.
  */</doc>
<def f='llvm/llvm/tools/llvm-profgen/ProfileGenerator.cpp' l='93' ll='188' type='void llvm::sampleprof::ProfileGenerator::findDisjointRanges(llvm::sampleprof::RangeSample &amp; DisjointRanges, const llvm::sampleprof::RangeSample &amp; Ranges)'/>
<use f='llvm/llvm/tools/llvm-profgen/ProfileGenerator.cpp' l='224' u='c' c='_ZN4llvm10sampleprof18CSProfileGenerator27populateFunctionBodySamplesERNS0_15FunctionSamplesERKSt3mapISt4pairImmEmSt4lessIS6_ESaIS5_IKS6_mEEEPNS0_14ProfiledBinaryE'/>
<use f='llvm/llvm/tools/llvm-profgen/ProfileGenerator.cpp' l='447' u='c' c='_ZN4llvm10sampleprof29PseudoProbeCSProfileGenerator22extractProbesFromRangeERKSt3mapISt4pairImmEmSt4lessIS4_ESaIS3_IKS4_mEEERSt13unordered_mapIPKNS0_16016945'/>
