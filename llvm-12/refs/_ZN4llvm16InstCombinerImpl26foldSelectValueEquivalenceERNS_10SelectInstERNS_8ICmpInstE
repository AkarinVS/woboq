<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='711' type='llvm::Instruction * llvm::InstCombinerImpl::foldSelectValueEquivalence(llvm::SelectInst &amp; SI, llvm::ICmpInst &amp; ICI)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='1096' ll='1188' type='llvm::Instruction * llvm::InstCombinerImpl::foldSelectValueEquivalence(llvm::SelectInst &amp; Sel, llvm::ICmpInst &amp; Cmp)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='1412' u='c' c='_ZN4llvm16InstCombinerImpl22foldSelectInstWithICmpERNS_10SelectInstEPNS_8ICmpInstE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='1080'>/// If we have a select with an equality comparison, then we know the value in
/// one of the arms of the select. See if substituting this value into an arm
/// and simplifying the result yields the same value as the other arm.
///
/// To make this transform safe, we must drop poison-generating flags
/// (nsw, etc) if we simplified to a binop because the select may be guarding
/// that poison from propagating. If the existing binop already had no
/// poison-generating flags, then this transform can be done by instsimplify.
///
/// Consider:
///   %cmp = icmp eq i32 %x, 2147483647
///   %add = add nsw i32 %x, 1
///   %sel = select i1 %cmp, i32 -2147483648, i32 %add
///
/// We can&apos;t replace %sel with %add unless we strip away the flags.
/// TODO: Wrapping flags could be preserved in some cases with better analysis.</doc>
