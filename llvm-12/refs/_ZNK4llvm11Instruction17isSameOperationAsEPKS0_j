<dec f='llvm/llvm/include/llvm/IR/Instruction.h' l='717' type='bool llvm::Instruction::isSameOperationAs(const llvm::Instruction * I, unsigned int flags = 0) const'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='709'>/// This function determines if the specified instruction executes the same
  /// operation as the current one. This means that the opcodes, type, operand
  /// types and any other factors affecting the operation must be the same. This
  /// is similar to isIdenticalTo except the operands themselves don&apos;t have to
  /// be identical.
  /// @returns true if the specified instruction is the same operation as
  /// the current one.
  /// Determine if one instruction is the same operation as another.</doc>
<use f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='92' u='c' c='_ZN4llvm12IRSimilarity7isCloseERKNS0_17IRInstructionDataES3_'/>
<def f='llvm/llvm/lib/IR/Instruction.cpp' l='500' ll='522' type='bool llvm::Instruction::isSameOperationAs(const llvm::Instruction * I, unsigned int flags = 0) const'/>
<doc f='llvm/llvm/lib/IR/Instruction.cpp' l='498'>// Keep this in sync with FunctionComparator::cmpOperations in
// lib/Transforms/IPO/MergeFunctions.cpp.</doc>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp' l='476' u='c' c='_ZNK12_GLOBAL__N_110Simplifier7Context5equalEPKN4llvm11InstructionES5_'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonVectorLoopCarriedReuse.cpp' l='325' u='c' c='_ZN12_GLOBAL__N_129HexagonVectorLoopCarriedReuse21isEquivalentOperationEPN4llvm11InstructionES3_'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='1501' u='c' c='_ZN4llvm16InstCombinerImpl23mergeStoreIntoSuccessorERNS_9StoreInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='1517' u='c' c='_ZN4llvm16InstCombinerImpl23mergeStoreIntoSuccessorERNS_9StoreInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='870' u='c' c='_ZN4llvm16InstCombinerImpl19foldPHIArgOpIntoPHIERNS_7PHINodeE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp' l='637' u='c' c='_ZN12_GLOBAL__N_110LoopReroll19SimpleLoopReduction3addEPN4llvm4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp' l='645' u='c' c='_ZN12_GLOBAL__N_110LoopReroll19SimpleLoopReduction3addEPN4llvm4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp' l='1260' u='c' c='_ZN12_GLOBAL__N_110LoopReroll14DAGRootTracker8validateERNS0_16ReductionTrackerE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp' l='1274' u='c' c='_ZN12_GLOBAL__N_110LoopReroll14DAGRootTracker8validateERNS0_16ReductionTrackerE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp' l='198' u='c' c='_ZN12_GLOBAL__N_121MergedLoadStoreMotion16canSinkFromBlockEPN4llvm10BasicBlockEPNS1_9StoreInstE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1653' u='c' c='_ZL19canSinkInstructionsN4llvm8ArrayRefIPNS_11InstructionEEERNS_8DenseMapIS2_NS_11SmallVectorIPNS_5ValueELj4EEENS_12DenseMapInfoIS2_EENS_6detail12DenseMapPairIS2_S8_EEEE'/>
