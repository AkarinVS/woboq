<def f='llvm/clang/lib/Format/Macros.h' l='89' ll='136'/>
<size>88</size>
<doc f='llvm/clang/lib/Format/Macros.h' l='61'>/// Takes a set of macro definitions as strings and allows expanding calls to
/// those macros.
///
/// For example:
/// Definition: A(x, y)=x + y
/// Call      : A(int a = 1, 2)
/// Expansion : int a = 1 + 2
///
/// Expansion does not check arity of the definition.
/// If fewer arguments than expected are provided, the remaining parameters
/// are considered empty:
/// Call     : A(a)
/// Expansion: a +
/// If more arguments than expected are provided, they will be discarded.
///
/// The expander does not support:
/// - recursive expansion
/// - stringification
/// - concatenation
/// - variadic macros
///
/// Furthermore, only a single expansion of each macro argument is supported,
/// so that we cannot get conflicting formatting decisions from different
/// expansions.
/// Definition: A(x)=x+x
/// Call      : A(id)
/// Expansion : id+x
///</doc>
<fun r='_ZN5clang6format13MacroExpanderC1ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EERNS_13SourceManagerERKNS0_11FormatStyleERN4l12473603'/>
<fun r='_ZN5clang6format13MacroExpanderD1Ev'/>
<fun r='_ZNK5clang6format13MacroExpander7definedEN4llvm9StringRefE'/>
<fun r='_ZNK5clang6format13MacroExpander10objectLikeEN4llvm9StringRefE'/>
<fun r='_ZNK5clang6format13MacroExpander6expandEPNS0_11FormatTokenEN4llvm8ArrayRefINS4_11SmallVectorIS3_Lj8EEEEE'/>
<fun r='_ZN5clang6format13MacroExpander15parseDefinitionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<mbr r='clang::format::MacroExpander::SourceMgr' o='0' t='clang::SourceManager &amp;'/>
<mbr r='clang::format::MacroExpander::Style' o='64' t='const clang::format::FormatStyle &amp;'/>
<mbr r='clang::format::MacroExpander::Allocator' o='128' t='llvm::SpecificBumpPtrAllocator&lt;FormatToken&gt; &amp;'/>
<mbr r='clang::format::MacroExpander::IdentTable' o='192' t='clang::IdentifierTable &amp;'/>
<mbr r='clang::format::MacroExpander::Buffers' o='256' t='std::vector&lt;std::unique_ptr&lt;llvm::MemoryBuffer&gt; &gt;'/>
<mbr r='clang::format::MacroExpander::Definitions' o='448' t='llvm::StringMap&lt;Definition&gt;'/>
<fun r='_ZN5clang6format13MacroExpanderC1ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EERNS_13SourceManagerERKNS0_11FormatStyleERN4l12473603'/>
<fun r='_ZN5clang6format13MacroExpanderD1Ev'/>
<fun r='_ZN5clang6format13MacroExpander15parseDefinitionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<fun r='_ZNK5clang6format13MacroExpander7definedEN4llvm9StringRefE'/>
<fun r='_ZNK5clang6format13MacroExpander10objectLikeEN4llvm9StringRefE'/>
<fun r='_ZNK5clang6format13MacroExpander6expandEPNS0_11FormatTokenEN4llvm8ArrayRefINS4_11SmallVectorIS3_Lj8EEEEE'/>
<use f='llvm/clang/unittests/Format/MacroExpanderTest.cpp' l='15' c='_ZN5clang6format12_GLOBAL__N_117MacroExpanderTest6createERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EE'/>
<use f='llvm/clang/unittests/Format/MacroExpanderTest.cpp' l='17' c='_ZN5clang6format12_GLOBAL__N_117MacroExpanderTest6createERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EE'/>
<use f='llvm/clang/unittests/Format/MacroExpanderTest.cpp' l='22' c='_ZN5clang6format12_GLOBAL__N_117MacroExpanderTest6expandERNS0_13MacroExpanderEN4llvm9StringRefERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISD_EE'/>
<size>88</size>
