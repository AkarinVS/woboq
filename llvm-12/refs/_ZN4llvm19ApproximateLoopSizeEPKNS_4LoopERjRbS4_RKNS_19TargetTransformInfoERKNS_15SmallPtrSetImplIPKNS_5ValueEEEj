<dec f='llvm/llvm/include/llvm/Transforms/Utils/UnrollLoop.h' l='130' type='unsigned int llvm::ApproximateLoopSize(const llvm::Loop * L, unsigned int &amp; NumCalls, bool &amp; NotDuplicatable, bool &amp; Convergent, const llvm::TargetTransformInfo &amp; TTI, const SmallPtrSetImpl&lt;const llvm::Value *&gt; &amp; EphValues, unsigned int BEInsns)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollAndJamPass.cpp' l='333' u='c' c='_ZL21tryToUnrollAndJamLoopPN4llvm4LoopERNS_13DominatorTreeEPNS_8LoopInfoERNS_15ScalarEvolutionERKNS_19TargetTransformInfoERNS_15AssumptionCacheERNS_147069670'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollAndJamPass.cpp' l='336' u='c' c='_ZL21tryToUnrollAndJamLoopPN4llvm4LoopERNS_13DominatorTreeEPNS_8LoopInfoERNS_15ScalarEvolutionERKNS_19TargetTransformInfoERNS_15AssumptionCacheERNS_147069670'/>
<def f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='649' ll='671' type='unsigned int llvm::ApproximateLoopSize(const llvm::Loop * L, unsigned int &amp; NumCalls, bool &amp; NotDuplicatable, bool &amp; Convergent, const llvm::TargetTransformInfo &amp; TTI, const SmallPtrSetImpl&lt;const llvm::Value *&gt; &amp; EphValues, unsigned int BEInsns)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='1072' u='c' c='_ZL15tryToUnrollLoopPN4llvm4LoopERNS_13DominatorTreeEPNS_8LoopInfoERNS_15ScalarEvolutionERKNS_19TargetTransformInfoERNS_15AssumptionCacheERNS_25Optimi16672969'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='648'>/// ApproximateLoopSize - Approximate the size of the loop.</doc>
