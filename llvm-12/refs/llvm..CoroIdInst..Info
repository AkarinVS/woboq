<def f='llvm/llvm/lib/Transforms/Coroutines/CoroInstr.h' l='154' ll='161'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroInstr.h' l='162' c='_ZNK4llvm10CoroIdInst7getInfoEv'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroInstr.h' l='163' c='_ZNK4llvm10CoroIdInst7getInfoEv'/>
<size>16</size>
<doc f='llvm/llvm/lib/Transforms/Coroutines/CoroInstr.h' l='142'>// Info argument of coro.id is
  //   fresh out of the frontend: null ;
  //   outlined                 : {Init, Return, Susp1, Susp2, ...} ;
  //   postsplit                : [resume, destroy, cleanup] ;
  //
  // If parts of the coroutine were outlined to protect against undesirable
  // code motion, these functions will be stored in a struct literal referred to
  // by the Info parameter. Note: this is only needed before coroutine is split.
  //
  // After coroutine is split, resume functions are stored in an array
  // referred to by this parameter.</doc>
<mbr r='llvm::CoroIdInst::Info::OutlinedParts' o='0' t='llvm::ConstantStruct *'/>
<mbr r='llvm::CoroIdInst::Info::Resumers' o='64' t='llvm::ConstantArray *'/>
<fun r='_ZNK4llvm10CoroIdInst4Info16hasOutlinedPartsEv'/>
<fun r='_ZNK4llvm10CoroIdInst4Info11isPostSplitEv'/>
<fun r='_ZNK4llvm10CoroIdInst4Info10isPreSplitEv'/>
