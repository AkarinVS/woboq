<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='158' type='bool llvm::JumpThreadingPass::simplifyPartiallyRedundantLoad(llvm::LoadInst * LI)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1214' u='c' c='_ZN4llvm17JumpThreadingPass12processBlockEPNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1303' ll='1535' type='bool llvm::JumpThreadingPass::simplifyPartiallyRedundantLoad(llvm::LoadInst * LoadI)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1299'>/// simplifyPartiallyRedundantLoad - If LoadI is an obviously partially
/// redundant load instruction, eliminate it by replacing it with a PHI node.
/// This is an important optimization that encourages jump threading, and needs
/// to be run interlaced with other jump threading tasks.</doc>
