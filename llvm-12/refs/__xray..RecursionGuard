<def f='llvm/compiler-rt/lib/xray/xray_recursion_guard.h' l='33' ll='52'/>
<use f='llvm/compiler-rt/lib/xray/xray_recursion_guard.h' l='41' c='__xray::RecursionGuard::RecursionGuard'/>
<use f='llvm/compiler-rt/lib/xray/xray_recursion_guard.h' l='42' c='__xray::RecursionGuard::RecursionGuard'/>
<use f='llvm/compiler-rt/lib/xray/xray_recursion_guard.h' l='43' c='__xray::RecursionGuard::operator='/>
<use f='llvm/compiler-rt/lib/xray/xray_recursion_guard.h' l='43' c='__xray::RecursionGuard::operator='/>
<use f='llvm/compiler-rt/lib/xray/xray_recursion_guard.h' l='44' c='__xray::RecursionGuard::operator='/>
<use f='llvm/compiler-rt/lib/xray/xray_recursion_guard.h' l='44' c='__xray::RecursionGuard::operator='/>
<use f='llvm/compiler-rt/lib/xray/xray_basic_logging.cpp' l='168' c='__xray::InMemoryRawLog'/>
<use f='llvm/compiler-rt/lib/xray/xray_basic_logging.cpp' l='279' c='__xray::InMemoryRawLogWithArg'/>
<size>16</size>
<doc f='llvm/compiler-rt/lib/xray/xray_recursion_guard.h' l='19'>/// The RecursionGuard is useful for guarding against signal handlers which are
/// also potentially calling XRay-instrumented functions. To use the
/// RecursionGuard, you&apos;ll typically need a thread_local atomic_uint8_t:
///
///   thread_local atomic_uint8_t Guard{0};
///
///   // In a handler function:
///   void handleArg0(int32_t F, XRayEntryType T) {
///     RecursionGuard G(Guard);
///     if (!G)
///       return;  // Failed to acquire the guard.
///     ...
///   }
///</doc>
<mbr r='__xray::RecursionGuard::Running' o='0' t='__sanitizer::atomic_uint8_t &amp;'/>
<mbr r='__xray::RecursionGuard::Valid' o='64' t='const bool'/>
<fun r='__xray::RecursionGuard::RecursionGuard'/>
<fun r='__xray::RecursionGuard::RecursionGuard'/>
<fun r='__xray::RecursionGuard::RecursionGuard'/>
<fun r='__xray::RecursionGuard::operator='/>
<fun r='__xray::RecursionGuard::operator='/>
<fun r='__xray::RecursionGuard::operatorbool'/>
<fun r='__xray::RecursionGuard::~RecursionGuard'/>
<use f='llvm/compiler-rt/lib/xray/xray_fdr_logging.cpp' l='500' c='__xray::fdrLoggingHandleArg0'/>
<use f='llvm/compiler-rt/lib/xray/xray_fdr_logging.cpp' l='530' c='__xray::fdrLoggingHandleArg1'/>
<use f='llvm/compiler-rt/lib/xray/xray_fdr_logging.cpp' l='560' c='__xray::fdrLoggingHandleCustomEvent'/>
<use f='llvm/compiler-rt/lib/xray/xray_fdr_logging.cpp' l='590' c='__xray::fdrLoggingHandleTypedEvent'/>
<size>16</size>
<use f='llvm/compiler-rt/lib/xray/xray_profiling.cpp' l='81' c='__xray::(anonymousnamespace)::getThreadLocalData'/>
<use f='llvm/compiler-rt/lib/xray/xray_profiling.cpp' l='168' c='__xray::(anonymousnamespace)::postCurrentThreadFCT'/>
<use f='llvm/compiler-rt/lib/xray/xray_profiling.cpp' l='215' c='__xray::profilingFlush'/>
<use f='llvm/compiler-rt/lib/xray/xray_profiling.cpp' l='275' c='__xray::profilingHandleArg0'/>
<use f='llvm/compiler-rt/lib/xray/xray_profiling.cpp' l='336' c='__xray::profilingFinalize'/>
<use f='llvm/compiler-rt/lib/xray/xray_profiling.cpp' l='354' c='__xray::profilingLoggingInit'/>
<use f='llvm/compiler-rt/lib/xray/xray_profiling.cpp' l='445' c='__xray::profilingLoggingInit'/>
<size>16</size>
