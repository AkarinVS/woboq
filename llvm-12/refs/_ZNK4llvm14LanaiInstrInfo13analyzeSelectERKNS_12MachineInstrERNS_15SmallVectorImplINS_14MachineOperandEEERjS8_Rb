<dec f='llvm/llvm/lib/Target/Lanai/LanaiInstrInfo.h' l='119' type='bool llvm::LanaiInstrInfo::analyzeSelect(const llvm::MachineInstr &amp; MI, SmallVectorImpl&lt;llvm::MachineOperand&gt; &amp; Cond, unsigned int &amp; TrueOp, unsigned int &amp; FalseOp, bool &amp; Optimizable) const'/>
<doc f='llvm/llvm/lib/Target/Lanai/LanaiInstrInfo.h' l='109'>// Analyze the given select instruction, returning true if it cannot be
  // understood. It is assumed that MI-&gt;isSelect() is true.
  //
  // When successful, return the controlling condition and the operands that
  // determine the true and false result values.
  //
  //   Result = SELECT Cond, TrueOp, FalseOp
  //
  // Lanai can optimize certain select instructions, for example by predicating
  // the instruction defining one of the operands and sets Optimizable to true.</doc>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='909' c='_ZNK4llvm15TargetInstrInfo13analyzeSelectERKNS_12MachineInstrERNS_15SmallVectorImplINS_14MachineOperandEEERjS8_Rb'/>
<def f='llvm/llvm/lib/Target/Lanai/LanaiInstrInfo.cpp' l='438' ll='453' type='bool llvm::LanaiInstrInfo::analyzeSelect(const llvm::MachineInstr &amp; MI, SmallVectorImpl&lt;llvm::MachineOperand&gt; &amp; Cond, unsigned int &amp; TrueOp, unsigned int &amp; FalseOp, bool &amp; Optimizable) const'/>
