<dec f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.h' l='508' type='static bool lldb_private::RenderScriptRuntime::KernelBreakpointHit(void * baton, lldb_private::StoppointCallbackContext * ctx, lldb::user_id_t break_id, lldb::user_id_t break_loc_id)'/>
<def f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='3658' ll='3707' type='static bool lldb_private::RenderScriptRuntime::KernelBreakpointHit(void * baton, lldb_private::StoppointCallbackContext * ctx, lldb::user_id_t break_id, lldb::user_id_t break_loc_id)'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='3721' u='r' c='_ZN12lldb_private19RenderScriptRuntime14SetConditionalESt10shared_ptrINS_10BreakpointEERNS_6StreamERKNS_17lldb_renderscript12RSCoordinateE'/>
<doc f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='3651'>// Callback when a kernel breakpoint hits and we&apos;re looking for a specific
// coordinate. Baton parameter contains a pointer to the target coordinate we
// want to break on. Function then checks the .expand frame for the current
// coordinate and breaks to user if it matches. Parameter &apos;break_id&apos; is the id
// of the Breakpoint which made the callback. Parameter &apos;break_loc_id&apos; is the
// id for the BreakpointLocation which was hit, a single logical breakpoint can
// have multiple addresses.</doc>
