<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='94' type='bool llvm::MergeBlockIntoPredecessor(llvm::BasicBlock * BB, llvm::DomTreeUpdater * DTU = nullptr, llvm::LoopInfo * LI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, llvm::MemoryDependenceResults * MemDep = nullptr, bool PredecessorWithTwoSuccessors = false)'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='685' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare20eliminateFallThroughERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='938' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare25eliminateMostlyEmptyBlockEPN4llvm10BasicBlockE'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='87'>/// Attempts to merge a block into its predecessor, if possible. The return
/// value indicates success or failure.
/// By default do not merge blocks if BB&apos;s predecessor has multiple successors.
/// If PredecessorWithTwoSuccessors = true, the blocks can only be merged
/// if BB&apos;s Pred has a branch to BB and to AnotherBB, and BB has a single
/// successor Sing. In this case the branch will be updated with Sing instead of
/// BB, and BB will still be merged into its predecessor and removed.</doc>
<use f='llvm/llvm/lib/CodeGen/WinEHPrepare.cpp' l='1032' u='c' c='_ZN12_GLOBAL__N_112WinEHPrepare23cleanupPreparedFuncletsERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='1549' u='c' c='_ZN4llvm15OpenMPIRBuilder20EmitOMPInlinedRegionENS_3omp9DirectiveEPNS_11InstructionES4_NS_12function_refIFvNS_13IRBuilderBase11InsertPointES7_RNS_10Ba6252308'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='1560' u='c' c='_ZN4llvm15OpenMPIRBuilder20EmitOMPInlinedRegionENS_3omp9DirectiveEPNS_11InstructionES4_NS_12function_refIFvNS_13IRBuilderBase11InsertPointES7_RNS_10Ba6252308'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='2314' u='c' c='_ZN4llvm3GVN7runImplERNS_8FunctionERNS_15AssumptionCacheERNS_13DominatorTreeERKNS_17TargetLibraryInfoERNS_9AAResultsEPNS_23MemoryDependenceResultsEPNS7303437'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopFuse.cpp' l='1278' u='c' c='_ZN12_GLOBAL__N_19LoopFuser10mergeLatchERKNS_15FusionCandidateES3_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp' l='669' u='c' c='_ZL27mergeBlocksIntoPredecessorsRN4llvm4LoopERNS_13DominatorTreeERNS_8LoopInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnswitch.cpp' l='1850' u='c' c='_ZN12_GLOBAL__N_112LoopUnswitch12simplifyCodeERSt6vectorIPN4llvm11InstructionESaIS4_EEPNS2_4LoopE'/>
<def f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='174' ll='315' type='bool llvm::MergeBlockIntoPredecessor(llvm::BasicBlock * BB, llvm::DomTreeUpdater * DTU = nullptr, llvm::LoopInfo * LI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, llvm::MemoryDependenceResults * MemDep = nullptr, bool PredecessorWithTwoSuccessors = false)'/>
<use f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='329' u='c' c='_ZN4llvm35MergeBlockSuccessorsIntoGivenBlocksERNS_15SmallPtrSetImplIPNS_10BasicBlockEEEPNS_4LoopEPNS_14DomTreeUpdaterEPNS_8LoopInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp' l='661' u='c' c='_ZN12_GLOBAL__N_110LoopRotate10rotateLoopEPN4llvm4LoopEb'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp' l='786' u='c' c='_ZN12_GLOBAL__N_110LoopRotate17simplifyLoopLatchEPN4llvm4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='884' u='c' c='_ZN4llvm10UnrollLoopEPNS_4LoopENS_17UnrollLoopOptionsEPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPKNS_19TargetTrans5476875'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='6521' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt16simplifyOnceImplEPN4llvm10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VPlan.cpp' l='641' u='c' c='_ZN4llvm5VPlan7executeEPNS_16VPTransformStateE'/>
<use f='llvm/llvm/tools/bugpoint/CrashDebugger.cpp' l='397' u='c' c='_ZN12_GLOBAL__N_117simpleSimplifyCfgERN4llvm8FunctionERNS0_15SmallVectorImplIPNS0_10BasicBlockEEE'/>
