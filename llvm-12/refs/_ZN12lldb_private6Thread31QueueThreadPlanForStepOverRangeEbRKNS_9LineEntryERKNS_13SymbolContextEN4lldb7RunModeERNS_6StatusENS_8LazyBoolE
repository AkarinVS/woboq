<dec f='llvm/lldb/include/lldb/Target/Thread.h' l='691' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOverRange(bool abort_other_plans, const lldb_private::LineEntry &amp; line_entry, const lldb_private::SymbolContext &amp; addr_context, lldb::RunMode stop_other_threads, lldb_private::Status &amp; status, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='688'>// Helper function that takes a LineEntry to step, insted of an AddressRange.
  // This may combine multiple LineEntries of the same source line number to
  // step over a longer address range in a single operation.</doc>
<use f='llvm/lldb/source/API/SBThread.cpp' l='548' u='c' c='_ZN4lldb8SBThread8StepOverENS_7RunModeERNS_7SBErrorE'/>
<use f='llvm/lldb/source/Commands/CommandObjectThread.cpp' l='513' u='c' c='_ZN39CommandObjectThreadStepWithTypeAndScope9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Target/Thread.cpp' l='1274' ll='1284' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOverRange(bool abort_other_plans, const lldb_private::LineEntry &amp; line_entry, const lldb_private::SymbolContext &amp; addr_context, lldb::RunMode stop_other_threads, lldb_private::Status &amp; status, lldb_private::LazyBool step_out_avoids_code_withoug_debug_info = eLazyBoolCalculate)'/>
<use f='llvm/lldb/source/Target/Thread.cpp' l='1951' u='c' c='_ZN12lldb_private6Thread8StepOverEbNS_8LazyBoolE'/>
<doc f='llvm/lldb/source/Target/Thread.cpp' l='1272'>// Call the QueueThreadPlanForStepOverRange method which takes an address
// range.</doc>
