<dec f='llvm/llvm/include/llvm-c/Core.h' l='666' type='LLVMModuleRef LLVMModuleCreateWithNameInContext(const char * ModuleID, LLVMContextRef C)'/>
<use f='llvm/llvm/examples/OrcV2Examples/OrcV2CBindingsAddObjectFile/OrcV2CBindingsAddObjectFile.c' l='28' u='c' c='createDemoModule'/>
<doc f='llvm/llvm/include/llvm-c/Core.h' l='660'>/**
 * Create a new, empty module in a specific context.
 *
 * Every invocation should be paired with LLVMDisposeModule() or memory
 * will be leaked.
 */</doc>
<use f='llvm/llvm/examples/OrcV2Examples/OrcV2CBindingsBasicUsage/OrcV2CBindingsBasicUsage.c' l='33' u='c' c='createDemoModule'/>
<use f='llvm/llvm/examples/OrcV2Examples/OrcV2CBindingsReflectProcessSymbols/OrcV2CBindingsReflectProcessSymbols.c' l='56' u='c' c='createDemoModule'/>
<use f='llvm/llvm/examples/OrcV2Examples/OrcV2CBindingsRemovableCode/OrcV2CBindingsRemovableCode.c' l='33' u='c' c='createDemoModule'/>
<def f='llvm/llvm/lib/IR/Core.cpp' l='235' ll='238' type='LLVMModuleRef LLVMModuleCreateWithNameInContext(const char * ModuleID, LLVMContextRef C)'/>
<use f='llvm/llvm/tools/llvm-c-test/echo.cpp' l='1378' u='c' c='llvm_echo'/>
