<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='436' type='bool llvm::mustSuppressSpeculation(const llvm::LoadInst &amp; LI)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='431'>/// Return true if speculation of the given load must be suppressed to avoid
  /// ordering or interfering with an active sanitizer.  If not suppressed,
  /// dereferenceability and alignment must be proven separately.  Note: This
  /// is only needed for raw reasoning; if you use the interface below
  /// (isSafeToSpeculativelyExecute), this is handled internally.</doc>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4348' ll='4357' type='bool llvm::mustSuppressSpeculation(const llvm::LoadInst &amp; LI)'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4404' u='c' c='_ZN4llvm28isSafeToSpeculativelyExecuteEPKNS_5ValueEPKNS_11InstructionEPKNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='1022' u='c' c='_ZN4llvm25LoopVectorizationLegality25canVectorizeWithIfConvertEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='116' u='c' c='_ZN12_GLOBAL__N_113VectorCombine19vectorizeLoadInsertERN4llvm11InstructionE'/>
