<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='288' type='llvm::BasicBlock * llvm::splitBlockBefore(llvm::BasicBlock * Old, llvm::Instruction * SplitPt, llvm::DomTreeUpdater * DTU, llvm::LoopInfo * LI, llvm::MemorySSAUpdater * MSSAU, const llvm::Twine &amp; BBName = &quot;&quot;)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='283'>/// Split the specified block at the specified instruction \p SplitPt.
/// All instructions before \p SplitPt are moved to a new block and all
/// instructions after \p SplitPt stay in the old block. The new block and the
/// old block are joined by inserting an unconditional branch to the end of the
/// new block. The new block with name \p BBName is returned.</doc>
<use f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='551' u='c' c='_ZL14SplitBlockImplPN4llvm10BasicBlockEPNS_11InstructionEPNS_14DomTreeUpdaterEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_16MemorySSAUpdaterERKNS_5TwineEb'/>
<def f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='614' ll='657' type='llvm::BasicBlock * llvm::splitBlockBefore(llvm::BasicBlock * Old, llvm::Instruction * SplitPt, llvm::DomTreeUpdater * DTU, llvm::LoopInfo * LI, llvm::MemorySSAUpdater * MSSAU, const llvm::Twine &amp; BBName = &quot;&quot;)'/>
