<dec f='llvm/llvm/include/llvm/Analysis/InstructionSimplify.h' l='311' type='bool llvm::replaceAndRecursivelySimplify(llvm::Instruction * I, llvm::Value * SimpleV, const llvm::TargetLibraryInfo * TLI = nullptr, const llvm::DominatorTree * DT = nullptr, llvm::AssumptionCache * AC = nullptr, SmallSetVector&lt;llvm::Instruction *, 8&gt; * UnsimplifiedUsers = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/InstructionSimplify.h' l='302'>/// Replace all uses of &apos;I&apos; with &apos;SimpleV&apos; and simplify the uses recursively.
///
/// This first performs a normal RAUW of I with SimpleV. It then recursively
/// attempts to simplify those users updated by the operation. The &apos;I&apos;
/// instruction must not be equal to the simplified value &apos;SimpleV&apos;.
/// If UnsimplifiedUsers is provided, instructions that could not be simplified
/// are added to it.
///
/// The function returns true if any simplifications were performed.</doc>
<def f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='6027' ll='6035' type='bool llvm::replaceAndRecursivelySimplify(llvm::Instruction * I, llvm::Value * SimpleV, const llvm::TargetLibraryInfo * TLI = nullptr, const llvm::DominatorTree * DT = nullptr, llvm::AssumptionCache * AC = nullptr, SmallSetVector&lt;llvm::Instruction *, 8&gt; * UnsimplifiedUsers = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='2086' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare16optimizeCallInstEPN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroElide.cpp' l='68' u='c' c='_ZL19replaceWithConstantPN4llvm8ConstantERNS_15SmallVectorImplIPNS_13CoroSubFnInstEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LowerConstantIntrinsics.cpp' l='56' u='c' c='_ZL36replaceConditionalBranchesOnConstantPN4llvm11InstructionEPNS_5ValueE'/>
