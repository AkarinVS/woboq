<dec f='llvm/lldb/include/lldb/Expression/ExpressionParser.h' l='76' type='bool lldb_private::ExpressionParser::Complete(lldb_private::CompletionRequest &amp; request, unsigned int line, unsigned int pos, unsigned int typed_pos)'/>
<doc f='llvm/lldb/include/lldb/Expression/ExpressionParser.h' l='46'>/// Attempts to find possible command line completions for the given
  /// expression.
  ///
  /// \param[out] request
  ///     The completion request to fill out. The completion should be a string
  ///     that would complete the current token at the cursor position.
  ///     Note that the string in the list replaces the current token
  ///     in the command line.
  ///
  /// \param[in] line
  ///     The line with the completion cursor inside the expression as a string.
  ///     The first line in the expression has the number 0.
  ///
  /// \param[in] pos
  ///     The character position in the line with the completion cursor.
  ///     If the value is 0, then the cursor is on top of the first character
  ///     in the line (i.e. the user has requested completion from the start of
  ///     the expression).
  ///
  /// \param[in] typed_pos
  ///     The cursor position in the line as typed by the user. If the user
  ///     expression has not been transformed in some form (e.g. wrapping it
  ///     in a function body for C languages), then this is equal to the
  ///     &apos;pos&apos; parameter. The semantics of this value are otherwise equal to
  ///     &apos;pos&apos; (e.g. a value of 0 means the cursor is at start of the
  ///     expression).
  ///
  /// \return
  ///     True if we added any completion results to the output;
  ///     false otherwise.</doc>
<ovr f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpp' l='1008' c='_ZN12lldb_private21ClangExpressionParser8CompleteERNS_17CompletionRequestEjjj'/>
