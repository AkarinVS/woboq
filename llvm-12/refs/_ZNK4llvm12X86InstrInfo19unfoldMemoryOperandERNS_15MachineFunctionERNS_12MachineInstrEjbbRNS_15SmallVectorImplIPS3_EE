<dec f='llvm/llvm/lib/Target/X86/X86InstrInfo.h' l='398' type='bool llvm::X86InstrInfo::unfoldMemoryOperand(llvm::MachineFunction &amp; MF, llvm::MachineInstr &amp; MI, unsigned int Reg, bool UnfoldLoad, bool UnfoldStore, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; NewMIs) const'/>
<doc f='llvm/llvm/lib/Target/X86/X86InstrInfo.h' l='394'>/// unfoldMemoryOperand - Separate a single instruction which folded a load or
  /// a store or a load and a store into two or more instruction. If this is
  /// possible, returns true as well as the new instructions by reference.</doc>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1246' c='_ZNK4llvm15TargetInstrInfo19unfoldMemoryOperandERNS_15MachineFunctionERNS_12MachineInstrEjbbRNS_15SmallVectorImplIPS3_EE'/>
<def f='llvm/llvm/lib/Target/X86/X86InstrInfo.cpp' l='6244' ll='6387' type='bool llvm::X86InstrInfo::unfoldMemoryOperand(llvm::MachineFunction &amp; MF, llvm::MachineInstr &amp; MI, unsigned int Reg, bool UnfoldLoad, bool UnfoldStore, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; NewMIs) const'/>
<use f='llvm/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp' l='916' u='c' c='_ZN12_GLOBAL__N_131X86SpeculativeLoadHardeningPass22unfoldCallAndJumpLoadsERN4llvm15MachineFunctionE'/>
