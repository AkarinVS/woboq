<def f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='634' ll='724'/>
<use f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='642' c='_ZN4llvm4Loop10LoopBounds9getBoundsERKS0_RNS_7PHINodeERNS_15ScalarEvolutionE'/>
<use f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='728' c='_ZNK4llvm4Loop9getBoundsERNS_15ScalarEvolutionE'/>
<size>48</size>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='596'>/// Below are some utilities to get the loop guard, loop bounds and induction
  /// variable, and to check if a given phinode is an auxiliary induction
  /// variable, if the loop is guarded, and if the loop is canonical.
  ///
  /// Here is an example:
  /// \code
  /// for (int i = lb; i &lt; ub; i+=step)
  ///   &lt;loop body&gt;
  /// --- pseudo LLVMIR ---
  /// beforeloop:
  ///   guardcmp = (lb &lt; ub)
  ///   if (guardcmp) goto preheader; else goto afterloop
  /// preheader:
  /// loop:
  ///   i_1 = phi[{lb, preheader}, {i_2, latch}]
  ///   &lt;loop body&gt;
  ///   i_2 = i_1 + step
  /// latch:
  ///   cmp = (i_2 &lt; ub)
  ///   if (cmp) goto loop
  /// exit:
  /// afterloop:
  /// \endcode
  ///
  /// - getBounds
  ///   - getInitialIVValue      --&gt; lb
  ///   - getStepInst            --&gt; i_2 = i_1 + step
  ///   - getStepValue           --&gt; step
  ///   - getFinalIVValue        --&gt; ub
  ///   - getCanonicalPredicate  --&gt; &apos;&lt;&apos;
  ///   - getDirection           --&gt; Increasing
  ///
  /// - getInductionVariable            --&gt; i_1
  /// - isAuxiliaryInductionVariable(x) --&gt; true if x == i_1
  /// - getLoopGuardBranch()
  ///                 --&gt; `if (guardcmp) goto preheader; else goto afterloop`
  /// - isGuarded()                     --&gt; true
  /// - isCanonical                     --&gt; false</doc>
<fun r='_ZN4llvm4Loop10LoopBounds9getBoundsERKS0_RNS_7PHINodeERNS_15ScalarEvolutionE'/>
<fun r='_ZNK4llvm4Loop10LoopBounds17getInitialIVValueEv'/>
<fun r='_ZNK4llvm4Loop10LoopBounds11getStepInstEv'/>
<fun r='_ZNK4llvm4Loop10LoopBounds12getStepValueEv'/>
<fun r='_ZNK4llvm4Loop10LoopBounds15getFinalIVValueEv'/>
<fun r='_ZNK4llvm4Loop10LoopBounds21getCanonicalPredicateEv'/>
<fun r='_ZNK4llvm4Loop10LoopBounds12getDirectionEv'/>
<fun r='_ZN4llvm4Loop10LoopBoundsC1ERKS0_RNS_5ValueERNS_11InstructionEPS4_S5_RNS_15ScalarEvolutionE'/>
<mbr r='llvm::Loop::LoopBounds::L' o='0' t='const llvm::Loop &amp;'/>
<mbr r='llvm::Loop::LoopBounds::InitialIVValue' o='64' t='llvm::Value &amp;'/>
<mbr r='llvm::Loop::LoopBounds::StepInst' o='128' t='llvm::Instruction &amp;'/>
<mbr r='llvm::Loop::LoopBounds::StepValue' o='192' t='llvm::Value *'/>
<mbr r='llvm::Loop::LoopBounds::FinalIVValue' o='256' t='llvm::Value &amp;'/>
<mbr r='llvm::Loop::LoopBounds::SE' o='320' t='llvm::ScalarEvolution &amp;'/>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='200' c='_ZN4llvm4Loop10LoopBounds9getBoundsERKS0_RNS_7PHINodeERNS_15ScalarEvolutionE'/>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='225' c='_ZN4llvm4Loop10LoopBounds9getBoundsERKS0_RNS_7PHINodeERNS_15ScalarEvolutionE'/>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='286' c='_ZNK4llvm4Loop9getBoundsERNS_15ScalarEvolutionE'/>
<size>48</size>
<fun r='_ZN4llvm4Loop10LoopBounds9getBoundsERKS0_RNS_7PHINodeERNS_15ScalarEvolutionE'/>
<fun r='_ZNK4llvm4Loop10LoopBounds21getCanonicalPredicateEv'/>
<fun r='_ZNK4llvm4Loop10LoopBounds12getDirectionEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='272' c='_ZN31LoopInfoTest_CanonicalLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='331' c='_ZN43LoopInfoTest_LoopWithInverseGuardSuccs_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='390' c='_ZN41LoopInfoTest_LoopWithSwappedGuardCmp_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='449' c='_ZN43LoopInfoTest_LoopWithInverseLatchSuccs_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='508' c='_ZN36LoopInfoTest_LoopWithLatchCmpNE_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='568' c='_ZN37LoopInfoTest_LoopWithGuardCmpSLE_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='627' c='_ZN37LoopInfoTest_LoopNonConstantStep_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='683' c='_ZN36LoopInfoTest_LoopUnsignedBounds_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='742' c='_ZN32LoopInfoTest_DecreasingLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='802' c='_ZN37LoopInfoTest_CannotFindDirection_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='862' c='_ZN28LoopInfoTest_ZextIndVar_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='923' c='_ZN34LoopInfoTest_MultiExitingLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='983' c='_ZN31LoopInfoTest_MultiExitLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1035' c='_ZN31LoopInfoTest_UnguardedLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1093' c='_ZN46LoopInfoTest_UnguardedLoopWithControlFlow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1164' c='_ZN26LoopInfoTest_LoopNest_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1190' c='_ZN26LoopInfoTest_LoopNest_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1257' c='_ZN29LoopInfoTest_AuxiliaryIV_Test8TestBodyEv'/>
<size>48</size>
