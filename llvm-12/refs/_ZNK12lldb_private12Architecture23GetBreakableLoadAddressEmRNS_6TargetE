<def f='llvm/lldb/include/lldb/Core/Architecture.h' l='96' ll='99' type='lldb::addr_t lldb_private::Architecture::GetBreakableLoadAddress(lldb::addr_t addr, lldb_private::Target &amp; target) const'/>
<doc f='llvm/lldb/include/lldb/Core/Architecture.h' l='91'>// Get load_addr as breakable load address for this target. Take a addr and
  // check if for any reason there is a better address than this to put a
  // breakpoint on. If there is then return that address. For MIPS, if
  // instruction at addr is a delay slot instruction then this method will find
  // the address of its previous instruction and return that address.</doc>
<ovr f='llvm/lldb/source/Plugins/Architecture/Mips/ArchitectureMips.cpp' l='78' c='_ZNK12lldb_private16ArchitectureMips23GetBreakableLoadAddressEmRNS_6TargetE'/>
<use f='llvm/lldb/source/Target/Target.cpp' l='2515' u='c' c='_ZN12lldb_private6Target23GetBreakableLoadAddressEm'/>
