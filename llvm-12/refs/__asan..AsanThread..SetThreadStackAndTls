<dec f='llvm/compiler-rt/lib/asan/asan_thread.h' l='140' type='void __asan::AsanThread::SetThreadStackAndTls(const __asan::AsanThread::InitOptions * options)'/>
<doc f='llvm/compiler-rt/lib/asan/asan_thread.h' l='137'>// NOTE: There is no AsanThread constructor. It is allocated
  // via mmap() and *must* be valid in zero-initialized state.</doc>
<use f='llvm/compiler-rt/lib/asan/asan_thread.cpp' l='226' u='c' c='__asan::AsanThread::Init'/>
<def f='llvm/compiler-rt/lib/asan/asan_thread.cpp' l='295' ll='309' type='void __asan::AsanThread::SetThreadStackAndTls(const __asan::AsanThread::InitOptions * options)'/>
<doc f='llvm/compiler-rt/lib/asan/asan_thread.cpp' l='292'>// This implementation doesn&apos;t use the argument, which is just passed down
// from the caller of Init (which see, above).  It&apos;s only there to support
// OS-specific implementations that need more information passed through.</doc>
