<dec f='llvm/llvm/lib/CodeGen/MIRVRegNamerUtils.h' l='60' type='std::string llvm::VRegRenamer::getInstructionOpcodeHash(llvm::MachineInstr &amp; MI)'/>
<doc f='llvm/llvm/lib/CodeGen/MIRVRegNamerUtils.h' l='52'>/// Given an Instruction, construct a hash of the operands
  /// of the instructions along with the opcode.
  /// When dealing with virtual registers, just hash the opcode of
  /// the instruction defining that vreg.
  /// Handle immediates, registers (physical and virtual) explicitly,
  /// and return a common value for the other cases.
  /// Instruction will be named in the following scheme
  /// bb&lt;block_no&gt;_hash_&lt;collission_count&gt;.</doc>
<def f='llvm/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp' l='57' ll='137' type='std::string llvm::VRegRenamer::getInstructionOpcodeHash(llvm::MachineInstr &amp; MI)'/>
<use f='llvm/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp' l='141' u='c' c='_ZN4llvm11VRegRenamer21createVirtualRegisterEj'/>
<use f='llvm/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp' l='160' u='c' c='_ZN4llvm11VRegRenamer16renameInstsInMBBEPNS_17MachineBasicBlockE'/>
