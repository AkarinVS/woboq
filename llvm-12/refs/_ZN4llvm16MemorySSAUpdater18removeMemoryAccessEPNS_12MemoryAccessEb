<dec f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='219' type='void llvm::MemorySSAUpdater::removeMemoryAccess(llvm::MemoryAccess * , bool OptimizePhis = false)'/>
<use f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='226' u='c' c='_ZN4llvm16MemorySSAUpdater18removeMemoryAccessEPKNS_11InstructionEb'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='213'>/// Remove a MemoryAccess from MemorySSA, including updating all
  /// definitions and uses.
  /// This should be called when a memory instruction that has a MemoryAccess
  /// associated with it is erased from the program.  For example, if a store or
  /// load is simply erased (not replaced), removeMemoryAccess should be called
  /// on the MemoryAccess for that store/load.</doc>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='106' u='c' c='_ZN4llvm16MemorySSAUpdater23getPreviousDefRecursiveEPNS_10BasicBlockERNS_8DenseMapIS2_NS_10TrackingVHINS_12MemoryAccessEEENS_12DenseMapInfoIS2_EENS_6d13033125'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='237' u='c' c='_ZN4llvm16MemorySSAUpdater19tryRemoveTrivialPhiEPNS_9MemoryPhiERT_'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='730' u='c' c='_ZN4llvm16MemorySSAUpdater19updateForClonedLoopERKNS_13LoopBlocksRPOENS_8ArrayRefIPNS_10BasicBlockEEERKNS_8ValueMapIPKNS_5ValueENS_14WeakTrackingVHENS9570303'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1060' u='c' c='_ZN4llvm16MemorySSAUpdater18applyInsertUpdatesENS_8ArrayRefINS_3cfg6UpdateIPNS_10BasicBlockEEEEERNS_13DominatorTreeEPKNS_9GraphDiffIS5_Lb0EEE'/>
<def f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1308' ll='1373' type='void llvm::MemorySSAUpdater::removeMemoryAccess(llvm::MemoryAccess * MA, bool OptimizePhis = false)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp' l='2302' u='c' c='_ZN12_GLOBAL__N_18DSEState21deleteDeadInstructionEPN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVNHoist.cpp' l='1015' u='c' c='_ZN4llvm8GVNHoist4rauwERKNS_11SmallVectorIPNS_11InstructionELj4EEES3_PNS_14MemoryUseOrDefE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVNHoist.cpp' l='1039' u='c' c='_ZN4llvm8GVNHoist8raMPHIuwEPNS_14MemoryUseOrDefE'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='290' u='c' c='_ZN27MemorySSATest_SinkLoad_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='326' u='c' c='_ZN29MemorySSATest_MoveAStore_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='368' u='c' c='_ZN36MemorySSATest_MoveAStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='507' u='c' c='_ZN29MemorySSATest_RemoveAPhi_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='517' u='c' c='_ZN29MemorySSATest_RemoveAPhi_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='556' u='c' c='_ZN37MemorySSATest_RemoveMemoryAccess_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='580' u='c' c='_ZN37MemorySSATest_RemoveMemoryAccess_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='738' u='c' c='_ZN45MemorySSATest_PartialWalkerCacheWithPhis_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='816' u='c' c='_ZN30MemorySSATest_WalkerReopt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='946' u='c' c='_ZN58MemorySSATest_MoveToBeforeLiveOnEntryInvalidatesCache_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='995' u='c' c='_ZN46MemorySSATest_RemovingDefInvalidatesCache_Test8TestBodyEv'/>
