<dec f='llvm/lldb/include/lldb/Symbol/CompileUnit.h' l='385' type='void lldb_private::CompileUnit::ResolveSymbolContext(const lldb_private::FileSpec &amp; file_spec, uint32_t line, bool check_inlines, bool exact, lldb::SymbolContextItem resolve_scope, lldb_private::SymbolContextList &amp; sc_list)'/>
<doc f='llvm/lldb/include/lldb/Symbol/CompileUnit.h' l='346'>/// Resolve symbol contexts by file and line.
  ///
  /// Given a file in \a file_spec, and a line number, find all instances and
  /// append them to the supplied symbol context list \a sc_list.
  ///
  /// \param[in] file_spec
  ///     A file specification. If \a file_spec contains no directory
  ///     information, only the basename will be used when matching
  ///     contexts. If the directory in \a file_spec is valid, a
  ///     complete file specification match will be performed.
  ///
  /// \param[in] line
  ///     The line number to match against the compile unit&apos;s line
  ///     tables.
  ///
  /// \param[in] check_inlines
  ///     If \b true this function will also match any inline
  ///     file and line matches. If \b false, the compile unit&apos;s
  ///     file specification must match \a file_spec for any matches
  ///     to be returned.
  ///
  /// \param[in] exact
  ///     If true, only resolve the context if \a line exists in the line table.
  ///     If false, resolve the context to the closest line greater than \a line
  ///     in the line table.
  ///
  /// \param[in] resolve_scope
  ///     For each matching line entry, this bitfield indicates what
  ///     values within each SymbolContext that gets added to \a
  ///     sc_list will be resolved. See the SymbolContext::Scope
  ///     enumeration for a list of all available bits that can be
  ///     resolved. Only SymbolContext entries that can be resolved
  ///     using a LineEntry base address will be able to be resolved.
  ///
  /// \param[out] sc_list
  ///     A SymbolContext list class that will get any matching
  ///     entries appended to.
  ///
  /// \see enum SymbolContext::Scope</doc>
<use f='llvm/lldb/source/API/SBThread.cpp' l='848' u='c' c='_ZN4lldb8SBThread13StepOverUntilERNS_7SBFrameERNS_10SBFileSpecEj'/>
<use f='llvm/lldb/source/Breakpoint/BreakpointResolverFileLine.cpp' l='237' u='c' c='_ZN12lldb_private26BreakpointResolverFileLine14SearchCallbackERNS_12SearchFilterERNS_13SymbolContextEPNS_7AddressE'/>
<use f='llvm/lldb/source/Breakpoint/BreakpointResolverFileRegex.cpp' l='112' u='c' c='_ZN12lldb_private27BreakpointResolverFileRegex14SearchCallbackERNS_12SearchFilterERNS_13SymbolContextEPNS_7AddressE'/>
<use f='llvm/lldb/source/Core/AddressResolverFileLine.cpp' l='47' u='c' c='_ZN12lldb_private23AddressResolverFileLine14SearchCallbackERNS_12SearchFilterERNS_13SymbolContextEPNS_7AddressE'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/Breakpad/SymbolFileBreakpad.cpp' l='290' u='c' c='_ZN12lldb_private8breakpad18SymbolFileBreakpad20ResolveSymbolContextERKNS_8FileSpecEjbN4lldb17SymbolContextItemERNS_17SymbolContextListE'/>
<def f='llvm/lldb/source/Symbol/CompileUnit.cpp' l='234' ll='321' type='void lldb_private::CompileUnit::ResolveSymbolContext(const lldb_private::FileSpec &amp; file_spec, uint32_t line, bool check_inlines, bool exact, lldb::SymbolContextItem resolve_scope, lldb_private::SymbolContextList &amp; sc_list)'/>
<use f='llvm/lldb/unittests/Symbol/TestLineEntry.cpp' l='67' u='c' c='_ZN13LineEntryTest19GetLineEntryForLineEj'/>
