<dec f='llvm/lldb/include/lldb/Core/AddressRange.h' l='121' type='bool lldb_private::AddressRange::ContainsFileAddress(const lldb_private::Address &amp; so_addr) const'/>
<doc f='llvm/lldb/include/lldb/Core/AddressRange.h' l='89'>/// Check if a section offset address is contained in this range.
  ///
  /// \param[in] so_addr
  ///     A section offset address object reference.
  ///
  /// \return
  ///     Returns \b true if \a so_addr is contained in this range,
  ///     \b false otherwise.
  //    bool
  //    Contains (const Address &amp;so_addr) const;

  /// Check if a section offset address is contained in this range.
  ///
  /// \param[in] so_addr_ptr
  ///     A section offset address object pointer.
  ///
  /// \return
  ///     Returns \b true if \a so_addr is contained in this range,
  ///     \b false otherwise.
  //    bool
  //    Contains (const Address *so_addr_ptr) const;

  /// Check if a section offset \a so_addr when represented as a file address
  /// is contained within this object&apos;s file address range.
  ///
  /// \param[in] so_addr
  ///     A section offset address object reference.
  ///
  /// \return
  ///     Returns \b true if both \a this and \a so_addr have
  ///     resolvable file address values and \a so_addr is contained
  ///     in the address range, \b false otherwise.</doc>
<use f='llvm/lldb/include/lldb/Symbol/FuncUnwinders.h' l='57' u='c' c='_ZNK12lldb_private13FuncUnwinders15ContainsAddressERKNS_7AddressE'/>
<def f='llvm/lldb/source/Core/AddressRange.cpp' l='62' ll='77' type='bool lldb_private::AddressRange::ContainsFileAddress(const lldb_private::Address &amp; addr) const'/>
<use f='llvm/lldb/source/Core/AddressRange.cpp' l='129' u='c' c='_ZN12lldb_private12AddressRange6ExtendERKS0_'/>
<doc f='llvm/lldb/source/Core/AddressRange.cpp' l='45'>// bool
// AddressRange::Contains (const Address &amp;addr) const
//{
//    const addr_t byte_size = GetByteSize();
//    if (byte_size)
//        return addr.GetSection() == m_base_addr.GetSection() &amp;&amp;
//        (addr.GetOffset() - m_base_addr.GetOffset()) &lt; byte_size;
//}
//
// bool
// AddressRange::Contains (const Address *addr) const
//{
//    if (addr)
//        return Contains (*addr);
//    return false;
//}</doc>
<use f='llvm/lldb/source/Core/Disassembler.cpp' l='440' u='c' c='_ZN12lldb_private12Disassembler17PrintInstructionsERNS_8DebuggerERKNS_8ArchSpecERKNS_16ExecutionContextEbjjRNS_6StreamE'/>
<use f='llvm/lldb/source/Symbol/UnwindPlan.cpp' l='482' u='c' c='_ZN12lldb_private10UnwindPlan18PlanValidAtAddressENS_7AddressE'/>
<use f='llvm/lldb/source/Symbol/Variable.cpp' l='464' u='c' c='_ZN12lldb_private8Variable22DumpLocationForAddressEPNS_6StreamERKNS_7AddressE'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='5799' u='c' c='_ZN12lldb_private7Process37AdvanceAddressToNextBranchInstructionENS_7AddressENS_12AddressRangeE'/>
<use f='llvm/lldb/source/Target/ThreadPlanShouldStopHere.cpp' l='118' u='c' c='_ZN12lldb_private24ThreadPlanShouldStopHere27DefaultStepFromHereCallbackEPNS_10ThreadPlanERNS_5FlagsEN4lldb15FrameComparisonERNS_6StatusEPv'/>
<use f='llvm/lldb/source/Target/ThreadPlanShouldStopHere.cpp' l='119' u='c' c='_ZN12lldb_private24ThreadPlanShouldStopHere27DefaultStepFromHereCallbackEPNS_10ThreadPlanERNS_5FlagsEN4lldb15FrameComparisonERNS_6StatusEPv'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepOverRange.cpp' l='259' u='c' c='_ZN12lldb_private23ThreadPlanStepOverRange10ShouldStopEPNS_5EventE'/>
<use f='llvm/lldb/source/Target/Trace.cpp' l='105' u='c' c='_ZL17DumpSymbolContextRN12lldb_private6StreamERKNS_13SymbolContextERNS_6TargetERKNS_7AddressE'/>
