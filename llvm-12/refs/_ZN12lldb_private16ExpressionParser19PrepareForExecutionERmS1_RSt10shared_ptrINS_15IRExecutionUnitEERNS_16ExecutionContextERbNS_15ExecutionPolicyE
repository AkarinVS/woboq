<dec f='llvm/lldb/include/lldb/Expression/ExpressionParser.h' l='123' type='lldb_private::Status lldb_private::ExpressionParser::PrepareForExecution(lldb::addr_t &amp; func_addr, lldb::addr_t &amp; func_end, std::shared_ptr&lt;IRExecutionUnit&gt; &amp; execution_unit_sp, lldb_private::ExecutionContext &amp; exe_ctx, bool &amp; can_interpret, lldb_private::ExecutionPolicy execution_policy)'/>
<use f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='83' u='c' c='_ZN12lldb_private14FunctionCaller20WriteFunctionWrapperERNS_16ExecutionContextERNS_17DiagnosticManagerE'/>
<doc f='llvm/lldb/include/lldb/Expression/ExpressionParser.h' l='92'>/// Ready an already-parsed expression for execution, possibly evaluating it
  /// statically.
  ///
  /// \param[out] func_addr
  ///     The address to which the function has been written.
  ///
  /// \param[out] func_end
  ///     The end of the function&apos;s allocated memory region.  (func_addr
  ///     and func_end do not delimit an allocated region; the allocated
  ///     region may begin before func_addr.)
  ///
  /// \param[in] execution_unit_sp
  ///     After parsing, ownership of the execution unit for
  ///     for the expression is handed to this shared pointer.
  ///
  /// \param[in] exe_ctx
  ///     The execution context to write the function into.
  ///
  /// \param[out] can_interpret
  ///     Set to true if the expression could be interpreted statically;
  ///     untouched otherwise.
  ///
  /// \param[in] execution_policy
  ///     Determines whether the expression must be JIT-compiled, must be
  ///     evaluated statically, or whether this decision may be made
  ///     opportunistically.
  ///
  /// \return
  ///     An error code indicating the success or failure of the operation.
  ///     Test with Success().</doc>
<ovr f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpp' l='1319' c='_ZN12lldb_private21ClangExpressionParser19PrepareForExecutionERmS1_RSt10shared_ptrINS_15IRExecutionUnitEERNS_16ExecutionContextERbNS_15ExecutionPolicyE'/>
