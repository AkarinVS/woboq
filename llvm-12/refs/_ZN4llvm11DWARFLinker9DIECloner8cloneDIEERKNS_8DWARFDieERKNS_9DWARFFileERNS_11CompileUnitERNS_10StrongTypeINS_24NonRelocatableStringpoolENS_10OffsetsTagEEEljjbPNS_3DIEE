<dec f='llvm/llvm/include/llvm/DWARFLinker/DWARFLinker.h' l='560' type='llvm::DIE * llvm::DWARFLinker::DIECloner::cloneDIE(const llvm::DWARFDie &amp; InputDIE, const llvm::DWARFFile &amp; File, llvm::CompileUnit &amp; U, llvm::OffsetsStringPool &amp; StringPool, int64_t PCOffset, uint32_t OutOffset, unsigned int Flags, bool IsLittleEndian, llvm::DIE * Die = nullptr)'/>
<def f='llvm/llvm/lib/DWARFLinker/DWARFLinker.cpp' l='1322' ll='1526' type='llvm::DIE * llvm::DWARFLinker::DIECloner::cloneDIE(const llvm::DWARFDie &amp; InputDIE, const llvm::DWARFFile &amp; File, llvm::CompileUnit &amp; Unit, llvm::OffsetsStringPool &amp; StringPool, int64_t PCOffset, uint32_t OutOffset, unsigned int Flags, bool IsLittleEndian, llvm::DIE * Die = nullptr)'/>
<use f='llvm/llvm/lib/DWARFLinker/DWARFLinker.cpp' l='1514' u='c' c='_ZN4llvm11DWARFLinker9DIECloner8cloneDIEERKNS_8DWARFDieERKNS_9DWARFFileERNS_11CompileUnitERNS_10StrongTypeINS_24NonRelocatableStringpoolENS_10OffsetsTagEEEljjbPNS_3DIEE'/>
<use f='llvm/llvm/lib/DWARFLinker/DWARFLinker.cpp' l='2164' u='c' c='_ZN4llvm11DWARFLinker9DIECloner20cloneAllCompileUnitsERNS_12DWARFContextERKNS_9DWARFFileERNS_10StrongTypeINS_24NonRelocatableStringpoolENS_10OffsetsTagEEEb'/>
<doc f='llvm/llvm/include/llvm/DWARFLinker/DWARFLinker.h' l='549'>/// Recursively clone \p InputDIE into an tree of DIE objects
    /// where useless (as decided by lookForDIEsToKeep()) bits have been
    /// stripped out and addresses have been rewritten according to the
    /// address map.
    ///
    /// \param OutOffset is the offset the cloned DIE in the output
    /// compile unit.
    /// \param PCOffset (while cloning a function scope) is the offset
    /// applied to the entry point of the function to get the linked address.
    /// \param Die the output DIE to use, pass NULL to create one.
    /// \returns the root of the cloned tree or null if nothing was selected.</doc>
