<dec f='llvm/llvm/include/llvm/Transforms/Utils/CodeExtractor.h' l='215' type='llvm::Function * llvm::CodeExtractor::constructFunction(const llvm::CodeExtractor::ValueSet &amp; inputs, const llvm::CodeExtractor::ValueSet &amp; outputs, llvm::BasicBlock * header, llvm::BasicBlock * newRootNode, llvm::BasicBlock * newHeader, llvm::Function * oldFunction, llvm::Module * M)'/>
<def f='llvm/llvm/lib/Transforms/Utils/CodeExtractor.cpp' l='814' ll='1032' type='llvm::Function * llvm::CodeExtractor::constructFunction(const llvm::CodeExtractor::ValueSet &amp; inputs, const llvm::CodeExtractor::ValueSet &amp; outputs, llvm::BasicBlock * header, llvm::BasicBlock * newRootNode, llvm::BasicBlock * newHeader, llvm::Function * oldFunction, llvm::Module * M)'/>
<use f='llvm/llvm/lib/Transforms/Utils/CodeExtractor.cpp' l='1702' u='c' c='_ZN4llvm13CodeExtractor17extractCodeRegionERKNS_26CodeExtractorAnalysisCacheE'/>
<doc f='llvm/llvm/lib/Transforms/Utils/CodeExtractor.cpp' l='812'>/// constructFunction - make a function based on inputs and outputs, as follows:
/// f(in0, ..., inN, out0, ..., outN)</doc>
