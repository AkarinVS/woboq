<dec f='llvm/lldb/include/lldb/Target/StackFrame.h' l='106' type='void lldb_private::StackFrame::StackFrame(const lldb::ThreadSP &amp; thread_sp, lldb::user_id_t frame_idx, lldb::user_id_t concrete_frame_idx, lldb::addr_t cfa, bool cfa_is_valid, lldb::addr_t pc, lldb_private::StackFrame::Kind frame_kind, bool behaves_like_zeroth_frame, const lldb_private::SymbolContext * sc_ptr)'/>
<doc f='llvm/lldb/include/lldb/Target/StackFrame.h' l='66'>/// Construct a StackFrame object without supplying a RegisterContextSP.
  ///
  /// This is the one constructor that doesn&apos;t take a RegisterContext
  /// parameter.  This ctor may be called when creating a history StackFrame;
  /// these are used if we&apos;ve collected a stack trace of pc addresses at some
  /// point in the past.  We may only have pc values. We may have a CFA,
  /// or more likely, we won&apos;t.
  ///
  /// \param [in] thread_sp
  ///   The Thread that this frame belongs to.
  ///
  /// \param [in] frame_idx
  ///   This StackFrame&apos;s frame index number in the Thread.  If inlined stack
  ///   frames are being created, this may differ from the concrete_frame_idx
  ///   which is the frame index without any inlined stack frames.
  ///
  /// \param [in] concrete_frame_idx
  ///   The StackFrame&apos;s frame index number in the Thread without any inlined
  ///   stack frames being included in the index.
  ///
  /// \param [in] cfa
  ///   The Canonical Frame Address (this terminology from DWARF) for this
  ///   stack frame.  The CFA for a stack frame does not change over the
  ///   span of the stack frame&apos;s existence.  It is often the value of the
  ///   caller&apos;s stack pointer before the call instruction into this frame&apos;s
  ///   function.  It is usually not the same as the frame pointer register&apos;s
  ///   value.
  ///
  /// \param [in] cfa_is_valid
  ///   A history stack frame may not have a CFA value collected.  We want to
  ///   distinguish between &quot;no CFA available&quot; and a CFA of
  ///   LLDB_INVALID_ADDRESS.
  ///
  /// \param [in] pc
  ///   The current pc value of this stack frame.
  ///
  /// \param [in] sc_ptr
  ///   Optionally seed the StackFrame with the SymbolContext information that
  ///   has
  ///   already been discovered.</doc>
<def f='llvm/lldb/source/Target/StackFrame.cpp' l='51' ll='75' type='void lldb_private::StackFrame::StackFrame(const lldb::ThreadSP &amp; thread_sp, lldb::user_id_t frame_idx, lldb::user_id_t unwind_frame_index, lldb::addr_t cfa, bool cfa_is_valid, lldb::addr_t pc, StackFrame::Kind kind, bool behaves_like_zeroth_frame, const lldb_private::SymbolContext * sc_ptr)'/>
