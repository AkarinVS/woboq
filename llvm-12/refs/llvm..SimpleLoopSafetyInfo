<inh f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='60' c='llvm::LoopSafetyInfo'/>
<def f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='110' ll='125'/>
<size>40</size>
<doc f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='107'>/// Simple and conservative implementation of LoopSafetyInfo that can give
/// false-positive answers to its queries in order to avoid complicated
/// analysis.</doc>
<mbr r='llvm::SimpleLoopSafetyInfo::MayThrow' o='256' t='bool'/>
<mbr r='llvm::SimpleLoopSafetyInfo::HeaderMayThrow' o='264' t='bool'/>
<fun r='_ZNK4llvm20SimpleLoopSafetyInfo13blockMayThrowEPKNS_10BasicBlockE'/>
<fun r='_ZNK4llvm20SimpleLoopSafetyInfo16anyBlockMayThrowEv'/>
<fun r='_ZN4llvm20SimpleLoopSafetyInfo21computeLoopSafetyInfoEPKNS_4LoopE'/>
<fun r='_ZNK4llvm20SimpleLoopSafetyInfo21isGuaranteedToExecuteERKNS_11InstructionEPKNS_13DominatorTreeEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='403' c='_ZL15isMustExecuteInRKN4llvm11InstructionEPNS_4LoopEPNS_13DominatorTreeE'/>
<size>40</size>
<fun r='_ZNK4llvm20SimpleLoopSafetyInfo13blockMayThrowEPKNS_10BasicBlockE'/>
<fun r='_ZNK4llvm20SimpleLoopSafetyInfo16anyBlockMayThrowEv'/>
<fun r='_ZN4llvm20SimpleLoopSafetyInfo21computeLoopSafetyInfoEPKNS_4LoopE'/>
<fun r='_ZNK4llvm20SimpleLoopSafetyInfo21isGuaranteedToExecuteERKNS_11InstructionEPKNS_13DominatorTreeEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp' l='389' c='_ZN12_GLOBAL__N_118LoopIdiomRecognize18runOnCountableLoopEv'/>
<size>40</size>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnswitch.cpp' l='200'/>
<size>40</size>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='935' c='_ZN4llvm20isSafeToUnrollAndJamEPNS_4LoopERNS_15ScalarEvolutionERNS_13DominatorTreeERNS_14DependenceInfoERNS_8LoopInfoE'/>
<size>40</size>
