<def f='llvm/llvm/include/llvm/IR/DerivedTypes.h' l='494' ll='500' type='static llvm::VectorType * llvm::VectorType::getSubdividedVectorType(llvm::VectorType * VTy, int NumSubdivs)'/>
<use f='llvm/llvm/include/llvm/IR/DerivedTypes.h' l='579' u='c' c='_ZN4llvm15FixedVectorType23getSubdividedVectorTypeEPS0_i'/>
<use f='llvm/llvm/include/llvm/IR/DerivedTypes.h' l='630' u='c' c='_ZN4llvm18ScalableVectorType23getSubdividedVectorTypeEPS0_i'/>
<doc f='llvm/llvm/include/llvm/IR/DerivedTypes.h' l='491'>// This static method returns a VectorType with a smaller number of elements
  // of a larger type than the input element type. For example, a &lt;16 x i8&gt;
  // subdivided twice would return &lt;4 x i32&gt;</doc>
<use f='llvm/llvm/lib/IR/Function.cpp' l='1165' u='c' c='_ZL15DecodeFixedTypeRN4llvm8ArrayRefINS_9Intrinsic13IITDescriptorEEENS0_IPNS_4TypeEEERNS_11LLVMContextE'/>
<use f='llvm/llvm/lib/IR/Function.cpp' l='1477' u='c' c='_ZL18matchIntrinsicTypePN4llvm4TypeERNS_8ArrayRefINS_9Intrinsic13IITDescriptorEEERNS_15SmallVectorImplIS1_EERNS7_ISt4pairIS1_S5_EEEb'/>
