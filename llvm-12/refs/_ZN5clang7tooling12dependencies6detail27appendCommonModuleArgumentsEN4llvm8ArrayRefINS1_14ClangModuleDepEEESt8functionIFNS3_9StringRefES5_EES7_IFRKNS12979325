<dec f='llvm/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h' l='100' type='void clang::tooling::dependencies::detail::appendCommonModuleArguments(llvm::ArrayRef&lt;ClangModuleDep&gt; Modules, std::function&lt;StringRef (ClangModuleDep)&gt; LookupPCMPath, std::function&lt;const ModuleDeps &amp;(ClangModuleDep)&gt; LookupModuleDeps, std::vector&lt;std::string&gt; &amp; Result)'/>
<use f='llvm/clang/lib/Tooling/DependencyScanning/DependencyScanningTool.cpp' l='21' u='c' c='_ZNK5clang7tooling12dependencies16FullDependencies24getAdditionalCommandLineB5cxx11ESt8functionIFN4llvm9StringRefENS1_14ClangModuleDepEEES3_IFRKNS1_10ModuleDepsES6_EE'/>
<doc f='llvm/clang/include/clang/Tooling/DependencyScanning/ModuleDepCollector.h' l='97'>/// Append the `-fmodule-file=` and `-fmodule-map-file=` arguments for the
/// modules in \c Modules transitively, along with other needed arguments to
/// use explicitly built modules.</doc>
<use f='llvm/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp' l='28' u='c' c='_ZNK5clang7tooling12dependencies10ModuleDeps18getFullCommandLineB5cxx11ESt8functionIFN4llvm9StringRefENS1_14ClangModuleDepEEES3_IFRKS2_S6_EE'/>
<def f='llvm/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp' l='34' ll='59' type='void clang::tooling::dependencies::detail::appendCommonModuleArguments(llvm::ArrayRef&lt;ClangModuleDep&gt; Modules, std::function&lt;StringRef (ClangModuleDep)&gt; LookupPCMPath, std::function&lt;const ModuleDeps &amp;(ClangModuleDep)&gt; LookupModuleDeps, std::vector&lt;std::string&gt; &amp; Result)'/>
