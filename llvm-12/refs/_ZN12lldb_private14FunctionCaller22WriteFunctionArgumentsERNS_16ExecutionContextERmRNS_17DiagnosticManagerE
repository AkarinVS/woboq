<dec f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='152' type='bool lldb_private::FunctionCaller::WriteFunctionArguments(lldb_private::ExecutionContext &amp; exe_ctx, lldb::addr_t &amp; args_addr_ref, lldb_private::DiagnosticManager &amp; diagnostic_manager)'/>
<def f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='115' ll='120' type='bool lldb_private::FunctionCaller::WriteFunctionArguments(lldb_private::ExecutionContext &amp; exe_ctx, lldb::addr_t &amp; args_addr_ref, lldb_private::DiagnosticManager &amp; diagnostic_manager)'/>
<use f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='218' u='c' c='_ZN12lldb_private14FunctionCaller14InsertFunctionERNS_16ExecutionContextERmRNS_17DiagnosticManagerE'/>
<doc f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='136'>/// Insert the default function argument struct
  ///
  /// \param[in] exe_ctx
  ///     The execution context to insert the function and its arguments
  ///     into.
  ///
  /// \param[in,out] args_addr_ref
  ///     The address of the structure to write the arguments into.  May
  ///     be LLDB_INVALID_ADDRESS; if it is, a new structure is allocated
  ///     and args_addr_ref is pointed to it.
  ///
  /// \param[in] diagnostic_manager
  ///     The diagnostic manager to report errors to.
  ///
  /// \return
  ///     True on success; false otherwise.</doc>
