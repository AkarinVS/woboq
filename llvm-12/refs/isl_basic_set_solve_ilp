<dec f='llvm/polly/lib/External/isl/isl_ilp_private.h' l='8' type='enum isl_lp_result isl_basic_set_solve_ilp(isl_basic_map * bset, int max, isl_int * f, isl_int * opt, isl_vec ** sol_p)'/>
<use f='llvm/polly/lib/External/isl/isl_ilp.c' l='287' u='c' c='solve_ilp_with_eq'/>
<def f='llvm/polly/lib/External/isl/isl_ilp.c' l='311' ll='344' type='enum isl_lp_result isl_basic_set_solve_ilp(isl_basic_map * bset, int max, isl_int * f, isl_int * opt, isl_vec ** sol_p)'/>
<use f='llvm/polly/lib/External/isl/isl_ilp.c' l='355' u='c' c='basic_set_opt'/>
<doc f='llvm/polly/lib/External/isl/isl_ilp.c' l='303'>/* Find an integer point in &quot;bset&quot; that minimizes (or maximizes if max is set)
 * f (if any).
 * If sol_p is not NULL then the integer point is returned in *sol_p.
 * The optimal value of f is returned in *opt.
 *
 * If there is any equality among the points in &quot;bset&quot;, then we first
 * project it out.  Otherwise, we continue with solve_ilp above.
 */</doc>
