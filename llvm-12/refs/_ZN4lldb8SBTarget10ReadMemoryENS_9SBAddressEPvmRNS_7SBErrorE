<dec f='llvm/lldb/include/lldb/API/SBTarget.h' l='541' type='size_t lldb::SBTarget::ReadMemory(const lldb::SBAddress addr, void * buf, size_t size, lldb::SBError &amp; error)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='55610' u='c' c='_ZL25_wrap_SBTarget_ReadMemoryP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBTarget.h' l='521'>/// Read target memory. If a target process is running then memory
  /// is read from here. Otherwise the memory is read from the object
  /// files. For a target whose bytes are sized as a multiple of host
  /// bytes, the data read back will preserve the target&apos;s byte order.
  ///
  /// \param[in] addr
  ///     A target address to read from.
  ///
  /// \param[out] buf
  ///     The buffer to read memory into.
  ///
  /// \param[in] size
  ///     The maximum number of host bytes to read in the buffer passed
  ///     into this call
  ///
  /// \param[out] error
  ///     Status information is written here if the memory read fails.
  ///
  /// \return
  ///     The amount of data read in host bytes.</doc>
<def f='llvm/lldb/source/API/SBTarget.cpp' l='697' ll='715' type='size_t lldb::SBTarget::ReadMemory(const lldb::SBAddress addr, void * buf, size_t size, lldb::SBError &amp; error)'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='699' u='a' c='_ZN4lldb8SBTarget10ReadMemoryENS_9SBAddressEPvmRNS_7SBErrorE'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='699' u='a' c='_ZN4lldb8SBTarget10ReadMemoryENS_9SBAddressEPvmRNS_7SBErrorE'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='2689' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
