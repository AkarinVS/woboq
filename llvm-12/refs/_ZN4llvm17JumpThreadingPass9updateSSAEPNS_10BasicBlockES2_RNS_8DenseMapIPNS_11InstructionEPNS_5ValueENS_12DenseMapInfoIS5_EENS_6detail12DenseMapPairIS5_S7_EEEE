<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='117' type='void llvm::JumpThreadingPass::updateSSA(llvm::BasicBlock * BB, llvm::BasicBlock * NewBB, DenseMap&lt;llvm::Instruction *, llvm::Value *&gt; &amp; ValueMapping)'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2016' ll='2056' type='void llvm::JumpThreadingPass::updateSSA(llvm::BasicBlock * BB, llvm::BasicBlock * NewBB, DenseMap&lt;llvm::Instruction *, llvm::Value *&gt; &amp; ValueMapping)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2301' u='c' c='_ZN4llvm17JumpThreadingPass27threadThroughTwoBasicBlocksEPNS_10BasicBlockES2_S2_S2_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2418' u='c' c='_ZN4llvm17JumpThreadingPass10threadEdgeEPNS_10BasicBlockERKNS_15SmallVectorImplIS2_EES2_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2700' u='c' c='_ZN4llvm17JumpThreadingPass32duplicateCondBranchOnPHIIntoPredEPNS_10BasicBlockERKNS_15SmallVectorImplIS2_EE'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2014'>/// Update the SSA form.  NewBB contains instructions that are copied from BB.
/// ValueMapping maps old values in BB to new ones in NewBB.</doc>
