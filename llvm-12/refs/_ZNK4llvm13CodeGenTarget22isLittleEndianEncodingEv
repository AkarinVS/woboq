<dec f='llvm/llvm/utils/TableGen/CodeGenTarget.h' l='188' type='bool llvm::CodeGenTarget::isLittleEndianEncoding() const'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenTarget.h' l='186'>/// isLittleEndianEncoding - are instruction bit patterns defined as  [0..n]?
  ///</doc>
<def f='llvm/llvm/utils/TableGen/CodeGenTarget.cpp' l='508' ll='510' type='bool llvm::CodeGenTarget::isLittleEndianEncoding() const'/>
<use f='llvm/llvm/utils/TableGen/CodeGenTarget.cpp' l='515' u='c' c='_ZN4llvm13CodeGenTarget34reverseBitsForLittleEndianEncodingEv'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenTarget.cpp' l='505'>/// isLittleEndianEncoding - Return whether this target encodes its instruction
/// in little-endian format, i.e. bits laid out in the order [0..n]
///</doc>
