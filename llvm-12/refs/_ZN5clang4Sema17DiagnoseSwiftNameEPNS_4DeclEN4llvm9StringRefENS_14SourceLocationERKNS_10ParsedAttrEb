<dec f='llvm/clang/include/clang/Sema/Sema.h' l='2066' type='bool clang::Sema::DiagnoseSwiftName(clang::Decl * D, llvm::StringRef Name, clang::SourceLocation Loc, const clang::ParsedAttr &amp; AL, bool IsAsync)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='2059'>/// Do a check to make sure \p Name looks like a legal argument for the
  /// swift_name attribute applied to decl \p D.  Raise a diagnostic if the name
  /// is invalid for the given declaration.
  ///
  /// \p AL is used to provide caret diagnostics in case of a malformed name.
  ///
  /// \returns true if the name is a valid swift name for \p D, false otherwise.</doc>
<def f='llvm/clang/lib/Sema/SemaDeclAttr.cpp' l='6051' ll='6143' type='bool clang::Sema::DiagnoseSwiftName(clang::Decl * D, llvm::StringRef Name, clang::SourceLocation Loc, const clang::ParsedAttr &amp; AL, bool IsAsync)'/>
<use f='llvm/clang/lib/Sema/SemaDeclAttr.cpp' l='6151' u='c' c='_ZL15handleSwiftNameRN5clang4SemaEPNS_4DeclERKNS_10ParsedAttrE'/>
<use f='llvm/clang/lib/Sema/SemaDeclAttr.cpp' l='6163' u='c' c='_ZL20handleSwiftAsyncNameRN5clang4SemaEPNS_4DeclERKNS_10ParsedAttrE'/>
