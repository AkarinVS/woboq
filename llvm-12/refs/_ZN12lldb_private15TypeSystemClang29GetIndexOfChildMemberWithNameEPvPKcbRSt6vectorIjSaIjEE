<dec f='llvm/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.h' l='820' type='size_t lldb_private::TypeSystemClang::GetIndexOfChildMemberWithName(lldb::opaque_compiler_type_t type, const char * name, bool omit_empty_base_classes, std::vector&lt;uint32_t&gt; &amp; child_indexes)'/>
<doc f='llvm/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.h' l='813'>// Lookup a child member given a name. This function will match member names
  // only and will descend into &quot;clang_type&quot; children in search for the first
  // member in this class, or any base class that matches &quot;name&quot;.
  // TODO: Return all matches for a given name by returning a
  // vector&lt;vector&lt;uint32_t&gt;&gt;
  // so we catch all names that match a given child name, not just the first.</doc>
<inh f='llvm/lldb/include/lldb/Symbol/TypeSystem.h' l='346' c='_ZN12lldb_private10TypeSystem29GetIndexOfChildMemberWithNameEPvPKcbRSt6vectorIjSaIjEE'/>
<def f='llvm/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp' l='6484' ll='6715' type='size_t lldb_private::TypeSystemClang::GetIndexOfChildMemberWithName(lldb::opaque_compiler_type_t type, const char * name, bool omit_empty_base_classes, std::vector&lt;uint32_t&gt; &amp; child_indexes)'/>
<doc f='llvm/lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp' l='6451'>// Look for a child member (doesn&apos;t include base classes, but it does include
// their members) in the type hierarchy. Returns an index path into
// &quot;clang_type&quot; on how to reach the appropriate member.
//
//    class A
//    {
//    public:
//        int m_a;
//        int m_b;
//    };
//
//    class B
//    {
//    };
//
//    class C :
//        public B,
//        public A
//    {
//    };
//
// If we have a clang type that describes &quot;class C&quot;, and we wanted to looked
// &quot;m_b&quot; in it:
//
// With omit_empty_base_classes == false we would get an integer array back
// with: { 1,  1 } The first index 1 is the child index for &quot;class A&quot; within
// class C The second index 1 is the child index for &quot;m_b&quot; within class A
//
// With omit_empty_base_classes == true we would get an integer array back
// with: { 0,  1 } The first index 0 is the child index for &quot;class A&quot; within
// class C (since class B doesn&apos;t have any members it doesn&apos;t count) The second
// index 1 is the child index for &quot;m_b&quot; within class A</doc>
