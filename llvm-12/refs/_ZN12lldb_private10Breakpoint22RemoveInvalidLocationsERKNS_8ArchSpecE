<dec f='llvm/lldb/include/lldb/Breakpoint/Breakpoint.h' l='302' type='void lldb_private::Breakpoint::RemoveInvalidLocations(const lldb_private::ArchSpec &amp; arch)'/>
<doc f='llvm/lldb/include/lldb/Breakpoint/Breakpoint.h' l='289'>/// Removes all invalid breakpoint locations.
  ///
  /// Removes all breakpoint locations with architectures that aren&apos;t
  /// compatible with \a arch. Also remove any breakpoint locations with whose
  /// locations have address where the section has been deleted (module and
  /// object files no longer exist).
  ///
  /// This is typically used after the process calls exec, or anytime the
  /// architecture of the target changes.
  ///
  /// \param[in] arch
  ///     If valid, check the module in each breakpoint to make sure
  ///     they are compatible, otherwise, ignore architecture.</doc>
<def f='llvm/lldb/source/Breakpoint/Breakpoint.cpp' l='283' ll='285' type='void lldb_private::Breakpoint::RemoveInvalidLocations(const lldb_private::ArchSpec &amp; arch)'/>
<use f='llvm/lldb/source/Breakpoint/BreakpointList.cpp' l='66' u='c' c='_ZN12lldb_private14BreakpointList22RemoveInvalidLocationsERKNS_8ArchSpecE'/>
