<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelector.h' l='428' type='bool llvm::InstructionSelector::select(llvm::MachineInstr &amp; I)'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp' l='136' u='c' c='_ZN4llvm17InstructionSelect20runOnMachineFunctionERNS_15MachineFunctionE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelector.h' l='418'>/// Select the (possibly generic) instruction \p I to only use target-specific
  /// opcodes. It is OK to insert multiple instructions, but they cannot be
  /// generic pre-isel instructions.
  ///
  /// \returns whether selection succeeded.
  /// \pre  I.getParent() &amp;&amp; I.getParent()-&gt;getParent()
  /// \post
  ///   if returns true:
  ///     for I in all mutated/inserted instructions:
  ///       !isPreISelGenericOpcode(I.getOpcode())</doc>
<ovr f='llvm/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp' l='2147' c='_ZN12_GLOBAL__N_126AArch64InstructionSelector6selectERN4llvm12MachineInstrE'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp' l='3020' c='_ZN4llvm25AMDGPUInstructionSelector6selectERNS_12MachineInstrE'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMInstructionSelector.cpp' l='838' c='_ZN12_GLOBAL__N_122ARMInstructionSelector6selectERN4llvm12MachineInstrE'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsInstructionSelector.cpp' l='286' c='_ZN12_GLOBAL__N_123MipsInstructionSelector6selectERN4llvm12MachineInstrE'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/GISel/PPCInstructionSelector.cpp' l='79' c='_ZN12_GLOBAL__N_122PPCInstructionSelector6selectERN4llvm12MachineInstrE'/>
<ovr f='llvm/llvm/lib/Target/RISCV/RISCVInstructionSelector.cpp' l='84' c='_ZN12_GLOBAL__N_124RISCVInstructionSelector6selectERN4llvm12MachineInstrE'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InstructionSelector.cpp' l='309' c='_ZN12_GLOBAL__N_122X86InstructionSelector6selectERN4llvm12MachineInstrE'/>
