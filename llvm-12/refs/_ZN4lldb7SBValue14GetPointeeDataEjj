<dec f='llvm/lldb/include/lldb/API/SBValue.h' l='235' type='lldb::SBData lldb::SBValue::GetPointeeData(uint32_t item_idx = 0, uint32_t item_count = 1)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='77133' u='c' c='_ZL36_wrap_SBValue_GetPointeeData__SWIG_0P7_objectlPS0_'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='77166' u='c' c='_ZL36_wrap_SBValue_GetPointeeData__SWIG_1P7_objectlPS0_'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='77191' u='c' c='_ZL36_wrap_SBValue_GetPointeeData__SWIG_2P7_objectlPS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBValue.h' l='216'>/// Get an SBData wrapping what this SBValue points to.
  ///
  /// This method will dereference the current SBValue, if its
  /// data type is a T* or T[], and extract item_count elements
  /// of type T from it, copying their contents in an SBData.
  ///
  /// \param[in] item_idx
  ///     The index of the first item to retrieve. For an array
  ///     this is equivalent to array[item_idx], for a pointer
  ///     to *(pointer + item_idx). In either case, the measurement
  ///     unit for item_idx is the sizeof(T) rather than the byte
  ///
  /// \param[in] item_count
  ///     How many items should be copied into the output. By default
  ///     only one item is copied, but more can be asked for.
  ///
  /// \return
  ///     An SBData with the contents of the copied items, on success.
  ///     An empty SBData otherwise.</doc>
<def f='llvm/lldb/source/API/SBValue.cpp' l='1362' ll='1380' type='lldb::SBData lldb::SBValue::GetPointeeData(uint32_t item_idx = 0, uint32_t item_count = 1)'/>
<use f='llvm/lldb/source/API/SBValue.cpp' l='1363' u='a' c='_ZN4lldb7SBValue14GetPointeeDataEjj'/>
<use f='llvm/lldb/source/API/SBValue.cpp' l='1363' u='a' c='_ZN4lldb7SBValue14GetPointeeDataEjj'/>
<use f='llvm/lldb/source/API/SBValue.cpp' l='1654' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
