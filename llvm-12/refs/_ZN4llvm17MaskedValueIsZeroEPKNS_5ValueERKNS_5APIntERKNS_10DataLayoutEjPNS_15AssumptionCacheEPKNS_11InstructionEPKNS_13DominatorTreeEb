<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='186' type='bool llvm::MaskedValueIsZero(const llvm::Value * V, const llvm::APInt &amp; Mask, const llvm::DataLayout &amp; DL, unsigned int Depth = 0, llvm::AssumptionCache * AC = nullptr, const llvm::Instruction * CxtI = nullptr, const llvm::DominatorTree * DT = nullptr, bool UseInstrInfo = true)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='177'>/// Return true if &apos;V &amp; Mask&apos; is known to be zero. We use this predicate to
  /// simplify operations downstream. Mask is known to be zero for bits that V
  /// cannot have.
  ///
  /// This function is defined on values with integer type, values with pointer
  /// type, and vectors of integers.  In the case
  /// where V is a vector, the mask, known zero, and known one values are the
  /// same width as the vector element, and the bit is set only if it is true
  /// for all of the elements in the vector.</doc>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='276' u='c' c='_ZN4llvm13BasicAAResult19GetLinearExpressionEPKNS_5ValueERNS_5APIntES5_RjS6_RKNS_10DataLayoutEjPNS_15AssumptionCacheEPNS_13DominatorTreeERbSE_'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='2344' u='c' c='_ZL14SimplifyOrInstPN4llvm5ValueES1_RKNS_13SimplifyQueryEj'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='2351' u='c' c='_ZL14SimplifyOrInstPN4llvm5ValueES1_RKNS_13SimplifyQueryEj'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='5326' u='c' c='_ZL22simplifyUnaryIntrinsicPN4llvm8FunctionEPNS_5ValueERKNS_13SimplifyQueryE'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='368' ll='374' type='bool llvm::MaskedValueIsZero(const llvm::Value * V, const llvm::APInt &amp; Mask, const llvm::DataLayout &amp; DL, unsigned int Depth = 0, llvm::AssumptionCache * AC = nullptr, const llvm::Instruction * CxtI = nullptr, const llvm::DominatorTree * DT = nullptr, bool UseInstrInfo = true)'/>
<use f='llvm/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h' l='474' u='c' c='_ZNK4llvm12InstCombiner17MaskedValueIsZeroEPKNS_5ValueERKNS_5APIntEjPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp' l='359' u='c' c='_ZL19simplifyX86varShiftRKN4llvm13IntrinsicInstERNS_9IRBuilderINS_12TargetFolderENS_25IRBuilderCallbackInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='478' u='c' c='_ZNK4llvm16InstCombinerImpl17MaskedValueIsZeroEPKNS_5ValueERKNS_5APIntEjPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='1781' u='c' c='_ZL17getAlternateBinopPN4llvm14BinaryOperatorERKNS_10DataLayoutE'/>
