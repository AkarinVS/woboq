<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1719' type='const llvm::SCEV * llvm::ScalarEvolution::computeExitCountExhaustively(const llvm::Loop * L, llvm::Value * Cond, bool ExitWhen)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1714'>/// If the loop is known to execute a constant number of times (the
  /// condition evolves only from constants), try to evaluate a few iterations
  /// of the loop until we get the exit condition gets a value of ExitWhen
  /// (true or false).  If we cannot evaluate the exit count of the loop,
  /// return CouldNotCompute.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='7574' u='c' c='_ZN4llvm15ScalarEvolution28computeExitLimitFromCondImplERNS0_14ExitLimitCacheEPKNS_4LoopEPNS_5ValueEbbb'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='7756' u='c' c='_ZN4llvm15ScalarEvolution24computeExitLimitFromICmpEPKNS_4LoopEPNS_8ICmpInstEbbb'/>
<def f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='8268' ll='8333' type='const llvm::SCEV * llvm::ScalarEvolution::computeExitCountExhaustively(const llvm::Loop * L, llvm::Value * Cond, bool ExitWhen)'/>
