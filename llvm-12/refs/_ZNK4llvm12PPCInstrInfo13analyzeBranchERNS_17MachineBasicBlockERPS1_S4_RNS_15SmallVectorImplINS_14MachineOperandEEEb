<dec f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='411' type='bool llvm::PPCInstrInfo::analyzeBranch(llvm::MachineBasicBlock &amp; MBB, llvm::MachineBasicBlock *&amp; TBB, llvm::MachineBasicBlock *&amp; FBB, SmallVectorImpl&lt;llvm::MachineOperand&gt; &amp; Cond, bool AllowModify) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='410'>// Branch analysis.</doc>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='612' c='_ZNK4llvm15TargetInstrInfo13analyzeBranchERNS_17MachineBasicBlockERPS1_S4_RNS_15SmallVectorImplINS_14MachineOperandEEEb'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='1266' ll='1439' type='bool llvm::PPCInstrInfo::analyzeBranch(llvm::MachineBasicBlock &amp; MBB, llvm::MachineBasicBlock *&amp; TBB, llvm::MachineBasicBlock *&amp; FBB, SmallVectorImpl&lt;llvm::MachineOperand&gt; &amp; Cond, bool AllowModify) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='1263'>// Branch analysis.
// Note: If the condition register is set to CTR or CTR8 then this is a
// BDNZ (imm == 1) or BDZ (imm == 0) branch.</doc>
