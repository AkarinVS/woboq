<def f='llvm/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h' l='63' ll='93'/>
<use f='llvm/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h' l='102'/>
<use f='llvm/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h' l='109' c='_ZN4llvm10AsmRewriteC1ENS_5SMLocEjNS_9IntelExprE'/>
<size>72</size>
<doc f='llvm/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h' l='61'>// Represnt the various parts which makes up an intel expression,
// used for emitting compound intel expressions</doc>
<mbr r='llvm::IntelExpr::NeedBracs' o='0' t='bool'/>
<mbr r='llvm::IntelExpr::Imm' o='64' t='int64_t'/>
<mbr r='llvm::IntelExpr::BaseReg' o='128' t='llvm::StringRef'/>
<mbr r='llvm::IntelExpr::IndexReg' o='256' t='llvm::StringRef'/>
<mbr r='llvm::IntelExpr::OffsetName' o='384' t='llvm::StringRef'/>
<mbr r='llvm::IntelExpr::Scale' o='512' t='unsigned int'/>
<fun r='_ZN4llvm9IntelExprC1Ev'/>
<fun r='_ZN4llvm9IntelExprC1ENS_9StringRefES1_jS1_lb'/>
<fun r='_ZNK4llvm9IntelExpr10hasBaseRegEv'/>
<fun r='_ZNK4llvm9IntelExpr11hasIndexRegEv'/>
<fun r='_ZNK4llvm9IntelExpr7hasRegsEv'/>
<fun r='_ZNK4llvm9IntelExpr9hasOffsetEv'/>
<fun r='_ZNK4llvm9IntelExpr7emitImmEv'/>
<fun r='_ZNK4llvm9IntelExpr7isValidEv'/>
<use f='llvm/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp' l='2174' c='_ZN12_GLOBAL__N_112X86AsmParser22RewriteIntelExpressionERNS0_21IntelExprStateMachineEN4llvm5SMLocES4_'/>
<size>72</size>
