<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='163' type='llvm::Instruction * llvm::InstCombinerImpl::foldAggregateConstructionIntoAggregateReuse(llvm::InsertValueInst &amp; OrigIVI)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='713' ll='985' type='llvm::Instruction * llvm::InstCombinerImpl::foldAggregateConstructionIntoAggregateReuse(llvm::InsertValueInst &amp; OrigIVI)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='1020' u='c' c='_ZN4llvm16InstCombinerImpl20visitInsertValueInstERNS_15InsertValueInstE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='708'>/// Look for chain of insertvalue&apos;s that fully define an aggregate, and trace
/// back the values inserted, see if they are all were extractvalue&apos;d from
/// the same source aggregate from the exact same element indexes.
/// If they were, just reuse the source aggregate.
/// This potentially deals with PHI indirections.</doc>
