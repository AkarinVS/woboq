<inh f='llvm/lldb/include/lldb/Target/ABI.h' l='114' c='_ZN12lldb_private3ABI23CallFrameAddressIsValidEm'/>
<def f='llvm/lldb/source/Plugins/ABI/PowerPC/ABISysV_ppc.h' l='55' ll='62' type='bool ABISysV_ppc::CallFrameAddressIsValid(lldb::addr_t cfa)'/>
<doc f='llvm/lldb/source/Plugins/ABI/PowerPC/ABISysV_ppc.h' l='44'>// The SysV ppc ABI requires that stack frames be 16 byte aligned.
  // When there is a trap handler on the stack, e.g. _sigtramp in userland
  // code, we&apos;ve seen that the stack pointer is often not aligned properly
  // before the handler is invoked.  This means that lldb will stop the unwind
  // early -- before the function which caused the trap.
  //
  // To work around this, we relax that alignment to be just word-size
  // (8-bytes).
  // Allowing the trap handlers for user space would be easy (_sigtramp) but
  // in other environments there can be a large number of different functions
  // involved in async traps.</doc>
