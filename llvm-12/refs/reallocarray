<dec f='include/stdlib.h' l='559' type='void * reallocarray(void * __ptr, size_t __nmemb, size_t __size)'/>
<doc f='include/stdlib.h' l='556'>/* __attribute_malloc__ is not used, because if reallocarray returns
   the same pointer that was passed to it, aliasing needs to be allowed
   between objects pointed by the old and new pointers.  */</doc>
<def f='llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp' l='169' macro='1' type='void * reallocarray(void * ptr, __sanitizer::uptr nmemb, __sanitizer::uptr size)'/>
<def f='llvm/compiler-rt/lib/hwasan/hwasan_interceptors.cpp' l='194' macro='1' type='void * reallocarray(void * ptr, SIZE_T nmemb, SIZE_T size)'/>
<def f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='92' macro='1' type='void * reallocarray(void * q, __sanitizer::uptr nmemb, __sanitizer::uptr size)'/>
<def f='llvm/compiler-rt/lib/memprof/memprof_malloc_linux.cpp' l='151' macro='1' type='void * reallocarray(void * ptr, __sanitizer::uptr nmemb, __sanitizer::uptr size)'/>
<def f='llvm/compiler-rt/lib/msan/msan_interceptors.cpp' l='895' macro='1' type='void * reallocarray(void * ptr, SIZE_T nmemb, SIZE_T size)'/>
<use f='llvm/compiler-rt/lib/msan/msan_interceptors.cpp' l='1607' u='a' c='__msan::InitializeInterceptors'/>
<dec f='include/malloc.h' l='58' type='void * reallocarray(void * __ptr, size_t __nmemb, size_t __size)'/>
<doc f='include/malloc.h' l='55'>/* __attribute_malloc__ is not used, because if reallocarray returns
   the same pointer that was passed to it, aliasing needs to be allowed
   between objects pointed by the old and new pointers.  */</doc>
<def f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='688' macro='1' type='void * reallocarray(void * p, __sanitizer::uptr size, __sanitizer::uptr n)'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='2701' u='a' c='__tsan::InitializeInterceptors'/>
