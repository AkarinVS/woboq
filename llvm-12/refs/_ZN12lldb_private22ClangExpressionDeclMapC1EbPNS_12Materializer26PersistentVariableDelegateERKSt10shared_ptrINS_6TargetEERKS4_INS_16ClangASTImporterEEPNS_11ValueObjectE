<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.h' l='80' type='void lldb_private::ClangExpressionDeclMap::ClangExpressionDeclMap(bool keep_result_in_memory, Materializer::PersistentVariableDelegate * result_delegate, const lldb::TargetSP &amp; target, const std::shared_ptr&lt;ClangASTImporter&gt; &amp; importer, lldb_private::ValueObject * ctx_obj)'/>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp' l='66' ll='76' type='void lldb_private::ClangExpressionDeclMap::ClangExpressionDeclMap(bool keep_result_in_memory, Materializer::PersistentVariableDelegate * result_delegate, const lldb::TargetSP &amp; target, const std::shared_ptr&lt;ClangASTImporter&gt; &amp; importer, lldb_private::ValueObject * ctx_obj)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.h' l='58'>/// Constructor
  ///
  /// Initializes class variables.
  ///
  /// \param[in] keep_result_in_memory
  ///     If true, inhibits the normal deallocation of the memory for
  ///     the result persistent variable, and instead marks the variable
  ///     as persisting.
  ///
  /// \param[in] result_delegate
  ///     If non-NULL, use this delegate to report result values.  This
  ///     allows the client ClangUserExpression to report a result.
  ///
  /// \param[in] target
  ///     The target to use when parsing.
  ///
  /// \param[in] importer
  ///     The ClangASTImporter to use when parsing.
  ///
  /// \param[in] ctx_obj
  ///     If not empty, then expression is evaluated in context of this object.
  ///     See the comment to `UserExpression::Evaluate` for details.</doc>
<use f='llvm/lldb/unittests/Expression/ClangExpressionDeclMapTest.cpp' l='25' u='c' c='_ZN12_GLOBAL__N_126FakeClangExpressionDeclMapC1ERKSt10shared_ptrIN12lldb_private16ClangASTImporterEE'/>
