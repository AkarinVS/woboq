<dec f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='82' type='llvm::FunctionPass * llvm::createAggressiveDCEPass()'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='76'>//===----------------------------------------------------------------------===//
//
// AggressiveDCE - This pass uses the SSA based Aggressive DCE algorithm.  This
// algorithm assumes instructions are dead until proven otherwise, which makes
// it more successful are removing non-obviously dead instructions.
//</doc>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='71' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='494' u='c' c='_ZN4llvm18PassManagerBuilder31addFunctionSimplificationPassesERNS_6legacy15PassManagerBaseE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/ADCE.cpp' l='747' type='llvm::FunctionPass * llvm::createAggressiveDCEPass()'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Scalar.cpp' l='129' u='c' c='LLVMAddAggressiveDCEPass'/>
<use f='llvm/polly/lib/CodeGen/CodegenCleanup.cpp' l='100' u='c' c='_ZN12_GLOBAL__N_114CodegenCleanup16doInitializationERN4llvm6ModuleE'/>
