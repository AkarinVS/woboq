<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='403' type='bool llvm::isKnownNonNegativeInLoop(const llvm::SCEV * S, const llvm::Loop * L, llvm::ScalarEvolution &amp; SE)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='401'>/// Returns true if we can prove that \p S is defined and always non-negative in
/// loop \p L.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='893' u='c' c='_ZN12_GLOBAL__N_113LoopStructure18parseLoopStructureERN4llvm15ScalarEvolutionERNS1_4LoopERPKc'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='894' u='c' c='_ZN12_GLOBAL__N_113LoopStructure18parseLoopStructureERN4llvm15ScalarEvolutionERNS1_4LoopERPKc'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='1682' u='c' c='_ZNK12_GLOBAL__N_119InductiveRangeCheck25computeSafeIterationSpaceERN4llvm15ScalarEvolutionEPKNS1_14SCEVAddRecExprEb'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='1114' ll='1119' type='bool llvm::isKnownNonNegativeInLoop(const llvm::SCEV * S, const llvm::Loop * L, llvm::ScalarEvolution &amp; SE)'/>
