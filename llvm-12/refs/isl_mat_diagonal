<dec f='llvm/polly/lib/External/isl/include/isl/mat.h' l='58' type='isl_mat * isl_mat_diagonal(isl_mat * mat1, isl_mat * mat2)'/>
<use f='llvm/polly/lib/External/isl/include/isl/isl-noexceptions.h' l='9318' u='c' c='_ZNK3isl12noexceptions3mat8diagonalES1_'/>
<use f='llvm/polly/lib/External/isl/isl_equalities.c' l='555' u='c' c='isl_mat_final_variable_compression'/>
<use f='llvm/polly/lib/External/isl/isl_factorization.c' l='115' u='c' c='isl_factorizer_groups'/>
<use f='llvm/polly/lib/External/isl/isl_factorization.c' l='116' u='c' c='isl_factorizer_groups'/>
<use f='llvm/polly/lib/External/isl/isl_map_simplify.c' l='3052' u='c' c='extract_compressed_stride_constraints'/>
<def f='llvm/polly/lib/External/isl/isl_mat.c' l='921' ll='950' type='isl_mat * isl_mat_diagonal(isl_mat * mat1, isl_mat * mat2)'/>
<doc f='llvm/polly/lib/External/isl/isl_mat.c' l='916'>/* Given two matrices M1 and M2, return the block matrix
 *
 *	[ M1  0  ]
 *	[ 0   M2 ]
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_morph.c' l='521' u='c' c='isl_basic_set_variable_compression'/>
<use f='llvm/polly/lib/External/isl/isl_morph.c' l='522' u='c' c='isl_basic_set_variable_compression'/>
<use f='llvm/polly/lib/External/isl/isl_morph.c' l='603' u='c' c='isl_basic_set_parameter_compression'/>
<use f='llvm/polly/lib/External/isl/isl_polynomial.c' l='4425' u='c' c='isl_qpolynomial_morph_domain'/>
<use f='llvm/polly/lib/External/isl/isl_polynomial.c' l='4427' u='c' c='isl_qpolynomial_morph_domain'/>
