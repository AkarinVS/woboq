<dec f='llvm/llvm/include/llvm/DWARFLinker/DWARFStreamer.h' l='90' type='void llvm::DwarfStreamer::emitRangesEntries(int64_t UnitPcOffset, uint64_t OrigLowPc, const FunctionIntervals::const_iterator &amp; FuncRange, const std::vector&lt;DWARFDebugRangeList::RangeListEntry&gt; &amp; Entries, unsigned int AddressSize)'/>
<inh f='llvm/llvm/include/llvm/DWARFLinker/DWARFLinker.h' l='140' c='_ZN4llvm12DwarfEmitter17emitRangesEntriesElmRKNS_11IntervalMapImlLj8ENS_23IntervalMapHalfOpenInfoImEEE14const_iteratorERKSt6vectorINS_19DWARFDebugRang1871805'/>
<def f='llvm/llvm/lib/DWARFLinker/DWARFStreamer.cpp' l='309' ll='341' type='void llvm::DwarfStreamer::emitRangesEntries(int64_t UnitPcOffset, uint64_t OrigLowPc, const FunctionIntervals::const_iterator &amp; FuncRange, const std::vector&lt;DWARFDebugRangeList::RangeListEntry&gt; &amp; Entries, unsigned int AddressSize)'/>
<doc f='llvm/llvm/lib/DWARFLinker/DWARFStreamer.cpp' l='305'>/// Emit the debug_range section contents for \p FuncRange by
/// translating the original \p Entries. The debug_range section
/// format is totally trivial, consisting just of pairs of address
/// sized addresses describing the ranges.</doc>
<doc f='llvm/llvm/include/llvm/DWARFLinker/DWARFStreamer.h' l='88'>/// Emit debug_ranges for \p FuncRange by translating the
  /// original \p Entries.</doc>
