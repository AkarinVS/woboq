<def f='llvm/libcxxabi/src/cxa_guard_impl.h' l='423' ll='526'/>
<use f='llvm/libcxxabi/src/cxa_guard_impl.h' l='423'/>
<use f='llvm/libcxxabi/src/cxa_guard_impl.h' l='563'/>
<fun r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::InitByteFutex{Wait,Wake,GetThreadIDArg}'/>
<fun r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::InitByteFutex{Wait,Wake,GetThreadIDArg}'/>
<fun r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::acquire_init_byte'/>
<fun r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::release_init_byte'/>
<fun r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::abort_init_byte'/>
<fun r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::wait_on_initialization'/>
<fun r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::wake_all'/>
<mbr r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::init_byte' t='AtomicInt&lt;uint8_t&gt;'/>
<mbr r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::has_thread_id_support' t='const bool'/>
<mbr r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::thread_id' t='AtomicInt&lt;uint32_t&gt;'/>
<mbr r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::current_thread_id' t='LazyValue&lt;uint32_t, GetThreadIDArg&gt;'/>
<fun r='__cxxabiv1::(anonymousnamespace)::InitByteFutex::expected_value_for_futex'/>
