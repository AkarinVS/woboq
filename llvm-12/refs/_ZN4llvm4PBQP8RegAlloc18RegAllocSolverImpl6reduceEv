<use f='llvm/llvm/include/llvm/CodeGen/RegAllocPBQP.h' l='295' u='c' c='_ZN4llvm4PBQP8RegAlloc18RegAllocSolverImpl5solveEv'/>
<def f='llvm/llvm/include/llvm/CodeGen/RegAllocPBQP.h' l='427' ll='477' type='std::vector&lt;GraphBase::NodeId&gt; llvm::PBQP::RegAlloc::RegAllocSolverImpl::reduce()'/>
<doc f='llvm/llvm/include/llvm/CodeGen/RegAllocPBQP.h' l='421'>// Compute a reduction order for the graph by iteratively applying PBQP
  // reduction rules. Locally optimal rules are applied whenever possible (R0,
  // R1, R2). If no locally-optimal rules apply then any conservatively
  // allocatable node is reduced. Finally, if no conservatively allocatable
  // node exists then the node with the lowest spill-cost:degree ratio is
  // selected.</doc>
