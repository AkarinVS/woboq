<use f='llvm/lldb/include/lldb/lldb-forward.h' l='306'/>
<def f='llvm/lldb/include/lldb/Utility/DataBuffer.h' l='43' ll='80'/>
<ovr f='llvm/lldb/include/lldb/Utility/DataBuffer.h' l='82' c='lldb_private::DataBufferUnowned'/>
<use f='llvm/lldb/include/lldb/Utility/DataBuffer.h' l='82'/>
<ovr f='llvm/lldb/include/lldb/Utility/DataBufferLLVM.h' l='26' c='lldb_private::DataBufferLLVM'/>
<use f='llvm/lldb/include/lldb/Utility/DataBufferLLVM.h' l='26'/>
<size>8</size>
<doc f='llvm/lldb/include/lldb/Utility/DataBuffer.h' l='22'>/// \class DataBuffer DataBuffer.h &quot;lldb/Core/DataBuffer.h&quot;
/// A pure virtual protocol class for abstracted data buffers.
///
/// DataBuffer is an abstract class that gets packaged into a shared pointer
/// that can use to implement various ways to store data (on the heap, memory
/// mapped, cached inferior memory). It gets used by DataExtractor so many
/// DataExtractor objects can share the same data and sub-ranges of that
/// shared data, and the last object that contains a reference to the shared
/// data will free it.
///
/// Subclasses can implement as many different constructors or member
/// functions that allow data to be stored in the object&apos;s buffer prior to
/// handing the shared data to clients that use these buffers.
///
/// All subclasses must override all of the pure virtual functions as they are
/// used by clients to access the data. Having a common interface allows
/// different ways of storing data, yet using it in one common way.
///
/// This class currently expects all data to be available without any extra
/// calls being made, but we can modify it to optionally get data on demand
/// with some extra function calls to load the data before it gets accessed.</doc>
<fun r='_ZN12lldb_private10DataBufferD1Ev'/>
<fun r='_ZN12lldb_private10DataBuffer8GetBytesEv'/>
<fun r='_ZNK12lldb_private10DataBuffer8GetBytesEv'/>
<fun r='_ZNK12lldb_private10DataBuffer11GetByteSizeEv'/>
<fun r='_ZNK12lldb_private10DataBuffer7GetDataEv'/>
<fun r='_ZN12lldb_private10DataBuffer7GetDataEv'/>
<ovr f='llvm/lldb/include/lldb/Utility/DataBufferHeap.h' l='30' c='lldb_private::DataBufferHeap'/>
<use f='llvm/lldb/include/lldb/Utility/DataBufferHeap.h' l='30'/>
<size>8</size>
<use f='llvm/lldb/source/Utility/DataExtractor.cpp' l='207' c='_ZNK12lldb_private13DataExtractor19GetSharedDataOffsetEv'/>
<size>8</size>
<use f='llvm/lldb/unittests/Process/minidump/RegisterContextMinidumpTest.cpp' l='21' c='_ZL5reg32RKN12lldb_private10DataBufferERKNS_12RegisterInfoE'/>
<use f='llvm/lldb/unittests/Process/minidump/RegisterContextMinidumpTest.cpp' l='25' c='_ZL5reg64RKN12lldb_private10DataBufferERKNS_12RegisterInfoE'/>
<size>8</size>
