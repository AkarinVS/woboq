<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='863' type='void llvm::LazyCallGraph::RefSCC::replaceNodeFunction(llvm::LazyCallGraph::Node &amp; N, llvm::Function &amp; NewF)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='854'>/// Directly replace a node&apos;s function with a new function.
    ///
    /// This should be used when moving the body and users of a function to
    /// a new formal function object but not otherwise changing the call graph
    /// structure in any way.
    ///
    /// It requires that the old function in the provided node have zero uses
    /// and the new function must have calls and references to it establishing
    /// an equivalent graph.</doc>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1478' ll='1507' type='void llvm::LazyCallGraph::RefSCC::replaceNodeFunction(llvm::LazyCallGraph::Node &amp; N, llvm::Function &amp; NewF)'/>
<use f='llvm/llvm/lib/Transforms/IPO/ArgumentPromotion.cpp' l='1056' u='c' c='_ZN4llvm21ArgumentPromotionPass3runERNS_13LazyCallGraph3SCCERNS_15AnalysisManagerIS2_JRS1_EEES5_RNS_17CGSCCUpdateResultE'/>
<use f='llvm/llvm/lib/Transforms/Utils/CallGraphUpdater.cpp' l='138' u='c' c='_ZN4llvm16CallGraphUpdater19replaceFunctionWithERNS_8FunctionES2_'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='2087' u='c' c='_ZN12_GLOBAL__N_142LazyCallGraphTest_ReplaceNodeFunction_Test8TestBodyEv'/>
