<dec f='llvm/lldb/include/lldb/Symbol/TypeList.h' l='27' type='void lldb_private::TypeList::Clear()'/>
<def f='llvm/lldb/source/Symbol/TypeList.cpp' l='58' type='void lldb_private::TypeList::Clear()'/>
<doc f='llvm/lldb/source/Symbol/TypeList.cpp' l='34'>// Find a base type by its unique ID.
// TypeSP
// TypeList::FindType(lldb::user_id_t uid)
//{
//    iterator pos = m_types.find(uid);
//    if (pos != m_types.end())
//        return pos-&gt;second;
//    return TypeSP();
//}

// Find a type by name.
// TypeList
// TypeList::FindTypes (ConstString name)
//{
//    // Do we ever need to make a lookup by name map? Here we are doing
//    // a linear search which isn&apos;t going to be fast.
//    TypeList types(m_ast.getTargetInfo()-&gt;getTriple().getTriple().c_str());
//    iterator pos, end;
//    for (pos = m_types.begin(), end = m_types.end(); pos != end; ++pos)
//        if (pos-&gt;second-&gt;GetName() == name)
//            types.Insert (pos-&gt;second);
//    return types;
//}</doc>
