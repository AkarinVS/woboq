<dec f='llvm/llvm/include/llvm/Transforms/Utils/Cloning.h' l='108' type='llvm::BasicBlock * llvm::CloneBasicBlock(const llvm::BasicBlock * BB, llvm::ValueToValueMapTy &amp; VMap, const llvm::Twine &amp; NameSuffix = &quot;&quot;, llvm::Function * F = nullptr, llvm::ClonedCodeInfo * CodeInfo = nullptr, llvm::DebugInfoFinder * DIFinder = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Cloning.h' l='81'>/// Return a copy of the specified basic block, but without
/// embedding the block into a particular function.  The block returned is an
/// exact copy of the specified basic block, without any remapping having been
/// performed.  Because of this, this is only suitable for applications where
/// the basic block will be inserted into the same function that it was cloned
/// from (loop unrolling would use this, for example).
///
/// Also, note that this function makes a direct copy of the basic block, and
/// can thus produce illegal LLVM code.  In particular, it will copy any PHI
/// nodes from the original block, even though there are no predecessors for the
/// newly cloned block (thus, phi nodes will have to be updated).  Also, this
/// block will branch to the old successors of the original block: these
/// successors will have to have any PHI nodes updated to account for the new
/// incoming edges.
///
/// The correlation between instructions in the source and result basic blocks
/// is recorded in the VMap map.
///
/// If you have a particular suffix you&apos;d like to use to add to any cloned
/// names, specify it as the optional third parameter.
///
/// If you would like the basic block to be auto-inserted into the end of a
/// function, you can specify it as the optional fourth parameter.
///
/// If you would like to collect additional information about the cloned
/// function, you can specify a ClonedCodeInfo object with the optional fifth
/// parameter.</doc>
<use f='llvm/llvm/lib/CodeGen/WinEHPrepare.cpp' l='775' u='c' c='_ZN12_GLOBAL__N_112WinEHPrepare17cloneCommonBlocksERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp' l='1770' u='c' c='_ZN12_GLOBAL__N_13CHR16cloneScopeBlocksEPNS_8CHRScopeEPN4llvm10BasicBlockES5_PNS3_6RegionERNS3_8ValueMapIPKNS3_5ValueENS3_14WeakTrackingVHENS3_14Value2739565'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='1147' u='c' c='_ZNK12_GLOBAL__N_115LoopConstrainer9cloneLoopERNS0_10ClonedLoopEPKc'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnswitch.cpp' l='1476' u='c' c='_ZN12_GLOBAL__N_112LoopUnswitch27unswitchNontrivialConditionEPN4llvm5ValueEPNS1_8ConstantEPNS1_4LoopEPNS1_11InstructionENS1_8ArrayRefIS9_EE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='1025' u='c' c='_ZL21buildClonedLoopBlocksRN4llvm4LoopEPNS_10BasicBlockES3_NS_8ArrayRefIS3_EES3_S3_S3_RKNS_13SmallDenseMapIS3_S3_Lj16ENS_12DenseMapInfoIS3_EENS_6detai9053684'/>
<use f='llvm/llvm/lib/Transforms/Utils/BreakCriticalEdges.cpp' l='437' u='c' c='_ZN4llvm28SplitIndirectBrCriticalEdgesERNS_8FunctionEPNS_21BranchProbabilityInfoEPNS_18BlockFrequencyInfoE'/>
<def f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='43' ll='79' type='llvm::BasicBlock * llvm::CloneBasicBlock(const llvm::BasicBlock * BB, llvm::ValueToValueMapTy &amp; VMap, const llvm::Twine &amp; NameSuffix = &quot;&quot;, llvm::Function * F = nullptr, llvm::ClonedCodeInfo * CodeInfo = nullptr, llvm::DebugInfoFinder * DIFinder = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='163' u='c' c='_ZN4llvm17CloneFunctionIntoEPNS_8FunctionEPKS0_RNS_8ValueMapIPKNS_5ValueENS_14WeakTrackingVHENS_14ValueMapConfigIS7_NS_3sys10SmartMutexILb0EEEEEEEbRNS2172164'/>
<use f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='775' u='c' c='_ZN4llvm22cloneLoopWithPreheaderEPNS_10BasicBlockES1_PNS_4LoopERNS_8ValueMapIPKNS_5ValueENS_14WeakTrackingVHENS_14ValueMapConfigIS7_NS_3sys10SmartMute9109125'/>
<use f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='807' u='c' c='_ZN4llvm22cloneLoopWithPreheaderEPNS_10BasicBlockES1_PNS_4LoopERNS_8ValueMapIPKNS_5ValueENS_14WeakTrackingVHENS_14ValueMapConfigIS7_NS_3sys10SmartMute9109125'/>
<doc f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='42'>/// See comments in Cloning.h.</doc>
<use f='llvm/llvm/lib/Transforms/Utils/LoopPeel.cpp' l='525' u='c' c='_ZL15cloneLoopBlocksPN4llvm4LoopEjPNS_10BasicBlockES3_RNS_15SmallVectorImplISt4pairIS3_S3_EEERNS4_IS3_EERNS_13LoopBlocksDFSERNS_8ValueMapIPKNS_5ValueE7285139'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='605' u='c' c='_ZN4llvm10UnrollLoopEPNS_4LoopENS_17UnrollLoopOptionsEPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPKNS_19TargetTrans5476875'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='374' u='c' c='_ZN4llvm16UnrollAndJamLoopEPNS_4LoopEjjjbPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPKNS_19TargetTransformInfoEPNS_8684078'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='321' u='c' c='_ZL15CloneLoopBlocksPN4llvm4LoopEPNS_5ValueEbbbPNS_10BasicBlockES5_S5_RSt6vectorIS5_SaIS5_EERNS_13LoopBlocksDFSERNS_8ValueMapIPKS2_NS_14WeakTrackingVH13680398'/>
