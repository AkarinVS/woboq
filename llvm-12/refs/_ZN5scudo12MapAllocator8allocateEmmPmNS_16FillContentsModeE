<dec f='llvm/compiler-rt/lib/scudo/standalone/secondary.h' l='261' type='void * scudo::MapAllocator::allocate(scudo::uptr Size, scudo::uptr AlignmentHint = 0, scudo::uptr * BlockEnd = nullptr, scudo::FillContentsMode FillContents = NoFill)'/>
<def f='llvm/compiler-rt/lib/scudo/standalone/secondary.h' l='321' ll='411' type='void * scudo::MapAllocator::allocate(scudo::uptr Size, scudo::uptr AlignmentHint = 0, scudo::uptr * BlockEnd = nullptr, scudo::FillContentsMode FillContents = NoFill)'/>
<doc f='llvm/compiler-rt/lib/scudo/standalone/secondary.h' l='310'>// As with the Primary, the size passed to this function includes any desired
// alignment, so that the frontend can align the user allocation. The hint
// parameter allows us to unmap spurious memory when dealing with larger
// (greater than a page) alignments on 32-bit platforms.
// Due to the sparsity of address space available on those platforms, requesting
// an allocation from the Secondary with a large alignment would end up wasting
// VA space (even though we are not committing the whole thing), hence the need
// to trim off some of the reserved space.
// For allocations requested with an alignment greater than or equal to a page,
// the committed memory will amount to something close to Size - AlignmentHint
// (pending rounding and headers).</doc>
