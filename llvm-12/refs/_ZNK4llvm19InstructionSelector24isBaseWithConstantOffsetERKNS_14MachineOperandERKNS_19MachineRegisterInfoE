<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelector.h' l='536' type='bool llvm::InstructionSelector::isBaseWithConstantOffset(const llvm::MachineOperand &amp; Root, const llvm::MachineRegisterInfo &amp; MRI) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelector.h' l='533'>/// Return true if the specified operand is a G_PTR_ADD with a G_CONSTANT on the
  /// right-hand side. GlobalISel&apos;s separation of pointer and integer types
  /// means that we don&apos;t need to worry about G_OR with equivalent semantics.</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/InstructionSelector.cpp' l='45' ll='60' type='bool llvm::InstructionSelector::isBaseWithConstantOffset(const llvm::MachineOperand &amp; Root, const llvm::MachineRegisterInfo &amp; MRI) const'/>
<use f='llvm/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp' l='5537' u='c' c='_ZNK12_GLOBAL__N_126AArch64InstructionSelector22selectAddrModeUnscaledERN4llvm14MachineOperandEj'/>
<use f='llvm/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp' l='5632' u='c' c='_ZNK12_GLOBAL__N_126AArch64InstructionSelector21selectAddrModeIndexedERN4llvm14MachineOperandEj'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp' l='3688' u='c' c='_ZNK4llvm25AMDGPUInstructionSelector23selectMUBUFScratchOffenERNS_14MachineOperandE'/>
