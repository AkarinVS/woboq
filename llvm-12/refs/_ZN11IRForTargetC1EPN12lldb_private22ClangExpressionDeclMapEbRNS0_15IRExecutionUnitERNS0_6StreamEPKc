<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='85' type='void IRForTarget::IRForTarget(lldb_private::ClangExpressionDeclMap * decl_map, bool resolve_vars, lldb_private::IRExecutionUnit &amp; execution_unit, lldb_private::Stream &amp; error_stream, const char * func_name = &quot;$__lldb_expr&quot;)'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpp' l='1398' u='c' c='_ZN12lldb_private21ClangExpressionParser19PrepareForExecutionERmS1_RSt10shared_ptrINS_15IRExecutionUnitEERNS_16ExecutionContextERbNS_15ExecutionPolicyE'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='65'>/// Constructor
  ///
  /// \param[in] decl_map
  ///     The list of externally-referenced variables for the expression,
  ///     for use in looking up globals and allocating the argument
  ///     struct.  See the documentation for ClangExpressionDeclMap.
  ///
  /// \param[in] resolve_vars
  ///     True if the external variable references (including persistent
  ///     variables) should be resolved.  If not, only external functions
  ///     are resolved.
  ///
  /// \param[in] execution_unit
  ///     The holder for raw data associated with the expression.
  ///
  /// \param[in] error_stream
  ///     If non-NULL, a stream on which errors can be printed.
  ///
  /// \param[in] func_name
  ///     The name of the function to prepare for execution in the target.</doc>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='70' ll='82' type='void IRForTarget::IRForTarget(lldb_private::ClangExpressionDeclMap * decl_map, bool resolve_vars, lldb_private::IRExecutionUnit &amp; execution_unit, lldb_private::Stream &amp; error_stream, const char * func_name = &quot;$__lldb_expr&quot;)'/>
