<dec f='llvm/llvm/include/llvm/Analysis/InstructionSimplify.h' l='288' type='llvm::Value * llvm::SimplifyFreezeInst(llvm::Value * Op, const llvm::SimplifyQuery &amp; Q)'/>
<doc f='llvm/llvm/include/llvm/Analysis/InstructionSimplify.h' l='286'>/// Given an operand for a Freeze, see if we can fold the result.
/// If not, this returns null.</doc>
<def f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='5787' ll='5789' type='llvm::Value * llvm::SimplifyFreezeInst(llvm::Value * Op0, const llvm::SimplifyQuery &amp; Q)'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='5935' u='c' c='_ZN4llvm19SimplifyInstructionEPNS_11InstructionERKNS_13SimplifyQueryEPNS_25OptimizationRemarkEmitterE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='3464' u='c' c='_ZN4llvm16InstCombinerImpl11visitFreezeERNS_10FreezeInstE'/>
