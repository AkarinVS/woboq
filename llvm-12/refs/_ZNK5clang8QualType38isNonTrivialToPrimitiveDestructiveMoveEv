<dec f='llvm/clang/include/clang/AST/Type.h' l='1188' type='clang::QualType::PrimitiveCopyKind clang::QualType::isNonTrivialToPrimitiveDestructiveMove() const'/>
<doc f='llvm/clang/include/clang/AST/Type.h' l='1182'>/// Check if this is a non-trivial type that would cause a C struct
  /// transitively containing this type to be non-trivial to destructively
  /// move and return the kind. Destructive move in this context is a C++-style
  /// move in which the source object is placed in a valid but unspecified state
  /// after it is moved, as opposed to a truly destructive move in which the
  /// source object is placed in an uninitialized state.</doc>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='6690' u='c' c='_ZN5clang10ASTContext20BlockRequiresCopyingENS_8QualTypeEPKNS_7VarDeclE'/>
<use f='llvm/clang/include/clang/AST/NonTrivialTypeVisitor.h' l='81' u='c' c='_ZN5clang17CopiedTypeVisitor5visitENS_8QualTypeEDpOTL0__'/>
<def f='llvm/clang/lib/AST/Type.cpp' l='2529' ll='2532' type='QualType::PrimitiveCopyKind clang::QualType::isNonTrivialToPrimitiveDestructiveMove() const'/>
<use f='llvm/clang/lib/CodeGen/CGBlocks.cpp' l='2560' u='c' c='_ZN5clang7CodeGen15CodeGenFunction17buildByrefHelpersERN4llvm10StructTypeERKNS1_15AutoVarEmissionE'/>
<use f='llvm/clang/lib/CodeGen/CGExprAgg.cpp' l='336' u='c' c='_ZN12_GLOBAL__N_114AggExprEmitter17EmitFinalDestCopyEN5clang8QualTypeERKNS1_7CodeGen6LValueENS0_13ExprValueKindE'/>
