<dec f='llvm/lldb/include/lldb/Breakpoint/WatchpointOptions.h' l='92' type='void lldb_private::WatchpointOptions::SetCallback(lldb_private::WatchpointHitCallback callback, const lldb::BatonSP &amp; baton_sp, bool synchronous = false)'/>
<doc f='llvm/lldb/include/lldb/Breakpoint/WatchpointOptions.h' l='53'>// Callbacks
  //
  // Watchpoint callbacks come in two forms, synchronous and asynchronous.
  // Synchronous callbacks will get run before any of the thread plans are
  // consulted, and if they return false the target will continue &quot;under the
  // radar&quot; of the thread plans.  There are a couple of restrictions to
  // synchronous callbacks: 1) They should NOT resume the target themselves.
  // Just return false if you want the target to restart. 2) Watchpoints with
  // synchronous callbacks can&apos;t have conditions (or rather, they can have
  // them, but they
  //    won&apos;t do anything.  Ditto with ignore counts, etc...  You are supposed
  //    to control that all through the
  //    callback.
  // Asynchronous callbacks get run as part of the &quot;ShouldStop&quot; logic in the
  // thread plan.  The logic there is:
  //   a) If the watchpoint is thread specific and not for this thread, continue
  //   w/o running the callback.
  //   b) If the ignore count says we shouldn&apos;t stop, then ditto.
  //   c) If the condition says we shouldn&apos;t stop, then ditto.
  //   d) Otherwise, the callback will get run, and if it returns true we will
  //   stop, and if false we won&apos;t.
  //  The asynchronous callback can run the target itself, but at present that
  //  should be the last action the
  //  callback does.  We will relax this condition at some point, but it will
  //  take a bit of plumbing to get
  //  that to work.
  //

  /// Adds a callback to the watchpoint option set.
  ///
  /// \param[in] callback
  ///    The function to be called when the watchpoint gets hit.
  ///
  /// \param[in] baton_sp
  ///    A baton which will get passed back to the callback when it is invoked.
  ///
  /// \param[in] synchronous
  ///    Whether this is a synchronous or asynchronous callback.  See discussion
  ///    above.</doc>
<use f='llvm/lldb/source/Breakpoint/Watchpoint.cpp' l='68' u='c' c='_ZN12lldb_private10Watchpoint11SetCallbackEPFbPvPNS_24StoppointCallbackContextEmES1_b'/>
<use f='llvm/lldb/source/Breakpoint/Watchpoint.cpp' l='79' u='c' c='_ZN12lldb_private10Watchpoint11SetCallbackEPFbPvPNS_24StoppointCallbackContextEmERKSt10shared_ptrINS_5BatonEEb'/>
<use f='llvm/lldb/source/Breakpoint/WatchpointOptions.cpp' l='62' u='c' c='_ZN12lldb_private17WatchpointOptions21CopyOptionsNoCallbackERS0_'/>
<def f='llvm/lldb/source/Breakpoint/WatchpointOptions.cpp' l='71' ll='77' type='void lldb_private::WatchpointOptions::SetCallback(lldb_private::WatchpointHitCallback callback, const lldb::BatonSP &amp; callback_baton_sp, bool callback_is_synchronous = false)'/>
<doc f='llvm/lldb/source/Breakpoint/WatchpointOptions.cpp' l='70'>// Callbacks</doc>
<use f='llvm/lldb/source/Commands/CommandObjectWatchpointCommand.cpp' l='236' u='c' c='_ZN33CommandObjectWatchpointCommandAdd22IOHandlerInputCompleteERN12lldb_private9IOHandlerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='llvm/lldb/source/Commands/CommandObjectWatchpointCommand.cpp' l='266' u='c' c='_ZN33CommandObjectWatchpointCommandAdd28SetWatchpointCommandCallbackEPN12lldb_private17WatchpointOptionsEPKc'/>
<use f='llvm/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPython.cpp' l='648' u='c' c='_ZN12lldb_private27ScriptInterpreterPythonImpl22IOHandlerInputCompleteERNS_9IOHandlerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='llvm/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPython.cpp' l='1319' u='c' c='_ZN12lldb_private27ScriptInterpreterPythonImpl28SetWatchpointCommandCallbackEPNS_17WatchpointOptionsEPKc'/>
