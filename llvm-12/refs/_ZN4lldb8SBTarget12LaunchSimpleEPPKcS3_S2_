<dec f='llvm/lldb/include/lldb/API/SBTarget.h' l='209' type='lldb::SBProcess lldb::SBTarget::LaunchSimple(const char ** argv, const char ** envp, const char * working_directory)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='53386' u='c' c='_ZL27_wrap_SBTarget_LaunchSimpleP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBTarget.h' l='183'>/// Launch a new process with sensible defaults.
  ///
  /// \param[in] argv
  ///     The argument array.
  ///
  /// \param[in] envp
  ///     The environment array. If this isn&apos;t provided, the default
  ///     environment values (provided through `settings set
  ///     target.env-vars`) will be used.
  ///
  /// \param[in] working_directory
  ///     The working directory to have the child process run in
  ///
  /// Default: listener
  ///     Set to the target&apos;s debugger (SBTarget::GetDebugger())
  ///
  /// Default: launch_flags
  ///     Empty launch flags
  ///
  /// Default: stdin_path
  /// Default: stdout_path
  /// Default: stderr_path
  ///     A pseudo terminal will be used.
  ///
  /// \return
  ///      A process object for the newly created process.</doc>
<def f='llvm/lldb/source/API/SBTarget.cpp' l='284' ll='308' type='lldb::SBProcess lldb::SBTarget::LaunchSimple(const char ** argv, const char ** envp, const char * working_directory)'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='286' u='a' c='_ZN4lldb8SBTarget12LaunchSimpleEPPKcS3_S2_'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='286' u='a' c='_ZN4lldb8SBTarget12LaunchSimpleEPPKcS3_S2_'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='2475' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
