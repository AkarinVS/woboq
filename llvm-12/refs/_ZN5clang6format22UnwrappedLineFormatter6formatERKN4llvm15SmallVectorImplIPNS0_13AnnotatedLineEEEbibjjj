<dec f='llvm/clang/lib/Format/UnwrappedLineFormatter.h' l='40' type='unsigned int clang::format::UnwrappedLineFormatter::format(const SmallVectorImpl&lt;clang::format::AnnotatedLine *&gt; &amp; Lines, bool DryRun = false, int AdditionalIndent = 0, bool FixBadIndentation = false, unsigned int FirstStartColumn = 0, unsigned int NextStartColumn = 0, unsigned int LastStartColumn = 0)'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='1588' u='c' c='_ZN5clang6format12_GLOBAL__N_19Formatter7analyzeERNS0_14TokenAnnotatorERN4llvm15SmallVectorImplIPNS0_13AnnotatedLineEEERNS0_16FormatTokenLexerE'/>
<doc f='llvm/clang/lib/Format/UnwrappedLineFormatter.h' l='39'>/// Format the current block and return the penalty.</doc>
<use f='llvm/clang/lib/Format/UnwrappedLineFormatter.cpp' l='811' u='c' c='_ZN5clang6format12_GLOBAL__N_113LineFormatter14formatChildrenERNS0_9LineStateEbbRj'/>
<def f='llvm/clang/lib/Format/UnwrappedLineFormatter.cpp' l='1089' ll='1210' type='unsigned int clang::format::UnwrappedLineFormatter::format(const SmallVectorImpl&lt;clang::format::AnnotatedLine *&gt; &amp; Lines, bool DryRun = false, int AdditionalIndent = 0, bool FixBadIndentation = false, unsigned int FirstStartColumn = 0, unsigned int NextStartColumn = 0, unsigned int LastStartColumn = 0)'/>
<use f='llvm/clang/lib/Format/UnwrappedLineFormatter.cpp' l='1176' u='c' c='_ZN5clang6format22UnwrappedLineFormatter6formatERKN4llvm15SmallVectorImplIPNS0_13AnnotatedLineEEEbibjjj'/>
