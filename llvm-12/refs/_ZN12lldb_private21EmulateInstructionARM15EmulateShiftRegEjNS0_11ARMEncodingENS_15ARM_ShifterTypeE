<dec f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='451' type='bool lldb_private::EmulateInstructionARM::EmulateShiftReg(const uint32_t opcode, const lldb_private::EmulateInstructionARM::ARMEncoding encoding, lldb_private::ARM_ShifterType shift_type)'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3574' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateASRRegEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3621' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateLSLRegEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3669' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateLSRRegEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3718' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateRORRegEjNS0_11ARMEncodingE'/>
<def f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3837' ll='3906' type='bool lldb_private::EmulateInstructionARM::EmulateShiftReg(const uint32_t opcode, const lldb_private::EmulateInstructionARM::ARMEncoding encoding, lldb_private::ARM_ShifterType shift_type)'/>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='450'>// Helper method for ASR, LSL, LSR, and ROR (register)</doc>
