<dec f='llvm/lldb/include/lldb/Target/Thread.h' l='865' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOutNoShouldStop(bool abort_other_plans, lldb_private::SymbolContext * addr_context, bool first_insn, bool stop_other_threads, lldb_private::Vote stop_vote, lldb_private::Vote run_vote, uint32_t frame_idx, lldb_private::Status &amp; status, bool continue_to_next_branch = false)'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='807'>/// Queue the plan used to step out of the function at the current PC of
  /// a thread.  This version does not consult the should stop here callback,
  /// and should only
  /// be used by other thread plans when they need to retain control of the step
  /// out.
  ///
  /// \param[in] abort_other_plans
  ///    \b true if we discard the currently queued plans and replace them with
  ///    this one.
  ///    Otherwise this plan will go on the end of the plan stack.
  ///
  /// \param[in] addr_context
  ///    When dealing with stepping through inlined functions the current PC is
  ///    not enough information to know
  ///    what &quot;step&quot; means.  For instance a series of nested inline functions
  ///    might start at the same address.
  //     The \a addr_context provides the current symbol context the step
  ///    is supposed to be out of.
  //   FIXME: Currently unused.
  ///
  /// \param[in] first_insn
  ///     \b true if this is the first instruction of a function.
  ///
  /// \param[in] stop_other_threads
  ///    \b true if we will stop other threads while we single step this one.
  ///
  /// \param[in] stop_vote
  ///    See standard meanings for the stop &amp; run votes in ThreadPlan.h.
  ///
  /// \param[in] run_vote
  ///    See standard meanings for the stop &amp; run votes in ThreadPlan.h.
  ///
  /// \param[in] frame_idx
  ///     The fame index.
  ///
  /// \param[out] status
  ///     A status with an error if queuing failed.
  ///
  /// \param[in] continue_to_next_branch
  ///    Normally this will enqueue a plan that will put a breakpoint on the
  ///    return address and continue
  ///    to there.  If continue_to_next_branch is true, this is an operation not
  ///    involving the user --
  ///    e.g. stepping &quot;next&quot; in a source line and we instruction stepped into
  ///    another function --
  ///    so instead of putting a breakpoint on the return address, advance the
  ///    breakpoint to the
  ///    end of the source line that is doing the call, or until the next flow
  ///    control instruction.
  ///    If the return value from the function call is to be retrieved /
  ///    displayed to the user, you must stop
  ///    on the return address.  The return value may be stored in volatile
  ///    registers which are overwritten
  ///    before the next branch instruction.
  ///
  /// \return
  ///     A shared pointer to the newly queued thread plan, or nullptr if the
  ///     plan could not be queued.</doc>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleThreadPlanStepThroughObjCTrampoline.cpp' l='159' u='c' c='_ZN12lldb_private40AppleThreadPlanStepThroughObjCTrampoline10ShouldStopEPNS_5EventE'/>
<def f='llvm/lldb/source/Target/Thread.cpp' l='1334' ll='1350' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOutNoShouldStop(bool abort_other_plans, lldb_private::SymbolContext * addr_context, bool first_insn, bool stop_other_threads, lldb_private::Vote stop_vote, lldb_private::Vote run_vote, uint32_t frame_idx, lldb_private::Status &amp; status, bool continue_to_next_branch = false)'/>
<use f='llvm/lldb/source/Target/ThreadPlanShouldStopHere.cpp' l='137' u='c' c='_ZN12lldb_private24ThreadPlanShouldStopHere27DefaultStepFromHereCallbackEPNS_10ThreadPlanERNS_5FlagsEN4lldb15FrameComparisonERNS_6StatusEPv'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepInstruction.cpp' l='199' u='c' c='_ZN12lldb_private25ThreadPlanStepInstruction10ShouldStopEPNS_5EventE'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepOverRange.cpp' l='178' u='c' c='_ZN12lldb_private23ThreadPlanStepOverRange10ShouldStopEPNS_5EventE'/>
