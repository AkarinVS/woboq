<def f='llvm/llvm/include/llvm/IR/Instruction.h' l='215' ll='217' type='bool llvm::Instruction::isBitwiseLogicOp() const'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='214'>/// Return true if this is and/or/xor.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='1099' u='c' c='_ZL16canEvaluateZExtdPN4llvm5ValueEPNS_4TypeERjRNS_16InstCombinerImplEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='2274' u='c' c='_ZL23foldBitCastBitwiseLogicRN4llvm11BitCastInstERNS_9IRBuilderINS_12TargetFolderENS_25IRBuilderCallbackInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='328' u='c' c='_ZL23foldShiftOfShiftedLogicRN4llvm14BinaryOperatorERNS_9IRBuilderINS_12TargetFolderENS_25IRBuilderCallbackInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='322' u='c' c='_ZL22simplifyAssocCastAssocPN4llvm14BinaryOperatorERNS_16InstCombinerImplE'/>
