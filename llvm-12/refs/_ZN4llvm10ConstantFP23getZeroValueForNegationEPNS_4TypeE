<dec f='llvm/llvm/include/llvm/IR/Constants.h' l='288' type='static llvm::Constant * llvm::ConstantFP::getZeroValueForNegation(llvm::Type * Ty)'/>
<doc f='llvm/llvm/include/llvm/IR/Constants.h' l='285'>/// Floating point negation must be implemented with f(x) = -0.0 - x. This
  /// method returns the negative zero constant for floating point or vector
  /// floating point types; for all other types, it returns the null value.</doc>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='9954' u='c' c='_ZN5clang7CodeGen15CodeGenFunction22EmitAArch64BuiltinExprEjPKNS_8CallExprEN4llvm6Triple8ArchTypeE'/>
<def f='llvm/llvm/lib/IR/Constants.cpp' l='1000' ll='1005' type='static llvm::Constant * llvm::ConstantFP::getZeroValueForNegation(llvm::Type * Ty)'/>
<use f='llvm/llvm/lib/IR/Constants.cpp' l='2614' u='c' c='_ZN4llvm12ConstantExpr6getNegEPNS_8ConstantEbb'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2537' u='c' c='_ZN4llvm14BinaryOperator9CreateNegEPNS_5ValueERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2545' u='c' c='_ZN4llvm14BinaryOperator9CreateNegEPNS_5ValueERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2553' u='c' c='_ZN4llvm14BinaryOperator12CreateNSWNegEPNS_5ValueERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2559' u='c' c='_ZN4llvm14BinaryOperator12CreateNSWNegEPNS_5ValueERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2565' u='c' c='_ZN4llvm14BinaryOperator12CreateNUWNegEPNS_5ValueERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2571' u='c' c='_ZN4llvm14BinaryOperator12CreateNUWNegEPNS_5ValueERKNS_5TwineEPNS_10BasicBlockE'/>
