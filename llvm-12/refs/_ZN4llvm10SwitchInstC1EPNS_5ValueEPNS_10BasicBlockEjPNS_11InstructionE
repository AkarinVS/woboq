<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='3172' type='void llvm::SwitchInst::SwitchInst(llvm::Value * Value, llvm::BasicBlock * Default, unsigned int NumCases, llvm::Instruction * InsertBefore)'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='3352' u='c' c='_ZN4llvm10SwitchInst6CreateEPNS_5ValueEPNS_10BasicBlockEjPNS_11InstructionE'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='3168'>/// Create a new switch instruction, specifying a value to switch on and a
  /// default destination. The number of additional cases can be specified here
  /// to make memory allocation more efficient. This constructor can also
  /// auto-insert before another instruction.</doc>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='3990' ll='3995' type='void llvm::SwitchInst::SwitchInst(llvm::Value * Value, llvm::BasicBlock * Default, unsigned int NumCases, llvm::Instruction * InsertBefore)'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='3986'>/// SwitchInst ctor - Create a new switch instruction, specifying a value to
/// switch on and a default destination.  The number of additional cases can
/// be specified here to make memory allocation more efficient.  This
/// constructor can also autoinsert before another instruction.</doc>
