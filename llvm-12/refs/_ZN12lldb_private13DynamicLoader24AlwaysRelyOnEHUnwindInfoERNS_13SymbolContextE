<def f='llvm/lldb/include/lldb/Target/DynamicLoader.h' l='181' ll='183' type='bool lldb_private::DynamicLoader::AlwaysRelyOnEHUnwindInfo(lldb_private::SymbolContext &amp; sym_ctx)'/>
<doc f='llvm/lldb/include/lldb/Target/DynamicLoader.h' l='161'>/// Ask if the eh_frame information for the given SymbolContext should be
  /// relied on even when it&apos;s the first frame in a stack unwind.
  ///
  /// The CFI instructions from the eh_frame section are normally only valid
  /// at call sites -- places where a program could throw an exception and
  /// need to unwind out.  But some Modules may be known to the system as
  /// having reliable eh_frame information at all call sites.  This would be
  /// the case if the Module&apos;s contents are largely hand-written assembly with
  /// hand-written eh_frame information. Normally when unwinding from a
  /// function at the beginning of a stack unwind lldb will examine the
  /// assembly instructions to understand how the stack frame is set up and
  /// where saved registers are stored. But with hand-written assembly this is
  /// not reliable enough -- we need to consult those function&apos;s hand-written
  /// eh_frame information.
  ///
  /// \return
  ///     \b True if the symbol context should use eh_frame instructions
  ///     unconditionally when unwinding from this frame.  Else \b false,
  ///     the normal lldb unwind behavior of only using eh_frame when the
  ///     function appears in the middle of the stack.</doc>
<ovr f='llvm/lldb/source/Plugins/DynamicLoader/MacOSX-DYLD/DynamicLoaderDarwin.cpp' l='737' c='_ZN12lldb_private19DynamicLoaderDarwin24AlwaysRelyOnEHUnwindInfoERNS_13SymbolContextE'/>
<ovr f='llvm/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.cpp' l='783' c='_ZN22DynamicLoaderPOSIXDYLD24AlwaysRelyOnEHUnwindInfoERN12lldb_private13SymbolContextE'/>
<use f='llvm/lldb/source/Target/RegisterContextUnwind.cpp' l='832' u='c' c='_ZN12lldb_private21RegisterContextUnwind25GetFullUnwindPlanForFrameEv'/>
