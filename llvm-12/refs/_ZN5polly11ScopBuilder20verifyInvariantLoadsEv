<dec f='llvm/polly/include/polly/ScopBuilder.h' l='679' type='void polly::ScopBuilder::verifyInvariantLoads()'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2758' ll='2770' type='void polly::ScopBuilder::verifyInvariantLoads()'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3770' u='c' c='_ZN5polly11ScopBuilder9buildScopERN4llvm6RegionERNS1_15AssumptionCacheE'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='666'>/// Verify that all required invariant loads have been hoisted.
  ///
  /// Invariant load hoisting is not guaranteed to hoist all loads that were
  /// assumed to be scop invariant during scop detection. This function checks
  /// for cases where the hoisting failed, but where it would have been
  /// necessary for our scop modeling to be correct. In case of insufficient
  /// hoisting the scop is marked as invalid.
  ///
  /// In the example below Bound[1] is required to be invariant:
  ///
  /// for (int i = 1; i &lt; Bound[0]; i++)
  ///   for (int j = 1; j &lt; Bound[1]; j++)
  ///     ...</doc>
