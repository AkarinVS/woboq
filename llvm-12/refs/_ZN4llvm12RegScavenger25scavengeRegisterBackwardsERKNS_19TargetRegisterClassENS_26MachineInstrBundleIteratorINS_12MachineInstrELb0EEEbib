<dec f='llvm/llvm/include/llvm/CodeGen/RegisterScavenging.h' l='171' type='llvm::Register llvm::RegScavenger::scavengeRegisterBackwards(const llvm::TargetRegisterClass &amp; RC, MachineBasicBlock::iterator To, bool RestoreAfter, int SPAdj, bool AllowSpill = true)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/RegisterScavenging.h' l='162'>/// Make a register of the specific register class available from the current
  /// position backwards to the place before \p To. If \p RestoreAfter is true
  /// this includes the instruction following the current position.
  /// SPAdj is the stack adjustment due to call frame, it&apos;s passed along to
  /// eliminateFrameIndex().
  /// Returns the scavenged register.
  ///
  /// If \p AllowSpill is false, fail if a spill is required to make the
  /// register available, and return NoRegister.</doc>
<def f='llvm/llvm/lib/CodeGen/RegisterScavenging.cpp' l='561' ll='599' type='llvm::Register llvm::RegScavenger::scavengeRegisterBackwards(const llvm::TargetRegisterClass &amp; RC, MachineBasicBlock::iterator To, bool RestoreAfter, int SPAdj, bool AllowSpill = true)'/>
<use f='llvm/llvm/lib/CodeGen/RegisterScavenging.cpp' l='649' u='c' c='_ZL12scavengeVRegRN4llvm19MachineRegisterInfoERNS_12RegScavengerENS_8RegisterEb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='2164' u='c' c='_ZNK4llvm11SIInstrInfo20insertIndirectBranchERNS_17MachineBasicBlockES2_RKNS_8DebugLocElPNS_12RegScavengerE'/>
<use f='llvm/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp' l='442' u='c' c='_ZNK4llvm14RISCVInstrInfo20insertIndirectBranchERNS_17MachineBasicBlockES2_RKNS_8DebugLocElPNS_12RegScavengerE'/>
