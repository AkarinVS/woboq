<dec f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='214' type='bool lldb_private::EmulateInstructionARM::WriteFlags(lldb_private::EmulateInstruction::Context &amp; context, const uint32_t result, const uint32_t carry = ~0U, const uint32_t overflow = ~0U)'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3332' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateCMNImmEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3399' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateCMNRegEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3449' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateCMPImmEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3525' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateCMPRegEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='9809' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateTEQImmEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='9875' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateTEQRegEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='9934' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateTSTImmEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='10006' u='c' c='_ZN12lldb_private21EmulateInstructionARM13EmulateTSTRegEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='10201' u='c' c='_ZN12lldb_private21EmulateInstructionARM18EmulateADDRegShiftEjNS0_11ARMEncodingE'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='14277' u='c' c='_ZN12lldb_private21EmulateInstructionARM25WriteCoreRegOptionalFlagsERNS_18EmulateInstruction7ContextEjjbjj'/>
<def f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='14292' ll='14308' type='bool lldb_private::EmulateInstructionARM::WriteFlags(lldb_private::EmulateInstruction::Context &amp; context, const uint32_t result, const uint32_t carry = ~0U, const uint32_t overflow = ~0U)'/>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='14282'>// This helper method tries to encapsulate the following pseudocode from the
// ARM Architecture Reference Manual:
//
// APSR.N = result&lt;31&gt;;
// APSR.Z = IsZeroBit(result);
// APSR.C = carry;
// APSR.V = overflow
//
// Default arguments can be specified for carry and overflow parameters, which
// means not to update the respective flags.</doc>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='210'>// See A8.6.35 CMP (immediate) Operation.
  // Default arguments are specified for carry and overflow parameters, which
  // means
  // not to update the respective flags.</doc>
