<def f='llvm/polly/lib/External/pet/include/pet.h' l='376' ll='383'/>
<use f='llvm/polly/lib/External/pet/include/pet.h' l='386' c='pet_stmt_get_space'/>
<use f='llvm/polly/lib/External/pet/include/pet.h' l='389' c='pet_stmt_is_assign'/>
<use f='llvm/polly/lib/External/pet/include/pet.h' l='391' c='pet_stmt_is_kill'/>
<use f='llvm/polly/lib/External/pet/include/pet.h' l='398' c='pet_stmt_can_build_ast_exprs'/>
<use f='llvm/polly/lib/External/pet/include/pet.h' l='406' c='pet_stmt_build_ast_exprs'/>
<use f='llvm/polly/lib/External/pet/include/pet.h' l='419' c='pet_stmt_print_body'/>
<use f='llvm/polly/lib/External/pet/include/pet.h' l='527'/>
<use f='llvm/polly/lib/External/ppcg/gpu.h' l='53'/>
<size>40</size>
<doc f='llvm/polly/lib/External/pet/include/pet.h' l='362'>/* &quot;loc&quot; represents the region of the source code that is represented
 * by this statement.
 *
 * If the statement has arguments, i.e., n_arg != 0, then
 * &quot;domain&quot; is a wrapped map, mapping the iteration domain
 * to the values of the arguments for which this statement
 * is executed.
 * Otherwise, it is simply the iteration domain.
 *
 * If one of the arguments is an access expression that accesses
 * more than one element for a given iteration, then the constraints
 * on the value of this argument (encoded in &quot;domain&quot;) should be satisfied
 * for all of those accessed elements.
 */</doc>
<mbr r='pet_stmt::loc' o='0' t='pet_loc *'/>
<mbr r='pet_stmt::domain' o='64' t='isl_set *'/>
<mbr r='pet_stmt::body' o='128' t='pet_tree *'/>
<mbr r='pet_stmt::n_arg' o='192' t='unsigned int'/>
<mbr r='pet_stmt::args' o='256' t='pet_expr **'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='5552' c='is_stmt_killed'/>
<size>40</size>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='213' c='is_not_kill'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='222' c='collect_domains'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='234' c='collect_domains'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='303' c='has_call'/>
<size>40</size>
