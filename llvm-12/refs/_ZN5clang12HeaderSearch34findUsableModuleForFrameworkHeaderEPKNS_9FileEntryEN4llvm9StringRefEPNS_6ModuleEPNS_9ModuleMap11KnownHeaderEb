<dec f='llvm/clang/include/clang/Lex/HeaderSearch.h' l='685' type='bool clang::HeaderSearch::findUsableModuleForFrameworkHeader(const clang::FileEntry * File, llvm::StringRef FrameworkName, clang::Module * RequestingModule, ModuleMap::KnownHeader * SuggestedModule, bool IsSystemFramework)'/>
<doc f='llvm/clang/include/clang/Lex/HeaderSearch.h' l='680'>/// Find and suggest a usable module for the given file, which is part of
  /// the specified framework.
  ///
  /// \return \c true if the file can be used, \c false if we are not permitted to
  ///         find this file due to requirements from \p RequestingModule.</doc>
<use f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='636' u='c' c='_ZNK5clang15DirectoryLookup17DoFrameworkLookupEN4llvm9StringRefERNS_12HeaderSearchEPNS1_15SmallVectorImplIcEES7_PNS_6ModuleEPNS_9ModuleMap11KnownHeaderERbSD_'/>
<use f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='1144' u='c' c='_ZN5clang12HeaderSearch24LookupSubframeworkHeaderEN4llvm9StringRefEPKNS_9FileEntryEPNS1_15SmallVectorImplIcEES8_PNS_6ModuleEPNS_9ModuleMap11KnownHeaderE'/>
<def f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='1476' ll='1500' type='bool clang::HeaderSearch::findUsableModuleForFrameworkHeader(const clang::FileEntry * File, llvm::StringRef FrameworkName, clang::Module * RequestingModule, ModuleMap::KnownHeader * SuggestedModule, bool IsSystemFramework)'/>
