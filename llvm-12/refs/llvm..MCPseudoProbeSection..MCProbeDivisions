<use f='llvm/llvm/include/llvm/MC/MCPseudoProbe.h' l='135' u='m' c='_ZN4llvm20MCPseudoProbeSection14addPseudoProbeEPNS_9MCSectionERKNS_13MCPseudoProbeERKNS_11SmallVectorISt5tupleIJmjEELj8EEE'/>
<dec f='llvm/llvm/include/llvm/MC/MCPseudoProbe.h' l='148' type='llvm::MCPseudoProbeSection::MCProbeDivisionMap'/>
<use f='llvm/llvm/include/llvm/MC/MCPseudoProbe.h' l='151' u='a' c='_ZNK4llvm20MCPseudoProbeSection11getMCProbesEv'/>
<use f='llvm/llvm/include/llvm/MC/MCPseudoProbe.h' l='153' u='m' c='_ZNK4llvm20MCPseudoProbeSection5emptyEv'/>
<offset>0</offset>
<doc f='llvm/llvm/include/llvm/MC/MCPseudoProbe.h' l='142'>// A collection of MCPseudoProbe for each text section. The MCPseudoProbes
  // are grouped by GUID of the functions where they are from and will be
  // encoded by groups. In the comdat scenario where a text section really only
  // contains the code of a function solely, the probes associated with a comdat
  // function are still grouped by GUIDs due to inlining that can bring probes
  // from different functions into one function.</doc>
<use f='llvm/llvm/lib/MC/MCPseudoProbe.cpp' l='184' c='_ZN4llvm20MCPseudoProbeSection4emitEPNS_16MCObjectStreamerE'/>
