<dec f='llvm/llvm/include/llvm/Support/MemoryBuffer.h' l='93' type='static ErrorOr&lt;std::unique_ptr&lt;MemoryBuffer&gt; &gt; llvm::MemoryBuffer::getFileAsStream(const llvm::Twine &amp; Filename)'/>
<doc f='llvm/llvm/include/llvm/Support/MemoryBuffer.h' l='89'>/// Read all of the specified file into a MemoryBuffer as a stream
  /// (i.e. until EOF reached). This is useful for special files that
  /// look like a regular file but have 0 size (e.g. /proc/cpuinfo on Linux).</doc>
<use f='llvm/clang/tools/clang-format/ClangFormat.cpp' l='365' u='c' c='_ZN5clang6formatL6formatEN4llvm9StringRefE'/>
<use f='llvm/lldb/source/Host/linux/Support.cpp' l='19' u='c' c='_ZN12lldb_private11getProcFileEiiRKN4llvm5TwineE'/>
<use f='llvm/lldb/source/Host/linux/Support.cpp' l='29' u='c' c='_ZN12lldb_private11getProcFileEiRKN4llvm5TwineE'/>
<use f='llvm/lldb/source/Host/linux/Support.cpp' l='39' u='c' c='_ZN12lldb_private11getProcFileERKN4llvm5TwineE'/>
<use f='llvm/lldb/source/Plugins/Process/Linux/ProcessorTrace.cpp' l='51' u='c' c='_ZN12lldb_private13process_linux21ProcessorTraceMonitor14GetOSEventTypeEv'/>
<use f='llvm/llvm/lib/Support/Host.cpp' l='60' u='c' c='_ZL21getProcCpuinfoContentv'/>
<use f='llvm/llvm/lib/Support/Host.cpp' l='1239' u='c' c='_Z27computeHostNumPhysicalCoresv'/>
<def f='llvm/llvm/lib/Support/MemoryBuffer.cpp' l='520' ll='531' type='static ErrorOr&lt;std::unique_ptr&lt;MemoryBuffer&gt; &gt; llvm::MemoryBuffer::getFileAsStream(const llvm::Twine &amp; Filename)'/>
