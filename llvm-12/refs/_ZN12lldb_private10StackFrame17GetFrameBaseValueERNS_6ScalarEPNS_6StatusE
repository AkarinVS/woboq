<dec f='llvm/lldb/include/lldb/Target/StackFrame.h' l='185' type='bool lldb_private::StackFrame::GetFrameBaseValue(lldb_private::Scalar &amp; value, lldb_private::Status * error_ptr)'/>
<doc f='llvm/lldb/include/lldb/Target/StackFrame.h' l='165'>/// Return the Canonical Frame Address (DWARF term) for this frame.
  ///
  /// The CFA is typically the value of the stack pointer register before the
  /// call invocation is made.  It will not change during the lifetime of a
  /// stack frame.  It is often not the same thing as the frame pointer
  /// register value.
  ///
  /// Live StackFrames will always have a CFA but other types of frames may
  /// not be able to supply one.
  ///
  /// \param [out] value
  ///   The address of the CFA for this frame, if available.
  ///
  /// \param [out] error_ptr
  ///   If there is an error determining the CFA address, this may contain a
  ///   string explaining the failure.
  ///
  /// \return
  ///   Returns true if the CFA value was successfully set in value.  Some
  ///   frames may be unable to provide this value; they will return false.</doc>
<use f='llvm/lldb/source/Expression/DWARFExpression.cpp' l='2036' u='c' c='_ZN12lldb_private15DWARFExpression8EvaluateEPNS_16ExecutionContextEPNS_15RegisterContextESt10shared_ptrINS_6ModuleEERKNS_13DataExtractorEPK9DWARFUnitN14341292'/>
<def f='llvm/lldb/source/Target/StackFrame.cpp' l='1060' ll='1104' type='bool lldb_private::StackFrame::GetFrameBaseValue(lldb_private::Scalar &amp; frame_base, lldb_private::Status * error_ptr)'/>
