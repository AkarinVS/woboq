<dec f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.h' l='105' type='unsigned int llvm::AggressiveAntiDepState::UnionGroups(unsigned int Reg1, unsigned int Reg2)'/>
<def f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='89' ll='102' type='unsigned int llvm::AggressiveAntiDepState::UnionGroups(unsigned int Reg1, unsigned int Reg2)'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='161' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker10StartBlockEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='179' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker10StartBlockEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='216' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker7ObserveERNS_12MachineInstrEjj'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='387' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker18PrescanInstructionERNS_12MachineInstrEjRSt3setIjSt4lessIjESaIjEE'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='395' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker18PrescanInstructionERNS_12MachineInstrEjRSt3setIjSt4lessIjESaIjEE'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='482' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker15ScanInstructionERNS_12MachineInstrEj'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='509' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker15ScanInstructionERNS_12MachineInstrEj'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='984' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker21BreakAntiDependenciesERKSt6vectorINS_5SUnitESaIS2_EENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEES9_jRS10755327'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='989' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker21BreakAntiDependenciesERKSt6vectorINS_5SUnitESaIS2_EENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEES9_jRS10755327'/>
<doc f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.h' l='103'>// Union Reg1&apos;s and Reg2&apos;s groups to form a new group.
    // Return the index of the GroupNode representing the group.</doc>
