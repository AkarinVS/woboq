<dec f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.h' l='234' type='std::pair&lt;MachineInstr *, MachineInstr *&gt; llvm::SIInstrInfo::expandMovDPP64(llvm::MachineInstr &amp; MI) const'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.h' l='228'>// Splits a V_MOV_B64_DPP_PSEUDO opcode into a pair of v_mov_b32_dpp
  // instructions. Returns a pair of generated instructions.
  // Can split either post-RA with physical registers or pre-RA with
  // virtual registers. In latter case IR needs to be in SSA form and
  // and a REG_SEQUENCE is produced to define original register.</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/GCNDPPCombine.cpp' l='584' u='c' c='_ZN12_GLOBAL__N_113GCNDPPCombine20runOnMachineFunctionERN4llvm15MachineFunctionE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='1672' u='c' c='_ZNK4llvm11SIInstrInfo18expandPostRAPseudoERNS_12MachineInstrE'/>
<def f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='1868' ll='1924' type='std::pair&lt;MachineInstr *, MachineInstr *&gt; llvm::SIInstrInfo::expandMovDPP64(llvm::MachineInstr &amp; MI) const'/>
