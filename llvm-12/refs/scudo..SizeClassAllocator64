<def f='llvm/compiler-rt/lib/scudo/standalone/primary64.h' l='43' ll='444'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/primary64.h' l='46'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/allocator_config.h' l='31'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/allocator_config.h' l='55'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/allocator_config.h' l='80'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/allocator_config.h' l='105'/>
<doc f='llvm/compiler-rt/lib/scudo/standalone/primary64.h' l='24'>// SizeClassAllocator64 is an allocator tuned for 64-bit address space.
//
// It starts by reserving NumClasses * 2^RegionSizeLog bytes, equally divided in
// Regions, specific to each size class. Note that the base of that mapping is
// random (based to the platform specific map() capabilities), and that each
// Region actually starts at a random offset from its base.
//
// Regions are mapped incrementally on demand to fulfill allocation requests,
// those mappings being split into equally sized Blocks based on the size class
// they belong to. The Blocks created are shuffled to prevent predictable
// address patterns (the predictability increases with the size of the Blocks).
//
// The 1st Region (for size class 0) holds the TransferBatches. This is a
// structure used to transfer arrays of available pointers from the class size
// freelist to the thread specific freelist, and back.
//
// The memory used by this allocator is never unmapped, but can be partially
// released if the platform allows for it.</doc>
<fun r='_ZN5scudo20SizeClassAllocator6416getSizeByClassIdEm'/>
<fun r='_ZN5scudo20SizeClassAllocator6411canAllocateEm'/>
<fun r='_ZN5scudo20SizeClassAllocator6421initLinkerInitializedEi'/>
<fun r='_ZN5scudo20SizeClassAllocator644initEi'/>
<fun r='_ZN5scudo20SizeClassAllocator6413unmapTestOnlyEv'/>
<fun r='_ZN5scudo20SizeClassAllocator648popBatchEPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator64IT_EEEEm'/>
<fun r='_ZN5scudo20SizeClassAllocator649pushBatchEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator64IT_EEE13TransferBatchE'/>
<fun r='_ZN5scudo20SizeClassAllocator647disableEv'/>
<fun r='_ZN5scudo20SizeClassAllocator646enableEv'/>
<fun r='_ZN5scudo20SizeClassAllocator6417iterateOverBlocksETL0__'/>
<fun r='_ZN5scudo20SizeClassAllocator648getStatsEPNS_12ScopedStringE'/>
<fun r='_ZN5scudo20SizeClassAllocator649setOptionENS_6OptionEl'/>
<fun r='_ZN5scudo20SizeClassAllocator6411releaseToOSEv'/>
<fun r='_ZNK5scudo20SizeClassAllocator6425getRegionInfoArrayAddressEv'/>
<fun r='_ZN5scudo20SizeClassAllocator6422getRegionInfoArraySizeEv'/>
<fun r='_ZN5scudo20SizeClassAllocator6416findNearestBlockEPKcm'/>
<mbr r='scudo::SizeClassAllocator64::Options' t='scudo::AtomicOptions'/>
<smbr r='scudo::SizeClassAllocator64::RegionSize' t='const scudo::uptr'/>
<smbr r='scudo::SizeClassAllocator64::NumClasses' t='const scudo::uptr'/>
<smbr r='scudo::SizeClassAllocator64::PrimarySize' t='const scudo::uptr'/>
<smbr r='scudo::SizeClassAllocator64::MapSizeIncrement' t='const scudo::uptr'/>
<smbr r='scudo::SizeClassAllocator64::MaxNumBatches' t='const scudo::u32'/>
<mbr r='scudo::SizeClassAllocator64::PrimaryBase' t='scudo::uptr'/>
<mbr r='scudo::SizeClassAllocator64::Data' t='scudo::MapPlatformData'/>
<mbr r='scudo::SizeClassAllocator64::ReleaseToOsIntervalMs' t='scudo::atomic_s32'/>
<mbr r='scudo::SizeClassAllocator64::RegionInfoArray' t='scudo::SizeClassAllocator64::RegionInfo [NumClasses]'/>
<fun r='_ZN5scudo20SizeClassAllocator6413getRegionInfoEm'/>
<fun r='_ZNK5scudo20SizeClassAllocator6422getRegionBaseByClassIdEm'/>
<fun r='_ZN5scudo20SizeClassAllocator6416populateFreeListEPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator64IT_EEEEmPNS0_10RegionInfoE'/>
<fun r='_ZN5scudo20SizeClassAllocator648getStatsEPNS_12ScopedStringEmm'/>
<fun r='_ZN5scudo20SizeClassAllocator6416releaseToOSMaybeEPNS0_10RegionInfoEmb'/>
