<dec f='llvm/compiler-rt/lib/lsan/lsan_common.h' l='239' type='void __lsan::EnsureMainThreadIDIsCorrect()'/>
<doc f='llvm/compiler-rt/lib/lsan/lsan_common.h' l='233'>// If called from the main thread, updates the main thread&apos;s TID in the thread
// registry. We need this to handle processes that fork() without a subsequent
// exec(), which invalidates the recorded TID. To update it, we must call
// gettid() from the main thread. Our solution is to call this function before
// leak checking and also before every call to pthread_create() (to handle cases
// where leak checking is initiated from a non-main thread).</doc>
<def f='llvm/compiler-rt/lib/asan/asan_thread.cpp' l='514' ll='516' type='void __lsan::EnsureMainThreadIDIsCorrect()'/>
<dec f='llvm/compiler-rt/lib/lsan/lsan_thread.h' l='57' type='void __lsan::EnsureMainThreadIDIsCorrect()'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='708' u='c' c='__lsan::CheckForLeaks'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='438' u='c' c='__interceptor_pthread_create'/>
<def f='llvm/compiler-rt/lib/lsan/lsan_thread.cpp' l='96' ll='99' type='void __lsan::EnsureMainThreadIDIsCorrect()'/>
