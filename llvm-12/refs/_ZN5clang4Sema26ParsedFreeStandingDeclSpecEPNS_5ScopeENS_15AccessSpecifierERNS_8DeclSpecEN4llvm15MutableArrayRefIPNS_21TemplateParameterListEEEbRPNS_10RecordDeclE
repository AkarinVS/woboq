<dec f='llvm/clang/include/clang/Sema/Sema.h' l='2929' type='clang::Decl * clang::Sema::ParsedFreeStandingDeclSpec(clang::Scope * S, clang::AccessSpecifier AS, clang::DeclSpec &amp; DS, clang::MultiTemplateParamsArg TemplateParams, bool IsExplicitInstantiation, clang::RecordDecl *&amp; AnonRecord)'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='2657' u='c' c='_ZN5clang6Parser30ParseCXXClassMemberDeclarationENS_15AccessSpecifierERNS_16ParsedAttributesERKNS0_18ParsedTemplateInfoEPNS_21ParsingDeclRAIIObjectE'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='229' u='c' c='_ZN5clang6Parser35ParseSingleDeclarationAfterTemplateENS_17DeclaratorContextERKNS0_18ParsedTemplateInfoERNS_21ParsingDeclRAIIObjectERNS_14SourceLocati9492424'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='4343' u='c' c='_ZN5clang4Sema26ParsedFreeStandingDeclSpecEPNS_5ScopeENS_15AccessSpecifierERNS_8DeclSpecERPNS_10RecordDeclE'/>
<def f='llvm/clang/lib/Sema/SemaDecl.cpp' l='4557' ll='4814' type='clang::Decl * clang::Sema::ParsedFreeStandingDeclSpec(clang::Scope * S, clang::AccessSpecifier AS, clang::DeclSpec &amp; DS, clang::MultiTemplateParamsArg TemplateParams, bool IsExplicitInstantiation, clang::RecordDecl *&amp; AnonRecord)'/>
<doc f='llvm/clang/lib/Sema/SemaDecl.cpp' l='4554'>/// ParsedFreeStandingDeclSpec - This method is invoked when a declspec with
/// no declarator (e.g. &quot;struct foo;&quot;) is parsed. It also accepts template
/// parameters to cope with template friend declarations.</doc>
