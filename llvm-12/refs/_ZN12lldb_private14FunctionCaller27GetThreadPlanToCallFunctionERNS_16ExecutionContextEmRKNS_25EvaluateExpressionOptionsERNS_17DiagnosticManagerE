<dec f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='233' type='lldb::ThreadPlanSP lldb_private::FunctionCaller::GetThreadPlanToCallFunction(lldb_private::ExecutionContext &amp; exe_ctx, lldb::addr_t args_addr, const lldb_private::EvaluateExpressionOptions &amp; options, lldb_private::DiagnosticManager &amp; diagnostic_manager)'/>
<def f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='228' ll='260' type='lldb::ThreadPlanSP lldb_private::FunctionCaller::GetThreadPlanToCallFunction(lldb_private::ExecutionContext &amp; exe_ctx, lldb::addr_t args_addr, const lldb_private::EvaluateExpressionOptions &amp; options, lldb_private::DiagnosticManager &amp; diagnostic_manager)'/>
<use f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='349' u='c' c='_ZN12lldb_private14FunctionCaller15ExecuteFunctionERNS_16ExecutionContextEPmRKNS_25EvaluateExpressionOptionsERNS_17DiagnosticManagerERNS_5ValueE'/>
<doc f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='217'>/// Get a thread plan to run the function this FunctionCaller was created
  /// with.
  ///
  /// \param[in] exe_ctx
  ///     The execution context to insert the function and its arguments
  ///     into.
  ///
  /// \param[in] args_addr
  ///     The address of the argument struct.
  ///
  /// \param[in] diagnostic_manager
  ///     The diagnostic manager to report errors to.
  ///
  /// \return
  ///     A ThreadPlan shared pointer for executing the function.</doc>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleThreadPlanStepThroughObjCTrampoline.cpp' l='71' u='c' c='_ZN12lldb_private40AppleThreadPlanStepThroughObjCTrampoline24InitializeFunctionCallerEv'/>
