<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='618' type='llvm::Instruction * llvm::InstCombinerImpl::foldPHIArgBinOpIntoPHI(llvm::PHINode &amp; PN)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='381' ll='472' type='llvm::Instruction * llvm::InstCombinerImpl::foldPHIArgBinOpIntoPHI(llvm::PHINode &amp; PN)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='862' u='c' c='_ZN4llvm16InstCombinerImpl19foldPHIArgOpIntoPHIERNS_7PHINodeE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='379'>/// If we have something like phi [add (a,b), add(a,c)] and if a/b/c and the
/// adds all have a single user, turn this into a phi and a single binop.</doc>
