<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='385' type='llvm::ModulePassManager llvm::PassBuilder::buildPerModuleDefaultPipeline(llvm::PassBuilder::OptimizationLevel Level, bool LTOPreLink = false)'/>
<use f='llvm/clang/lib/CodeGen/BackendUtil.cpp' l='1349' u='c' c='_ZN12_GLOBAL__N_118EmitAssemblyHelper30EmitAssemblyWithNewPassManagerEN5clang13BackendActionESt10unique_ptrIN4llvm17raw_pwrite_streamESt14default_deleteIS5_EE'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='374'>/// Build a per-module default optimization pipeline.
  ///
  /// This provides a good default optimization pipeline for per-module
  /// optimization and code generation without any link-time optimization. It
  /// typically correspond to frontend &quot;-O[123]&quot; options for optimization
  /// levels \c O1, \c O2 and \c O3 resp.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.</doc>
<def f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1397' ll='1436' type='llvm::ModulePassManager llvm::PassBuilder::buildPerModuleDefaultPipeline(llvm::PassBuilder::OptimizationLevel Level, bool LTOPreLink = false)'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1545' u='c' c='_ZN4llvm11PassBuilder30buildLTOPreLinkDefaultPipelineENS0_17OptimizationLevelE'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='2477' u='c' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementE'/>
