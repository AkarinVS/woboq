<dec f='llvm/llvm/include/llvm/Transforms/Utils/UnrollLoop.h' l='48' type='const llvm::Loop * llvm::addClonedBlockToLoopInfo(llvm::BasicBlock * OriginalBB, llvm::BasicBlock * ClonedBB, llvm::LoopInfo * LI, llvm::NewLoopsMap &amp; NewLoops)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/UnrollLoop.h' l='46'>/// @}</doc>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='137' ll='164' type='const llvm::Loop * llvm::addClonedBlockToLoopInfo(llvm::BasicBlock * OriginalBB, llvm::BasicBlock * ClonedBB, llvm::LoopInfo * LI, llvm::NewLoopsMap &amp; NewLoops)'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='611' u='c' c='_ZN4llvm10UnrollLoopEPNS_4LoopENS_17UnrollLoopOptionsEPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPKNS_19TargetTrans5476875'/>
<doc f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='133'>/// Adds ClonedBB to LoopInfo, creates a new loop for ClonedBB if necessary
/// and adds a mapping from the original loop to the new loop to NewLoops.
/// Returns nullptr if no new loop was created and a pointer to the
/// original loop OriginalBB was part of otherwise.</doc>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='378' u='c' c='_ZN4llvm16UnrollAndJamLoopEPNS_4LoopEjjjbPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPKNS_19TargetTransformInfoEPNS_8684078'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='328' u='c' c='_ZL15CloneLoopBlocksPN4llvm4LoopEPNS_5ValueEbbbPNS_10BasicBlockES5_S5_RSt6vectorIS5_SaIS5_EERNS_13LoopBlocksDFSERNS_8ValueMapIPKS2_NS_14WeakTrackingVH13680398'/>
