<dec f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='255' type='const llvm::BasicBlock * llvm::BasicBlock::getUniquePredecessor() const'/>
<use f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='258' u='c' c='_ZN4llvm10BasicBlock20getUniquePredecessorEv'/>
<doc f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='249'>/// Return the predecessor of this block if it has a unique predecessor
  /// block. Otherwise return a null pointer.
  ///
  /// Note that unique predecessor doesn&apos;t mean single edge, there can be
  /// multiple edges from the unique predecessor to this block (for example a
  /// switch statement with multiple cases having the same destination).</doc>
<use f='llvm/llvm/include/llvm/IR/Statepoint.h' l='248' u='c' c='_ZNK4llvm16GCProjectionInst13getStatepointEv'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='682' u='c' c='_ZN4llvm29MustBeExecutedContextExplorer21findBackwardJoinPointEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='683' u='c' c='_ZN4llvm29MustBeExecutedContextExplorer21findBackwardJoinPointEPKNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/IR/BasicBlock.cpp' l='272' ll='284' type='const llvm::BasicBlock * llvm::BasicBlock::getUniquePredecessor() const'/>
