<dec f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='447' type='llvm::Value * polly::BlockGenerator::trySynthesizeNewValue(polly::ScopStmt &amp; Stmt, llvm::Value * Old, polly::ValueMapT &amp; BBMap, llvm::LoopToScevMapT &amp; LTS, llvm::Loop * L) const'/>
<def f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='64' ll='95' type='llvm::Value * polly::BlockGenerator::trySynthesizeNewValue(polly::ScopStmt &amp; Stmt, llvm::Value * Old, polly::ValueMapT &amp; BBMap, llvm::LoopToScevMapT &amp; LTS, llvm::Loop * L) const'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='192' u='c' c='_ZNK5polly14BlockGenerator11getNewValueERNS_8ScopStmtEPN4llvm5ValueERNS3_8DenseMapINS3_11AssertingVHIS4_EES8_NS3_12DenseMapInfoIS8_EENS3_6detail12Dens13661035'/>
<doc f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='426'>/// Try to synthesize a new value
  ///
  /// Given an old value, we try to synthesize it in a new context from its
  /// original SCEV expression. We start from the original SCEV expression,
  /// then replace outdated parameter and loop references, and finally
  /// expand it to code that computes this updated expression.
  ///
  /// @param Stmt      The statement to code generate
  /// @param Old       The old Value
  /// @param BBMap     A mapping from old values to their new values
  ///                  (for values recalculated within this basic block)
  /// @param LTS       A mapping from loops virtual canonical induction
  ///                  variable to their new values
  ///                  (for values recalculated in the new ScoP, but not
  ///                   within this basic block)
  /// @param L         The loop that surrounded the instruction that referenced
  ///                  this value in the original code. This loop is used to
  ///                  evaluate the scalar evolution at the right scope.
  ///
  /// @returns  o A newly synthesized value.
  ///           o NULL, if synthesizing the value failed.</doc>
