<dec f='llvm/clang/include/clang/Sema/Sema.h' l='8369' type='clang::Sema::TemplateDeductionResult clang::Sema::FinishTemplateArgumentDeduction(clang::FunctionTemplateDecl * FunctionTemplate, SmallVectorImpl&lt;clang::DeducedTemplateArgument&gt; &amp; Deduced, unsigned int NumExplicitlySpecified, clang::FunctionDecl *&amp; Specialization, sema::TemplateDeductionInfo &amp; Info, const SmallVectorImpl&lt;clang::Sema::OriginalCallArg&gt; * OriginalCallArgs = nullptr, bool PartialOverloading = false, llvm::function_ref&lt;bool ()&gt; CheckNonDependent = [] {
    return false;
})'/>
<def f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='3544' ll='3700' type='Sema::TemplateDeductionResult clang::Sema::FinishTemplateArgumentDeduction(clang::FunctionTemplateDecl * FunctionTemplate, SmallVectorImpl&lt;clang::DeducedTemplateArgument&gt; &amp; Deduced, unsigned int NumExplicitlySpecified, clang::FunctionDecl *&amp; Specialization, clang::sema::TemplateDeductionInfo &amp; Info, const SmallVectorImpl&lt;clang::Sema::OriginalCallArg&gt; * OriginalCallArgs = nullptr, bool PartialOverloading = false, llvm::function_ref&lt;bool ()&gt; CheckNonDependent = [] {
    return false;
})'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4209' u='c' c='_ZN5clang4Sema23DeduceTemplateArgumentsEPNS_20FunctionTemplateDeclEPNS_24TemplateArgumentListInfoEN4llvm8ArrayRefIPNS_4ExprEEERPNS_12FunctionDeclERNS_3990542'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4352' u='c' c='_ZN5clang4Sema23DeduceTemplateArgumentsEPNS_20FunctionTemplateDeclEPNS_24TemplateArgumentListInfoENS_8QualTypeERPNS_12FunctionDeclERNS_4sema21TemplateDeductionInfoEb'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4515' u='c' c='_ZN5clang4Sema23DeduceTemplateArgumentsEPNS_20FunctionTemplateDeclENS_8QualTypeERPNS_17CXXConversionDeclERNS_4sema21TemplateDeductionInfoE'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='3538'>/// Finish template argument deduction for a function template,
/// checking the deduced template arguments for completeness and forming
/// the function template specialization.
///
/// \param OriginalCallArgs If non-NULL, the original call arguments against
/// which the deduced argument types should be compared.</doc>
