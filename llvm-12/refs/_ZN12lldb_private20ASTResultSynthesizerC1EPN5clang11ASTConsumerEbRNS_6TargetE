<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ASTResultSynthesizer.h' l='54' type='void lldb_private::ASTResultSynthesizer::ASTResultSynthesizer(clang::ASTConsumer * passthrough, bool top_level, lldb_private::Target &amp; target)'/>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ASTResultSynthesizer.cpp' l='35' ll='44' type='void lldb_private::ASTResultSynthesizer::ASTResultSynthesizer(clang::ASTConsumer * passthrough, bool top_level, lldb_private::Target &amp; target)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ASTResultSynthesizer.h' l='39'>/// Constructor
  ///
  /// \param[in] passthrough
  ///     Since the ASTs must typically go through to the Clang code generator
  ///     in order to produce LLVM IR, this SemaConsumer must allow them to
  ///     pass to the next step in the chain after processing.  Passthrough is
  ///     the next ASTConsumer, or NULL if none is required.
  ///
  /// \param[in] top_level
  ///     If true, register all top-level Decls and don&apos;t try to handle the
  ///     main function.
  ///
  /// \param[in] target
  ///     The target, which contains the persistent variable store and the
  ///     AST importer.</doc>
