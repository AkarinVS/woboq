<dec f='llvm/lldb/include/lldb/Symbol/Function.h' l='630' type='bool lldb_private::Function::IsTopLevelFunction()'/>
<doc f='llvm/lldb/include/lldb/Symbol/Function.h' l='617'>/// Get whether this function represents a &apos;top-level&apos; function
  ///
  /// The concept of a top-level function is language-specific, mostly meant
  /// to represent the notion of scripting-style code that has global
  /// visibility of the variables/symbols/functions/... defined within the
  /// containing file/module
  ///
  /// If stopped in a top-level function, LLDB will expose global variables
  /// as-if locals in the &apos;frame variable&apos; command
  ///
  /// \return
  ///     Returns &apos;true&apos; if this function is a top-level function,
  ///     &apos;false&apos; otherwise.</doc>
<use f='llvm/lldb/source/Commands/CommandObjectFrame.cpp' l='516' u='c' c='_ZN26CommandObjectFrameVariable9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Symbol/Function.cpp' l='479' ll='486' type='bool lldb_private::Function::IsTopLevelFunction()'/>
