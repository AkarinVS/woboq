<dec f='llvm/lldb/include/lldb/Symbol/LineEntry.h' l='130' type='lldb_private::AddressRange lldb_private::LineEntry::GetSameLineContiguousAddressRange(bool include_inlined_functions) const'/>
<doc f='llvm/lldb/include/lldb/Symbol/LineEntry.h' l='100'>/// Give the range for this LineEntry + any additional LineEntries for this
  /// same source line that are contiguous.
  ///
  /// A compiler may emit multiple line entries for a single source line,
  /// e.g. to indicate subexpressions at different columns.  This method will
  /// get the AddressRange for all of the LineEntries for this source line
  /// that are contiguous.
  //
  /// Line entries with a line number of 0 are treated specially - these are
  /// compiler-generated line table entries that the user did not write in
  /// their source code, and we want to skip past in the debugger. If this
  /// LineEntry is for line 32, and the following LineEntry is for line 0, we
  /// will extend the range to include the AddressRange of the line 0
  /// LineEntry (and it will include the range of the following LineEntries
  /// that match either 32 or 0.)
  ///
  /// When \b include_inlined_functions is \b true inlined functions with
  /// a call site at this LineEntry will also be included in the complete
  /// range.
  ///
  /// If the initial LineEntry this method is called on is a line #0, only the
  /// range of continuous LineEntries with line #0 will be included in the
  /// complete range.
  ///
  /// @param[in] include_inlined_functions
  ///     Whether to include inlined functions at the same line or not.
  ///
  /// \return
  ///     The contiguous AddressRange for this source line.</doc>
<def f='llvm/lldb/source/Symbol/LineEntry.cpp' l='193' ll='252' type='lldb_private::AddressRange lldb_private::LineEntry::GetSameLineContiguousAddressRange(bool include_inlined_functions) const'/>
<use f='llvm/lldb/source/Target/Thread.cpp' l='1280' u='c' c='_ZN12lldb_private6Thread31QueueThreadPlanForStepOverRangeEbRKNS_9LineEntryERKNS_13SymbolContextEN4lldb7RunModeERNS_6StatusENS_8LazyBoolE'/>
<use f='llvm/lldb/source/Target/Thread.cpp' l='1316' u='c' c='_ZN12lldb_private6Thread29QueueThreadPlanForStepInRangeEbRKNS_9LineEntryERKNS_13SymbolContextEPKcN4lldb7RunModeERNS_6StatusENS_8LazyBoolESD_'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepOut.cpp' l='112' u='c' c='_ZN12lldb_private17ThreadPlanStepOutC1ERNS_6ThreadEPNS_13SymbolContextEbbNS_4VoteES5_jNS_8LazyBoolEbb'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepRange.cpp' l='128' u='c' c='_ZN12lldb_private19ThreadPlanStepRange7InRangeEv'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepRange.cpp' l='147' u='c' c='_ZN12lldb_private19ThreadPlanStepRange7InRangeEv'/>
<use f='llvm/lldb/tools/lldb-test/lldb-test.cpp' l='433' u='c' c='_ZN4opts7symbolsL13findFunctionsERN12lldb_private6ModuleE'/>
<use f='llvm/lldb/tools/lldb-test/lldb-test.cpp' l='486' u='c' c='_ZN4opts7symbolsL10findBlocksERN12lldb_private6ModuleE'/>
<use f='llvm/lldb/unittests/Symbol/TestLineEntry.cpp' l='81' u='c' c='_ZN61LineEntryTest_GetSameLineContiguousAddressRangeNoInlines_Test8TestBodyEv'/>
<use f='llvm/lldb/unittests/Symbol/TestLineEntry.cpp' l='90' u='c' c='_ZN61LineEntryTest_GetSameLineContiguousAddressRangeOneInline_Test8TestBodyEv'/>
<use f='llvm/lldb/unittests/Symbol/TestLineEntry.cpp' l='99' u='c' c='_ZN64LineEntryTest_GetSameLineContiguousAddressRangeNestedInline_Test8TestBodyEv'/>
