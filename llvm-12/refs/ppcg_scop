<def f='llvm/polly/lib/External/ppcg/ppcg.h' l='74' ll='109'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.h' l='111' c='ppcg_scop_any_hidden_declarations'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.h' l='112' c='ppcg_scop_generate_names'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.h' l='118' c='ppcg_transform'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.h' l='124' c='compute_tagger'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.h' l='125' c='compute_dependences'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.h' l='126' c='eliminate_dead_code'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.h' l='127' c='ppcg_scop_free'/>
<use f='llvm/polly/lib/External/ppcg/gpu.h' l='165'/>
<use f='llvm/polly/lib/External/ppcg/gpu.h' l='432' c='gpu_prog_alloc'/>
<use f='llvm/polly/lib/External/ppcg/print.h' l='36' c='ppcg_print_exposed_declarations'/>
<use f='llvm/polly/lib/External/ppcg/print.h' l='38' c='ppcg_print_hidden_declarations'/>
<size>208</size>
<doc f='llvm/polly/lib/External/ppcg/ppcg.h' l='16'>/* Representation of the scop for use inside PPCG.
 *
 * &quot;options&quot; are the options specified by the user.
 * Some fields in this structure may depend on some of the options.
 *
 * &quot;start&quot; and &quot;end&quot; are file offsets of the corresponding program text.
 * &quot;context&quot; represents constraints on the parameters.
 * &quot;domain&quot; is the union of all iteration domains.
 * &quot;call&quot; contains the iteration domains of statements with a call expression.
 * &quot;reads&quot; contains all potential read accesses.
 * &quot;tagged_reads&quot; is the same as &quot;reads&quot;, except that the domain is a wrapped
 *	relation mapping an iteration domain to a reference identifier
 * &quot;live_in&quot; contains the potential read accesses that potentially
 *	have no corresponding writes in the scop.
 * &quot;may_writes&quot; contains all potential write accesses.
 * &quot;tagged_may_writes&quot; is the same as &quot;may_writes&quot;, except that the domain
 *	is a wrapped relation mapping an iteration domain
 *	to a reference identifier
 * &quot;must_writes&quot; contains all definite write accesses.
 * &quot;tagged_must_writes&quot; is the same as &quot;must_writes&quot;, except that the domain
 *	is a wrapped relation mapping an iteration domain
 *	to a reference identifier
 * &quot;live_out&quot; contains the potential write accesses that are potentially
 *	not killed by any kills or any other writes.
 * &quot;must_kills&quot; contains all definite kill accesses.
 * &quot;tagged_must_kills&quot; is the same as &quot;must_kills&quot;, except that the domain
 *	is a wrapped relation mapping an iteration domain
 *	to a reference identifier.
 *
 * &quot;tagger&quot; maps tagged iteration domains to the corresponding untagged
 *	iteration domain.
 *
 * &quot;independence&quot; is the union of all independence filters.
 *
 * &quot;dep_flow&quot; represents the potential flow dependences.
 * &quot;tagged_dep_flow&quot; is the same as &quot;dep_flow&quot;, except that both domain and
 *	range are wrapped relations mapping an iteration domain to
 *	a reference identifier.  May be NULL if not computed.
 * &quot;dep_false&quot; represents the potential false (anti and output) dependences.
 * &quot;dep_forced&quot; represents the validity constraints that should be enforced
 *	even when live-range reordering is used.
 *	In particular, these constraints ensure that all live-in
 *	accesses remain live-in and that all live-out accesses remain live-out
 *	and that multiple potential sources for the same read are
 *	executed in the original order.
 * &quot;dep_order&quot;/&quot;tagged_dep_order&quot; represents the order dependences between
 *	the live range intervals in &quot;dep_flow&quot;/&quot;tagged_dep_flow&quot;.
 *	It is only used if the live_range_reordering
 *	option is set.  Otherwise it is NULL.
 *	If &quot;dep_order&quot; is used, then &quot;dep_false&quot; only contains a limited
 *	set of anti and output dependences.
 * &quot;schedule&quot; represents the (original) schedule.
 *
 * &quot;names&quot; contains all variable names that are in use by the scop.
 * The names are mapped to a dummy value.
 *
 * &quot;pet&quot; is the original pet_scop.
 */</doc>
<mbr r='ppcg_scop::options' o='0' t='struct ppcg_options *'/>
<mbr r='ppcg_scop::start' o='64' t='unsigned int'/>
<mbr r='ppcg_scop::end' o='96' t='unsigned int'/>
<mbr r='ppcg_scop::context' o='128' t='isl_set *'/>
<mbr r='ppcg_scop::domain' o='192' t='isl_union_set *'/>
<mbr r='ppcg_scop::call' o='256' t='isl_union_set *'/>
<mbr r='ppcg_scop::tagged_reads' o='320' t='isl_union_map *'/>
<mbr r='ppcg_scop::reads' o='384' t='isl_union_map *'/>
<mbr r='ppcg_scop::live_in' o='448' t='isl_union_map *'/>
<mbr r='ppcg_scop::tagged_may_writes' o='512' t='isl_union_map *'/>
<mbr r='ppcg_scop::may_writes' o='576' t='isl_union_map *'/>
<mbr r='ppcg_scop::tagged_must_writes' o='640' t='isl_union_map *'/>
<mbr r='ppcg_scop::must_writes' o='704' t='isl_union_map *'/>
<mbr r='ppcg_scop::live_out' o='768' t='isl_union_map *'/>
<mbr r='ppcg_scop::tagged_must_kills' o='832' t='isl_union_map *'/>
<mbr r='ppcg_scop::must_kills' o='896' t='isl_union_map *'/>
<mbr r='ppcg_scop::tagger' o='960' t='isl_union_pw_multi_aff *'/>
<mbr r='ppcg_scop::independence' o='1024' t='isl_union_map *'/>
<mbr r='ppcg_scop::dep_flow' o='1088' t='isl_union_map *'/>
<mbr r='ppcg_scop::tagged_dep_flow' o='1152' t='isl_union_map *'/>
<mbr r='ppcg_scop::dep_false' o='1216' t='isl_union_map *'/>
<mbr r='ppcg_scop::dep_forced' o='1280' t='isl_union_map *'/>
<mbr r='ppcg_scop::dep_order' o='1344' t='isl_union_map *'/>
<mbr r='ppcg_scop::tagged_dep_order' o='1408' t='isl_union_map *'/>
<mbr r='ppcg_scop::schedule' o='1472' t='isl_schedule *'/>
<mbr r='ppcg_scop::names' o='1536' t='isl_id_to_ast_expr *'/>
<mbr r='ppcg_scop::pet' o='1600' t='struct pet_scop *'/>
<use f='llvm/polly/lib/External/ppcg/cpu.h' l='11' c='print_cpu'/>
<use f='llvm/polly/lib/External/ppcg/hybrid.h' l='18' c='ppcg_ht_compute_bounds'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3086' c='insert_guard'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='5552' c='is_stmt_killed'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='5571' c='extract_stmts'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='5659' c='generate'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='5704' c='generate_wrap'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='5788' c='gpu_prog_alloc'/>
<size>208</size>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='468'/>
<size>208</size>
<use f='llvm/polly/lib/External/ppcg/hybrid.c' l='1088' c='collect_deps'/>
<use f='llvm/polly/lib/External/ppcg/hybrid.c' l='1315' c='ppcg_ht_compute_bounds'/>
<size>208</size>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='101' c='ppcg_scop_any_hidden_declarations'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='165' c='generate_name'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='192' c='ppcg_scop_generate_names'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='347' c='compute_tagger'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='388' c='compute_live_out'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='427' c='compute_tagged_flow_dep_only'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='464' c='derive_flow_dep_from_tagged_flow_dep'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='478' c='compute_tagged_flow_dep'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='522' c='compute_order_dependences'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='588' c='compute_forced_dependences'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='649' c='remove_independences_from_tagged_flow'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='675' c='compute_live_range_reordering_dependences'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='687' c='compute_flow_dep'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='717' c='compute_dependences'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='772' c='eliminate_dead_code'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='836' c='ppcg_scop_free'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='875' c='ppcg_scop_from_pet_scop'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='880' c='ppcg_scop_from_pet_scop'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='887' c='ppcg_scop_from_pet_scop'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='887' c='ppcg_scop_from_pet_scop'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='936'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='976' c='transform'/>
<use f='llvm/polly/lib/External/ppcg/ppcg.c' l='1005' c='ppcg_transform'/>
<size>208</size>
<use f='llvm/polly/lib/External/ppcg/print.c' l='420' c='print_declarations'/>
<use f='llvm/polly/lib/External/ppcg/print.c' l='448' c='ppcg_print_exposed_declarations'/>
<use f='llvm/polly/lib/External/ppcg/print.c' l='457' c='ppcg_print_hidden_declarations'/>
<size>208</size>
