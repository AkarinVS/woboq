<dec f='llvm/clang/lib/CodeGen/CGVTables.h' l='155' type='void clang::CodeGen::CodeGenVTables::GenerateRelativeVTableAlias(llvm::GlobalVariable * VTable, llvm::StringRef AliasNameRef)'/>
<doc f='llvm/clang/lib/CodeGen/CGVTables.h' l='151'>/// Generate a public facing alias for the vtable and make the vtable either
  /// hidden or private. The alias will have the original linkage and visibility
  /// of the vtable. This is used for cases under the relative vtables ABI
  /// when a vtable may not be dso_local.</doc>
<use f='llvm/clang/lib/CodeGen/CGVTables.cpp' l='937' u='c' c='_ZN5clang7CodeGen14CodeGenVTables26GenerateConstructionVTableEPKNS_13CXXRecordDeclERKNS_13BaseSubobjectEbN4llvm11GlobalValue12LinkageTypesERNS8_8Dense263450'/>
<def f='llvm/clang/lib/CodeGen/CGVTables.cpp' l='948' ll='996' type='void clang::CodeGen::CodeGenVTables::GenerateRelativeVTableAlias(llvm::GlobalVariable * VTable, llvm::StringRef AliasNameRef)'/>
<doc f='llvm/clang/lib/CodeGen/CGVTables.cpp' l='942'>// If the VTable is not dso_local, then we will not be able to indicate that
// the VTable does not need a relocation and move into rodata. A frequent
// time this can occur is for classes that should be made public from a DSO
// (like in libc++). For cases like these, we can make the vtable hidden or
// private and create a public alias with the same visibility and linkage as
// the original vtable type.</doc>
<use f='llvm/clang/lib/CodeGen/ItaniumCXXABI.cpp' l='1774' u='c' c='_ZN12_GLOBAL__N_113ItaniumCXXABI21emitVTableDefinitionsERN5clang7CodeGen14CodeGenVTablesEPKNS1_13CXXRecordDeclE'/>
