<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='601' type='bool llvm::DependenceInfo::testZIV(const llvm::SCEV * Src, const llvm::SCEV * Dst, llvm::FullDependence &amp; Result) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='596'>/// testZIV - Tests the ZIV subscript pair (Src and Dst) for dependence.
    /// Returns true if any possible dependence is disproved.
    /// If there might be a dependence, returns false.
    /// If the dependence isn&apos;t proven to exist,
    /// marks the Result as inconsistent.</doc>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1098' ll='1115' type='bool llvm::DependenceInfo::testZIV(const llvm::SCEV * Src, const llvm::SCEV * Dst, llvm::FullDependence &amp; Result) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3676' u='c' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3767' u='c' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1088'>// testZIV -
// When we have a pair of subscripts of the form [c1] and [c2],
// where c1 and c2 are both loop invariant, we attack it using
// the ZIV test. Basically, we test by comparing the two values,
// but there are actually three possible results:
// 1) the values are equal, so there&apos;s a dependence
// 2) the values are different, so there&apos;s no dependence
// 3) the values might be equal, so we have to assume a dependence.
//
// Return true if dependence disproved.</doc>
