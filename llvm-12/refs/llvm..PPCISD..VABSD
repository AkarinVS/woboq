<dec f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.h' l='437' type='427'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.h' l='424'>/// An SDNode for Power9 vector absolute value difference.
    /// operand #0 vector
    /// operand #1 vector
    /// operand #2 constant i32 0 or 1, to indicate whether needs to patch
    /// the most significant bit for signed i32
    ///
    /// Power9 VABSD* instructions are designed to support unsigned integer
    /// vectors (byte/halfword/word), if we want to make use of them for signed
    /// integer vectors, we have to flip their sign bits first. To flip sign bit
    /// for byte/halfword integer vector would become inefficient, but for word
    /// integer vector, we can leverage XVNEGSP to make it efficiently. eg:
    /// abs(sub(a,b)) =&gt; VABSDUW(a+0x80000000, b+0x80000000)
    ///               =&gt; VABSDUW((XVNEGSP a), (XVNEGSP b))</doc>
<use f='llvm/build/lib/Target/PowerPC/PPCGenDAGISel.inc' l='63719' u='r' c='_ZN12_GLOBAL__N_115PPCDAGToDAGISel10SelectCodeEPN4llvm6SDNodeE'/>
<use f='llvm/build/lib/Target/PowerPC/PPCGenDAGISel.inc' l='63719' u='r' c='_ZN12_GLOBAL__N_115PPCDAGToDAGISel10SelectCodeEPN4llvm6SDNodeE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='1585' c='_ZNK4llvm17PPCTargetLowering17getTargetNodeNameEj'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='16097' u='r' c='_ZNK4llvm17PPCTargetLowering15combineTRUNCATEEPNS_6SDNodeERNS_14TargetLowering15DAGCombinerInfoE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='16337' u='r' c='_ZNK4llvm17PPCTargetLowering10combineABSEPNS_6SDNodeERNS_14TargetLowering15DAGCombinerInfoE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='16346' u='r' c='_ZNK4llvm17PPCTargetLowering10combineABSEPNS_6SDNodeERNS_14TargetLowering15DAGCombinerInfoE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='16411' u='r' c='_ZNK4llvm17PPCTargetLowering14combineVSelectEPNS_6SDNodeERNS_14TargetLowering15DAGCombinerInfoE'/>
