<dec f='llvm/polly/lib/External/isl/include/isl/aff.h' l='1198' type='isl_union_pw_aff * isl_union_pw_aff_pullback_union_pw_multi_aff(isl_union_pw_aff * upa, isl_union_pw_multi_aff * upma)'/>
<use f='llvm/polly/lib/External/isl/include/isl/isl-noexceptions.h' l='17440' u='c' c='_ZNK3isl12noexceptions12union_pw_aff8pullbackENS0_18union_pw_multi_affE'/>
<def f='llvm/polly/lib/External/isl/isl_aff.c' l='8461' ll='8488' type='isl_union_pw_aff * isl_union_pw_aff_pullback_union_pw_multi_aff(isl_union_pw_aff * upa, isl_union_pw_multi_aff * upma)'/>
<use f='llvm/polly/lib/External/isl/isl_aff.c' l='9640' u='c' c='isl_multi_union_pw_aff_pullback_union_pw_multi_aff'/>
<doc f='llvm/polly/lib/External/isl/isl_aff.c' l='8451'>/* Compute the pullback of &quot;upa&quot; by the function represented by &quot;upma&quot;.
 * In other words, plug in &quot;upma&quot; in &quot;upa&quot;.  The result contains
 * expressions defined over the domain space of &quot;upma&quot;.
 *
 * Run over all pairs of elements in &quot;upa&quot; and &quot;upma&quot;, perform
 * the pullback when appropriate and collect the results.
 * If the hash value were based on the domain space rather than
 * the function space, then we could run through all elements
 * of &quot;upma&quot; and directly pick out the corresponding element of &quot;upa&quot;.
 */</doc>
