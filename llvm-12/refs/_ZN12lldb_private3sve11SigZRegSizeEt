<def f='llvm/lldb/source/Plugins/Process/Utility/LinuxPTraceDefines_arm64sve.h' l='104' type='uint16_t lldb_private::sve::SigZRegSize(uint16_t vq)'/>
<use f='llvm/lldb/source/Plugins/Process/Utility/LinuxPTraceDefines_arm64sve.h' l='115' u='c' c='_ZN12lldb_private3sve13SigZRegOffsetEtt'/>
<use f='llvm/lldb/source/Plugins/Process/Utility/LinuxPTraceDefines_arm64sve.h' l='220' u='c' c='_ZN12lldb_private3sve14PTraceZRegSizeEt'/>
<doc f='llvm/lldb/source/Plugins/Process/Utility/LinuxPTraceDefines_arm64sve.h' l='53'>/*
 * If the SVE registers are currently live for the thread at signal delivery,
 * sve_context.head.size &gt;=
 * SigContextSize(vq_from_vl(sve_context.vl))
 * and the register data may be accessed using the Sig*() functions.
 *
 * If sve_context.head.size &lt;
 * SigContextSize(vq_from_vl(sve_context.vl)),
 * the SVE registers were not live for the thread and no register data
 * is included: in this case, the Sig*() functions should not be
 * used except for this check.
 *
 * The same convention applies when returning from a signal: a caller
 * will need to remove or resize the sve_context block if it wants to
 * make the SVE registers live when they were previously non-live or
 * vice-versa.  This may require the the caller to allocate fresh
 * memory and/or move other context blocks in the signal frame.
 *
 * Changing the vector length during signal return is not permitted:
 * sve_context.vl must equal the thread&apos;s current vector length when
 * doing a sigreturn.
 *
 *
 * Note: for all these functions, the &quot;vq&quot; argument denotes the SVE
 * vector length in quadwords (i.e., units of 128 bits).
 *
 * The correct way to obtain vq is to use vq_from_vl(vl).  The
 * result is valid if and only if vl_valid(vl) is true.  This is
 * guaranteed for a struct sve_context written by the kernel.
 *
 *
 * Additional functions describe the contents and layout of the payload.
 * For each, Sig*Offset(args) is the start offset relative to
 * the start of struct sve_context, and Sig*Size(args) is the
 * size in bytes:
 *
 *	x	type				description
 *	-	----				-----------
 *	REGS					the entire SVE context
 *
 *	ZREGS	__uint128_t[num_of_zregs][vq]	all Z-registers
 *	ZREG	__uint128_t[vq]			individual Z-register Zn
 *
 *	PREGS	uint16_t[num_of_pregs][vq]	all P-registers
 *	PREG	uint16_t[vq]			individual P-register Pn
 *
 *	FFR	uint16_t[vq]			first-fault status register
 *
 * Additional data might be appended in the future.
 */</doc>
