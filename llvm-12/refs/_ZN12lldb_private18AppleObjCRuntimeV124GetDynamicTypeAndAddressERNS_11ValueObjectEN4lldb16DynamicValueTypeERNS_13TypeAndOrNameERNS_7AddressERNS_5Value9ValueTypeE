<dec f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntimeV1.h' l='94' type='bool lldb_private::AppleObjCRuntimeV1::GetDynamicTypeAndAddress(lldb_private::ValueObject &amp; in_value, lldb::DynamicValueType use_dynamic, lldb_private::TypeAndOrName &amp; class_type_or_name, lldb_private::Address &amp; address, Value::ValueType &amp; value_type)'/>
<doc f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntimeV1.h' l='93'>// These are generic runtime functions:</doc>
<inh f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntime.h' l='54' c='_ZN12lldb_private16AppleObjCRuntime24GetDynamicTypeAndAddressERNS_11ValueObjectEN4lldb16DynamicValueTypeERNS_13TypeAndOrNameERNS_7AddressERNS_5Value9ValueTypeE'/>
<def f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntimeV1.cpp' l='47' ll='63' type='bool lldb_private::AppleObjCRuntimeV1::GetDynamicTypeAndAddress(lldb_private::ValueObject &amp; in_value, lldb::DynamicValueType use_dynamic, lldb_private::TypeAndOrName &amp; class_type_or_name, lldb_private::Address &amp; address, Value::ValueType &amp; value_type)'/>
<doc f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntimeV1.cpp' l='45'>// for V1 runtime we just try to return a class name as that is the minimum
// level of support required for the data formatters to work</doc>
