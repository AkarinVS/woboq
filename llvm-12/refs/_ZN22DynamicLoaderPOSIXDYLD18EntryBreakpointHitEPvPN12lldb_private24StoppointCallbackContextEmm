<dec f='llvm/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.h' l='135' type='static bool DynamicLoaderPOSIXDYLD::EntryBreakpointHit(void * baton, lldb_private::StoppointCallbackContext * context, lldb::user_id_t break_id, lldb::user_id_t break_loc_id)'/>
<use f='llvm/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.cpp' l='250' u='r' c='_ZN22DynamicLoaderPOSIXDYLD10ProbeEntryEv'/>
<def f='llvm/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.cpp' l='264' ll='310' type='static bool DynamicLoaderPOSIXDYLD::EntryBreakpointHit(void * baton, lldb_private::StoppointCallbackContext * context, lldb::user_id_t break_id, lldb::user_id_t break_loc_id)'/>
<doc f='llvm/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.cpp' l='258'>// The runtime linker has run and initialized the rendezvous structure once the
// process has hit its entry point.  When we hit the corresponding breakpoint
// we interrogate the rendezvous structure to get the load addresses of all
// dependent modules for the process.  Similarly, we can discover the runtime
// linker function and setup a breakpoint to notify us of any dynamically
// loaded modules (via dlopen).</doc>
<doc f='llvm/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.h' l='129'>/// Callback routine invoked when we hit the breakpoint on process entry.
  ///
  /// This routine is responsible for resolving the load addresses of all
  /// dependent modules required by the inferior and setting up the rendezvous
  /// breakpoint.</doc>
