<def f='llvm/lld/wasm/Driver.cpp' l='720' ll='724'/>
<use f='llvm/lld/wasm/Driver.cpp' l='736' c='_ZN3lld4wasmL17addWrappedSymbolsERN4llvm3opt12InputArgListE'/>
<use f='llvm/lld/wasm/Driver.cpp' l='737' c='_ZN3lld4wasmL17addWrappedSymbolsERN4llvm3opt12InputArgListE'/>
<use f='llvm/lld/wasm/Driver.cpp' l='771' c='_ZN3lld4wasmL11wrapSymbolsEN4llvm8ArrayRefINS0_13WrappedSymbolEEE'/>
<use f='llvm/lld/wasm/Driver.cpp' l='773' c='_ZN3lld4wasmL11wrapSymbolsEN4llvm8ArrayRefINS0_13WrappedSymbolEEE'/>
<use f='llvm/lld/wasm/Driver.cpp' l='787' c='_ZN3lld4wasmL11wrapSymbolsEN4llvm8ArrayRefINS0_13WrappedSymbolEEE'/>
<use f='llvm/lld/wasm/Driver.cpp' l='982' c='_ZN3lld4wasm12_GLOBAL__N_112LinkerDriver10linkerMainEN4llvm8ArrayRefIPKcEE'/>
<size>24</size>
<doc f='llvm/lld/wasm/Driver.cpp' l='712'>// The --wrap option is a feature to rename symbols so that you can write
// wrappers for existing functions. If you pass `-wrap=foo`, all
// occurrences of symbol `foo` are resolved to `wrap_foo` (so, you are
// expected to write `wrap_foo` function as a wrapper). The original
// symbol becomes accessible as `real_foo`, so you can call that from your
// wrapper.
//
// This data structure is instantiated for each -wrap option.</doc>
