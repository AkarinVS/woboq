<def f='llvm/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h' l='222' ll='283'/>
<use f='llvm/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h' l='234' c='_ZN4llvm3mca15DependencyGraphC1ERKS1_'/>
<use f='llvm/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h' l='235' c='_ZN4llvm3mca15DependencyGraphaSERKS1_'/>
<use f='llvm/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h' l='235' c='_ZN4llvm3mca15DependencyGraphaSERKS1_'/>
<use f='llvm/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h' l='288'/>
<size>6416</size>
<doc f='llvm/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h' l='201'>// A dependency graph used by the bottleneck analysis to describe data
// dependencies and processor resource interferences between instructions.
//
// There is a node (an instance of struct DGNode) for every instruction in the
// input assembly sequence. Edges of the graph represent dependencies between
// instructions.
//
// Each edge of the graph is associated with a cost value which is used
// internally to rank dependency based on their impact on the runtime
// performance (see field DependencyEdge::Dependency::Cost). In general, the
// higher the cost of an edge, the higher the impact on performance.
//
// The cost of a dependency is a function of both the latency and the number of
// cycles where the dependency has been seen as critical (i.e. contributing to
// back-pressure increases).
//
// Loop carried dependencies are carefully expanded by the bottleneck analysis
// to guarantee that the graph stays acyclic. To this end, extra nodes are
// pre-allocated at construction time to describe instructions from &quot;past and
// future&quot; iterations. The graph is kept acyclic mainly because it simplifies the
// complexity of the algorithm that computes the critical sequence.</doc>
<mbr r='llvm::mca::DependencyGraph::Nodes' o='0' t='SmallVector&lt;llvm::mca::DependencyGraph::DGNode, 16&gt;'/>
<fun r='_ZN4llvm3mca15DependencyGraphC1ERKS1_'/>
<fun r='_ZN4llvm3mca15DependencyGraphaSERKS1_'/>
<fun r='_ZN4llvm3mca15DependencyGraph13addDependencyEjjONS0_14DependencyEdge10DependencyE'/>
<fun r='_ZN4llvm3mca15DependencyGraph10pruneEdgesEj'/>
<fun r='_ZNK4llvm3mca15DependencyGraph17initializeRootSetERNS_15SmallVectorImplIjEE'/>
<fun r='_ZN4llvm3mca15DependencyGraph21propagateThroughEdgesERNS_15SmallVectorImplIjEEj'/>
<fun r='_ZN4llvm3mca15DependencyGraphC1Ej'/>
<fun r='_ZN4llvm3mca15DependencyGraph14addRegisterDepEjjjj'/>
<fun r='_ZN4llvm3mca15DependencyGraph12addMemoryDepEjjj'/>
<fun r='_ZN4llvm3mca15DependencyGraph14addResourceDepEjjmj'/>
<fun r='_ZN4llvm3mca15DependencyGraph13finalizeGraphEj'/>
<fun r='_ZNK4llvm3mca15DependencyGraph19getCriticalSequenceERNS_15SmallVectorImplIPKNS0_14DependencyEdgeEEE'/>
<fun r='_ZN4llvm3mca15DependencyGraph10pruneEdgesEj'/>
<fun r='_ZNK4llvm3mca15DependencyGraph17initializeRootSetERNS_15SmallVectorImplIjEE'/>
<fun r='_ZN4llvm3mca15DependencyGraph21propagateThroughEdgesERNS_15SmallVectorImplIjEEj'/>
<fun r='_ZNK4llvm3mca15DependencyGraph19getCriticalSequenceERNS_15SmallVectorImplIPKNS0_14DependencyEdgeEEE'/>
<fun r='_ZN4llvm3mca15DependencyGraph13addDependencyEjjONS0_14DependencyEdge10DependencyE'/>
