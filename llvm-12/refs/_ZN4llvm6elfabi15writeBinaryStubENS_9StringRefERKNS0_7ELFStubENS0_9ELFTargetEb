<dec f='llvm/llvm/include/llvm/InterfaceStub/ELFObjHandler.h' l='41' type='llvm::Error llvm::elfabi::writeBinaryStub(llvm::StringRef FilePath, const llvm::elfabi::ELFStub &amp; Stub, llvm::elfabi::ELFTarget OutputFormat, bool WriteIfChanged = false)'/>
<def f='llvm/llvm/lib/InterfaceStub/ELFObjHandler.cpp' l='666' ll='677' type='llvm::Error llvm::elfabi::writeBinaryStub(llvm::StringRef FilePath, const llvm::elfabi::ELFStub &amp; Stub, llvm::elfabi::ELFTarget OutputFormat, bool WriteIfChanged = false)'/>
<doc f='llvm/llvm/lib/InterfaceStub/ELFObjHandler.cpp' l='664'>// This function wraps the ELFT writeELFBinaryToFile() so writeBinaryStub()
// can be called without having to use ELFType templates directly.</doc>
<doc f='llvm/llvm/include/llvm/InterfaceStub/ELFObjHandler.h' l='32'>/// Attempt to write a binary ELF stub.
/// This function determines appropriate ELFType using the passed ELFTarget and
/// then writes a binary ELF stub to a specified file path.
///
/// @param FilePath File path for writing the ELF binary.
/// @param Stub Source ELFStub to generate a binary ELF stub from.
/// @param OutputFormat Target ELFType to write binary as.
/// @param WriteIfChanged Whether or not to preserve timestamp if
///        the output stays the same.</doc>
<use f='llvm/llvm/tools/llvm-elfabi/llvm-elfabi.cpp' l='171' u='c' c='main'/>
