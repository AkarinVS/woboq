<dec f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='392' type='bool llvm::BranchProbabilityInfo::updateEstimatedBlockWeight(llvm::BranchProbabilityInfo::LoopBlock &amp; LoopBB, uint32_t BBWeight, SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; BlockWorkList, SmallVectorImpl&lt;llvm::BranchProbabilityInfo::LoopBlock&gt; &amp; LoopWorkList)'/>
<doc f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='388'>/// If \p LoopBB has no estimated weight then set it to \p BBWeight and
  /// return true. Otherwise \p BB&apos;s weight remains unchanged and false is
  /// returned. In addition all blocks/loops that might need their weight to be
  /// re-estimated are put into BlockWorkList/LoopWorkList.</doc>
<def f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='644' ll='668' type='bool llvm::BranchProbabilityInfo::updateEstimatedBlockWeight(llvm::BranchProbabilityInfo::LoopBlock &amp; LoopBB, uint32_t BBWeight, SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; BlockWorkList, SmallVectorImpl&lt;llvm::BranchProbabilityInfo::LoopBlock&gt; &amp; LoopWorkList)'/>
<use f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='704' u='c' c='_ZN4llvm21BranchProbabilityInfo29propagateEstimatedBlockWeightERKNS0_9LoopBlockEPNS_13DominatorTreeEPNS_17PostDominatorTreeEjRNS_15SmallVectorImplIPNS1926'/>
<doc f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='639'>// Updates \p LoopBB&apos;s weight and returns true. If \p LoopBB has already
// an associated weight it is unchanged and false is returned.
//
// Please note by the algorithm the weight is not expected to change once set
// thus &apos;false&apos; status is used to track visited blocks.</doc>
