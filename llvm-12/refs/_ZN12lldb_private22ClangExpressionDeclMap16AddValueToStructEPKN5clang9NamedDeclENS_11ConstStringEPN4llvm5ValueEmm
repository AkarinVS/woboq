<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.h' l='149' type='bool lldb_private::ClangExpressionDeclMap::AddValueToStruct(const clang::NamedDecl * decl, lldb_private::ConstString name, llvm::Value * value, size_t size, lldb::offset_t alignment)'/>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpp' l='324' ll='410' type='bool lldb_private::ClangExpressionDeclMap::AddValueToStruct(const clang::NamedDecl * decl, lldb_private::ConstString name, llvm::Value * value, size_t size, lldb::offset_t alignment)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.h' l='129'>/// [Used by IRForTarget] Add a variable to the struct that needs to
  ///     be materialized each time the expression runs.
  ///
  /// \param[in] decl
  ///     The Clang declaration for the variable.
  ///
  /// \param[in] name
  ///     The name of the variable.
  ///
  /// \param[in] value
  ///     The LLVM IR value for this variable.
  ///
  /// \param[in] size
  ///     The size of the variable in bytes.
  ///
  /// \param[in] alignment
  ///     The required alignment of the variable in bytes.
  ///
  /// \return
  ///     True on success; false otherwise.</doc>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1262' u='c' c='_ZN11IRForTarget19MaybeHandleVariableEPN4llvm5ValueE'/>
