<dec f='llvm/build/projects/libcxx/include/c++build/cxxabi.h' l='151' type='void * __cxxabiv1::__cxa_current_primary_exception()'/>
<use f='llvm/libcxx/src/support/runtime/exception_pointer_cxxabi.ipp' l='61' u='c' c='_ZSt17current_exceptionv'/>
<doc f='llvm/build/projects/libcxx/include/c++build/cxxabi.h' l='149'>// Apple additions to support C++ 0x exception_ptr class
// These are primitives to wrap a smart pointer around an exception object</doc>
<dec f='llvm/libcxxabi/include/cxxabi.h' l='151' type='void * __cxxabiv1::__cxa_current_primary_exception()'/>
<doc f='llvm/libcxxabi/include/cxxabi.h' l='149'>// Apple additions to support C++ 0x exception_ptr class
// These are primitives to wrap a smart pointer around an exception object</doc>
<def f='llvm/libcxxabi/src/cxa_exception.cpp' l='669' ll='687' type='void * __cxxabiv1::__cxa_current_primary_exception()'/>
<doc f='llvm/libcxxabi/src/cxa_exception.cpp' l='659'>/*
    Returns a pointer to the thrown object (if any) at the top of the
    caughtExceptions stack.  Atomically increment the exception&apos;s referenceCount.
    If there is no such thrown object or if the thrown object is foreign,
    returns null.

    We can use __cxa_get_globals_fast here to get the globals because if there have
    been no exceptions thrown, ever, on this thread, we can return NULL without
    the need to allocate the exception-handling globals.
*/</doc>
