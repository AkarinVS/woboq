<dec f='llvm/lldb/include/lldb/Symbol/CompileUnit.h' l='115' type='void lldb_private::CompileUnit::CompileUnit(const lldb::ModuleSP &amp; module_sp, void * user_data, const lldb_private::FileSpec &amp; file_spec, lldb::user_id_t uid, lldb::LanguageType language, lldb_private::LazyBool is_optimized)'/>
<doc f='llvm/lldb/include/lldb/Symbol/CompileUnit.h' l='80'>/// Construct with a module, file spec, UID and language.
  ///
  /// Initialize the compile unit given the owning \a module, a path to
  /// convert into a FileSpec, the SymbolFile plug-in supplied \a uid, and the
  /// source language type.
  ///
  /// \param[in] module_sp
  ///     The parent module that owns this compile unit. This value
  ///     must be a valid pointer value.
  ///
  /// \param[in] user_data
  ///     User data where the SymbolFile parser can store data.
  ///
  /// \param[in] file_spec
  ///     The file specification for the source file of this compile
  ///     unit.
  ///
  /// \param[in] uid
  ///     The user ID of the compile unit. This value is supplied by
  ///     the SymbolFile plug-in and should be a value that allows
  ///     the plug-in to easily locate and parse
  ///     additional information for the compile unit.
  ///
  /// \param[in] language
  ///     A language enumeration type that describes the main language
  ///     of this compile unit.
  ///
  /// \param[in] is_optimized
  ///     A value that can initialized with eLazyBoolYes, eLazyBoolNo
  ///     or eLazyBoolCalculate. If set to eLazyBoolCalculate, then
  ///     an extra call into SymbolVendor will be made to calculate if
  ///     the compile unit is optimized will be made when
  ///     CompileUnit::GetIsOptimized() is called.
  ///
  /// \see lldb::LanguageType</doc>
<use f='llvm/lldb/source/Symbol/CompileUnit.cpp' l='24' u='c' c='_ZN12lldb_private11CompileUnitC1ERKSt10shared_ptrINS_6ModuleEEPvPKcmN4lldb12LanguageTypeENS_8LazyBoolE'/>
<def f='llvm/lldb/source/Symbol/CompileUnit.cpp' l='27' ll='37' type='void lldb_private::CompileUnit::CompileUnit(const lldb::ModuleSP &amp; module_sp, void * user_data, const lldb_private::FileSpec &amp; fspec, const lldb::user_id_t cu_sym_id, lldb::LanguageType language, lldb_private::LazyBool is_optimized)'/>
