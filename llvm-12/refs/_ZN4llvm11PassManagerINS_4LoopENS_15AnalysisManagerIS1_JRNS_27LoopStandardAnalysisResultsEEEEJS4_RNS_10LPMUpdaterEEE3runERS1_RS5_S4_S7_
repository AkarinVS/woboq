<dec f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='100' type='llvm::PreservedAnalyses llvm::PassManager&lt;llvm::Loop, llvm::AnalysisManager&lt;llvm::Loop, llvm::LoopStandardAnalysisResults &amp;&gt;, llvm::LoopStandardAnalysisResults &amp;, llvm::LPMUpdater &amp;&gt;::run(llvm::Loop &amp; L, llvm::LoopAnalysisManager &amp; AM, llvm::LoopStandardAnalysisResults &amp; AR, llvm::LPMUpdater &amp; U)'/>
<def f='llvm/llvm/lib/Transforms/Scalar/LoopPassManager.cpp' l='25' ll='51' type='llvm::PreservedAnalyses llvm::PassManager&lt;llvm::Loop, llvm::AnalysisManager&lt;llvm::Loop, llvm::LoopStandardAnalysisResults &amp;&gt;, llvm::LoopStandardAnalysisResults &amp;, llvm::LPMUpdater &amp;&gt;::run(llvm::Loop &amp; L, llvm::LoopAnalysisManager &amp; AM, llvm::LoopStandardAnalysisResults &amp; AR, llvm::LPMUpdater &amp; U)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/LoopPassManager.cpp' l='23'>/// Explicitly specialize the pass manager&apos;s run method to handle loop nest
/// structure updates.</doc>
