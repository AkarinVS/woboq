<def f='llvm/llvm/include/llvm/Transforms/Utils/LoopVersioning.h' l='63' type='void llvm::LoopVersioning::versionLoop()'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopVersioning.h' l='50'>/// Performs the CFG manipulation part of versioning the loop including
  /// the DominatorTree and LoopInfo updates.
  ///
  /// The loop that was used to construct the class will be the &quot;versioned&quot; loop
  /// i.e. the loop that will receive control if all the memchecks pass.
  ///
  /// This allows the loop transform pass to operate on the same loop regardless
  /// of whether versioning was necessary or not:
  ///
  ///    for each loop L:
  ///        analyze L
  ///        if versioning is necessary version L
  ///        transform L</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp' l='567' u='c' c='_ZN12_GLOBAL__N_122LoadEliminationForLoop11processLoopEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp' l='627' u='c' c='_ZN12_GLOBAL__N_118LoopVersioningLICM9runOnLoopEPN4llvm4LoopEPNS1_8LoopInfoEPNS1_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopVersioning.cpp' l='282' u='c' c='_ZN12_GLOBAL__N_17runImplEPN4llvm8LoopInfoENS0_12function_refIFRKNS0_14LoopAccessInfoERNS0_4LoopEEEEPNS0_13DominatorTreeEPNS0_15ScalarEvolutionE'/>
