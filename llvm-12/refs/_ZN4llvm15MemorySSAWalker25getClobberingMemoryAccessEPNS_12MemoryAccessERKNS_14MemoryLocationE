<dec f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='1041' type='llvm::MemoryAccess * llvm::MemorySSAWalker::getClobberingMemoryAccess(llvm::MemoryAccess * , const llvm::MemoryLocation &amp; )'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='1030'>/// Given a potentially clobbering memory access and a new location,
  /// calling this will give you the nearest dominating clobbering MemoryAccess
  /// (by skipping non-aliasing def links).
  ///
  /// This version of the function is mainly used to disambiguate phi translated
  /// pointers, where the value of a pointer may have changed from the initial
  /// memory access. Note that this expects to be handed either a MemoryUse,
  /// or an already potentially clobbering access. Unlike the above API, if
  /// given a MemoryDef that clobbers the pointer as the starting access, it
  /// will return that MemoryDef, whereas the above would return the clobber
  /// starting from the use side of  the memory def.</doc>
<ovr f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1047' c='_ZN4llvm9MemorySSA13CachingWalker25getClobberingMemoryAccessEPNS_12MemoryAccessERKNS_14MemoryLocationE'/>
<ovr f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1083' c='_ZN4llvm9MemorySSA14SkipSelfWalker25getClobberingMemoryAccessEPNS_12MemoryAccessERKNS_14MemoryLocationE'/>
<ovr f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='2529' c='_ZN4llvm24DoNothingMemorySSAWalker25getClobberingMemoryAccessEPNS_12MemoryAccessERKNS_14MemoryLocationE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='359' u='c' c='_ZL14writtenBetweenPN4llvm9MemorySSAENS_14MemoryLocationEPKNS_14MemoryUseOrDefES5_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1293' u='c' c='_ZN4llvm13MemCpyOptPass26performMemCpyToMemSetOptznEPNS_10MemCpyInstEPNS_10MemSetInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1367' u='c' c='_ZN4llvm13MemCpyOptPass13processMemCpyEPNS_10MemCpyInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1383' u='c' c='_ZN4llvm13MemCpyOptPass13processMemCpyEPNS_10MemCpyInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1544' u='c' c='_ZN4llvm13MemCpyOptPass20processByValArgumentERNS_8CallBaseEj'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='674' u='c' c='_ZN39MemorySSATest_TestStoreDoubleQuery_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='681' u='c' c='_ZN39MemorySSATest_TestStoreDoubleQuery_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='1281' u='c' c='_ZN45MemorySSATest_LifetimeMarkersAreClobbers_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='1626' u='c' c='_ZN34MemorySSATest_TestCallClobber_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='1630' u='c' c='_ZN34MemorySSATest_TestCallClobber_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='1661' u='c' c='_ZN34MemorySSATest_TestLoadClobber_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='1665' u='c' c='_ZN34MemorySSATest_TestLoadClobber_Test8TestBodyEv'/>
