<dec f='llvm/polly/include/polly/ScopBuilder.h' l='316' type='void polly::ScopBuilder::buildInvariantEquivalenceClasses()'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='809' ll='827' type='void polly::ScopBuilder::buildInvariantEquivalenceClasses()'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3694' u='c' c='_ZN5polly11ScopBuilder9buildScopERN4llvm6RegionERNS1_15AssumptionCacheE'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='304'>/// Create equivalence classes for required invariant accesses.
  ///
  /// These classes will consolidate multiple required invariant loads from the
  /// same address in order to keep the number of dimensions in the SCoP
  /// description small. For each such class equivalence class only one
  /// representing element, hence one required invariant load, will be chosen
  /// and modeled as parameter. The method
  /// Scop::getRepresentingInvariantLoadSCEV() will replace each element from an
  /// equivalence class with the representing element that is modeled. As a
  /// consequence Scop::getIdForParam() will only return an id for the
  /// representing element of each equivalence class, thus for each required
  /// invariant location.</doc>
