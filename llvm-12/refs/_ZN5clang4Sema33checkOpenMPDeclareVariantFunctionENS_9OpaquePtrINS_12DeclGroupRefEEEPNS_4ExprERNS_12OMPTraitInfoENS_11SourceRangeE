<dec f='llvm/clang/include/clang/Sema/Sema.h' l='10795' type='Optional&lt;std::pair&lt;FunctionDecl *, Expr *&gt; &gt; clang::Sema::checkOpenMPDeclareVariantFunction(clang::Sema::DeclGroupPtrTy DG, clang::Expr * VariantRef, clang::OMPTraitInfo &amp; TI, clang::SourceRange SR)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='10785'>/// Checks &apos;\#pragma omp declare variant&apos; variant function and original
  /// functions after parsing of the associated method/function.
  /// \param DG Function declaration to which declare variant directive is
  /// applied to.
  /// \param VariantRef Expression that references the variant function, which
  /// must be used instead of the original one, specified in \p DG.
  /// \param TI The trait info object representing the match clause.
  /// \returns None, if the function/variant function are not compatible with
  /// the pragma, pair of original function/variant ref expression otherwise.</doc>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1408' u='c' c='_ZN5clang6Parser29ParseOMPDeclareVariantClausesENS_9OpaquePtrINS_12DeclGroupRefEEERN4llvm11SmallVectorINS_5TokenELj4EEENS_14SourceLocationE'/>
<def f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='6240' ll='6500' type='Optional&lt;std::pair&lt;FunctionDecl *, Expr *&gt; &gt; clang::Sema::checkOpenMPDeclareVariantFunction(Sema::DeclGroupPtrTy DG, clang::Expr * VariantRef, clang::OMPTraitInfo &amp; TI, clang::SourceRange SR)'/>
<use f='llvm/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp' l='440' u='c' c='_ZL32instantiateOMPDeclareVariantAttrRN5clang4SemaERKNS_30MultiLevelTemplateArgumentListERKNS_21OMPDeclareVariantAttrEPNS_4DeclE'/>
