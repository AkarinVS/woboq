<dec f='llvm/llvm/include/llvm/Object/ModuleSymbolTable.h' l='57' type='static void llvm::ModuleSymbolTable::CollectAsmSymbols(const llvm::Module &amp; M, function_ref&lt;void (llvm::StringRef, object::BasicSymbolRef::Flags)&gt; AsmSymbol)'/>
<doc f='llvm/llvm/include/llvm/Object/ModuleSymbolTable.h' l='52'>/// Parse inline ASM and collect the symbols that are defined or referenced in
  /// the current module.
  ///
  /// For each found symbol, call \p AsmSymbol with the name of the symbol found
  /// and the associated flags.</doc>
<use f='llvm/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp' l='689' u='c' c='_ZN4llvm23buildModuleSummaryIndexERKNS_6ModuleESt8functionIFPNS_18BlockFrequencyInfoERKNS_8FunctionEEEPNS_18ProfileSummaryInfoES3_IFPKNS_15StackSafetyInfoES8_EE'/>
<use f='llvm/llvm/lib/Object/ModuleSymbolTable.cpp' l='66' u='c' c='_ZN4llvm17ModuleSymbolTable9addModuleEPNS_6ModuleE'/>
<def f='llvm/llvm/lib/Object/ModuleSymbolTable.cpp' l='131' ll='166' type='static void llvm::ModuleSymbolTable::CollectAsmSymbols(const llvm::Module &amp; M, function_ref&lt;void (llvm::StringRef, BasicSymbolRef::Flags)&gt; AsmSymbol)'/>
