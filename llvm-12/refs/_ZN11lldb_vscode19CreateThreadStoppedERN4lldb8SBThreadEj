<dec f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='400' type='llvm::json::Value lldb_vscode::CreateThreadStopped(lldb::SBThread &amp; thread, uint32_t stop_id)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='379'>/// Create a &quot;StoppedEvent&quot; object for a LLDB thread object.
///
/// This function will fill in the following keys in the returned
/// object&apos;s &quot;body&quot; object:
///   &quot;reason&quot; - With a valid stop reason enumeration string value
///              that Microsoft specifies
///   &quot;threadId&quot; - The thread ID as an integer
///   &quot;description&quot; - a stop description (like &quot;breakpoint 12.3&quot;) as a
///                   string
///   &quot;preserveFocusHint&quot; - a boolean value that states if this thread
///                         should keep the focus in the GUI.
///   &quot;allThreadsStopped&quot; - set to True to indicate that all threads
///                         stop when any thread stops.
///
/// \param[in] thread
///     The LLDB thread to use when populating out the &quot;StoppedEvent&quot;
///     object.
///
/// \return
///     A &quot;StoppedEvent&quot; JSON object with that follows the formal JSON
///     definition outlined by Microsoft.</doc>
<def f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='842' ll='904' type='llvm::json::Value lldb_vscode::CreateThreadStopped(lldb::SBThread &amp; thread, uint32_t stop_id)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='785'>// &quot;StoppedEvent&quot;: {
//   &quot;allOf&quot;: [ { &quot;$ref&quot;: &quot;#/definitions/Event&quot; }, {
//     &quot;type&quot;: &quot;object&quot;,
//     &quot;description&quot;: &quot;Event message for &apos;stopped&apos; event type. The event
//                     indicates that the execution of the debuggee has stopped
//                     due to some condition. This can be caused by a break
//                     point previously set, a stepping action has completed,
//                     by executing a debugger statement etc.&quot;,
//     &quot;properties&quot;: {
//       &quot;event&quot;: {
//         &quot;type&quot;: &quot;string&quot;,
//         &quot;enum&quot;: [ &quot;stopped&quot; ]
//       },
//       &quot;body&quot;: {
//         &quot;type&quot;: &quot;object&quot;,
//         &quot;properties&quot;: {
//           &quot;reason&quot;: {
//             &quot;type&quot;: &quot;string&quot;,
//             &quot;description&quot;: &quot;The reason for the event. For backward
//                             compatibility this string is shown in the UI if
//                             the &apos;description&apos; attribute is missing (but it
//                             must not be translated).&quot;,
//             &quot;_enum&quot;: [ &quot;step&quot;, &quot;breakpoint&quot;, &quot;exception&quot;, &quot;pause&quot;, &quot;entry&quot; ]
//           },
//           &quot;description&quot;: {
//             &quot;type&quot;: &quot;string&quot;,
//             &quot;description&quot;: &quot;The full reason for the event, e.g. &apos;Paused
//                             on exception&apos;. This string is shown in the UI
//                             as is.&quot;
//           },
//           &quot;threadId&quot;: {
//             &quot;type&quot;: &quot;integer&quot;,
//             &quot;description&quot;: &quot;The thread which was stopped.&quot;
//           },
//           &quot;text&quot;: {
//             &quot;type&quot;: &quot;string&quot;,
//             &quot;description&quot;: &quot;Additional information. E.g. if reason is
//                             &apos;exception&apos;, text contains the exception name.
//                             This string is shown in the UI.&quot;
//           },
//           &quot;allThreadsStopped&quot;: {
//             &quot;type&quot;: &quot;boolean&quot;,
//             &quot;description&quot;: &quot;If allThreadsStopped is true, a debug adapter
//                             can announce that all threads have stopped.
//                             The client should use this information to
//                             enable that all threads can be expanded to
//                             access their stacktraces. If the attribute
//                             is missing or false, only the thread with the
//                             given threadId can be expanded.&quot;
//           }
//         },
//         &quot;required&quot;: [ &quot;reason&quot; ]
//       }
//     },
//     &quot;required&quot;: [ &quot;event&quot;, &quot;body&quot; ]
//   }]
// }</doc>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='228' u='c' c='_ZN12_GLOBAL__N_122SendThreadStoppedEventEv'/>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='234' u='c' c='_ZN12_GLOBAL__N_122SendThreadStoppedEventEv'/>
