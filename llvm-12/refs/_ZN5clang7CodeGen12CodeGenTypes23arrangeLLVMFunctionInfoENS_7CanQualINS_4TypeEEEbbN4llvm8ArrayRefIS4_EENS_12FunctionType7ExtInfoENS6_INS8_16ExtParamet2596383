<dec f='llvm/clang/lib/CodeGen/CodeGenTypes.h' l='266' type='const clang::CodeGen::CGFunctionInfo &amp; clang::CodeGen::CodeGenTypes::arrangeLLVMFunctionInfo(clang::CanQualType returnType, bool instanceMethod, bool chainCall, ArrayRef&lt;clang::CanQualType&gt; argTypes, FunctionType::ExtInfo info, ArrayRef&lt;FunctionProtoType::ExtParameterInfo&gt; paramInfos, clang::CodeGen::RequiredArgs args)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenTypes.h' l='260'>/// &quot;Arrange&quot; the LLVM information for a call or type with the given
  /// signature.  This is largely an internal method; other clients
  /// should use one of the above routines, which ultimately defer to
  /// this.
  ///
  /// \param argTypes - must all actually be canonical as params</doc>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='109' u='c' c='_ZN5clang7CodeGen12CodeGenTypes23arrangeFreeFunctionTypeENS_7CanQualINS_19FunctionNoProtoTypeEEE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='187' u='c' c='_ZL23arrangeLLVMFunctionInfoRN5clang7CodeGen12CodeGenTypesEbRN4llvm15SmallVectorImplINS_7CanQualINS_4TypeEEEEENS5_INS_17FunctionProtoTypeEEE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='353' u='c' c='_ZN5clang7CodeGen12CodeGenTypes29arrangeCXXStructorDeclarationENS_10GlobalDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='429' u='c' c='_ZN5clang7CodeGen12CodeGenTypes25arrangeCXXConstructorCallERKNS0_11CallArgListEPKNS_18CXXConstructorDeclENS_11CXXCtorTypeEjjb'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='450' u='c' c='_ZN5clang7CodeGen12CodeGenTypes26arrangeFunctionDeclarationEPKNS_12FunctionDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='499' u='c' c='_ZN5clang7CodeGen12CodeGenTypes31arrangeObjCMessageSendSignatureEPKNS_14ObjCMethodDeclENS_8QualTypeE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='510' u='c' c='_ZN5clang7CodeGen12CodeGenTypes34arrangeUnprototypedObjCMessageSendENS_8QualTypeERKNS0_11CallArgListE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='537' u='c' c='_ZN5clang7CodeGen12CodeGenTypes32arrangeUnprototypedMustTailThunkEPKNS_13CXXMethodDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='557' u='c' c='_ZN5clang7CodeGen12CodeGenTypes20arrangeMSCtorClosureEPKNS_18CXXConstructorDeclENS_11CXXCtorTypeE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='603' u='c' c='_ZL27arrangeFreeFunctionLikeCallRN5clang7CodeGen12CodeGenTypesERNS0_13CodeGenModuleERKNS0_11CallArgListEPKNS_12FunctionTypeEjb'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='636' u='c' c='_ZN5clang7CodeGen12CodeGenTypes31arrangeBlockFunctionDeclarationEPKNS_17FunctionProtoTypeERKNS0_15FunctionArgListE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='649' u='c' c='_ZN5clang7CodeGen12CodeGenTypes26arrangeBuiltinFunctionCallENS_8QualTypeERKNS0_11CallArgListE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='660' u='c' c='_ZN5clang7CodeGen12CodeGenTypes33arrangeBuiltinFunctionDeclarationENS_8QualTypeERKNS0_15FunctionArgListE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='668' u='c' c='_ZN5clang7CodeGen12CodeGenTypes33arrangeBuiltinFunctionDeclarationENS_7CanQualINS_4TypeEEEN4llvm8ArrayRefIS4_EE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='693' u='c' c='_ZN5clang7CodeGen12CodeGenTypes20arrangeCXXMethodCallERKNS0_11CallArgListEPKNS_17FunctionProtoTypeENS0_12RequiredArgsEj'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='699' u='c' c='_ZN5clang7CodeGen12CodeGenTypes22arrangeNullaryFunctionEv'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='721' u='c' c='_ZN5clang7CodeGen12CodeGenTypes11arrangeCallERKNS0_14CGFunctionInfoERKNS0_11CallArgListE'/>
<def f='llvm/clang/lib/CodeGen/CGCall.cpp' l='739' ll='797' type='const clang::CodeGen::CGFunctionInfo &amp; clang::CodeGen::CodeGenTypes::arrangeLLVMFunctionInfo(clang::CanQualType resultType, bool instanceMethod, bool chainCall, ArrayRef&lt;clang::CanQualType&gt; argTypes, FunctionType::ExtInfo info, ArrayRef&lt;FunctionProtoType::ExtParameterInfo&gt; paramInfos, clang::CodeGen::RequiredArgs required)'/>
<doc f='llvm/clang/lib/CodeGen/CGCall.cpp' l='736'>/// Arrange the argument and result information for an abstract value
/// of a given function type.  This is the method which all of the
/// above functions ultimately defer to.</doc>
<use f='llvm/clang/lib/CodeGen/CodeGenABITypes.cpp' l='68' u='c' c='_ZN5clang7CodeGen23arrangeFreeFunctionCallERNS0_13CodeGenModuleENS_7CanQualINS_4TypeEEEN4llvm8ArrayRefIS5_EENS_12FunctionType7ExtInfoENS0_12RequiredArgsE'/>
