<def f='llvm/llvm/include/llvm/IR/Value.h' l='341' ll='345' type='void llvm::Value::assertModuleIsMaterialized() const'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='348' u='c' c='_ZNK4llvm5Value9use_emptyEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='364' u='c' c='_ZN4llvm5Value9use_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='368' u='c' c='_ZNK4llvm5Value9use_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='380' u='c' c='_ZN4llvm5Value4usesEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='384' u='c' c='_ZNK4llvm5Value4usesEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='389' u='c' c='_ZNK4llvm5Value10user_emptyEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='401' u='c' c='_ZN4llvm5Value10user_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='405' u='c' c='_ZNK4llvm5Value10user_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='411' u='c' c='_ZN4llvm5Value9user_backEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='415' u='c' c='_ZNK4llvm5Value9user_backEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='425' u='c' c='_ZN4llvm5Value5usersEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='429' u='c' c='_ZNK4llvm5Value5usersEv'/>
<doc f='llvm/llvm/include/llvm/IR/Value.h' l='338'>// This indirection exists so we can keep assertModuleIsMaterializedImpl()
  // around in release builds of Value.cpp to be linked with other code built
  // in debug mode. But this avoids calling it in any of the release built code.</doc>
