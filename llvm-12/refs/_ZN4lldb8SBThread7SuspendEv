<dec f='llvm/lldb/include/lldb/API/SBThread.h' l='158' type='bool lldb::SBThread::Suspend()'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='62158' u='c' c='_ZL30_wrap_SBThread_Suspend__SWIG_0P7_objectlPS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBThread.h' l='139'>/// LLDB currently supports process centric debugging which means when any
  /// thread in a process stops, all other threads are stopped. The Suspend()
  /// call here tells our process to suspend a thread and not let it run when
  /// the other threads in a process are allowed to run. So when
  /// SBProcess::Continue() is called, any threads that aren&apos;t suspended will
  /// be allowed to run. If any of the SBThread functions for stepping are
  /// called (StepOver, StepInto, StepOut, StepInstruction, RunToAddress), the
  /// thread will not be allowed to run and these functions will simply return.
  ///
  /// Eventually we plan to add support for thread centric debugging where
  /// each thread is controlled individually and each thread would broadcast
  /// its state, but we haven&apos;t implemented this yet.
  ///
  /// Likewise the SBThread::Resume() call will again allow the thread to run
  /// when the process is continued.
  ///
  /// Suspend() and Resume() functions are not currently reference counted, if
  /// anyone has the need for them to be reference counted, please let us
  /// know.</doc>
<def f='llvm/lldb/source/API/SBThread.cpp' l='1010' ll='1015' type='bool lldb::SBThread::Suspend()'/>
<use f='llvm/lldb/source/API/SBThread.cpp' l='1011' u='a' c='_ZN4lldb8SBThread7SuspendEv'/>
<use f='llvm/lldb/source/API/SBThread.cpp' l='1011' u='a' c='_ZN4lldb8SBThread7SuspendEv'/>
<use f='llvm/lldb/source/API/SBThread.cpp' l='1417' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
