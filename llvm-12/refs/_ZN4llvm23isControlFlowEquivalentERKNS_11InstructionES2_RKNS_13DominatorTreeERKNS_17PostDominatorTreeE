<dec f='llvm/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h' l='28' type='bool llvm::isControlFlowEquivalent(const llvm::Instruction &amp; I0, const llvm::Instruction &amp; I1, const llvm::DominatorTree &amp; DT, const llvm::PostDominatorTree &amp; PDT)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h' l='25'>/// Return true if \p I0 and \p I1 are control flow equivalent.
/// Two instructions are control flow equivalent if their basic blocks are
/// control flow equivalent.</doc>
<def f='llvm/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp' l='229' ll='233' type='bool llvm::isControlFlowEquivalent(const llvm::Instruction &amp; I0, const llvm::Instruction &amp; I1, const llvm::DominatorTree &amp; DT, const llvm::PostDominatorTree &amp; PDT)'/>
<use f='llvm/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp' l='332' u='c' c='_ZN4llvm18isSafeToMoveBeforeERNS_11InstructionES1_RNS_13DominatorTreeEPKNS_17PostDominatorTreeEPNS_14DependenceInfoE'/>
