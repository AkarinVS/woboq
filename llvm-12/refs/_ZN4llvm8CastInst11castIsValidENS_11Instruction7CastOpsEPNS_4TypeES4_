<dec f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='692' type='static bool llvm::CastInst::castIsValid(Instruction::CastOps op, llvm::Type * SrcTy, llvm::Type * DstTy)'/>
<use f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='694' u='c' c='_ZN4llvm8CastInst11castIsValidENS_11Instruction7CastOpsEPNS_5ValueEPNS_4TypeE'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='688'>/// This method can be used to determine if a cast from SrcTy to DstTy using
  /// Opcode op is valid or not.
  /// @returns true iff the proposed cast is valid.
  /// Determine if a cast is valid without creating one.</doc>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='3299' ll='3397' type='static bool llvm::CastInst::castIsValid(Instruction::CastOps op, llvm::Type * SrcTy, llvm::Type * DstTy)'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='3291'>//===----------------------------------------------------------------------===//
//                    CastInst SubClass Constructors
//===----------------------------------------------------------------------===//

/// Check that the construction parameters for a CastInst are correct. This
/// could be broken out into the separate constructors but it is useful to have
/// it in one place and to eliminate the redundant code for getting the sizes
/// of the types involved.</doc>
