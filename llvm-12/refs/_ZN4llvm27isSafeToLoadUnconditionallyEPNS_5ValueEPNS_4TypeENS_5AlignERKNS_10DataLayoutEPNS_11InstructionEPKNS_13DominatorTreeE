<dec f='llvm/llvm/include/llvm/Analysis/Loads.h' l='89' type='bool llvm::isSafeToLoadUnconditionally(llvm::Value * V, llvm::Type * Ty, llvm::Align Alignment, const llvm::DataLayout &amp; DL, llvm::Instruction * ScanFrom = nullptr, const llvm::DominatorTree * DT = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/Loads.h' l='81'>/// Return true if we know that executing a load from this value cannot trap.
///
/// If DT and ScanFrom are specified this method performs context-sensitive
/// analysis and returns true if it is safe to load immediately before ScanFrom.
///
/// If it is not obviously safe to load from the specified pointer, we do a
/// quick local scan of the basic block containing ScanFrom, to determine if
/// the address is already accessed.</doc>
<def f='llvm/llvm/lib/Analysis/Loads.cpp' l='372' ll='378' type='bool llvm::isSafeToLoadUnconditionally(llvm::Value * V, llvm::Type * Ty, llvm::Align Alignment, const llvm::DataLayout &amp; DL, llvm::Instruction * ScanFrom = nullptr, const llvm::DominatorTree * DT = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='1003' u='c' c='_ZN4llvm16InstCombinerImpl13visitLoadInstERNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='1005' u='c' c='_ZN4llvm16InstCombinerImpl13visitLoadInstERNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='1340' u='c' c='_ZL23isSafeSelectToSpeculateRN4llvm10SelectInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='1343' u='c' c='_ZL23isSafeSelectToSpeculateRN4llvm10SelectInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='350' u='c' c='_ZL16canMoveAboveCallPN4llvm11InstructionEPNS_8CallInstEPNS_9AAResultsE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='147' u='c' c='_ZN12_GLOBAL__N_113VectorCombine19vectorizeLoadInsertERN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='172' u='c' c='_ZN12_GLOBAL__N_113VectorCombine19vectorizeLoadInsertERN4llvm11InstructionE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2908' u='c' c='_ZN5polly11ScopBuilder18getNonHoistableCtxEPNS_12MemoryAccessEN3isl12noexceptions9union_mapE'/>
<use f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='471' u='c' c='_ZNK5polly13ScopDetection31onlyValidRequiredInvariantLoadsERN4llvm9SetVectorINS1_11AssertingVHINS1_8LoadInstEEESt6vectorIS5_SaIS5_EENS1_8DenseSetIS5_N14612220'/>
