<dec f='llvm/polly/lib/External/isl/isl_tab.h' l='223' type='int isl_tab_is_redundant(struct isl_tab * tab, int con)'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='112' u='c' c='ineq_status_in'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='484' u='c' c='number_of_constraints_increases'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='1134' u='c' c='is_relaxed_extension'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='1366' u='c' c='add_selected_wraps'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='1500' u='c' c='has_redundant_cuts'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='3181' u='c' c='tab_insert_divs'/>
<use f='llvm/polly/lib/External/isl/isl_map_simplify.c' l='2468' u='c' c='update_ineq'/>
<use f='llvm/polly/lib/External/isl/isl_map_subtract.c' l='259' u='c' c='n_non_redundant'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='2642' u='c' c='isl_basic_map_update_from_tab'/>
<def f='llvm/polly/lib/External/isl/isl_tab.c' l='3425' ll='3434' type='int isl_tab_is_redundant(struct isl_tab * tab, int con)'/>
<doc f='llvm/polly/lib/External/isl/isl_tab.c' l='3417'>/* Is the constraint at position &quot;con&quot; marked as being redundant?
 * If it is marked as representing an equality, then it is not
 * considered to be redundant.
 * Note that isl_tab_mark_redundant marks both the isl_tab_var as
 * redundant and moves the corresponding row into the first
 * tab-&gt;n_redundant positions (or removes the row, assigning it index -1),
 * so the final test is actually redundant itself.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_vertices.c' l='277' u='c' c='can_select'/>
<use f='llvm/polly/lib/External/isl/isl_vertices.c' l='304' u='c' c='can_select'/>
