<dec f='llvm/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h' l='69' type='bool llvm::bypassSlowDivision(llvm::BasicBlock * BB, const DenseMap&lt;unsigned int, unsigned int&gt; &amp; BypassWidth)'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='504' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare13runOnFunctionERN4llvm8FunctionE'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h' l='64'>/// This optimization identifies DIV instructions in a BB that can be
/// profitably bypassed and carried out with a shorter, faster divide.
///
/// This optimization may add basic blocks immediately after BB; for obvious
/// reasons, you shouldn&apos;t pass those blocks to bypassSlowDivision.</doc>
<def f='llvm/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp' l='450' ll='482' type='bool llvm::bypassSlowDivision(llvm::BasicBlock * BB, const (anonymous namespace)::BypassWidthsTy &amp; BypassWidths)'/>
<doc f='llvm/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp' l='448'>/// This optimization identifies DIV/REM instructions in a BB that can be
/// profitably bypassed and carried out with a shorter, faster divide.</doc>
