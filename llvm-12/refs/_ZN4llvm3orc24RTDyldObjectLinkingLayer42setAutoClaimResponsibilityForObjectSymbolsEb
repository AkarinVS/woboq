<def f='llvm/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h' l='112' ll='116' type='llvm::orc::RTDyldObjectLinkingLayer &amp; llvm::orc::RTDyldObjectLinkingLayer::setAutoClaimResponsibilityForObjectSymbols(bool AutoClaimObjectSymbols)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h' l='101'>/// If set, this RTDyldObjectLinkingLayer instance will claim responsibility
  /// for any symbols provided by a given object file that were not already in
  /// the MaterializationResponsibility instance. Setting this flag allows
  /// higher-level program representations (e.g. LLVM IR) to be added based on
  /// only a subset of the symbols they provide, without having to write
  /// intervening layers to scan and add the additional symbols. This trades
  /// diagnostic quality for convenience however: If all symbols are enumerated
  /// up-front then clashes can be detected and reported early (and usually
  /// deterministically). If this option is set, clashes for the additional
  /// symbols may not be detected until late, and detection may depend on
  /// the flow of control through JIT&apos;d code. Use with care.</doc>
<use f='llvm/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp' l='1030' u='c' c='_ZN4llvm3orc5LLJIT24createObjectLinkingLayerERNS0_17LLJITBuilderStateERNS0_16ExecutionSessionE'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/RTDyldObjectLinkingLayerTest.cpp' l='233' u='c' c='_ZN12_GLOBAL__N_171RTDyldObjectLinkingLayerTest_TestAutoClaimResponsibilityForSymbols_Test8TestBodyEv'/>
