<dec f='llvm/llvm/lib/Target/ARM/ARMBasicBlockInfo.h' l='58' type='unsigned int'/>
<use f='llvm/llvm/lib/Target/ARM/ARMBasicBlockInfo.h' l='82' u='r' c='_ZNK4llvm14BasicBlockInfo17internalKnownBitsEv'/>
<use f='llvm/llvm/lib/Target/ARM/ARMBasicBlockInfo.h' l='83' u='r' c='_ZNK4llvm14BasicBlockInfo17internalKnownBitsEv'/>
<use f='llvm/llvm/lib/Target/ARM/ARMBasicBlockInfo.h' l='91' u='r' c='_ZNK4llvm14BasicBlockInfo10postOffsetENS_5AlignE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMBasicBlockInfo.h' l='141' u='w' c='_ZN4llvm18ARMBasicBlockUtils12adjustBBSizeEPNS_17MachineBasicBlockEi'/>
<use f='llvm/llvm/lib/Target/ARM/ARMBasicBlockInfo.cpp' l='50' u='w' c='_ZN4llvm18ARMBasicBlockUtils16computeBlockSizeEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMBasicBlockInfo.cpp' l='55' u='w' c='_ZN4llvm18ARMBasicBlockUtils16computeBlockSizeEPNS_17MachineBasicBlockE'/>
<offset>32</offset>
<doc f='llvm/llvm/lib/Target/ARM/ARMBasicBlockInfo.h' l='53'>/// Size - Size of the basic block in bytes.  If the block contains
  /// inline assembly, this is a worst case estimate.
  ///
  /// The size does not include any alignment padding whether from the
  /// beginning of the block, or from an aligned jump table at the end.</doc>
<use f='llvm/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp' l='1608' u='w' c='_ZN12_GLOBAL__N_118ARMConstantIslands15removeDeadCPEMIEPN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp' l='1676' u='w' c='_ZN12_GLOBAL__N_118ARMConstantIslands20fixupUnconditionalBrERNS0_9ImmBranchE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp' l='2354' u='w' c='_ZN12_GLOBAL__N_118ARMConstantIslands24optimizeThumb2JumpTablesEv'/>
