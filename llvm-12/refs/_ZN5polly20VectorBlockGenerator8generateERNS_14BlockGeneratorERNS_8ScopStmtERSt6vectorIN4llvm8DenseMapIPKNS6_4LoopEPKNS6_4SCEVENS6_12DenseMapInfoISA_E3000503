<def f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='625' ll='631' type='static void polly::VectorBlockGenerator::generate(polly::BlockGenerator &amp; BlockGen, polly::ScopStmt &amp; Stmt, std::vector&lt;LoopToScevMapT&gt; &amp; VLTS, isl_map * Schedule, isl_id_to_ast_expr * NewAccesses)'/>
<doc f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='605'>/// Generate a new vector basic block for a ScoPStmt.
  ///
  /// This code generation is similar to the normal, scalar code generation,
  /// except that each instruction is code generated for several vector lanes
  /// at a time. If possible instructions are issued as actual vector
  /// instructions, but e.g. for address calculation instructions we currently
  /// generate scalar instructions for each vector lane.
  ///
  /// @param BlockGen    A block generator object used as parent.
  /// @param Stmt        The statement to code generate.
  /// @param VLTS        A mapping from loops virtual canonical induction
  ///                    variable to their new values
  ///                    (for values recalculated in the new ScoP, but not
  ///                     within this basic block), one for each lane.
  /// @param Schedule    A map from the statement to a schedule where the
  ///                    innermost dimension is the dimension of the innermost
  ///                    loop containing the statement.
  /// @param NewAccesses A map from memory access ids to new ast expressions,
  ///                    which may contain new access expressions for certain
  ///                    memory accesses.</doc>
<use f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='401' u='c' c='_ZN14IslNodeBuilder16createUserVectorEP12isl_ast_nodeRSt6vectorIPN4llvm5ValueESaIS5_EEP6isl_idP13isl_union_map'/>
