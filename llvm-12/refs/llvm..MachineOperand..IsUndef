<dec f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='129' type='unsigned int'/>
<use f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='394' u='r' c='_ZNK4llvm14MachineOperand7isUndefEv'/>
<use f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='510' u='w' c='_ZN4llvm14MachineOperand10setIsUndefEb'/>
<use f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='802' u='w' c='_ZN4llvm14MachineOperand9CreateRegENS_8RegisterEbbbbbbjbbb'/>
<offset>28</offset>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='112'>/// IsUndef - True if this register operand reads an &quot;undef&quot; value, i.e. the
  /// read value doesn&apos;t matter.  This flag can be set on both use and def
  /// operands.  On a sub-register def operand, it refers to the part of the
  /// register that isn&apos;t written.  On a full-register def operand, it is a
  /// noop.  See readsReg().
  ///
  /// This is only valid on registers.
  ///
  /// Note that an instruction may have multiple &lt;undef&gt; operands referring to
  /// the same register.  In that case, the instruction may depend on those
  /// operands reading the same dont-care value.  For example:
  ///
  ///   %1 = XOR undef %2, undef %2
  ///
  /// Any register can be used for %2, and its value doesn&apos;t matter, but
  /// the two operands must be the same register.
  ///</doc>
<use f='llvm/llvm/lib/CodeGen/MachineOperand.cpp' l='263' u='w' c='_ZN4llvm14MachineOperand16ChangeToRegisterENS_8RegisterEbbbbbb'/>
