<dec f='llvm/llvm/include/llvm/Analysis/CFG.h' l='49' type='bool llvm::isCriticalEdge(const llvm::Instruction * TI, unsigned int SuccNum, bool AllowIdenticalEdges = false)'/>
<doc f='llvm/llvm/include/llvm/Analysis/CFG.h' l='45'>/// Return true if the specified edge is a critical edge. Critical edges are
/// edges from a block with multiple successors to a block with multiple
/// predecessors.
///</doc>
<def f='llvm/llvm/lib/Analysis/CFG.cpp' l='95' ll='99' type='bool llvm::isCriticalEdge(const llvm::Instruction * TI, unsigned int SuccNum, bool AllowIdenticalEdges = false)'/>
<doc f='llvm/llvm/lib/Analysis/CFG.cpp' l='92'>/// isCriticalEdge - Return true if the specified edge is a critical edge.
/// Critical edges are edges from a block with multiple successors to a block
/// with multiple predecessors.</doc>
<use f='llvm/llvm/lib/Transforms/Instrumentation/CFGMST.h' l='133' u='c' c='_ZN4llvm6CFGMST10buildEdgesEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='2580' u='c' c='_ZN4llvm3GVN16performScalarPREEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/BreakCriticalEdges.cpp' l='140' u='c' c='_ZN4llvm17SplitCriticalEdgeEPNS_11InstructionEjRKNS_28CriticalEdgeSplittingOptionsERKNS_5TwineE'/>
