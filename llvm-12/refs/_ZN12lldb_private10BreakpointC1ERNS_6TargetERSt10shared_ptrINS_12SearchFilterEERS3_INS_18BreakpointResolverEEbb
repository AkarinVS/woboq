<dec f='llvm/lldb/include/lldb/Breakpoint/Breakpoint.h' l='611' type='void lldb_private::Breakpoint::Breakpoint(lldb_private::Target &amp; target, lldb::SearchFilterSP &amp; filter_sp, lldb::BreakpointResolverSP &amp; resolver_sp, bool hardware, bool resolve_indirect_symbols = true)'/>
<doc f='llvm/lldb/include/lldb/Breakpoint/Breakpoint.h' l='581'>// Protected Methods

  /// Constructors and Destructors
  /// Only the Target can make a breakpoint, and it owns the breakpoint
  /// lifespans. The constructor takes a filter and a resolver.  Up in Target
  /// there are convenience variants that make breakpoints for some common
  /// cases.
  ///
  /// \param[in] target
  ///    The target in which the breakpoint will be set.
  ///
  /// \param[in] filter_sp
  ///    Shared pointer to the search filter that restricts the search domain of
  ///    the breakpoint.
  ///
  /// \param[in] resolver_sp
  ///    Shared pointer to the resolver object that will determine breakpoint
  ///    matches.
  ///
  /// \param hardware
  ///    If true, request a hardware breakpoint to be used to implement the
  ///    breakpoint locations.
  ///
  /// \param resolve_indirect_symbols
  ///    If true, and the address of a given breakpoint location in this
  ///    breakpoint is set on an
  ///    indirect symbol (i.e. Symbol::IsIndirect returns true) then the actual
  ///    breakpoint site will
  ///    be set on the target of the indirect symbol.
  // This is the generic constructor</doc>
<def f='llvm/lldb/source/Breakpoint/Breakpoint.cpp' l='48' ll='56' type='void lldb_private::Breakpoint::Breakpoint(lldb_private::Target &amp; target, lldb::SearchFilterSP &amp; filter_sp, lldb::BreakpointResolverSP &amp; resolver_sp, bool hardware, bool resolve_indirect_symbols = true)'/>
<doc f='llvm/lldb/source/Breakpoint/Breakpoint.cpp' l='47'>// Breakpoint constructor</doc>
<use f='llvm/lldb/source/Target/Target.cpp' l='631' u='c' c='_ZN12lldb_private6Target16CreateBreakpointERSt10shared_ptrINS_12SearchFilterEERS1_INS_18BreakpointResolverEEbbb'/>
