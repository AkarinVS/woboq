<def f='llvm/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h' l='243' ll='245' type='void llvm::TargetSubtargetInfo::getCriticalPathRCs(llvm::TargetSubtargetInfo::RegClassVector &amp; CriticalPathRCs) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h' l='240'>// For use with PostRAScheduling: in CriticalPathRCs, return any register
  // classes that should only be considered for anti-dependence breaking if they
  // are on the critical path.</doc>
<use f='llvm/llvm/lib/CodeGen/PostRASchedulerList.cpp' l='270' u='c' c='_ZNK12_GLOBAL__N_115PostRAScheduler21enablePostRASchedulerERKN4llvm19TargetSubtargetInfoENS1_10CodeGenOpt5LevelERNS2_16AntiDepBreakModeERNS1_15SmallVe14427044'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsSubtarget.cpp' l='227' c='_ZNK4llvm13MipsSubtarget18getCriticalPathRCsERNS_15SmallVectorImplIPKNS_19TargetRegisterClassEEE'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCSubtarget.cpp' l='204' c='_ZNK4llvm12PPCSubtarget18getCriticalPathRCsERNS_15SmallVectorImplIPKNS_19TargetRegisterClassEEE'/>
