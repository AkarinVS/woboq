<dec f='llvm/llvm/include/llvm/CodeGen/ModuloSchedule.h' l='192' type='void llvm::ModuloScheduleExpander::generateEpilog(unsigned int LastStage, llvm::MachineBasicBlock * KernelBB, llvm::ModuloScheduleExpander::ValueMapTy * VRMap, llvm::ModuloScheduleExpander::MBBVectorTy &amp; EpilogBBs, llvm::ModuloScheduleExpander::MBBVectorTy &amp; PrologBBs)'/>
<use f='llvm/llvm/lib/CodeGen/ModuloSchedule.cpp' l='166' u='c' c='_ZN4llvm22ModuloScheduleExpander21generatePipelinedLoopEv'/>
<def f='llvm/llvm/lib/CodeGen/ModuloSchedule.cpp' l='248' ll='329' type='void llvm::ModuloScheduleExpander::generateEpilog(unsigned int LastStage, llvm::MachineBasicBlock * KernelBB, llvm::ModuloScheduleExpander::ValueMapTy * VRMap, llvm::ModuloScheduleExpander::MBBVectorTy &amp; EpilogBBs, llvm::ModuloScheduleExpander::MBBVectorTy &amp; PrologBBs)'/>
<doc f='llvm/llvm/lib/CodeGen/ModuloSchedule.cpp' l='245'>/// Generate the pipeline epilog code. The epilog code finishes the iterations
/// that were started in either the prolog or the kernel.  We create a basic
/// block for each stage that needs to complete.</doc>
