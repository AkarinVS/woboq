<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='623' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP10deleteTreeEv'/>
<dec f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='2396' type='MapVector&lt;llvm::Value *, std::pair&lt;uint64_t, bool&gt; &gt;'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3456' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3458' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3600' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='4109' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP11getTreeCostEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='4110' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP11getTreeCostEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='4112' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP11getTreeCostEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='4863' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP13vectorizeTreeERNS_9MapVectorIPNS_5ValueENS_11SmallVectorIPNS_11InstructionELj2EEENS_8DenseMapIS4_jNS_12DenseMapInfoIS1236484'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='4867' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP13vectorizeTreeERNS_9MapVectorIPNS_5ValueENS_11SmallVectorIPNS_11InstructionELj2EEENS_8DenseMapIS4_jNS_12DenseMapInfoIS1236484'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='4879' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP13vectorizeTreeERNS_9MapVectorIPNS_5ValueENS_11SmallVectorIPNS_11InstructionELj2EEENS_8DenseMapIS4_jNS_12DenseMapInfoIS1236484'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='4881' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP13vectorizeTreeERNS_9MapVectorIPNS_5ValueENS_11SmallVectorIPNS_11InstructionELj2EEENS_8DenseMapIS4_jNS_12DenseMapInfoIS1236484'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='5811' u='m' c='_ZN4llvm13slpvectorizer7BoUpSLP24computeMinimumValueSizesEv'/>
<offset>12352</offset>
<doc f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='2391'>/// A map of scalar integer values to the smallest bit width with which they
  /// can legally be represented. The values map to (width, signed) pairs,
  /// where &quot;width&quot; indicates the minimum bit width and &quot;signed&quot; is True if the
  /// value must be signed-extended, rather than zero-extended, back to its
  /// original width.</doc>
