<def f='llvm/llvm/utils/benchmark/src/mutex.h' l='75' ll='85'/>
<use f='llvm/llvm/utils/benchmark/src/mutex.h' l='91' c='_ZN9benchmark9MutexLockC1ERNS_5MutexE'/>
<use f='llvm/llvm/utils/benchmark/src/mutex.h' l='121'/>
<use f='llvm/llvm/utils/benchmark/src/thread_manager.h' l='17' c='_ZNK9benchmark8internal13ThreadManager17GetBenchmarkMutexEv'/>
<use f='llvm/llvm/utils/benchmark/src/thread_manager.h' l='56'/>
<use f='llvm/llvm/utils/benchmark/src/thread_manager.h' l='59'/>
<size>40</size>
<doc f='llvm/llvm/utils/benchmark/src/mutex.h' l='71'>// NOTE: Wrappers for std::mutex and std::unique_lock are provided so that
// we can annotate them with thread safety attributes and use the
// -Wthread-safety warning with clang. The standard library types cannot be
// used directly because they do not provided the required annotations.</doc>
<fun r='_ZN9benchmark5MutexC1Ev'/>
<fun r='_ZN9benchmark5Mutex4lockEv'/>
<fun r='_ZN9benchmark5Mutex6unlockEv'/>
<fun r='_ZN9benchmark5Mutex13native_handleEv'/>
<mbr r='benchmark::Mutex::mut_' o='0' t='std::mutex'/>
<use f='llvm/llvm/utils/benchmark/src/benchmark_register.cc' l='88'/>
<size>40</size>
