<dec f='llvm/llvm/include/llvm/Transforms/Utils/Cloning.h' l='289' type='void llvm::cloneNoAliasScopes(ArrayRef&lt;llvm::MDNode *&gt; NoAliasDeclScopes, DenseMap&lt;llvm::MDNode *, llvm::MDNode *&gt; &amp; ClonedScopes, llvm::StringRef Ext, llvm::LLVMContext &amp; Context)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Cloning.h' l='284'>/// Duplicate the specified list of noalias decl scopes.
/// The &apos;Ext&apos; string is added as an extension to the name.
/// Afterwards, the ClonedScopes contains the mapping of the original scope
/// MDNode onto the cloned scope.
/// Be aware that the cloned scopes are still part of the original scope domain.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2086' u='c' c='_ZN4llvm17JumpThreadingPass17cloneInstructionsENS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEES6_PNS_10BasicBlockES8_'/>
<def f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='888' ll='912' type='void llvm::cloneNoAliasScopes(ArrayRef&lt;llvm::MDNode *&gt; NoAliasDeclScopes, DenseMap&lt;llvm::MDNode *, llvm::MDNode *&gt; &amp; ClonedScopes, llvm::StringRef Ext, llvm::LLVMContext &amp; Context)'/>
<use f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='958' u='c' c='_ZN4llvm26cloneAndAdaptNoAliasScopesENS_8ArrayRefIPNS_6MDNodeEEENS0_IPNS_10BasicBlockEEERNS_11LLVMContextENS_9StringRefE'/>
<use f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='975' u='c' c='_ZN4llvm26cloneAndAdaptNoAliasScopesENS_8ArrayRefIPNS_6MDNodeEEEPNS_11InstructionES5_RNS_11LLVMContextENS_9StringRefE'/>
