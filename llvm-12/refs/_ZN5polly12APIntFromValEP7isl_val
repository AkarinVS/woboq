<dec f='llvm/polly/include/polly/Support/GICHelper.h' l='118' type='llvm::APInt polly::APIntFromVal(isl_val * Val)'/>
<use f='llvm/polly/include/polly/Support/GICHelper.h' l='148' u='c' c='_ZN5polly12APIntFromValEN3isl12noexceptions3valE'/>
<doc f='llvm/polly/include/polly/Support/GICHelper.h' l='91'>/// Translate isl_val to llvm::APInt.
///
/// This function can only be called on isl_val values which are integers.
/// Calling this function with a non-integral rational, NaN or infinity value
/// is not allowed.
///
/// As the input isl_val may be negative, the APInt that this function returns
/// must always be interpreted as signed two&apos;s complement value. The bitwidth of
/// the generated APInt is always the minimal bitwidth necessary to model the
/// provided integer when interpreting the bit pattern as signed value.
///
/// Some example conversions are:
///
///   Input      Bits    Signed  Bitwidth
///       0 -&gt;      0         0         1
///      -1 -&gt;      1        -1         1
///       1 -&gt;     01         1         2
///      -2 -&gt;     10        -2         2
///       2 -&gt;    010         2         3
///      -3 -&gt;    101        -3         3
///       3 -&gt;    011         3         3
///      -4 -&gt;    100        -4         3
///       4 -&gt;   0100         4         4
///
/// @param Val The isl val to translate.
///
/// @return The APInt value corresponding to @p Val.</doc>
<use f='llvm/polly/lib/CodeGen/IslExprBuilder.cpp' l='757' u='c' c='_ZN5polly14IslExprBuilder9createIntEP12isl_ast_expr'/>
<def f='llvm/polly/lib/Support/GICHelper.cpp' l='51' ll='83' type='llvm::APInt polly::APIntFromVal(isl_val * Val)'/>
