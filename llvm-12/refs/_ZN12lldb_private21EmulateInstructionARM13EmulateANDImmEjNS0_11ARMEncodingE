<dec f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='639' type='bool lldb_private::EmulateInstructionARM::EmulateANDImm(const uint32_t opcode, const lldb_private::EmulateInstructionARM::ARMEncoding encoding)'/>
<def f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='6019' ll='6089' type='bool lldb_private::EmulateInstructionARM::EmulateANDImm(const uint32_t opcode, const lldb_private::EmulateInstructionARM::ARMEncoding encoding)'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='12947' u='a' c='_ZN12lldb_private21EmulateInstructionARM26GetARMOpcodeForInstructionEjj'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='13362' u='a' c='_ZN12lldb_private21EmulateInstructionARM28GetThumbOpcodeForInstructionEjj'/>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='6016'>// This instruction performs a bitwise AND of a register value and an immediate
// value, and writes the result to the destination register.  It can optionally
// update the condition flags based on the result.</doc>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='638'>// A8.6.11 AND (immediate)</doc>
