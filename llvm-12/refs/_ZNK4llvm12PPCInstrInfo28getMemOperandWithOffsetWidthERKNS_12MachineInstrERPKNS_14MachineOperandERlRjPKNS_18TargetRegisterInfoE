<dec f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='532' type='bool llvm::PPCInstrInfo::getMemOperandWithOffsetWidth(const llvm::MachineInstr &amp; LdSt, const llvm::MachineOperand *&amp; BaseOp, int64_t &amp; Offset, unsigned int &amp; Width, const llvm::TargetRegisterInfo * TRI) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='529'>/// Return true if get the base operand, byte offset of an instruction and
  /// the memory width. Width is the size of memory that is being
  /// loaded/stored (e.g. 1, 2, 4, 8).</doc>
<use f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='2737' u='c' c='_ZNK4llvm12PPCInstrInfo29getMemOperandsWithOffsetWidthERKNS_12MachineInstrERNS_15SmallVectorImplIPKNS_14MachineOperandEEERlRbRjPKNS_18TargetRegisterInfoE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='2825' u='c' c='_ZNK4llvm12PPCInstrInfo19shouldClusterMemOpsENS_8ArrayRefIPKNS_14MachineOperandEEES5_jj'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='2826' u='c' c='_ZNK4llvm12PPCInstrInfo19shouldClusterMemOpsENS_8ArrayRefIPKNS_14MachineOperandEEES5_jj'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='5439' ll='5460' type='bool llvm::PPCInstrInfo::getMemOperandWithOffsetWidth(const llvm::MachineInstr &amp; LdSt, const llvm::MachineOperand *&amp; BaseReg, int64_t &amp; Offset, unsigned int &amp; Width, const llvm::TargetRegisterInfo * TRI) const'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='5480' u='c' c='_ZNK4llvm12PPCInstrInfo31areMemAccessesTriviallyDisjointERKNS_12MachineInstrES3_'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='5481' u='c' c='_ZNK4llvm12PPCInstrInfo31areMemAccessesTriviallyDisjointERKNS_12MachineInstrES3_'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='5437'>// Return true if get the base operand, byte offset of an instruction and the
// memory width. Width is the size of memory that is being loaded/stored.</doc>
