<dec f='llvm/lldb/include/lldb/Symbol/FuncUnwinders.h' l='112' type='lldb_private::LazyBool lldb_private::FuncUnwinders::CompareUnwindPlansForIdenticalInitialPCLocation(lldb_private::Thread &amp; thread, const lldb::UnwindPlanSP &amp; a, const lldb::UnwindPlanSP &amp; b)'/>
<doc f='llvm/lldb/include/lldb/Symbol/FuncUnwinders.h' l='107'>// Do a simplistic comparison for the register restore rule for getting the
  // caller&apos;s pc value on two UnwindPlans -- returns LazyBoolYes if they have
  // the same unwind rule for the pc, LazyBoolNo if they do not have the same
  // unwind rule for the pc, and LazyBoolCalculate if it was unable to
  // determine this for some reason.</doc>
<def f='llvm/lldb/source/Symbol/FuncUnwinders.cpp' l='352' ll='381' type='lldb_private::LazyBool lldb_private::FuncUnwinders::CompareUnwindPlansForIdenticalInitialPCLocation(lldb_private::Thread &amp; thread, const lldb::UnwindPlanSP &amp; a, const lldb::UnwindPlanSP &amp; b)'/>
<use f='llvm/lldb/source/Symbol/FuncUnwinders.cpp' l='413' u='c' c='_ZN12lldb_private13FuncUnwinders26GetUnwindPlanAtNonCallSiteERNS_6TargetERNS_6ThreadE'/>
<use f='llvm/lldb/source/Symbol/FuncUnwinders.cpp' l='415' u='c' c='_ZN12lldb_private13FuncUnwinders26GetUnwindPlanAtNonCallSiteERNS_6TargetERNS_6ThreadE'/>
<use f='llvm/lldb/source/Symbol/FuncUnwinders.cpp' l='417' u='c' c='_ZN12lldb_private13FuncUnwinders26GetUnwindPlanAtNonCallSiteERNS_6TargetERNS_6ThreadE'/>
<doc f='llvm/lldb/source/Symbol/FuncUnwinders.cpp' l='349'>// This method compares the pc unwind rule in the first row of two UnwindPlans.
// If they have the same way of getting the pc value (e.g. &quot;CFA - 8&quot; + &quot;CFA is
// sp&quot;), then it will return LazyBoolTrue.</doc>
