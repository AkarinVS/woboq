<dec f='llvm/llvm/include/llvm/IR/OptBisect.h' l='76' type='bool llvm::OptBisect::checkPass(const llvm::StringRef PassName, const llvm::StringRef TargetDesc)'/>
<doc f='llvm/llvm/include/llvm/IR/OptBisect.h' l='65'>/// Checks the bisect limit to determine if the specified pass should run.
  ///
  /// If the bisect limit is set to -1, the function prints a message describing
  /// the pass and the bisect number assigned to it and return true.  Otherwise,
  /// the function prints a message with the bisect number assigned to the
  /// pass and indicating whether or not the pass will be run and return true if
  /// the bisect limit has not yet been exceeded or false if it has.
  ///
  /// Most passes should not call this routine directly. Instead, they are
  /// called through helper routines provided by the pass base classes.  For
  /// instance, function passes should call FunctionPass::skipFunction().</doc>
<use f='llvm/llvm/lib/IR/OptBisect.cpp' l='45' u='c' c='_ZN4llvm9OptBisect13shouldRunPassEPKNS_4PassENS_9StringRefE'/>
<def f='llvm/llvm/lib/IR/OptBisect.cpp' l='48' ll='56' type='bool llvm::OptBisect::checkPass(const llvm::StringRef PassName, const llvm::StringRef TargetDesc)'/>
<use f='llvm/llvm/lib/Passes/StandardInstrumentations.cpp' l='642' u='c' c='_ZN4llvm24OptBisectInstrumentation17registerCallbacksERNS_28PassInstrumentationCallbacksE'/>
