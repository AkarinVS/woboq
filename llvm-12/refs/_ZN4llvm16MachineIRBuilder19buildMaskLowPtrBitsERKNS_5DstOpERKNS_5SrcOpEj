<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='505' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildMaskLowPtrBits(const llvm::DstOp &amp; Res, const llvm::SrcOp &amp; Op0, uint32_t NumBits)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='492'>/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 &lt;&lt; NumBits) - 1
  ///
  /// This clears the low bits of a pointer operand without destroying its
  /// pointer properties. This has the effect of rounding the address *down* to
  /// a specified alignment in bits.
  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p Res and \p Op0 must be generic virtual registers with pointer
  ///      type.
  /// \pre \p NumBits must be an integer representing the number of low bits to
  ///      be cleared in \p Op0.
  ///
  /// \return a MachineInstrBuilder for the newly created instruction.</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp' l='208' ll='216' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildMaskLowPtrBits(const llvm::DstOp &amp; Res, const llvm::SrcOp &amp; Op0, uint32_t NumBits)'/>
<use f='llvm/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp' l='912' u='c' c='_ZNK4llvm20AArch64LegalizerInfo13legalizeVaArgERNS_12MachineInstrERNS_19MachineRegisterInfoERNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='1270' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo25applyMappingDynStackAllocERNS_12MachineInstrERKNS_16RegisterBankInfo14OperandsMapperERNS_19MachineRegisterInfoE'/>
