<dec f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='247' type='void llvm::AArch64InstrInfo::genAlternativeCodeSequence(llvm::MachineInstr &amp; Root, llvm::MachineCombinerPattern Pattern, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; InsInstrs, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; DelInstrs, DenseMap&lt;unsigned int, unsigned int&gt; &amp; InstrIdxForVirtReg) const'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='245'>/// When getMachineCombinerPatterns() finds patterns, this function generates
  /// the instructions that could replace the original code sequence</doc>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1132' c='_ZNK4llvm15TargetInstrInfo26genAlternativeCodeSequenceERNS_12MachineInstrENS_22MachineCombinerPatternERNS_15SmallVectorImplIPS1_EES7_RNS_8DenseMapIjjN16378931'/>
<def f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='4864' ll='5700' type='void llvm::AArch64InstrInfo::genAlternativeCodeSequence(llvm::MachineInstr &amp; Root, llvm::MachineCombinerPattern Pattern, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; InsInstrs, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; DelInstrs, DenseMap&lt;unsigned int, unsigned int&gt; &amp; InstrIdxForVirtReg) const'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='4861'>/// When getMachineCombinerPatterns() finds potential patterns,
/// this function generates the instructions that could replace the
/// original code sequence</doc>
