<dec f='llvm/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h' l='339' type='void llvm::IRSimilarity::IRInstructionMapper::convertToUnsignedVec(llvm::BasicBlock &amp; BB, std::vector&lt;IRInstructionData *&gt; &amp; InstrList, std::vector&lt;unsigned int&gt; &amp; IntegerMapping)'/>
<def f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='151' ll='184' type='void llvm::IRSimilarity::IRInstructionMapper::convertToUnsignedVec(llvm::BasicBlock &amp; BB, std::vector&lt;IRInstructionData *&gt; &amp; InstrList, std::vector&lt;unsigned int&gt; &amp; IntegerMapping)'/>
<use f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='673' u='c' c='_ZN4llvm12IRSimilarity22IRSimilarityIdentifier14populateMapperERNS_6ModuleERSt6vectorIPNS0_17IRInstructionDataESaIS6_EERS4_IjSaIjEE'/>
<doc f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='149'>// TODO: This is the same as the MachineOutliner, and should be consolidated
// into the same interface.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h' l='332'>/// Maps the Instructions in a BasicBlock \p BB to legal or illegal integers
  /// determined by \p InstrType. Two Instructions are mapped to the same value
  /// if they are close as defined by the InstructionData class above.
  ///
  /// \param [in] BB - The BasicBlock to be mapped to integers.
  /// \param [in,out] InstrList - Vector of IRInstructionData to append to.
  /// \param [in,out] IntegerMapping - Vector of unsigned integers to append to.</doc>
<use f='llvm/llvm/unittests/Analysis/IRSimilarityIdentifierTest.cpp' l='38' u='c' c='_Z10getVectorsRN4llvm6ModuleERNS_12IRSimilarity19IRInstructionMapperERSt6vectorIPNS2_17IRInstructionDataESaIS7_EERS5_IjSaIjEE'/>
