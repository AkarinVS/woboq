<dec f='llvm/lldb/include/lldb/Target/Thread.h' l='801' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOut(bool abort_other_plans, lldb_private::SymbolContext * addr_context, bool first_insn, bool stop_other_threads, lldb_private::Vote stop_vote, lldb_private::Vote run_vote, uint32_t frame_idx, lldb_private::Status &amp; status, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='761'>/// Queue the plan used to step out of the function at the current PC of
  /// \a thread.
  ///
  /// \param[in] abort_other_plans
  ///    \b true if we discard the currently queued plans and replace them with
  ///    this one.
  ///    Otherwise this plan will go on the end of the plan stack.
  ///
  /// \param[in] addr_context
  ///    When dealing with stepping through inlined functions the current PC is
  ///    not enough information to know
  ///    what &quot;step&quot; means.  For instance a series of nested inline functions
  ///    might start at the same address.
  //     The \a addr_context provides the current symbol context the step
  ///    is supposed to be out of.
  //   FIXME: Currently unused.
  ///
  /// \param[in] first_insn
  ///     \b true if this is the first instruction of a function.
  ///
  /// \param[in] stop_other_threads
  ///    \b true if we will stop other threads while we single step this one.
  ///
  /// \param[in] stop_vote
  ///    See standard meanings for the stop &amp; run votes in ThreadPlan.h.
  ///
  /// \param[in] run_vote
  ///    See standard meanings for the stop &amp; run votes in ThreadPlan.h.
  ///
  /// \param[out] status
  ///     A status with an error if queuing failed.
  ///
  /// \param[in] step_out_avoids_code_without_debug_info
  ///    If eLazyBoolYes, if the step over steps out it will continue to step
  ///    out till it comes to a frame with debug info.
  ///    If eLazyBoolCalculate, it will consult the default set in the thread.
  ///
  /// \return
  ///     A shared pointer to the newly queued thread plan, or nullptr if the
  ///     plan could not be queued.</doc>
<dec f='llvm/lldb/include/lldb/Target/ThreadPlanStepOut.h' l='77' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOut(bool abort_other_plans, lldb_private::SymbolContext * addr_context, bool first_insn, bool stop_others, lldb_private::Vote stop_vote, lldb_private::Vote run_vote, uint32_t frame_idx, lldb_private::Status &amp; status, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
<use f='llvm/lldb/source/API/SBThread.cpp' l='651' u='c' c='_ZN4lldb8SBThread7StepOutERNS_7SBErrorE'/>
<use f='llvm/lldb/source/API/SBThread.cpp' l='698' u='c' c='_ZN4lldb8SBThread14StepOutOfFrameERNS_7SBFrameERNS_7SBErrorE'/>
<use f='llvm/lldb/source/API/SBThreadPlan.cpp' l='341' u='c' c='_ZN4lldb12SBThreadPlan25QueueThreadPlanForStepOutEjbRNS_7SBErrorE'/>
<use f='llvm/lldb/source/Commands/CommandObjectThread.cpp' l='529' u='c' c='_ZN39CommandObjectThreadStepWithTypeAndScope9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Target/Thread.cpp' l='1322' ll='1332' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepOut(bool abort_other_plans, lldb_private::SymbolContext * addr_context, bool first_insn, bool stop_other_threads, lldb_private::Vote stop_vote, lldb_private::Vote run_vote, uint32_t frame_idx, lldb_private::Status &amp; status, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
<use f='llvm/lldb/source/Target/Thread.cpp' l='1979' u='c' c='_ZN12lldb_private6Thread7StepOutEv'/>
<use f='llvm/lldb/source/Target/ThreadPlanCallOnFunctionExit.cpp' l='30' u='c' c='_ZN12lldb_private28ThreadPlanCallOnFunctionExit7DidPushEv'/>
