<dec f='llvm/llvm/include/llvm/ADT/APFloat.h' l='463' type='void llvm::detail::IEEEFloat::makeNaN(bool SNaN = false, bool Neg = false, const llvm::APInt * fill = nullptr)'/>
<use f='llvm/llvm/include/llvm/ADT/APFloat.h' l='827' u='c' c='_ZN4llvm7APFloat7makeNaNEbbPKNS_5APIntE'/>
<def f='llvm/llvm/lib/Support/APFloat.cpp' l='755' ll='800' type='void llvm::detail::IEEEFloat::makeNaN(bool SNaN = false, bool Negative = false, const llvm::APInt * fill = nullptr)'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1499' u='c' c='_ZN4llvm6detail9IEEEFloat21addOrSubtractSpecialsERKS1_b'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1615' u='c' c='_ZN4llvm6detail9IEEEFloat16multiplySpecialsERKS1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1661' u='c' c='_ZN4llvm6detail9IEEEFloat14divideSpecialsERKS1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1699' u='c' c='_ZN4llvm6detail9IEEEFloat11modSpecialsERKS1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1737' u='c' c='_ZN4llvm6detail9IEEEFloat17remainderSpecialsERKS1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='2842' u='c' c='_ZN4llvm6detail9IEEEFloat25convertFromStringSpecialsENS_9StringRefE'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='2868' u='c' c='_ZN4llvm6detail9IEEEFloat25convertFromStringSpecialsENS_9StringRefE'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='4035' u='c' c='_ZN4llvm6detail9IEEEFloat4nextEb'/>
<doc f='llvm/llvm/lib/Support/APFloat.cpp' l='752'>/* Make this number a NaN, with an arbitrary but deterministic value
   for the significand.  If double or longer, this is a signalling NaN,
   which may not be ideal.  If float, this is QNaN(0).  */</doc>
