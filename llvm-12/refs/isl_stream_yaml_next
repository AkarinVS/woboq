<dec f='llvm/polly/lib/External/isl/include/isl/stream.h' l='92' type='int isl_stream_yaml_next(isl_stream * s)'/>
<use f='llvm/polly/lib/External/isl/isl_flow.c' l='1905' u='c' c='isl_stream_read_union_access_info'/>
<use f='llvm/polly/lib/External/isl/isl_flow.c' l='1911' u='c' c='isl_stream_read_union_access_info'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_constraints.c' l='593' u='c' c='isl_stream_read_schedule_constraints'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_constraints.c' l='600' u='c' c='isl_stream_read_schedule_constraints'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='80' u='c' c='read_context'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='93' u='c' c='read_context'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='103' u='c' c='read_context'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='131' u='c' c='read_domain'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='144' u='c' c='read_domain'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='154' u='c' c='read_domain'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='184' u='c' c='read_expansion'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='219' u='c' c='read_expansion'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='257' u='c' c='read_extension'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='270' u='c' c='read_extension'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='280' u='c' c='read_extension'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='308' u='c' c='read_filter'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='321' u='c' c='read_filter'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='331' u='c' c='read_filter'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='359' u='c' c='read_guard'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='372' u='c' c='read_guard'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='382' u='c' c='read_guard'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='410' u='c' c='read_mark'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='423' u='c' c='read_mark'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='434' u='c' c='read_mark'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='461' u='c' c='read_coincident'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='524' u='c' c='read_band'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='573' u='c' c='read_band'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='615' u='c' c='read_children'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='622' u='c' c='read_children'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_read.c' l='665' u='c' c='isl_stream_read_schedule_tree'/>
<def f='llvm/polly/lib/External/isl/isl_stream.c' l='950' ll='1042' type='int isl_stream_yaml_next(isl_stream * s)'/>
<doc f='llvm/polly/lib/External/isl/isl_stream.c' l='911'>/* Move to the next state at the innermost level.
 * Return 1 if successful.
 * Return 0 if we are at the end of the innermost level.
 * Return -1 on error.
 *
 * If we are in state isl_yaml_mapping_key_start, then we have just
 * started a mapping and we are expecting a key.  If the mapping started
 * with a &apos;{&apos;, then we check if the next token is a &apos;}&apos;.  If so,
 * then the mapping is empty and there is no next state at this level.
 * Otherwise, we assume that there is at least one key (the one from
 * which we derived the indentation in isl_stream_yaml_read_start_mapping.
 *
 * If we are in state isl_yaml_mapping_key, then the we expect a colon
 * followed by a value, so there is always a next state unless
 * some error occurs.
 *
 * If we are in state isl_yaml_mapping_val, then there may or may
 * not be a subsequent key in the same mapping.
 * In flow format, the next key is preceded by a comma.
 * In block format, the next key has the same indentation as the first key.
 * If the first token has a smaller indentation, then we have reached
 * the end of the current mapping.
 *
 * If we are in state isl_yaml_sequence_start, then we have just
 * started a sequence.  If the sequence started with a &apos;[&apos;,
 * then we check if the next token is a &apos;]&apos;.  If so, then the sequence
 * is empty and there is no next state at this level.
 * Otherwise, we assume that there is at least one element in the sequence
 * (the one from which we derived the indentation in
 * isl_stream_yaml_read_start_sequence.
 *
 * If we are in state isl_yaml_sequence, then there may or may
 * not be a subsequent element in the same sequence.
 * In flow format, the next element is preceded by a comma.
 * In block format, the next element is introduced by a dash with
 * the same indentation as that of the first element.
 * If the first token is not a dash or if it has a smaller indentation,
 * then we have reached the end of the current sequence.
 */</doc>
