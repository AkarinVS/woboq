<def f='llvm/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h' l='56' ll='82'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h' l='73' c='_ZNK4llvm29LazyBranchProbabilityInfoPass25LazyBranchProbabilityInfo13getCalculatedEv'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h' l='84'/>
<size>280</size>
<doc f='llvm/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h' l='52'>/// Wraps a BPI to allow lazy computation of the branch probabilities.
  ///
  /// A pass that only conditionally uses BPI can uncondtionally require the
  /// analysis without paying for the overhead if BPI doesn&apos;t end up being used.</doc>
<fun r='_ZN4llvm29LazyBranchProbabilityInfoPass25LazyBranchProbabilityInfoC1EPKNS_8FunctionEPKNS_8LoopInfoEPKNS_17TargetLibraryInfoE'/>
<fun r='_ZN4llvm29LazyBranchProbabilityInfoPass25LazyBranchProbabilityInfo13getCalculatedEv'/>
<fun r='_ZNK4llvm29LazyBranchProbabilityInfoPass25LazyBranchProbabilityInfo13getCalculatedEv'/>
<mbr r='llvm::LazyBranchProbabilityInfoPass::LazyBranchProbabilityInfo::BPI' o='0' t='llvm::BranchProbabilityInfo'/>
<mbr r='llvm::LazyBranchProbabilityInfoPass::LazyBranchProbabilityInfo::Calculated' o='1984' t='bool'/>
<mbr r='llvm::LazyBranchProbabilityInfoPass::LazyBranchProbabilityInfo::F' o='2048' t='const llvm::Function *'/>
<mbr r='llvm::LazyBranchProbabilityInfoPass::LazyBranchProbabilityInfo::LI' o='2112' t='const llvm::LoopInfo *'/>
<mbr r='llvm::LazyBranchProbabilityInfoPass::LazyBranchProbabilityInfo::TLI' o='2176' t='const llvm::TargetLibraryInfo *'/>
<use f='llvm/llvm/lib/Analysis/LazyBranchProbabilityInfo.cpp' l='61' c='_ZN4llvm29LazyBranchProbabilityInfoPass13runOnFunctionERNS_8FunctionE'/>
<size>280</size>
