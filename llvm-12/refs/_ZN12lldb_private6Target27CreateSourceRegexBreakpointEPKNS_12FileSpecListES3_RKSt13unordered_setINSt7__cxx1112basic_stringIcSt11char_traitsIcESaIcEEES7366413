<dec f='llvm/lldb/include/lldb/Target/Target.h' l='622' type='lldb::BreakpointSP lldb_private::Target::CreateSourceRegexBreakpoint(const lldb_private::FileSpecList * containingModules, const lldb_private::FileSpecList * source_file_list, const std::unordered_set&lt;std::string&gt; &amp; function_names, lldb_private::RegularExpression source_regex, bool internal, bool request_hardware, lldb_private::LazyBool move_to_nearest_code)'/>
<doc f='llvm/lldb/include/lldb/Target/Target.h' l='619'>// Use this to create breakpoint that matches regex against the source lines
  // in files given in source_file_list: If function_names is non-empty, also
  // filter by function after the matches are made.</doc>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='1113' u='c' c='_ZN4lldb8SBTarget29BreakpointCreateBySourceRegexEPKcRKNS_14SBFileSpecListES5_RKNS_12SBStringListE'/>
<use f='llvm/lldb/source/Commands/CommandObjectBreakpoint.cpp' l='682' u='c' c='_ZN26CommandObjectBreakpointSet9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Target/Target.cpp' l='312' ll='327' type='lldb::BreakpointSP lldb_private::Target::CreateSourceRegexBreakpoint(const lldb_private::FileSpecList * containingModules, const lldb_private::FileSpecList * source_file_spec_list, const std::unordered_set&lt;std::string&gt; &amp; function_names, lldb_private::RegularExpression source_regex, bool internal, bool hardware, lldb_private::LazyBool move_to_nearest_code)'/>
