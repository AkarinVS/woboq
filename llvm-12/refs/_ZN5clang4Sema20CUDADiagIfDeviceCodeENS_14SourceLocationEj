<dec f='llvm/clang/include/clang/Sema/Sema.h' l='11927' type='clang::Sema::SemaDiagnosticBuilder clang::Sema::CUDADiagIfDeviceCode(clang::SourceLocation Loc, unsigned int DiagID)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='11910'>/// Creates a SemaDiagnosticBuilder that emits the diagnostic if the current
  /// context is &quot;used as device code&quot;.
  ///
  /// - If CurContext is a __host__ function, does not emit any diagnostics
  ///   unless \p EmitOnBothSides is true.
  /// - If CurContext is a __device__ or __global__ function, emits the
  ///   diagnostics immediately.
  /// - If CurContext is a __host__ __device__ function and we are compiling for
  ///   the device, creates a diagnostic which is emitted if and when we realize
  ///   that the function will be codegen&apos;ed.
  ///
  /// Example usage:
  ///
  ///  // Variable-length arrays are not allowed in CUDA device code.
  ///  if (CUDADiagIfDeviceCode(Loc, diag::err_cuda_vla) &lt;&lt; CurrentCUDATarget())
  ///    return ExprError();
  ///  // Otherwise, continue parsing as normal.</doc>
<use f='llvm/clang/lib/Sema/Sema.cpp' l='1751' u='c' c='_ZN5clang4Sema10targetDiagENS_14SourceLocationEjPNS_12FunctionDeclE'/>
<use f='llvm/clang/lib/Sema/Sema.cpp' l='1778' u='c' c='_ZN5clang4Sema4DiagENS_14SourceLocationEjb'/>
<def f='llvm/clang/lib/Sema/SemaCUDA.cpp' l='642' ll='670' type='Sema::SemaDiagnosticBuilder clang::Sema::CUDADiagIfDeviceCode(clang::SourceLocation Loc, unsigned int DiagID)'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='847' u='c' c='_ZN5clang4Sema13BuildCXXThrowENS_14SourceLocationEPNS_4ExprEb'/>
<use f='llvm/clang/lib/Sema/SemaStmt.cpp' l='4170' u='c' c='_ZN5clang4Sema16ActOnCXXTryBlockENS_14SourceLocationEPNS_4StmtEN4llvm8ArrayRefIS3_EE'/>
