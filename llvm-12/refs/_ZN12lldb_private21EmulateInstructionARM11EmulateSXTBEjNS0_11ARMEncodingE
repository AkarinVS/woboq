<dec f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='720' type='bool lldb_private::EmulateInstructionARM::EmulateSXTB(const uint32_t opcode, const lldb_private::EmulateInstructionARM::ARMEncoding encoding)'/>
<def f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='8346' ll='8425' type='bool lldb_private::EmulateInstructionARM::EmulateSXTB(const uint32_t opcode, const lldb_private::EmulateInstructionARM::ARMEncoding encoding)'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='13195' u='a' c='_ZN12lldb_private21EmulateInstructionARM26GetARMOpcodeForInstructionEjj'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='13740' u='a' c='_ZN12lldb_private21EmulateInstructionARM28GetThumbOpcodeForInstructionEjj'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='13742' u='a' c='_ZN12lldb_private21EmulateInstructionARM28GetThumbOpcodeForInstructionEjj'/>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='8342'>// SXTB extracts an 8-bit value from a register, sign-extends it to 32 bits, and
// writes the result to the destination
// register.  You can specifiy a rotation by 0, 8, 16, or 24 bits before
// extracting the 8-bit value.</doc>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='719'>// A8.6.222 SXTB  - Encoding T1</doc>
