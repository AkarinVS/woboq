<def f='llvm/llvm/include/llvm/Support/SuffixTree.h' l='137' ll='346'/>
<use f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='828' c='_ZN4llvm12IRSimilarity22IRSimilarityIdentifier14findCandidatesERSt6vectorIPNS0_17IRInstructionDataESaIS4_EERS2_IjSaIjEE'/>
<size>240</size>
<doc f='llvm/llvm/include/llvm/Support/SuffixTree.h' l='115'>/// A data structure for fast substring queries.
///
/// Suffix trees represent the suffixes of their input strings in their leaves.
/// A suffix tree is a type of compressed trie structure where each node
/// represents an entire substring rather than a single character. Each leaf
/// of the tree is a suffix.
///
/// A suffix tree can be seen as a type of state machine where each state is a
/// substring of the full string. The tree is structured so that, for a string
/// of length N, there are exactly N leaves in the tree. This structure allows
/// us to quickly find repeated substrings of the input string.
///
/// In this implementation, a &quot;string&quot; is a vector of unsigned integers.
/// These integers may result from hashing some data type. A suffix tree can
/// contain 1 or many strings, which can then be queried as one large string.
///
/// The suffix tree is implemented using Ukkonen&apos;s algorithm for linear-time
/// suffix tree construction. Ukkonen&apos;s algorithm is explained in more detail
/// in the paper by Esko Ukkonen &quot;On-line construction of suffix trees. The
/// paper is available at
///
/// https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf</doc>
<mbr r='llvm::SuffixTree::Str' o='0' t='llvm::ArrayRef&lt;unsigned int&gt;'/>
<mbr r='llvm::SuffixTree::NodeAllocator' o='128' t='llvm::SpecificBumpPtrAllocator&lt;SuffixTreeNode&gt;'/>
<mbr r='llvm::SuffixTree::Root' o='896' t='llvm::SuffixTreeNode *'/>
<mbr r='llvm::SuffixTree::InternalEndIdxAllocator' o='960' t='llvm::BumpPtrAllocator'/>
<mbr r='llvm::SuffixTree::LeafEndIdx' o='1728' t='unsigned int'/>
<mbr r='llvm::SuffixTree::Active' o='1792' t='llvm::SuffixTree::ActiveState'/>
<fun r='_ZN4llvm10SuffixTree10insertLeafERNS_14SuffixTreeNodeEjj'/>
<fun r='_ZN4llvm10SuffixTree18insertInternalNodeEPNS_14SuffixTreeNodeEjjj'/>
<fun r='_ZN4llvm10SuffixTree16setSuffixIndicesEv'/>
<fun r='_ZN4llvm10SuffixTree6extendEjj'/>
<fun r='_ZN4llvm10SuffixTreeC1ERKSt6vectorIjSaIjEE'/>
<fun r='_ZN4llvm10SuffixTree5beginEv'/>
<fun r='_ZN4llvm10SuffixTree3endEv'/>
<use f='llvm/llvm/lib/CodeGen/MachineOutliner.cpp' l='516' c='_ZN12_GLOBAL__N_115MachineOutliner14findCandidatesERNS_17InstructionMapperERSt6vectorIN4llvm8outliner16OutlinedFunctionESaIS6_EE'/>
<size>240</size>
<use f='llvm/llvm/unittests/Support/SuffixTreeTest.cpp' l='24' c='_ZN12_GLOBAL__N_140SuffixTreeTest_TestSingleRepetition_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/SuffixTreeTest.cpp' l='46' c='_ZN12_GLOBAL__N_140SuffixTreeTest_TestLongerRepetition_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/SuffixTreeTest.cpp' l='84' c='_ZN12_GLOBAL__N_145SuffixTreeTest_TestSingleCharacterRepeat_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/SuffixTreeTest.cpp' l='110' c='_ZN12_GLOBAL__N_136SuffixTreeTest_TestTandemRepeat_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/SuffixTreeTest.cpp' l='123' c='_ZN12_GLOBAL__N_133SuffixTreeTest_TestExclusion_Test8TestBodyEv'/>
<size>240</size>
