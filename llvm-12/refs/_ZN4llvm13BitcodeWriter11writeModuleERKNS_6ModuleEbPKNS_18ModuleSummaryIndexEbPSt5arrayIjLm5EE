<dec f='llvm/llvm/include/llvm/Bitcode/BitcodeWriter.h' l='89' type='void llvm::BitcodeWriter::writeModule(const llvm::Module &amp; M, bool ShouldPreserveUseListOrder = false, const llvm::ModuleSummaryIndex * Index = nullptr, bool GenerateHash = false, llvm::ModuleHash * ModHash = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Bitcode/BitcodeWriter.h' l='71'>/// Write the specified module to the buffer specified at construction time.
    ///
    /// If \c ShouldPreserveUseListOrder, encode the use-list order for each \a
    /// Value in \c M.  These will be reconstructed exactly when \a M is
    /// deserialized.
    ///
    /// If \c Index is supplied, the bitcode will contain the summary index
    /// (currently for use in ThinLTO optimization).
    ///
    /// \p GenerateHash enables hashing the Module and including the hash in the
    /// bitcode (currently for use in ThinLTO incremental build).
    ///
    /// If \p ModHash is non-null, when GenerateHash is true, the resulting
    /// hash is written into ModHash. When GenerateHash is false, that value
    /// is used as the hash instead of computing from the generated bitcode.
    /// Can be used to produce the same module hash for a minimized bitcode
    /// used just for the thin link as in the regular full bitcode that will
    /// be used in the backend.</doc>
<def f='llvm/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp' l='4559' ll='4576' type='void llvm::BitcodeWriter::writeModule(const llvm::Module &amp; M, bool ShouldPreserveUseListOrder = false, const llvm::ModuleSummaryIndex * Index = nullptr, bool GenerateHash = false, llvm::ModuleHash * ModHash = nullptr)'/>
<use f='llvm/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp' l='4601' u='c' c='_ZN4llvm18WriteBitcodeToFileERKNS_6ModuleERNS_11raw_ostreamEbPKNS_18ModuleSummaryIndexEbPSt5arrayIjLm5EE'/>
<use f='llvm/llvm/lib/ExecutionEngine/Orc/ThreadSafeModule.cpp' l='46' u='c' c='_ZN4llvm3orc17cloneToNewContextERKNS0_16ThreadSafeModuleESt8functionIFbRKNS_11GlobalValueEEES4_IFvRS5_EE'/>
<use f='llvm/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp' l='407' u='c' c='_ZN12_GLOBAL__N_127splitAndWriteThinLTOBitcodeERN4llvm11raw_ostreamEPS1_NS0_12function_refIFRNS0_9AAResultsERNS0_8FunctionEEEERNS0_6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp' l='409' u='c' c='_ZN12_GLOBAL__N_127splitAndWriteThinLTOBitcodeERN4llvm11raw_ostreamEPS1_NS0_12function_refIFRNS0_9AAResultsERNS0_8FunctionEEEERNS0_6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp' l='422' u='c' c='_ZN12_GLOBAL__N_127splitAndWriteThinLTOBitcodeERN4llvm11raw_ostreamEPS1_NS0_12function_refIFRNS0_9AAResultsERNS0_8FunctionEEEERNS0_6ModuleE'/>
<use f='llvm/llvm/tools/llvm-cat/llvm-cat.cpp' l='80' u='c' c='main'/>
