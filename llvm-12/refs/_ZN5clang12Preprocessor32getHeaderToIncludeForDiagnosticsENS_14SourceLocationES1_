<dec f='llvm/clang/include/clang/Lex/Preprocessor.h' l='2309' type='const clang::FileEntry * clang::Preprocessor::getHeaderToIncludeForDiagnostics(clang::SourceLocation IncLoc, clang::SourceLocation MLoc)'/>
<doc f='llvm/clang/include/clang/Lex/Preprocessor.h' l='2295'>/// We want to produce a diagnostic at location IncLoc concerning an
  /// unreachable effect at location MLoc (eg, where a desired entity was
  /// declared or defined). Determine whether the right way to make MLoc
  /// reachable is by #include, and if so, what header should be included.
  ///
  /// This is not necessarily fast, and might load unexpected module maps, so
  /// should only be called by code that intends to produce an error.
  ///
  /// \param IncLoc The location at which the missing effect was detected.
  /// \param MLoc A location within an unimported module at which the desired
  ///        effect occurred.
  /// \return A file that can be #included to provide the desired effect. Null
  ///         if no such file could be determined or if a #include is not
  ///         appropriate (eg, if a module should be imported instead).</doc>
<def f='llvm/clang/lib/Lex/PPDirectives.cpp' l='655' ll='720' type='const clang::FileEntry * clang::Preprocessor::getHeaderToIncludeForDiagnostics(clang::SourceLocation IncLoc, clang::SourceLocation Loc)'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='5345' u='c' c='_ZN5clang4Sema21diagnoseMissingImportENS_14SourceLocationEPNS_9NamedDeclES1_N4llvm8ArrayRefIPNS_6ModuleEEENS0_17MissingImportKindEb'/>
