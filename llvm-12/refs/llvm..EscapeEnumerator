<def f='llvm/llvm/include/llvm/Transforms/Utils/EscapeEnumerator.h' l='27' ll='44'/>
<use f='llvm/llvm/lib/CodeGen/ShadowStackGCLowering.cpp' l='351' c='_ZN12_GLOBAL__N_121ShadowStackGCLowering13runOnFunctionERN4llvm8FunctionE'/>
<size>176</size>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/EscapeEnumerator.h' l='22'>/// EscapeEnumerator - This is a little algorithm to find all escape points
/// from a function so that &quot;finally&quot;-style code can be inserted. In addition
/// to finding the existing return and unwind instructions, it also (if
/// necessary) transforms any call instructions into invokes and sends them to
/// a landing pad.</doc>
<mbr r='llvm::EscapeEnumerator::F' o='0' t='llvm::Function &amp;'/>
<mbr r='llvm::EscapeEnumerator::CleanupBBName' o='64' t='const char *'/>
<mbr r='llvm::EscapeEnumerator::StateBB' o='128' t='Function::iterator'/>
<mbr r='llvm::EscapeEnumerator::StateE' o='192' t='Function::iterator'/>
<mbr r='llvm::EscapeEnumerator::Builder' o='256' t='IRBuilder&lt;&gt;'/>
<mbr r='llvm::EscapeEnumerator::Done' o='1344' t='bool'/>
<mbr r='llvm::EscapeEnumerator::HandleExceptions' o='1352' t='bool'/>
<fun r='_ZN4llvm16EscapeEnumeratorC1ERNS_8FunctionEPKcb'/>
<fun r='_ZN4llvm16EscapeEnumerator4NextEv'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp' l='519' c='_ZN12_GLOBAL__N_115ThreadSanitizer20InsertRuntimeIgnoresERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp' l='602' c='_ZN12_GLOBAL__N_115ThreadSanitizer16sanitizeFunctionERN4llvm8FunctionERKNS1_17TargetLibraryInfoE'/>
<size>176</size>
