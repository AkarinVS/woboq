<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='1585' type='static llvm::CallInst * llvm::CallInst::Create(llvm::CallInst * CI, ArrayRef&lt;llvm::OperandBundleDef&gt; Bundles, llvm::Instruction * InsertPt = nullptr)'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='1579'>/// Create a clone of \p CI with a different set of operand bundles and
  /// insert it before \p InsertPt.
  ///
  /// The returned call instruction is identical \p CI in every way except that
  /// the operand bundles for the new instruction are set to the operand bundles
  /// in \p Bundles.</doc>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='255' u='c' c='_ZN4llvm8CallBase6CreateEPS0_NS_8ArrayRefINS_17OperandBundleDefTIPNS_5ValueEEEEEPNS_11InstructionE'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='495' ll='507' type='static llvm::CallInst * llvm::CallInst::Create(llvm::CallInst * CI, ArrayRef&lt;llvm::OperandBundleDef&gt; OpB, llvm::Instruction * InsertPt = nullptr)'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='518' u='c' c='_ZN4llvm8CallInst24CreateWithReplacedBundleEPS0_NS_17OperandBundleDefTIPNS_5ValueEEEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp' l='787' u='c' c='_ZN12_GLOBAL__N_118CloneCallInstForBBERN4llvm8CallInstERNS0_10BasicBlockERKNS0_8DenseMapIPS3_NS0_13TinyPtrVectorIS6_EENS0_12DenseMapInfoIS6_EENS0_6det12422834'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1446' u='c' c='_ZL27cloneInstructionInExitBlockRN4llvm11InstructionERNS_10BasicBlockERNS_7PHINodeEPKNS_8LoopInfoEPKNS_14LoopSafetyInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/unittests/IR/InstructionsTest.cpp' l='641' u='c' c='_ZN4llvm12_GLOBAL__N_138InstructionsTest_AlterCallBundles_Test8TestBodyEv'/>
