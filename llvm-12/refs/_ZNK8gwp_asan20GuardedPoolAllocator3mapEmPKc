<dec f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.h' l='134' type='void * gwp_asan::GuardedPoolAllocator::map(size_t Size, const char * Name) const'/>
<use f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.cpp' l='77' u='c' c='_ZN8gwp_asan20GuardedPoolAllocator4initERKNS_7options7OptionsE'/>
<use f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.cpp' l='83' u='c' c='_ZN8gwp_asan20GuardedPoolAllocator4initERKNS_7options7OptionsE'/>
<doc f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.h' l='125'>// These functions anonymously map memory or change the permissions of mapped
  // memory into this process in a platform-specific way. Pointer and size
  // arguments are expected to be page-aligned. These functions will never
  // return on error, instead electing to kill the calling process on failure.
  // The pool memory is initially reserved and inaccessible, and RW mappings are
  // subsequently created and destroyed via allocateInGuardedPool() and
  // deallocateInGuardedPool(). Each mapping is named on platforms that support
  // it, primarily Android. This name must be a statically allocated string, as
  // the Android kernel uses the string pointer directly.</doc>
<def f='llvm/compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp' l='45' ll='52' type='void * gwp_asan::GuardedPoolAllocator::map(size_t Size, const char * Name) const'/>
