<dec f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='498' type='llvm::ConstantRange::OverflowResult llvm::ConstantRange::unsignedAddMayOverflow(const llvm::ConstantRange &amp; Other) const'/>
<doc f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='497'>/// Return whether unsigned add of the two ranges always/never overflows.</doc>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4543' u='c' c='_ZN4llvm29computeOverflowForUnsignedAddEPKNS_5ValueES2_RKNS_10DataLayoutEPNS_15AssumptionCacheEPKNS_11InstructionEPKNS_13DominatorTreeEb'/>
<def f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1543' ll='1557' type='ConstantRange::OverflowResult llvm::ConstantRange::unsignedAddMayOverflow(const llvm::ConstantRange &amp; Other) const'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1910' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1911' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1915' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1916' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1917' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1918' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1921' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1922' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1923' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1924' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1929' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1930' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1931' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1932' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1936' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1937' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1938' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1939' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedAddOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2137' u='c' c='_ZN12_GLOBAL__N_152ConstantRangeTest_UnsignedAddOverflowExhaustive_Test8TestBodyEv'/>
