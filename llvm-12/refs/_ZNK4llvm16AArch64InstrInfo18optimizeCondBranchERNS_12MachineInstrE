<dec f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='229' type='bool llvm::AArch64InstrInfo::optimizeCondBranch(llvm::MachineInstr &amp; MI) const'/>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1516' c='_ZNK4llvm15TargetInstrInfo18optimizeCondBranchERNS_12MachineInstrE'/>
<def f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='5739' ll='5874' type='bool llvm::AArch64InstrInfo::optimizeCondBranch(llvm::MachineInstr &amp; MI) const'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='5702'>/// Replace csincr-branch sequence by simple conditional branch
///
/// Examples:
/// 1. \code
///   csinc  w9, wzr, wzr, &lt;condition code&gt;
///   tbnz   w9, #0, 0x44
///    \endcode
/// to
///    \code
///   b.&lt;inverted condition code&gt;
///    \endcode
///
/// 2. \code
///   csinc w9, wzr, wzr, &lt;condition code&gt;
///   tbz   w9, #0, 0x44
///    \endcode
/// to
///    \code
///   b.&lt;condition code&gt;
///    \endcode
///
/// Replace compare and branch sequence by TBZ/TBNZ instruction when the
/// compare&apos;s constant operand is power of 2.
///
/// Examples:
///    \code
///   and  w8, w8, #0x400
///   cbnz w8, L1
///    \endcode
/// to
///    \code
///   tbnz w8, #10, L1
///    \endcode
///
/// \param  MI Conditional Branch
/// \return True when the simple conditional branch is generated
///</doc>
