<inh f='llvm/lld/ELF/SyntheticSections.h' l='39' c='lld::elf::SyntheticSection'/>
<def f='llvm/lld/ELF/SyntheticSections.h' l='1028' ll='1063'/>
<use f='llvm/lld/ELF/SyntheticSections.h' l='1170'/>
<size>256</size>
<doc f='llvm/lld/ELF/SyntheticSections.h' l='994'>// Representation of the combined .ARM.Exidx input sections. We process these
// as a SyntheticSection like .eh_frame as we need to merge duplicate entries
// and add terminating sentinel entries.
//
// The .ARM.exidx input sections after SHF_LINK_ORDER processing is done form
// a table that the unwinder can derive (Addresses are encoded as offsets from
// table):
// | Address of function | Unwind instructions for function |
// where the unwind instructions are either a small number of unwind or the
// special EXIDX_CANTUNWIND entry representing no unwinding information.
// When an exception is thrown from an address A, the unwinder searches the
// table for the closest table entry with Address of function &lt;= A. This means
// that for two consecutive table entries:
// | A1 | U1 |
// | A2 | U2 |
// The range of addresses described by U1 is [A1, A2)
//
// There are two cases where we need a linker generated table entry to fixup
// the address ranges in the table
// Case 1:
// - A sentinel entry added with an address higher than all
// executable sections. This was needed to work around libunwind bug pr31091.
// - After address assignment we need to find the highest addressed executable
// section and use the limit of that section so that the unwinder never
// matches it.
// Case 2:
// - InputSections without a .ARM.exidx section (usually from Assembly)
// need a table entry so that they terminate the range of the previously
// function. This is pr40277.
//
// Instead of storing pointers to the .ARM.exidx InputSections from
// InputObjects, we store pointers to the executable sections that need
// .ARM.exidx sections. We can then use the dependentSections of these to
// either find the .ARM.exidx section or know that we need to generate one.</doc>
<fun r='_ZN3lld3elf24ARMExidxSyntheticSectionC1Ev'/>
<fun r='_ZN3lld3elf24ARMExidxSyntheticSection10addSectionEPNS0_12InputSectionE'/>
<fun r='_ZNK3lld3elf24ARMExidxSyntheticSection7getSizeEv'/>
<fun r='_ZN3lld3elf24ARMExidxSyntheticSection7writeToEPh'/>
<fun r='_ZNK3lld3elf24ARMExidxSyntheticSection8isNeededEv'/>
<fun r='_ZN3lld3elf24ARMExidxSyntheticSection16finalizeContentsEv'/>
<fun r='_ZNK3lld3elf24ARMExidxSyntheticSection15getLinkOrderDepEv'/>
<fun r='_ZN3lld3elf24ARMExidxSyntheticSection7classofEPKNS0_11SectionBaseE'/>
<mbr r='lld::elf::ARMExidxSyntheticSection::exidxSections' o='1536' t='std::vector&lt;InputSection *&gt;'/>
<mbr r='lld::elf::ARMExidxSyntheticSection::size' o='1728' t='size_t'/>
<mbr r='lld::elf::ARMExidxSyntheticSection::executableSections' o='1792' t='std::vector&lt;InputSection *&gt;'/>
<mbr r='lld::elf::ARMExidxSyntheticSection::sentinel' o='1984' t='lld::elf::InputSection *'/>
<use f='llvm/lld/ELF/OutputSections.cpp' l='406' c='_ZN3lld3elf13OutputSection8finalizeEv'/>
<size>256</size>
<use f='llvm/lld/ELF/Writer.cpp' l='475' c='_ZN3lld3elf23createSyntheticSectionsEv'/>
<size>256</size>
