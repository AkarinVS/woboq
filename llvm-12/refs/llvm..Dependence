<def f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='71' ll='205'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='73' c='_ZN4llvm10DependenceC1EOS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='74' c='_ZN4llvm10DependenceaSEOS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='74' c='_ZN4llvm10DependenceaSEOS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='183' c='_ZNK4llvm10Dependence18getNextPredecessorEv'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='187' c='_ZNK4llvm10Dependence16getNextSuccessorEv'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='191' c='_ZN4llvm10Dependence18setNextPredecessorEPKS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='195' c='_ZN4llvm10Dependence16setNextSuccessorEPKS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='203'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='203'/>
<ovr f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='215' c='llvm::FullDependence'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='215'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='288' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='332' c='_ZN4llvm14DependenceInfo17getSplitIterationERKNS_10DependenceEj'/>
<use f='llvm/llvm/include/llvm/Analysis/DDG.h' l='267'/>
<use f='llvm/llvm/include/llvm/Analysis/DDG.h' l='481' c='_ZNK4llvm19DependenceGraphInfo19getDependenceStringB5cxx11ERKT_S3_'/>
<size>40</size>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='57'>/// Dependence - This class represents a dependence between two memory
  /// memory references in a function. It contains minimal information and
  /// is used in the very common situation where the compiler is unable to
  /// determine anything beyond the existence of a dependence; that is, it
  /// represents a confused dependence (see also FullDependence). In most
  /// cases (for output, flow, and anti dependences), the dependence implies
  /// an ordering, where the source must precede the destination; in contrast,
  /// input dependences are unordered.
  ///
  /// When a dependence graph is built, each Dependence will be a member of
  /// the set of predecessor edges for its destination instruction and a set
  /// if successor edges for its source instruction. These sets are represented
  /// as singly-linked lists, with the &quot;next&quot; fields stored in the dependence
  /// itelf.</doc>
<fun r='_ZN4llvm10DependenceC1EOS0_'/>
<fun r='_ZN4llvm10DependenceaSEOS0_'/>
<fun r='_ZN4llvm10DependenceC1EPNS_11InstructionES2_'/>
<fun r='_ZN4llvm10DependenceD1Ev'/>
<fun r='_ZNK4llvm10Dependence6getSrcEv'/>
<fun r='_ZNK4llvm10Dependence6getDstEv'/>
<fun r='_ZNK4llvm10Dependence7isInputEv'/>
<fun r='_ZNK4llvm10Dependence8isOutputEv'/>
<fun r='_ZNK4llvm10Dependence6isFlowEv'/>
<fun r='_ZNK4llvm10Dependence6isAntiEv'/>
<fun r='_ZNK4llvm10Dependence9isOrderedEv'/>
<fun r='_ZNK4llvm10Dependence11isUnorderedEv'/>
<fun r='_ZNK4llvm10Dependence17isLoopIndependentEv'/>
<fun r='_ZNK4llvm10Dependence10isConfusedEv'/>
<fun r='_ZNK4llvm10Dependence12isConsistentEv'/>
<fun r='_ZNK4llvm10Dependence9getLevelsEv'/>
<fun r='_ZNK4llvm10Dependence12getDirectionEj'/>
<fun r='_ZNK4llvm10Dependence11getDistanceEj'/>
<fun r='_ZNK4llvm10Dependence11isPeelFirstEj'/>
<fun r='_ZNK4llvm10Dependence10isPeelLastEj'/>
<fun r='_ZNK4llvm10Dependence11isSplitableEj'/>
<fun r='_ZNK4llvm10Dependence8isScalarEj'/>
<fun r='_ZNK4llvm10Dependence18getNextPredecessorEv'/>
<fun r='_ZNK4llvm10Dependence16getNextSuccessorEv'/>
<fun r='_ZN4llvm10Dependence18setNextPredecessorEPKS0_'/>
<fun r='_ZN4llvm10Dependence16setNextSuccessorEPKS0_'/>
<fun r='_ZNK4llvm10Dependence4dumpERNS_11raw_ostreamE'/>
<mbr r='llvm::Dependence::Src' o='64' t='llvm::Instruction *'/>
<mbr r='llvm::Dependence::Dst' o='128' t='llvm::Instruction *'/>
<mbr r='llvm::Dependence::NextPredecessor' o='192' t='const llvm::Dependence *'/>
<mbr r='llvm::Dependence::NextSuccessor' o='256' t='const llvm::Dependence *'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='259' c='_ZN4llvm14FullDependenceC1EPNS_11InstructionES2_bj'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3480' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3493' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3508' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3905' c='_ZN4llvm14DependenceInfo17getSplitIterationERKNS_10DependenceEj'/>
<size>40</size>
<fun r='_ZNK4llvm10Dependence7isInputEv'/>
<fun r='_ZNK4llvm10Dependence8isOutputEv'/>
<fun r='_ZNK4llvm10Dependence6isFlowEv'/>
<fun r='_ZNK4llvm10Dependence6isAntiEv'/>
<fun r='_ZNK4llvm10Dependence8isScalarEj'/>
<fun r='_ZNK4llvm10Dependence4dumpERNS_11raw_ostreamE'/>
<use f='llvm/llvm/lib/Analysis/LoopCacheAnalysis.cpp' l='218' c='_ZNK4llvm16IndexedReference16hasTemporalReuseERKS0_jRKNS_4LoopERNS_14DependenceInfoERNS_9AAResultsE'/>
<size>40</size>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='651' c='_ZL26preservesForwardDependencePN4llvm11InstructionES1_jjbPNS_10DependenceE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='669' c='_ZL27preservesBackwardDependencePN4llvm11InstructionES1_jjbPNS_10DependenceE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='715' c='_ZL15checkDependencyPN4llvm11InstructionES1_jjbRNS_14DependenceInfoE'/>
<size>40</size>
