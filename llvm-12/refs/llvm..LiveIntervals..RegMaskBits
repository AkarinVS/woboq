<dec f='llvm/llvm/include/llvm/CodeGen/LiveIntervals.h' l='85' type='SmallVector&lt;const uint32_t *, 8&gt;'/>
<use f='llvm/llvm/include/llvm/CodeGen/LiveIntervals.h' l='362' u='r' c='_ZNK4llvm13LiveIntervals14getRegMaskBitsEv'/>
<offset>3008</offset>
<doc f='llvm/llvm/include/llvm/CodeGen/LiveIntervals.h' l='74'>/// This vector is parallel to RegMaskSlots, it holds a pointer to the
    /// corresponding register mask.  This pointer can be recomputed as:
    ///
    ///   MI = Indexes-&gt;getInstructionFromIndex(RegMaskSlot[N]);
    ///   unsigned OpNum = findRegMaskOperand(MI);
    ///   RegMaskBits[N] = MI-&gt;getOperand(OpNum).getRegMask();
    ///
    /// This is kept in a separate vector partly because some standard
    /// libraries don&apos;t support lower_bound() with mixed objects, partly to
    /// improve locality when searching in RegMaskSlots.
    /// Also see the comment in LiveInterval::find().</doc>
<use f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='113' u='m' c='_ZN4llvm13LiveIntervals13releaseMemoryEv'/>
<use f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='226' u='m' c='_ZN4llvm13LiveIntervals15computeRegMasksEv'/>
<use f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='235' u='m' c='_ZN4llvm13LiveIntervals15computeRegMasksEv'/>
<use f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='243' u='m' c='_ZN4llvm13LiveIntervals15computeRegMasksEv'/>
<use f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='254' u='m' c='_ZN4llvm13LiveIntervals15computeRegMasksEv'/>
