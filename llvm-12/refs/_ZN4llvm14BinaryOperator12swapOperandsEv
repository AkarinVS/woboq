<dec f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='404' type='bool llvm::BinaryOperator::swapOperands()'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='399'>/// Exchange the two operands to this instruction.
  /// This instruction is safe to use on any binary instruction and
  /// does not modify the semantics of the instruction.  If the instruction
  /// cannot be reversed (ie, it&apos;s a Div), then return true.
  ///</doc>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='2593' ll='2598' type='bool llvm::BinaryOperator::swapOperands()'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='2589'>// Exchange the two operands to this instruction. This instruction is safe to
// use on any binary instruction and does not modify the semantics of the
// instruction. If the instruction is order-dependent (SetLT f.e.), the opcode
// is changed.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='379' u='c' c='_ZN4llvm16InstCombinerImpl32SimplifyAssociativeOrCommutativeERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='231' u='c' c='_ZN4llvm15ReassociatePass20canonicalizeOperandsEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='690' u='c' c='_ZN4llvm15ReassociatePass15RewriteExprTreeEPNS_14BinaryOperatorERNS_15SmallVectorImplINS_11reassociate10ValueEntryEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='729' u='c' c='_ZN4llvm15ReassociatePass15RewriteExprTreeEPNS_14BinaryOperatorERNS_15SmallVectorImplINS_11reassociate10ValueEntryEEE'/>
