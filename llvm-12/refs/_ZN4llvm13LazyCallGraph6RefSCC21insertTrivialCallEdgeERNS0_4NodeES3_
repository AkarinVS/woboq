<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='841' type='void llvm::LazyCallGraph::RefSCC::insertTrivialCallEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='832'>/// A convenience wrapper around the above to handle trivial cases of
    /// inserting a new call edge.
    ///
    /// This is trivial whenever the target is in the same SCC as the source or
    /// the edge is an outgoing edge to some descendant SCC. In these cases
    /// there is no change to the cyclic structure of SCCs or RefSCCs.
    ///
    /// To further make calling this convenient, it also handles inserting
    /// already existing edges.</doc>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1420' ll='1450' type='void llvm::LazyCallGraph::RefSCC::insertTrivialCallEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1161' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InlineAndDeleteFunction_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1162' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InlineAndDeleteFunction_Test8TestBodyEv'/>
