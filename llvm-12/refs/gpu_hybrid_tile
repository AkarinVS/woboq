<dec f='llvm/polly/lib/External/ppcg/gpu_hybrid.h' l='9' type='isl_schedule_node * gpu_hybrid_tile(struct gpu_gen * gen, isl_schedule_node * node, ppcg_ht_bounds * bounds, int * tile_sizes)'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='4055' u='c' c='try_hybrid_tile'/>
<def f='llvm/polly/lib/External/ppcg/gpu_hybrid.c' l='119' ll='146' type='isl_schedule_node * gpu_hybrid_tile(struct gpu_gen * gen, isl_schedule_node * node, ppcg_ht_bounds * bounds, int * tile_sizes)'/>
<doc f='llvm/polly/lib/External/ppcg/gpu_hybrid.c' l='109'>/* Apply hybrid tiling on &quot;node&quot; and its parent based on the (valid)
 * bounds on the relative dependence distances &quot;bounds&quot; and
 * the tile sizes in &quot;tile_sizes&quot;.
 * The number of elements in &quot;tile_sizes&quot; is at least as large
 * as the sum of the dimensions of the parent and the child node.
 *
 * Convert the tile_sizes to an isl_multi_val in the right space,
 * insert the hybrid tiling and then create a kernel inside each phase.
 * Finally, remove the phase marks.
 */</doc>
