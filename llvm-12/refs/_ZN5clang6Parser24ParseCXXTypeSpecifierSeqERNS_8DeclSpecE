<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1977' type='bool clang::Parser::ParseCXXTypeSpecifierSeq(clang::DeclSpec &amp; DS)'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2293' ll='2297' type='bool clang::Parser::ParseCXXTypeSpecifierSeq(clang::DeclSpec &amp; DS)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2709' u='c' c='_ZN5clang6Parser26ParseUnqualifiedIdOperatorERNS_12CXXScopeSpecEbNS_9OpaquePtrINS_8QualTypeEEERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='3107' u='c' c='_ZN5clang6Parser21ParseCXXNewExpressionEbNS_14SourceLocationE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='3120' u='c' c='_ZN5clang6Parser21ParseCXXNewExpressionEbNS_14SourceLocationE'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2282'>/// ParseCXXTypeSpecifierSeq - Parse a C++ type-specifier-seq (C++
/// [dcl.name]), which is a non-empty sequence of type-specifiers,
/// e.g., &quot;const short int&quot;. Note that the DeclSpec is *not* finished
/// by parsing the type-specifier-seq, because these sequences are
/// typically followed by some form of declarator. Returns true and
/// emits diagnostics if this is not a type-specifier-seq, false
/// otherwise.
///
///   type-specifier-seq: [C++ 8.1]
///     type-specifier type-specifier-seq[opt]
///</doc>
<use f='llvm/clang/lib/Parse/ParseStmt.cpp' l='2470' u='c' c='_ZN5clang6Parser18ParseCXXCatchBlockEb'/>
