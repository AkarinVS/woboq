<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='716' type='bool llvm::InstCombinerImpl::mergeStoreIntoSuccessor(llvm::StoreInst &amp; SI)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='1458' ll='1570' type='bool llvm::InstCombinerImpl::mergeStoreIntoSuccessor(llvm::StoreInst &amp; SI)'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='1453'>/// Try to transform:
///   if () { *P = v1; } else { *P = v2 }
/// or:
///   *P = v1; if () { *P = v2; }
/// into a phi node with a store in the successor.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='2898' u='c' c='_ZN4llvm16InstCombinerImpl28visitUnconditionalBranchInstERNS_10BranchInstE'/>
