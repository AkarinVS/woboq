<dec f='llvm/clang/lib/CodeGen/CodeGenModule.h' l='1435' type='llvm::Constant * clang::CodeGen::CodeGenModule::GetOrCreateLLVMGlobal(llvm::StringRef MangledName, llvm::PointerType * PTy, const clang::VarDecl * D, clang::CodeGen::ForDefinition_t IsForDefinition = NotForDefinition)'/>
<use f='llvm/clang/lib/CodeGen/CGBlocks.cpp' l='2939' u='c' c='_ZN5clang7CodeGen13CodeGenModule24getNSConcreteGlobalBlockEv'/>
<use f='llvm/clang/lib/CodeGen/CGBlocks.cpp' l='2950' u='c' c='_ZN5clang7CodeGen13CodeGenModule23getNSConcreteStackBlockEv'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='2742' u='c' c='_ZN5clang7CodeGen13CodeGenModule19GetWeakRefReferenceEPKNS_9ValueDeclE'/>
<def f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='3693' ll='3876' type='llvm::Constant * clang::CodeGen::CodeGenModule::GetOrCreateLLVMGlobal(llvm::StringRef MangledName, llvm::PointerType * Ty, const clang::VarDecl * D, clang::CodeGen::ForDefinition_t IsForDefinition = NotForDefinition)'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='3965' u='c' c='_ZN5clang7CodeGen13CodeGenModule18GetAddrOfGlobalVarEPKNS_7VarDeclEPN4llvm4TypeENS0_15ForDefinition_tE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='3978' u='c' c='_ZN5clang7CodeGen13CodeGenModule21CreateRuntimeVariableEPN4llvm4TypeENS2_9StringRefE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='4441' u='c' c='_ZN5clang7CodeGen13CodeGenModule26EmitExternalVarDeclarationEPKNS_7VarDeclE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='4813' u='c' c='_ZN5clang7CodeGen13CodeGenModule19EmitAliasDefinitionENS_10GlobalDeclE'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='3682'>/// GetOrCreateLLVMGlobal - If the specified mangled name is not in the module,
/// create and return an llvm GlobalVariable with the specified type.  If there
/// is something in the module with the specified name, return it potentially
/// bitcasted to the right type.
///
/// If D is non-null, it specifies a decl that correspond to this.  This is used
/// to set the attributes on the global when it is first created.
///
/// If IsForDefinition is true, it is guaranteed that an actual global with
/// type Ty will be returned, not conversion of a variable with the same
/// mangled name but some other type.</doc>
