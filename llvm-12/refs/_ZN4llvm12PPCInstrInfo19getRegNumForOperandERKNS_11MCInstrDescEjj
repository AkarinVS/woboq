<def f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='656' ll='678' type='static unsigned int llvm::PPCInstrInfo::getRegNumForOperand(const llvm::MCInstrDesc &amp; Desc, unsigned int Reg, unsigned int OpNo)'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='648'>/// getRegNumForOperand - some operands use different numbering schemes
  /// for the same registers. For example, a VSX instruction may have any of
  /// vs0-vs63 allocated whereas an Altivec instruction could only have
  /// vs32-vs63 allocated (numbered as v0-v31). This function returns the actual
  /// register number needed for the opcode/operand number combination.
  /// The operand number argument will be useful when we need to extend this
  /// to instructions that use both Altivec and VSX numbering (for different
  /// operands).</doc>
<use f='llvm/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp' l='633' u='c' c='_ZN4llvm14PPCInstPrinter12printOperandEPKNS_6MCInstEjRKNS_15MCSubtargetInfoERNS_11raw_ostreamE'/>
<use f='llvm/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCCodeEmitter.cpp' l='423' u='c' c='_ZNK4llvm16PPCMCCodeEmitter17getMachineOpValueERKNS_6MCInstERKNS_9MCOperandERNS_15SmallVectorImplINS_7MCFixupEEERKNS_15MCSubtargetInfoE'/>
