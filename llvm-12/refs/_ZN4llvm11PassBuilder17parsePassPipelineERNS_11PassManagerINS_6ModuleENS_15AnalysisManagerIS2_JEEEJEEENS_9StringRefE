<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='498' type='llvm::Error llvm::PassBuilder::parsePassPipeline(llvm::ModulePassManager &amp; MPM, llvm::StringRef PipelineText)'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='458'>/// Parse a textual pass pipeline description into a \c
  /// ModulePassManager.
  ///
  /// The format of the textual pass pipeline description looks something like:
  ///
  ///   module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...)
  ///
  /// Pass managers have ()s describing the nest structure of passes. All passes
  /// are comma separated. As a special shortcut, if the very first pass is not
  /// a module pass (as a module pass manager is), this will automatically form
  /// the shortest stack of pass managers that allow inserting that first pass.
  /// So, assuming function passes &apos;fpassN&apos;, CGSCC passes &apos;cgpassN&apos;, and loop
  /// passes &apos;lpassN&apos;, all of these are valid:
  ///
  ///   fpass1,fpass2,fpass3
  ///   cgpass1,cgpass2,cgpass3
  ///   lpass1,lpass2,lpass3
  ///
  /// And they are equivalent to the following (resp.):
  ///
  ///   module(function(fpass1,fpass2,fpass3))
  ///   module(cgscc(cgpass1,cgpass2,cgpass3))
  ///   module(function(loop(lpass1,lpass2,lpass3)))
  ///
  /// This shortcut is especially useful for debugging and testing small pass
  /// combinations.
  ///
  /// The sequence of passes aren&apos;t necessarily the exact same kind of pass.
  /// You can mix different levels implicitly if adaptor passes are defined to
  /// make them work. For example,
  ///
  ///   mpass1,fpass1,fpass2,mpass2,lpass1
  ///
  /// This pipeline uses only one pass manager: the top-level module manager.
  /// fpass1,fpass2 and lpass1 are added into the the top-level module manager
  /// using only adaptor passes. No nested function/loop pass managers are
  /// added. The purpose is to allow easy pass testing when the user
  /// specifically want the pass to run under a adaptor directly. This is
  /// preferred when a pipeline is largely of one type, but one or just a few
  /// passes are of different types(See PassBuilder.cpp for examples).</doc>
<use f='llvm/llvm/lib/LTO/LTOBackend.cpp' l='333' u='c' c='_ZL20runNewPMCustomPassesRKN4llvm3lto6ConfigERNS_6ModuleEPNS_13TargetMachineENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESD_b'/>
<def f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='2904' ll='2942' type='llvm::Error llvm::PassBuilder::parsePassPipeline(llvm::ModulePassManager &amp; MPM, llvm::StringRef PipelineText)'/>
<doc f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='2901'>// Primary pass pipeline description parsing routine for a \c ModulePassManager
// FIXME: Should this routine accept a TargetMachine or require the caller to
// pre-populate the analysis managers with target-specific stuff?</doc>
<use f='llvm/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp' l='154' u='c' c='LLVMFuzzerTestOneInput'/>
<use f='llvm/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp' l='248' u='c' c='LLVMFuzzerInitialize'/>
<use f='llvm/llvm/tools/opt/NewPMDriver.cpp' l='208' u='c' c='_ZL19registerEPCallbacksRN4llvm11PassBuilderE'/>
<use f='llvm/llvm/tools/opt/NewPMDriver.cpp' l='215' u='c' c='_ZL19registerEPCallbacksRN4llvm11PassBuilderE'/>
<use f='llvm/llvm/tools/opt/NewPMDriver.cpp' l='221' u='c' c='_ZL19registerEPCallbacksRN4llvm11PassBuilderE'/>
<use f='llvm/llvm/tools/opt/NewPMDriver.cpp' l='407' u='c' c='_ZN4llvm15runPassPipelineENS_9StringRefERNS_6ModuleEPNS_13TargetMachineEPNS_21TargetLibraryInfoImplEPNS_14ToolOutputFileES8_S8_S0_NS_8ArrayRefIS0_EENS12269778'/>
<use f='llvm/llvm/tools/opt/NewPMDriver.cpp' l='416' u='c' c='_ZN4llvm15runPassPipelineENS_9StringRefERNS_6ModuleEPNS_13TargetMachineEPNS_21TargetLibraryInfoImplEPNS_14ToolOutputFileES8_S8_S0_NS_8ArrayRefIS0_EENS12269778'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='533' u='c' c='_ZN12_GLOBAL__N_131ModuleCallbacksTest_Passes_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='578' u='c' c='_ZN12_GLOBAL__N_143ModuleCallbacksTest_InstrumentedPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='694' u='c' c='_ZN12_GLOBAL__N_150ModuleCallbacksTest_InstrumentedSkippedPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='706' u='c' c='_ZN12_GLOBAL__N_133FunctionCallbacksTest_Passes_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='756' u='c' c='_ZN12_GLOBAL__N_145FunctionCallbacksTest_InstrumentedPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='802' u='c' c='_ZN12_GLOBAL__N_152FunctionCallbacksTest_InstrumentedSkippedPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='814' u='c' c='_ZN12_GLOBAL__N_129LoopCallbacksTest_Passes_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='879' u='c' c='_ZN12_GLOBAL__N_141LoopCallbacksTest_InstrumentedPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='927' u='c' c='_ZN12_GLOBAL__N_153LoopCallbacksTest_InstrumentedInvalidatingPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='998' u='c' c='_ZN12_GLOBAL__N_161LoopCallbacksTest_InstrumentedInvalidatingLoopNestPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1065' u='c' c='_ZN12_GLOBAL__N_148LoopCallbacksTest_InstrumentedSkippedPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1076' u='c' c='_ZN12_GLOBAL__N_130CGSCCCallbacksTest_Passes_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1127' u='c' c='_ZN12_GLOBAL__N_142CGSCCCallbacksTest_InstrumentedPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1175' u='c' c='_ZN12_GLOBAL__N_154CGSCCCallbacksTest_InstrumentedInvalidatingPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1220' u='c' c='_ZN12_GLOBAL__N_149CGSCCCallbacksTest_InstrumentedSkippedPasses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1235' u='c' c='_ZN12_GLOBAL__N_142ModuleCallbacksTest_AnalysisUtilities_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1245' u='c' c='_ZN12_GLOBAL__N_137CGSCCCallbacksTest_PassUtilities_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1255' u='c' c='_ZN12_GLOBAL__N_144FunctionCallbacksTest_AnalysisUtilities_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1266' u='c' c='_ZN12_GLOBAL__N_136LoopCallbacksTest_PassUtilities_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1308' u='c' c='_ZN12_GLOBAL__N_146ModuleCallbacksTest_ParseTopLevelPipeline_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='1314' u='c' c='_ZN12_GLOBAL__N_146ModuleCallbacksTest_ParseTopLevelPipeline_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Passes/PluginsTest.cpp' l='57' u='c' c='_ZN28PluginsTests_LoadPlugin_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Passes/PluginsTest.cpp' l='60' u='c' c='_ZN28PluginsTests_LoadPlugin_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LICMTest.cpp' l='36' u='c' c='_ZN4llvm44LICMTest_TestSCEVInvalidationOnHoisting_Test8TestBodyEv'/>
