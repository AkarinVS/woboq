<dec f='llvm/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h' l='363' type='unsigned int llvm::IRSimilarity::IRInstructionMapper::mapToIllegalUnsigned(BasicBlock::iterator &amp; It, std::vector&lt;unsigned int&gt; &amp; IntegerMappingForBB, std::vector&lt;IRInstructionData *&gt; &amp; InstrListForBB, bool End = false)'/>
<use f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='169' u='c' c='_ZN4llvm12IRSimilarity19IRInstructionMapper20convertToUnsignedVecERNS_10BasicBlockERSt6vectorIPNS0_17IRInstructionDataESaIS6_EERS4_IjSaIjEE'/>
<use f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='178' u='c' c='_ZN4llvm12IRSimilarity19IRInstructionMapper20convertToUnsignedVecERNS_10BasicBlockERSt6vectorIPNS0_17IRInstructionDataESaIS6_EERS4_IjSaIjEE'/>
<def f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='245' ll='275' type='unsigned int llvm::IRSimilarity::IRInstructionMapper::mapToIllegalUnsigned(BasicBlock::iterator &amp; It, std::vector&lt;unsigned int&gt; &amp; IntegerMappingForBB, std::vector&lt;IRInstructionData *&gt; &amp; InstrListForBB, bool End = false)'/>
<doc f='llvm/llvm/lib/Analysis/IRSimilarityIdentifier.cpp' l='243'>// TODO: This is the same as the MachineOutliner, and should be consolidated
// into the same interface.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h' l='354'>/// Maps an Instruction to an illegal integer.
  ///
  /// \param [in] It - The \p Instruction to be mapped to an integer.
  /// \param [in,out] IntegerMappingForBB - Vector of unsigned integers to
  /// append to.
  /// \param [in,out] InstrListForBB - Vector of IRInstructionData to append to.
  /// \param End - true if creating a dummy IRInstructionData at the end of a
  /// basic block.
  /// \returns The integer \p It was mapped to.</doc>
