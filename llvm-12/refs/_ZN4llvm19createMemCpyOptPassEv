<dec f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='334' type='llvm::FunctionPass * llvm::createMemCpyOptPass()'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='329'>//===----------------------------------------------------------------------===//
//
// MemCpyOpt - This pass performs optimizations related to eliminating memcpy
// calls and/or combining multiple stores into memset&apos;s.
//</doc>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='188' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='475' u='c' c='_ZN4llvm18PassManagerBuilder31addFunctionSimplificationPassesERNS_6legacy15PassManagerBaseE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='1058' u='c' c='_ZN4llvm18PassManagerBuilder24addLTOOptimizationPassesERNS_6legacy15PassManagerBaseE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='301' type='llvm::FunctionPass * llvm::createMemCpyOptPass()'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='300'>/// The public interface to this file...</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/Scalar.cpp' l='225' u='c' c='LLVMAddMemCpyOptPass'/>
<use f='llvm/polly/lib/CodeGen/CodegenCleanup.cpp' l='92' u='c' c='_ZN12_GLOBAL__N_114CodegenCleanup16doInitializationERN4llvm6ModuleE'/>
