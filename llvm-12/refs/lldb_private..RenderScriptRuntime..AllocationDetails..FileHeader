<def f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='621' ll='625'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='2459' c='_ZN12lldb_private19RenderScriptRuntime14LoadAllocationERNS_6StreamEjPKcPNS_10StackFrameE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='2465' c='_ZN12lldb_private19RenderScriptRuntime14LoadAllocationERNS_6StreamEjPKcPNS_10StackFrameE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='2466' c='_ZN12lldb_private19RenderScriptRuntime14LoadAllocationERNS_6StreamEjPKcPNS_10StackFrameE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='2479' c='_ZN12lldb_private19RenderScriptRuntime14LoadAllocationERNS_6StreamEjPKcPNS_10StackFrameE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='2683' c='_ZN12lldb_private19RenderScriptRuntime14SaveAllocationERNS_6StreamEjPKcPNS_10StackFrameE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='2693' c='_ZN12lldb_private19RenderScriptRuntime14SaveAllocationERNS_6StreamEjPKcPNS_10StackFrameE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='2697' c='_ZN12lldb_private19RenderScriptRuntime14SaveAllocationERNS_6StreamEjPKcPNS_10StackFrameE'/>
<size>20</size>
<doc f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptRuntime.cpp' l='609'>// The FileHeader struct specifies the header we use for writing allocations
  // to a binary file. Our format begins with the ASCII characters &quot;RSAD&quot;,
  // identifying the file as an allocation dump. Member variables dims and
  // hdr_size are then written consecutively, immediately followed by an
  // instance of the ElementHeader struct. Because Elements can contain
  // subelements, there may be more than one instance of the ElementHeader
  // struct. With this first instance being the root element, and the other
  // instances being the root&apos;s descendants. To identify which instances are an
  // ElementHeader&apos;s children, each struct is immediately followed by a
  // sequence of consecutive offsets to the start of its child structs. These
  // offsets are
  // 4 bytes in size, and the 0 offset signifies no more children.</doc>
