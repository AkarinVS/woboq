<dec f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='267' type='llvm::MemoryAccess * llvm::MemorySSAUpdater::tryRemoveTrivialPhi(llvm::MemoryPhi * Phi)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='200' u='c' c='_ZN4llvm16MemorySSAUpdater10recursePhiEPNS_12MemoryAccessE'/>
<def f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='209' ll='213' type='llvm::MemoryAccess * llvm::MemorySSAUpdater::tryRemoveTrivialPhi(llvm::MemoryPhi * Phi)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='538' u='c' c='_ZN4llvm16MemorySSAUpdater10removeEdgeEPNS_10BasicBlockES2_'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='554' u='c' c='_ZN4llvm16MemorySSAUpdater30removeDuplicatePhiEdgesBetweenEPKNS_10BasicBlockES3_'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='677' u='c' c='_ZN4llvm16MemorySSAUpdater42updatePhisWhenInsertingUniqueBackedgeBlockEPNS_10BasicBlockES2_S2_'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1247' u='c' c='_ZN4llvm16MemorySSAUpdater15moveAllAccessesEPNS_10BasicBlockES2_PNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1304' u='c' c='_ZN4llvm16MemorySSAUpdater44wireOldPredecessorsToNewImmediatePredecessorEPNS_10BasicBlockES2_NS_8ArrayRefIS2_EEb'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1371' u='c' c='_ZN4llvm16MemorySSAUpdater18removeMemoryAccessEPNS_12MemoryAccessEb'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1385' u='c' c='_ZN4llvm16MemorySSAUpdater12removeBlocksERKNS_14SmallSetVectorIPNS_10BasicBlockELj8EEE'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1410' u='c' c='_ZN4llvm16MemorySSAUpdater20tryRemoveTrivialPhisENS_8ArrayRefINS_6WeakVHEEE'/>
<doc f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='204'>// Eliminate trivial phis
// Phis are trivial if they are defined either by themselves, or all the same
// argument.
// IE phi(a, a) or b = phi(a, b) or c = phi(a, a, c)
// We recursively try to remove them.</doc>
