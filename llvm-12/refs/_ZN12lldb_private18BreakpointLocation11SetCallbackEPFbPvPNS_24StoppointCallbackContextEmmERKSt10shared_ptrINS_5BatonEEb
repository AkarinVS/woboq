<dec f='llvm/lldb/include/lldb/Breakpoint/BreakpointLocation.h' l='115' type='void lldb_private::BreakpointLocation::SetCallback(lldb_private::BreakpointHitCallback callback, const lldb::BatonSP &amp; callback_baton_sp, bool is_synchronous)'/>
<doc f='llvm/lldb/include/lldb/Breakpoint/BreakpointLocation.h' l='102'>/// Set the callback action invoked when the breakpoint is hit.
  ///
  /// The callback will return a bool indicating whether the target should
  /// stop at this breakpoint or not.
  ///
  /// \param[in] callback
  ///     The method that will get called when the breakpoint is hit.
  ///
  /// \param[in] callback_baton_sp
  ///     A shared pointer to a Baton that provides the void * needed
  ///     for the callback.
  ///
  /// \see lldb_private::Baton</doc>
<def f='llvm/lldb/source/Breakpoint/BreakpointLocation.cpp' l='207' ll='212' type='void lldb_private::BreakpointLocation::SetCallback(lldb_private::BreakpointHitCallback callback, const lldb::BatonSP &amp; baton_sp, bool is_synchronous)'/>
