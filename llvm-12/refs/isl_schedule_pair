<def f='llvm/polly/lib/External/isl/isl_schedule.c' l='594' ll='648' type='isl_schedule * isl_schedule_pair(enum isl_schedule_node_type type, isl_schedule * schedule1, isl_schedule * schedule2)'/>
<use f='llvm/polly/lib/External/isl/isl_schedule.c' l='657' u='c' c='isl_schedule_sequence'/>
<use f='llvm/polly/lib/External/isl/isl_schedule.c' l='668' u='c' c='isl_schedule_set'/>
<doc f='llvm/polly/lib/External/isl/isl_schedule.c' l='582'>/* Construct a schedule that combines the schedules &quot;schedule1&quot; and &quot;schedule2&quot;
 * with a top-level node (underneath the domain node) of type &quot;type&quot;,
 * either isl_schedule_node_sequence or isl_schedule_node_set.
 * The domains of the two schedules are assumed to be disjoint.
 *
 * The new schedule has as domain the union of the domains of the two
 * schedules.  The child of the domain node is a node of type &quot;type&quot;
 * with two filters corresponding to the domains of the input schedules.
 * If one (or both) of the top-level nodes of the two schedules is itself
 * of type &quot;type&quot;, then the filter is pushed into the children of that
 * node and the sequence or set is flattened.
 */</doc>
