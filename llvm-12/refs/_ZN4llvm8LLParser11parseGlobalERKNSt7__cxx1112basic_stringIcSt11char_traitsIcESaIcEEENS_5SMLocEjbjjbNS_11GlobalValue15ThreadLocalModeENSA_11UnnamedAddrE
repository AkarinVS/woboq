<dec f='llvm/llvm/lib/AsmParser/LLParser.h' l='312' type='bool llvm::LLParser::parseGlobal(const std::string &amp; Name, llvm::LLParser::LocTy NameLoc, unsigned int Linkage, bool HasLinkage, unsigned int Visibility, unsigned int DLLStorageClass, bool DSOLocal, GlobalVariable::ThreadLocalMode TLM, GlobalVariable::UnnamedAddr UnnamedAddr)'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='635' u='c' c='_ZN4llvm8LLParser18parseUnnamedGlobalEv'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='665' u='c' c='_ZN4llvm8LLParser16parseNamedGlobalEv'/>
<def f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='1095' ll='1223' type='bool llvm::LLParser::parseGlobal(const std::string &amp; Name, llvm::LLParser::LocTy NameLoc, unsigned int Linkage, bool HasLinkage, unsigned int Visibility, unsigned int DLLStorageClass, bool DSOLocal, GlobalVariable::ThreadLocalMode TLM, GlobalVariable::UnnamedAddr UnnamedAddr)'/>
<doc f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='1082'>/// parseGlobal
///   ::= GlobalVar &apos;=&apos; OptionalLinkage OptionalPreemptionSpecifier
///       OptionalVisibility OptionalDLLStorageClass
///       OptionalThreadLocal OptionalUnnamedAddr OptionalAddrSpace
///       OptionalExternallyInitialized GlobalType Type Const OptionalAttrs
///   ::= OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
///       OptionalDLLStorageClass OptionalThreadLocal OptionalUnnamedAddr
///       OptionalAddrSpace OptionalExternallyInitialized GlobalType Type
///       Const OptionalAttrs
///
/// Everything up to and including OptionalUnnamedAddr has been parsed
/// already.
///</doc>
