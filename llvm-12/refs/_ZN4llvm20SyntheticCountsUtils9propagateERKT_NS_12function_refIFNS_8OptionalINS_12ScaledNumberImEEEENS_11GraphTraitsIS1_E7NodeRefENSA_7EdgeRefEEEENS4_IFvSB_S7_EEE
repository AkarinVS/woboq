<dec f='llvm/llvm/include/llvm/Analysis/SyntheticCountsUtils.h' l='40' type='static void llvm::SyntheticCountsUtils::propagate(const CallGraphType &amp; CG, llvm::SyntheticCountsUtils::GetProfCountTy GetProfCount, llvm::SyntheticCountsUtils::AddCountTy AddCount)'/>
<def f='llvm/llvm/lib/Analysis/SyntheticCountsUtils.cpp' l='85' ll='100' type='static void llvm::SyntheticCountsUtils::propagate(const CallGraphType &amp; CG, llvm::SyntheticCountsUtils::GetProfCountTy GetProfCount, llvm::SyntheticCountsUtils::AddCountTy AddCount)'/>
<doc f='llvm/llvm/lib/Analysis/SyntheticCountsUtils.cpp' l='77'>/// Propgate synthetic entry counts on a callgraph \p CG.
///
/// This performs a reverse post-order traversal of the callgraph SCC. For each
/// SCC, it first propagates the entry counts to the nodes within the SCC
/// through call edges and updates them in one shot. Then the entry counts are
/// propagated to nodes outside the SCC. This requires \p GraphTraits
/// to have a specialization for \p CallGraphType.</doc>
<use f='llvm/llvm/lib/LTO/SummaryBasedOptimizations.cpp' l='83' u='c' c='_ZN4llvm22computeSyntheticCountsERNS_18ModuleSummaryIndexE'/>
<use f='llvm/llvm/lib/Transforms/IPO/SyntheticCountsPropagation.cpp' l='128' u='c' c='_ZN4llvm26SyntheticCountsPropagation3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
