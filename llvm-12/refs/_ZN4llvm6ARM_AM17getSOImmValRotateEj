<def f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='129' ll='158' type='unsigned int llvm::ARM_AM::getSOImmValRotate(unsigned int Imm)'/>
<use f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='168' u='c' c='_ZN4llvm6ARM_AM11getSOImmValEj'/>
<use f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='182' u='c' c='_ZN4llvm6ARM_AM17isSOImmTwoPartValEj'/>
<use f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='187' u='c' c='_ZN4llvm6ARM_AM17isSOImmTwoPartValEj'/>
<use f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='194' u='c' c='_ZN4llvm6ARM_AM20getSOImmTwoPartFirstEj'/>
<use f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='201' u='c' c='_ZN4llvm6ARM_AM21getSOImmTwoPartSecondEj'/>
<use f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='219' u='c' c='_ZN4llvm6ARM_AM20isSOImmTwoPartValNegEj'/>
<doc f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='125'>/// getSOImmValRotate - Try to handle Imm with an immediate shifter operand,
  /// computing the rotate amount to use.  If this immediate value cannot be
  /// handled with a single shifter-op, determine a good rotate amount that will
  /// take a maximal chunk of bits out of the immediate.</doc>
<use f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp' l='2472' u='c' c='_ZN4llvm23emitARMRegPlusImmediateERNS_17MachineBasicBlockERNS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEERKNS_8DebugLocENS_8RegisterES9_iNS_2162132'/>
<use f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp' l='2653' u='c' c='_ZN4llvm20rewriteARMFrameIndexERNS_12MachineInstrEjNS_8RegisterERiRKNS_16ARMBaseInstrInfoE'/>
