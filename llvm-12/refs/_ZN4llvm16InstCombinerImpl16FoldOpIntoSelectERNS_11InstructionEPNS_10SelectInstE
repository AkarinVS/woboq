<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='608' type='llvm::Instruction * llvm::InstCombinerImpl::FoldOpIntoSelect(llvm::Instruction &amp; Op, llvm::SelectInst * SI)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1833' u='c' c='_ZN4llvm16InstCombinerImpl8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='2211' u='c' c='_ZN4llvm16InstCombinerImpl9visitFSubERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='604'>/// Given an instruction with a select as one operand and a constant as the
  /// other operand, try to fold the binary operator into the select arguments.
  /// This also works for Cast instructions, which obviously do not have a
  /// second operand.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='305' u='c' c='_ZN4llvm16InstCombinerImpl20commonCastTransformsERNS_8CastInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1299' u='c' c='_ZN4llvm16InstCombinerImpl9visitFDivERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1304' u='c' c='_ZN4llvm16InstCombinerImpl9visitFDivERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1397' u='c' c='_ZN4llvm16InstCombinerImpl20commonIRemTransformsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='384' u='c' c='_ZN4llvm16InstCombinerImpl21commonShiftTransformsERNS_14BinaryOperatorE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='960' ll='1032' type='llvm::Instruction * llvm::InstCombinerImpl::FoldOpIntoSelect(llvm::Instruction &amp; Op, llvm::SelectInst * SI)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1216' u='c' c='_ZN4llvm16InstCombinerImpl24foldBinOpIntoSelectOrPhiERNS_14BinaryOperatorE'/>
