<dec f='llvm/llvm/include/llvm/Analysis/LoopCacheAnalysis.h' l='80' type='Optional&lt;bool&gt; llvm::IndexedReference::hasTemporalReuse(const llvm::IndexedReference &amp; Other, unsigned int MaxDistance, const llvm::Loop &amp; L, llvm::DependenceInfo &amp; DI, llvm::AAResults &amp; AA) const'/>
<def f='llvm/llvm/lib/Analysis/LoopCacheAnalysis.cpp' l='205' ll='262' type='Optional&lt;bool&gt; llvm::IndexedReference::hasTemporalReuse(const llvm::IndexedReference &amp; Other, unsigned int MaxDistance, const llvm::Loop &amp; L, llvm::DependenceInfo &amp; DI, llvm::AAResults &amp; AA) const'/>
<use f='llvm/llvm/lib/Analysis/LoopCacheAnalysis.cpp' l='578' u='c' c='_ZNK4llvm9CacheCost23populateReferenceGroupsERNS_11SmallVectorINS1_ISt10unique_ptrINS_16IndexedReferenceESt14default_deleteIS3_EELj8EEELj8EEE'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopCacheAnalysis.h' l='76'>/// Return true if the current object and the indexed reference \p Other
  /// have distance smaller than \p MaxDistance in the dimension associated with
  /// the given loop \p L. Return false if the distance is not smaller than \p
  /// MaxDistance and None if unsure.</doc>
