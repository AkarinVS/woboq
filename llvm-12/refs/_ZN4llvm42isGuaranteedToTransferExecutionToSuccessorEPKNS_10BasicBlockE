<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='572' type='bool llvm::isGuaranteedToTransferExecutionToSuccessor(const llvm::BasicBlock * BB)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='567'>/// Returns true if this block does not contain a potential implicit exit.
  /// This is equivelent to saying that all instructions within the basic block
  /// are guaranteed to transfer execution to their successor within the basic
  /// block. This has the same assumptions w.r.t. undefined behavior as the
  /// instruction variant of this function.</doc>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='57' u='c' c='_ZN4llvm20SimpleLoopSafetyInfo21computeLoopSafetyInfoEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='67' u='c' c='_ZN4llvm20SimpleLoopSafetyInfo21computeLoopSafetyInfoEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='599' u='c' c='_ZN4llvm29MustBeExecutedContextExplorer20findForwardJoinPointEPKNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5031' ll='5038' type='bool llvm::isGuaranteedToTransferExecutionToSuccessor(const llvm::BasicBlock * BB)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2009' u='c' c='_ZN4llvm17JumpThreadingPass32maybeMergeBasicBlockIntoOnlyPredEPNS_10BasicBlockE'/>
