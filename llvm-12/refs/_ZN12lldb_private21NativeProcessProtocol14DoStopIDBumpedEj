<dec f='llvm/lldb/include/lldb/Host/common/NativeProcessProtocol.h' l='446' type='void lldb_private::NativeProcessProtocol::DoStopIDBumped(uint32_t newBumpId)'/>
<use f='llvm/lldb/source/Host/common/NativeProcessProtocol.cpp' l='739' u='c' c='_ZN12lldb_private21NativeProcessProtocol8SetStateEN4lldb9StateTypeEb'/>
<def f='llvm/lldb/source/Host/common/NativeProcessProtocol.cpp' l='752' ll='754' type='void lldb_private::NativeProcessProtocol::DoStopIDBumped(uint32_t )'/>
<doc f='llvm/lldb/source/Host/common/NativeProcessProtocol.cpp' l='752'>/* newBumpId */</doc>
<doc f='llvm/lldb/include/lldb/Host/common/NativeProcessProtocol.h' l='442'>// Derived classes need not implement this.  It can be used as a hook to
  // clear internal caches that should be invalidated when stop ids change.
  //
  // Note this function is called with the state mutex obtained by the caller.</doc>
<ovr f='llvm/lldb/source/Plugins/Process/Linux/NativeProcessLinux.cpp' l='1352' c='_ZN12lldb_private13process_linux18NativeProcessLinux14DoStopIDBumpedEj'/>
