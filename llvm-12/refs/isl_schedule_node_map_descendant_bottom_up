<dec f='llvm/polly/lib/External/isl/include/isl/schedule_node.h' l='56' type='isl_schedule_node * isl_schedule_node_map_descendant_bottom_up(isl_schedule_node * node, isl_schedule_node *(*)(isl_schedule_node *, void *) fn, void * user)'/>
<use f='llvm/polly/lib/External/isl/isl_schedule.c' l='282' u='c' c='isl_schedule_map_schedule_node_bottom_up'/>
<def f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='1507' ll='1515' type='isl_schedule_node * isl_schedule_node_map_descendant_bottom_up(isl_schedule_node * node, isl_schedule_node *(*)(isl_schedule_node *, void *) fn, void * user)'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='4775' u='c' c='isl_schedule_node_expand'/>
<doc f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='1500'>/* Traverse the descendants of &quot;node&quot; (including the node itself)
 * in depth first postorder, allowing the user to modify the visited node.
 * The traversal continues from the node returned by the callback function.
 * It is the responsibility of the user to ensure that this does not
 * lead to an infinite loop.  It is safest to always return a pointer
 * to the same position (same ancestors and child positions) as the input node.
 */</doc>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='4332' u='c' c='mark_kernels'/>
<use f='llvm/polly/lib/Transform/ScheduleOptimizer.cpp' l='1359' u='c' c='_ZN21ScheduleTreeOptimizer20optimizeScheduleNodeEN3isl12noexceptions13schedule_nodeEPKN5polly25OptimizerAdditionalInfoTyE'/>
