<def f='llvm/clang/include/clang/AST/DeclCXX.h' l='1705' ll='1708' type='unsigned int clang::CXXRecordDecl::getLambdaManglingNumber() const'/>
<doc f='llvm/clang/include/clang/AST/DeclCXX.h' l='1699'>/// If this is the closure type of a lambda expression, retrieve the
  /// number to be used for name mangling in the Itanium C++ ABI.
  ///
  /// Zero indicates that this closure type has internal linkage, so the
  /// mangling number does not matter, while a non-zero value indicates which
  /// lambda expression this is in this particular context.</doc>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2849' u='c' c='_ZN5clang15ASTNodeImporter15VisitRecordDeclEPNS_10RecordDeclE'/>
<use f='llvm/clang/lib/AST/Decl.cpp' l='1386' u='c' c='_ZN5clang15LinkageComputer16computeLVForDeclEPKNS_9NamedDeclENS_17LVComputationKindEb'/>
<use f='llvm/clang/lib/AST/ItaniumMangle.cpp' l='1442' u='c' c='_ZN12_GLOBAL__N_114CXXNameMangler21mangleUnqualifiedNameEN5clang10GlobalDeclENS1_15DeclarationNameEjPKN4llvm11SmallVectorINS4_9StringRefELj4EEE'/>
<use f='llvm/clang/lib/AST/ItaniumMangle.cpp' l='1863' u='c' c='_ZN12_GLOBAL__N_114CXXNameMangler12mangleLambdaEPKN5clang13CXXRecordDeclE'/>
<use f='llvm/clang/lib/AST/MicrosoftMangle.cpp' l='978' u='c' c='_ZN12_GLOBAL__N_123MicrosoftCXXNameMangler21mangleUnqualifiedNameEPKN5clang9NamedDeclENS1_15DeclarationNameE'/>
<use f='llvm/clang/lib/Sema/TreeTransform.h' l='12510' u='c' c='_ZN5clang13TreeTransform19TransformLambdaExprEPNS_10LambdaExprE'/>
