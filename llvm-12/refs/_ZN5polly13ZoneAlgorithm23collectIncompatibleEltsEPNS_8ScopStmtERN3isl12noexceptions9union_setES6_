<dec f='llvm/polly/include/polly/ZoneAlgo.h' l='183' type='void polly::ZoneAlgorithm::collectIncompatibleElts(polly::ScopStmt * Stmt, isl::union_set &amp; IncompatibleElts, isl::union_set &amp; AllElts)'/>
<doc f='llvm/polly/include/polly/ZoneAlgo.h' l='167'>/// Find the array elements that violate the zone analysis assumptions.
  ///
  /// What violates our assumptions:
  /// - A load after a write of the same location; we assume that all reads
  ///   occur before the writes.
  /// - Two writes to the same location; we cannot model the order in which
  ///   these occur.
  ///
  /// Scalar reads implicitly always occur before other accesses therefore never
  /// violate the first condition. There is also at most one write to a scalar,
  /// satisfying the second condition.
  ///
  /// @param Stmt                  The statement to be analyzed.
  /// @param[out] IncompatibleElts Receives the elements that are not
  ///                              zone-analysis compatible.
  /// @param[out]                  AllElts receives all encountered elements.</doc>
<def f='llvm/polly/lib/Transform/ZoneAlgo.cpp' l='321' ll='388' type='void polly::ZoneAlgorithm::collectIncompatibleElts(polly::ScopStmt * Stmt, isl::union_set &amp; IncompatibleElts, isl::union_set &amp; AllElts)'/>
<use f='llvm/polly/lib/Transform/ZoneAlgo.cpp' l='607' u='c' c='_ZN5polly13ZoneAlgorithm21collectCompatibleEltsEv'/>
