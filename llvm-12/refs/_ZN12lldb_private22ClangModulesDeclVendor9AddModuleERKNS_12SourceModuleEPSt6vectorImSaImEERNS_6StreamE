<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangModulesDeclVendor.h' l='57' type='bool lldb_private::ClangModulesDeclVendor::AddModule(const lldb_private::SourceModule &amp; module, lldb_private::ClangModulesDeclVendor::ModuleVector * exported_modules, lldb_private::Stream &amp; error_stream)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangModulesDeclVendor.h' l='39'>/// Add a module to the list of modules to search.
  ///
  /// \param[in] module
  ///     The path to the exact module to be loaded.  E.g., if the desired
  ///     module is std.io, then this should be { &quot;std&quot;, &quot;io&quot; }.
  ///
  /// \param[in] exported_modules
  ///     If non-NULL, a pointer to a vector to populate with the ID of every
  ///     module that is re-exported by the specified module.
  ///
  /// \param[in] error_stream
  ///     A stream to populate with the output of the Clang parser when
  ///     it tries to load the module.
  ///
  /// \return
  ///     True if the module could be loaded; false if not.  If the
  ///     compiler encountered a fatal error during a previous module
  ///     load, then this will always return false for this ModuleImporter.</doc>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpp' l='138' u='c' c='_ZN12lldb_private21ClangExpressionParser25LLDBPreprocessorCallbacks12moduleImportEN5clang14SourceLocationEN4llvm8ArrayRefISt4pairIPNS2_14IdentifierInf6716238'/>
<ovr f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangModulesDeclVendor.cpp' l='225' c='_ZN12_GLOBAL__N_126ClangModulesDeclVendorImpl9AddModuleERKN12lldb_private12SourceModuleEPSt6vectorImSaImEERNS1_6StreamE'/>
