<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1428' type='const llvm::SCEV * llvm::ScalarEvolution::BackedgeTakenInfo::getExact(const llvm::BasicBlock * ExitingBlock, llvm::ScalarEvolution * SE) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1424'>/// Return the number of times this loop exit may fall through to the back
    /// edge, or SCEVCouldNotCompute. The loop is guaranteed not to exit via
    /// this block before this number of iterations, but may exit via another
    /// block.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6898' u='c' c='_ZN4llvm15ScalarEvolution12getExitCountEPKNS_4LoopEPKNS_10BasicBlockENS0_13ExitCountKindE'/>
<def f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='7223' ll='7231' type='const llvm::SCEV * llvm::ScalarEvolution::BackedgeTakenInfo::getExact(const llvm::BasicBlock * ExitingBlock, llvm::ScalarEvolution * SE) const'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='9900' u='c' c='_ZN4llvm15ScalarEvolution27isLoopBackedgeGuardedByCondEPKNS_4LoopENS_7CmpInst9PredicateEPKNS_4SCEVES8_'/>
<doc f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='7222'>/// Get the exact not taken count for this loop exit.</doc>
