<dec f='llvm/compiler-rt/lib/memprof/memprof_interface_internal.h' l='39' type='void __memprof_record_access_range(const volatile void * addr, __sanitizer::uptr size)'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='206' macro='1' u='c' c='__interceptor_strcat'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='208' macro='1' u='c' c='__interceptor_strcat'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='209' macro='1' u='c' c='__interceptor_strcat'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='219' macro='1' u='c' c='__interceptor_strncat'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='221' macro='1' u='c' c='__interceptor_strncat'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='222' macro='1' u='c' c='__interceptor_strncat'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='234' macro='1' u='c' c='__interceptor_strcpy'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='235' macro='1' u='c' c='__interceptor_strcpy'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='246' macro='1' u='c' c='__interceptor_strdup'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='260' macro='1' u='c' c='__interceptor___strdup'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='272' macro='1' u='c' c='__interceptor_strncpy'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='273' macro='1' u='c' c='__interceptor_strncpy'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='298' macro='1' u='c' c='__interceptor_atoi'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='309' macro='1' u='c' c='__interceptor_atol'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors.cpp' l='330' macro='1' u='c' c='__interceptor_atoll'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp' l='20' macro='1' u='c' c='__memprof_memcpy'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp' l='20' macro='1' u='c' c='__memprof_memcpy'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp' l='24' macro='1' u='c' c='__memprof_memset'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp' l='28' macro='1' u='c' c='__memprof_memmove'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp' l='28' macro='1' u='c' c='__memprof_memmove'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_rtl.cpp' l='98' u='c' c='__memprof::force_interface_symbols'/>
<def f='llvm/compiler-rt/lib/memprof/memprof_rtl.cpp' l='282' ll='285' type='void __memprof_record_access_range(const volatile void * addr, __sanitizer::uptr size)'/>
<doc f='llvm/compiler-rt/lib/memprof/memprof_rtl.cpp' l='277'>// We only record the access on the first location in the range,
// since we will later accumulate the access counts across the
// full allocation, and we don&apos;t want to inflate the hotness from
// a memory intrinsic on a large range of memory.
// TODO: Should we do something else so we can better track utilization?</doc>
