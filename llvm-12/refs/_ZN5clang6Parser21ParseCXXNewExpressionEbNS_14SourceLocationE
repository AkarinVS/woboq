<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1984' type='clang::ExprResult clang::Parser::ParseCXXNewExpression(bool UseGlobal, clang::SourceLocation Start)'/>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='1636' u='c' c='_ZN5clang6Parser19ParseCastExpressionENS0_13CastParseKindEbRbNS0_13TypeCastStateEbPb'/>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='1656' u='c' c='_ZN5clang6Parser19ParseCastExpressionENS0_13CastParseKindEbRbNS0_13TypeCastStateEbPb'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='3059' ll='3187' type='clang::ExprResult clang::Parser::ParseCXXNewExpression(bool UseGlobal, clang::SourceLocation Start)'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='3031'>/// ParseCXXNewExpression - Parse a C++ new-expression. New is used to allocate
/// memory in a typesafe manner and call constructors.
///
/// This method is called to parse the new expression after the optional :: has
/// been already parsed.  If the :: was present, &quot;UseGlobal&quot; is true and &quot;Start&quot;
/// is its location.  Otherwise, &quot;Start&quot; is the location of the &apos;new&apos; token.
///
///        new-expression:
///                   &apos;::&apos;[opt] &apos;new&apos; new-placement[opt] new-type-id
///                                     new-initializer[opt]
///                   &apos;::&apos;[opt] &apos;new&apos; new-placement[opt] &apos;(&apos; type-id &apos;)&apos;
///                                     new-initializer[opt]
///
///        new-placement:
///                   &apos;(&apos; expression-list &apos;)&apos;
///
///        new-type-id:
///                   type-specifier-seq new-declarator[opt]
/// [GNU]             attributes type-specifier-seq new-declarator[opt]
///
///        new-declarator:
///                   ptr-operator new-declarator[opt]
///                   direct-new-declarator
///
///        new-initializer:
///                   &apos;(&apos; expression-list[opt] &apos;)&apos;
/// [C++0x]           braced-init-list
///</doc>
