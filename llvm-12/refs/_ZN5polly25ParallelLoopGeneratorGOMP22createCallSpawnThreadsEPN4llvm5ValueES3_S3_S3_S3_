<dec f='llvm/polly/include/polly/CodeGen/LoopGeneratorsGOMP.h' l='45' type='void polly::ParallelLoopGeneratorGOMP::createCallSpawnThreads(llvm::Value * SubFn, llvm::Value * SubFnParam, llvm::Value * LB, llvm::Value * UB, llvm::Value * Stride)'/>
<doc f='llvm/polly/include/polly/CodeGen/LoopGeneratorsGOMP.h' l='33'>// The functions below may be used if one does not want to generate a
  // specific OpenMP parallel loop, but generate individual parts of it
  // (e.g. the subfunction definition).

  /// Create a runtime library call to spawn the worker threads.
  ///
  /// @param SubFn      The subfunction which holds the loop body.
  /// @param SubFnParam The parameter for the subfunction (basically the struct
  ///                   filled with the outside values).
  /// @param LB         The lower bound for the loop we parallelize.
  /// @param UB         The upper bound for the loop we parallelize.
  /// @param Stride     The stride of the loop we parallelize.</doc>
<def f='llvm/polly/lib/CodeGen/LoopGeneratorsGOMP.cpp' l='20' ll='48' type='void polly::ParallelLoopGeneratorGOMP::createCallSpawnThreads(llvm::Value * SubFn, llvm::Value * SubFnParam, llvm::Value * LB, llvm::Value * UB, llvm::Value * Stride)'/>
<use f='llvm/polly/lib/CodeGen/LoopGeneratorsGOMP.cpp' l='55' u='c' c='_ZN5polly25ParallelLoopGeneratorGOMP23deployParallelExecutionEPN4llvm8FunctionEPNS1_5ValueES5_S5_S5_'/>
