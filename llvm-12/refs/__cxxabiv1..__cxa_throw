<dec f='llvm/build/projects/libcxx/include/c++build/cxxabi.h' l='49' type='void __cxxabiv1::__cxa_throw(void * thrown_exception, std::type_info * tinfo, void (*)(void *) dest)'/>
<doc f='llvm/build/projects/libcxx/include/c++build/cxxabi.h' l='47'>// 2.4.3 Throwing the Exception Object</doc>
<dec f='llvm/libcxxabi/include/cxxabi.h' l='49' type='void __cxxabiv1::__cxa_throw(void * thrown_exception, std::type_info * tinfo, void (*)(void *) dest)'/>
<doc f='llvm/libcxxabi/include/cxxabi.h' l='47'>// 2.4.3 Throwing the Exception Object</doc>
<def f='llvm/libcxxabi/src/cxa_exception.cpp' l='256' ll='284' type='void __cxxabiv1::__cxa_throw(void * thrown_object, std::type_info * tinfo, void (*)(void *) dest)'/>
<doc f='llvm/libcxxabi/src/cxa_exception.cpp' l='231'>/*
After constructing the exception object with the throw argument value,
the generated code calls the __cxa_throw runtime library routine. This
routine never returns.

The __cxa_throw routine will do the following:

* Obtain the __cxa_exception header from the thrown exception object address,
which can be computed as follows:
 __cxa_exception *header = ((__cxa_exception *) thrown_exception - 1);
* Save the current unexpected_handler and terminate_handler in the __cxa_exception header.
* Save the tinfo and dest arguments in the __cxa_exception header.
* Set the exception_class field in the unwind header. This is a 64-bit value
representing the ASCII string &quot;XXXXC++\0&quot;, where &quot;XXXX&quot; is a
vendor-dependent string. That is, for implementations conforming to this
ABI, the low-order 4 bytes of this 64-bit value will be &quot;C++\0&quot;.
* Increment the uncaught_exception flag.
* Call _Unwind_RaiseException in the system unwind library, Its argument is the
pointer to the thrown exception, which __cxa_throw itself received as an argument.
__Unwind_RaiseException begins the process of stack unwinding, described
in Section 2.5. In special cases, such as an inability to find a
handler, _Unwind_RaiseException may return. In that case, __cxa_throw
will call terminate, assuming that there was no handler for the
exception.
*/</doc>
