<def f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2800' ll='2802' type='static bool llvm::AAIsDead::mayCatchAsynchronousExceptions(const llvm::Function &amp; F)'/>
<doc f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2799'>/// Determine if \p F might catch asynchronous exceptions.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='1269' u='c' c='_ZN4llvm10Attributor9cleanupIREv'/>
<use f='llvm/llvm/lib/Transforms/IPO/AttributorAttributes.cpp' l='3095' u='c' c='_ZN12_GLOBAL__N_116AAIsDeadFunction8manifestERN4llvm10AttributorE'/>
<use f='llvm/llvm/lib/Transforms/IPO/AttributorAttributes.cpp' l='3245' u='c' c='_ZN12_GLOBAL__N_123identifyAliveSuccessorsERN4llvm10AttributorERKNS0_10InvokeInstERNS0_17AbstractAttributeERNS0_15SmallVectorImplIPKNS0_11InstructionEEE'/>
