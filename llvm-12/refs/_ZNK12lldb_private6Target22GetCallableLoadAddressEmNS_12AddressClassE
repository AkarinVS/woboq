<dec f='llvm/lldb/include/lldb/Target/Target.h' l='801' type='lldb::addr_t lldb_private::Target::GetCallableLoadAddress(lldb::addr_t load_addr, lldb_private::AddressClass addr_class = AddressClass::eInvalid) const'/>
<doc f='llvm/lldb/include/lldb/Target/Target.h' l='792'>/// Get \a load_addr as a callable code load address for this target
  ///
  /// Take \a load_addr and potentially add any address bits that are
  /// needed to make the address callable. For ARM this can set bit
  /// zero (if it already isn&apos;t) if \a load_addr is a thumb function.
  /// If \a addr_class is set to AddressClass::eInvalid, then the address
  /// adjustment will always happen. If it is set to an address class
  /// that doesn&apos;t have code in it, LLDB_INVALID_ADDRESS will be
  /// returned.</doc>
<use f='llvm/lldb/source/Core/Address.cpp' l='354' u='c' c='_ZNK12lldb_private7Address22GetCallableLoadAddressEPNS_6TargetEb'/>
<use f='llvm/lldb/source/Core/Address.cpp' l='361' u='c' c='_ZN12lldb_private7Address22SetCallableLoadAddressEmPNS_6TargetE'/>
<def f='llvm/lldb/source/Target/Target.cpp' l='2498' ll='2504' type='lldb::addr_t lldb_private::Target::GetCallableLoadAddress(lldb::addr_t load_addr, lldb_private::AddressClass addr_class = AddressClass::eInvalid) const'/>
