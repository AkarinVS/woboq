<dec f='llvm/polly/include/polly/CodeGen/IslNodeBuilder.h' l='101' type='llvm::Value * IslNodeBuilder::createRTC(isl_ast_expr * Condition)'/>
<use f='llvm/polly/lib/CodeGen/CodeGeneration.cpp' l='273' u='c' c='_ZL7CodeGenRN5polly4ScopERNS_10IslAstInfoERN4llvm8LoopInfoERNS4_13DominatorTreeERNS4_15ScalarEvolutionERNS4_10RegionInfoE'/>
<doc f='llvm/polly/include/polly/CodeGen/IslNodeBuilder.h' l='90'>/// Generate code that evaluates @p Condition at run-time.
  ///
  /// This function is typically called to generate the LLVM-IR for the
  /// run-time condition of the scop, that verifies that all the optimistic
  /// assumptions we have taken during scop modeling and transformation
  /// hold at run-time.
  ///
  /// @param Condition The condition to evaluate
  ///
  /// @result An llvm::Value that is true if the condition holds and false
  ///         otherwise.</doc>
<def f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='1576' ll='1616' type='llvm::Value * IslNodeBuilder::createRTC(isl_ast_expr * Condition)'/>
<doc f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='1572'>/// The AST expression we generate to perform the run-time check assumes
/// computations on integer types of infinite size. As we only use 64-bit
/// arithmetic we check for overflows, in case of which we set the result
/// of this run-time check to false to be conservatively correct,</doc>
