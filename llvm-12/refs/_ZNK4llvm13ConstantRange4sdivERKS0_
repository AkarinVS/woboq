<dec f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='408' type='llvm::ConstantRange llvm::ConstantRange::sdiv(const llvm::ConstantRange &amp; Other) const'/>
<doc f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='403'>/// Return a new range representing the possible values resulting
  /// from a signed division of a value in this range and a value in
  /// \p Other. Division by zero and division of SignedMin by -1 are considered
  /// undefined behavior, in line with IR, and do not contribute towards the
  /// result.</doc>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='806' u='c' c='_ZNK4llvm13ConstantRange8binaryOpENS_11Instruction9BinaryOpsERKS0_'/>
<def f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1118' ll='1201' type='llvm::ConstantRange llvm::ConstantRange::sdiv(const llvm::ConstantRange &amp; RHS) const'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1226' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_SDiv_Test8TestBodyEv'/>
