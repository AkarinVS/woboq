<dec f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='281' type='const llvm::BasicBlock * llvm::BasicBlock::getUniqueSuccessor() const'/>
<use f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='284' u='c' c='_ZN4llvm10BasicBlock18getUniqueSuccessorEv'/>
<doc f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='277'>/// Return the successor of this block if it has a unique successor.
  /// Otherwise return a null pointer.
  ///
  /// This method is analogous to getUniquePredecessor above.</doc>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='555' u='c' c='_ZN4llvm29MustBeExecutedContextExplorer20findForwardJoinPointEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='556' u='c' c='_ZN4llvm29MustBeExecutedContextExplorer20findForwardJoinPointEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/BasicBlock.cpp' l='204' u='c' c='_ZNK4llvm10BasicBlock31getPostdominatingDeoptimizeCallEv'/>
<def f='llvm/llvm/lib/IR/BasicBlock.cpp' l='302' ll='314' type='const llvm::BasicBlock * llvm::BasicBlock::getUniqueSuccessor() const'/>
