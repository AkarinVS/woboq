<dec f='llvm/polly/include/polly/ScheduleOptimizer.h' l='242' type='static isl::schedule_node ScheduleTreeOptimizer::prevectSchedBand(isl::schedule_node Node, unsigned int DimToVectorize, int VectorWidth)'/>
<def f='llvm/polly/lib/Transform/ScheduleOptimizer.cpp' l='399' ll='432' type='static isl::schedule_node ScheduleTreeOptimizer::prevectSchedBand(isl::schedule_node Node, unsigned int DimToVectorize, int VectorWidth)'/>
<use f='llvm/polly/lib/Transform/ScheduleOptimizer.cpp' l='541' u='c' c='_ZN21ScheduleTreeOptimizer16standardBandOptsEN3isl12noexceptions13schedule_nodeEPv'/>
<doc f='llvm/polly/include/polly/ScheduleOptimizer.h' l='211'>/// Pre-vectorizes one scheduling dimension of a schedule band.
  ///
  /// prevectSchedBand splits out the dimension DimToVectorize, tiles it and
  /// sinks the resulting point loop.
  ///
  /// Example (DimToVectorize=0, VectorWidth=4):
  ///
  /// | Before transformation:
  /// |
  /// | A[i,j] -&gt; [i,j]
  /// |
  /// | for (i = 0; i &lt; 128; i++)
  /// |    for (j = 0; j &lt; 128; j++)
  /// |      A(i,j);
  ///
  /// | After transformation:
  /// |
  /// | for (it = 0; it &lt; 32; it+=1)
  /// |    for (j = 0; j &lt; 128; j++)
  /// |      for (ip = 0; ip &lt;= 3; ip++)
  /// |        A(4 * it + ip,j);
  ///
  /// The goal of this transformation is to create a trivially vectorizable
  /// loop.  This means a parallel loop at the innermost level that has a
  /// constant number of iterations corresponding to the target vector width.
  ///
  /// This transformation creates a loop at the innermost level. The loop has
  /// a constant number of iterations, if the number of loop iterations at
  /// DimToVectorize can be divided by VectorWidth. The default VectorWidth is
  /// currently constant and not yet target specific. This function does not
  /// reason about parallelism.</doc>
