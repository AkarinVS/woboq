<use f='llvm/llvm/include/llvm/CodeGen/LiveIntervals.h' l='399' u='c' c='_ZN4llvm13LiveIntervals10getRegUnitEj'/>
<dec f='llvm/llvm/include/llvm/CodeGen/LiveIntervals.h' l='471' type='void llvm::LiveIntervals::computeRegUnitRange(llvm::LiveRange &amp; , unsigned int Unit)'/>
<def f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='276' ll='319' type='void llvm::LiveIntervals::computeRegUnitRange(llvm::LiveRange &amp; LR, unsigned int Unit)'/>
<use f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='360' u='c' c='_ZN4llvm13LiveIntervals21computeLiveInRegUnitsEv'/>
<doc f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='262'>//===----------------------------------------------------------------------===//
//                           Register Unit Liveness
//===----------------------------------------------------------------------===//
//
// Fixed interference typically comes from ABI boundaries: Function arguments
// and return values are passed in fixed registers, and so are exception
// pointers entering landing pads. Certain instructions require values to be
// present in specific registers. That is also represented through fixed
// interference.
//

/// Compute the live range of a register unit, based on the uses and defs of
/// aliasing registers.  The range should be empty, or contain only dead
/// phi-defs from ABI blocks.</doc>
