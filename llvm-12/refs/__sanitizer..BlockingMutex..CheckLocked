<dec f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h' l='88' type='void __sanitizer::BlockingMutex::CheckLocked()'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_thread_registry.h' l='99' u='c' c='__sanitizer::ThreadRegistry::CheckLocked'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h' l='81'>// This function does not guarantee an explicit check that the calling thread
  // is the thread which owns the mutex. This behavior, while more strictly
  // correct, causes problems in cases like StopTheWorld, where a parent thread
  // owns the mutex but a child checks that it is locked. Rather than
  // maintaining complex state to work around those situations, the check only
  // checks that the mutex is owned, and assumes callers to be generally
  // well-behaved.</doc>
<use f='llvm/compiler-rt/lib/asan/asan_globals.cpp' l='98' u='c' c='__asan::FindRegistrationSite'/>
<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_linux.cpp' l='676' ll='679' type='void __sanitizer::BlockingMutex::CheckLocked()'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.cpp' l='95' u='c' c='__sanitizer::Symbolizer::ModuleNameOwner::GetOwnedCopy'/>
