<dec f='llvm/polly/include/polly/Support/ScopHelper.h' l='410' type='llvm::Value * polly::expandCodeFor(polly::Scop &amp; S, llvm::ScalarEvolution &amp; SE, const llvm::DataLayout &amp; DL, const char * Name, const llvm::SCEV * E, llvm::Type * Ty, llvm::Instruction * IP, polly::ValueMapT * VMap, llvm::BasicBlock * RTCBB)'/>
<doc f='llvm/polly/include/polly/Support/ScopHelper.h' l='391'>/// Wrapper for SCEVExpander extended to all Polly features.
///
/// This wrapper will internally call the SCEVExpander but also makes sure that
/// all additional features not represented in SCEV (e.g., SDiv/SRem are not
/// black boxes but can be part of the function) will be expanded correctly.
///
/// The parameters are the same as for the creation of a SCEVExpander as well
/// as the call to SCEVExpander::expandCodeFor:
///
/// @param S     The current Scop.
/// @param SE    The Scalar Evolution pass.
/// @param DL    The module data layout.
/// @param Name  The suffix added to the new instruction names.
/// @param E     The expression for which code is actually generated.
/// @param Ty    The type of the resulting code.
/// @param IP    The insertion point for the new code.
/// @param VMap  A remapping of values used in @p E.
/// @param RTCBB The last block of the RTC. Used to insert loop-invariant
///              instructions in rare cases.</doc>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='90' u='c' c='_ZNK5polly14BlockGenerator21trySynthesizeNewValueERNS_8ScopStmtEPN4llvm5ValueERNS3_8DenseMapINS3_11AssertingVHIS4_EES8_NS3_12DenseMapInfoIS8_EENS3_6de5891445'/>
<use f='llvm/polly/lib/CodeGen/IslExprBuilder.cpp' l='321' u='c' c='_ZN5polly14IslExprBuilder19createAccessAddressEP12isl_ast_expr'/>
<use f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='1567' u='c' c='_ZN14IslNodeBuilder12generateSCEVEPKN4llvm4SCEVE'/>
<def f='llvm/polly/lib/Support/ScopHelper.cpp' l='407' ll='413' type='llvm::Value * polly::expandCodeFor(polly::Scop &amp; S, llvm::ScalarEvolution &amp; SE, const llvm::DataLayout &amp; DL, const char * Name, const llvm::SCEV * E, llvm::Type * Ty, llvm::Instruction * IP, polly::ValueMapT * VMap, llvm::BasicBlock * RTCBB)'/>
