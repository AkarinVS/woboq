<dec f='llvm/lldb/include/lldb/Target/Thread.h' l='754' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepInRange(bool abort_other_plans, const lldb_private::LineEntry &amp; line_entry, const lldb_private::SymbolContext &amp; addr_context, const char * step_in_target, lldb::RunMode stop_other_threads, lldb_private::Status &amp; status, lldb_private::LazyBool step_in_avoids_code_without_debug_info = eLazyBoolCalculate, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='751'>// Helper function that takes a LineEntry to step, insted of an AddressRange.
  // This may combine multiple LineEntries of the same source line number to
  // step over a longer address range in a single operation.</doc>
<def f='llvm/lldb/source/Target/Thread.cpp' l='1307' ll='1320' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForStepInRange(bool abort_other_plans, const lldb_private::LineEntry &amp; line_entry, const lldb_private::SymbolContext &amp; addr_context, const char * step_in_target, lldb::RunMode stop_other_threads, lldb_private::Status &amp; status, lldb_private::LazyBool step_in_avoids_code_without_debug_info = eLazyBoolCalculate, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
<use f='llvm/lldb/source/Target/Thread.cpp' l='1917' u='c' c='_ZN12lldb_private6Thread6StepInEbNS_8LazyBoolES1_'/>
<doc f='llvm/lldb/source/Target/Thread.cpp' l='1306'>// Call the QueueThreadPlanForStepInRange method which takes an address range.</doc>
