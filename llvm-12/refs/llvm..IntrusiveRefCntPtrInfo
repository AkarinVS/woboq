<def f='llvm/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h' l='152' ll='155'/>
<use f='llvm/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h' l='217' c='_ZN4llvm18IntrusiveRefCntPtr6retainEv'/>
<use f='llvm/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h' l='222' c='_ZN4llvm18IntrusiveRefCntPtr7releaseEv'/>
<doc f='llvm/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h' l='132'>/// Class you can specialize to provide custom retain/release functionality for
/// a type.
///
/// Usually specializing this class is not necessary, as IntrusiveRefCntPtr
/// works with any type which defines Retain() and Release() functions -- you
/// can define those functions yourself if RefCountedBase doesn&apos;t work for you.
///
/// One case when you might want to specialize this type is if you have
///  - Foo.h defines type Foo and includes Bar.h, and
///  - Bar.h uses IntrusiveRefCntPtr&lt;Foo&gt; in inline functions.
///
/// Because Foo.h includes Bar.h, Bar.h can&apos;t include Foo.h in order to pull in
/// the declaration of Foo.  Without the declaration of Foo, normally Bar.h
/// wouldn&apos;t be able to use IntrusiveRefCntPtr&lt;Foo&gt;, which wants to call
/// T::Retain and T::Release.
///
/// To resolve this, Bar.h could include a third header, FooFwd.h, which
/// forward-declares Foo and specializes IntrusiveRefCntPtrInfo&lt;Foo&gt;.  Then
/// Bar.h could use IntrusiveRefCntPtr&lt;Foo&gt;, although it still couldn&apos;t call any
/// functions on Foo itself, because Foo would be an incomplete type.</doc>
<fun r='_ZN4llvm22IntrusiveRefCntPtrInfo6retainEPT_'/>
<fun r='_ZN4llvm22IntrusiveRefCntPtrInfo7releaseEPT_'/>
<def f='llvm/llvm/include/llvm/ADT/ImmutableSet.h' l='361' ll='365'/>
<fun r='_ZN4llvm22IntrusiveRefCntPtrInfoINS_11ImutAVLTreeIT_EEE6retainEPS3_'/>
<fun r='_ZN4llvm22IntrusiveRefCntPtrInfoINS_11ImutAVLTreeIT_EEE7releaseEPS3_'/>
<def f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h' l='25' ll='32'/>
<use f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h' l='25'/>
<size>1</size>
<fun r='_ZN4llvm22IntrusiveRefCntPtrInfoIKN5clang4ento12ProgramStateEE6retainEPS4_'/>
<fun r='_ZN4llvm22IntrusiveRefCntPtrInfoIKN5clang4ento12ProgramStateEE7releaseEPS4_'/>
<def f='llvm/llvm/unittests/ADT/IntrusiveRefCntPtrTest.cpp' l='78' ll='87'/>
<use f='llvm/llvm/unittests/ADT/IntrusiveRefCntPtrTest.cpp' l='78'/>
<size>1</size>
