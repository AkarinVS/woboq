<dec f='llvm/lldb/include/lldb/Target/Platform.h' l='727' type='const std::vector&lt;ConstString&gt; &amp; lldb_private::Platform::GetTrapHandlerSymbolNames()'/>
<doc f='llvm/lldb/include/lldb/Target/Platform.h' l='708'>/// Provide a list of trap handler function names for this platform
  ///
  /// The unwinder needs to treat trap handlers specially -- the stack frame
  /// may not be aligned correctly for a trap handler (the kernel often won&apos;t
  /// perturb the stack pointer, or won&apos;t re-align it properly, in the process
  /// of calling the handler) and the frame above the handler needs to be
  /// treated by the unwinder&apos;s &quot;frame 0&quot; rules instead of its &quot;middle of the
  /// stack frame&quot; rules.
  ///
  /// In a user process debugging scenario, the list of trap handlers is
  /// typically just &quot;_sigtramp&quot;.
  ///
  /// The Platform base class provides the m_trap_handlers ivar but it does
  /// not populate it.  Subclasses should add the names of the asynchronous
  /// signal handler routines as needed.  For most Unix platforms, add
  /// _sigtramp.
  ///
  /// \return
  ///     A list of symbol names.  The list may be empty.</doc>
<use f='llvm/lldb/source/Commands/CommandObjectTarget.cpp' l='3428' u='c' c='_ZN36CommandObjectTargetModulesShowUnwind9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Target/Platform.cpp' l='1509' ll='1518' type='const std::vector&lt;ConstString&gt; &amp; lldb_private::Platform::GetTrapHandlerSymbolNames()'/>
<use f='llvm/lldb/source/Target/RegisterContextUnwind.cpp' l='1123' u='c' c='_ZNK12lldb_private21RegisterContextUnwind19IsTrapHandlerSymbolEPNS_7ProcessERKNS_13SymbolContextE'/>
