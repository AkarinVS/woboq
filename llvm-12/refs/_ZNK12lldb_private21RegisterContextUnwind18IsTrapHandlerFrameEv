<dec f='llvm/lldb/include/lldb/Target/RegisterContextUnwind.h' l='62' type='bool lldb_private::RegisterContextUnwind::IsTrapHandlerFrame() const'/>
<use f='llvm/lldb/source/Target/RegisterContextUnwind.cpp' l='314' u='c' c='_ZN12lldb_private21RegisterContextUnwind24InitializeNonZerothFrameEv'/>
<def f='llvm/lldb/source/Target/RegisterContextUnwind.cpp' l='1101' ll='1103' type='bool lldb_private::RegisterContextUnwind::IsTrapHandlerFrame() const'/>
<use f='llvm/lldb/source/Target/RegisterContextUnwind.cpp' l='2147' u='c' c='_ZN12lldb_private21RegisterContextUnwind6ReadPCERm'/>
<doc f='llvm/lldb/source/Target/RegisterContextUnwind.cpp' l='1095'>// After the final stack frame in a stack walk we&apos;ll get one invalid
// (eNotAValidFrame) stack frame -- one past the end of the stack walk.  But
// higher-level code will need to tell the difference between &quot;the unwind plan
// below this frame failed&quot; versus &quot;we successfully completed the stack walk&quot;
// so this method helps to disambiguate that.</doc>
<use f='llvm/lldb/source/Target/UnwindLLDB.cpp' l='211' u='c' c='_ZN12lldb_private10UnwindLLDB15GetOneMoreFrameEPNS_3ABIE'/>
<use f='llvm/lldb/source/Target/UnwindLLDB.cpp' l='411' u='c' c='_ZN12lldb_private10UnwindLLDB21DoGetFrameInfoAtIndexEjRmS1_Rb'/>
<use f='llvm/lldb/source/Target/UnwindLLDB.cpp' l='416' u='c' c='_ZN12lldb_private10UnwindLLDB21DoGetFrameInfoAtIndexEjRmS1_Rb'/>
