<dec f='llvm/lldb/include/lldb/Target/Target.h' l='957' type='bool lldb_private::Target::ModuleIsExcludedForUnconstrainedSearches(const lldb::ModuleSP &amp; module_sp)'/>
<doc f='llvm/lldb/include/lldb/Target/Target.h' l='938'>/// Return whether this module should be considered for general searches.
  ///
  /// This API will be consulted by the SearchFilterForUnconstrainedSearches
  /// and any module that returns \b true will not be searched.  Note the
  /// SearchFilterForUnconstrainedSearches is the search filter that
  /// gets used in the CreateBreakpoint calls when no modules is provided.
  ///
  /// The target call at present just consults the Platform&apos;s call of the
  /// same name.
  ///
  /// FIXME: When we get time we should add a way for the user to set modules
  /// that they
  /// don&apos;t want searched, in addition to or instead of the platform ones.
  ///
  /// \param[in] module_sp
  ///     A shared pointer reference to the module that checked.
  ///
  /// \return \b true if the module should be excluded, \b false otherwise.</doc>
<use f='llvm/lldb/source/Core/SearchFilter.cpp' l='379' u='c' c='_ZN12lldb_private36SearchFilterForUnconstrainedSearches12ModulePassesERKSt10shared_ptrINS_6ModuleEE'/>
<use f='llvm/lldb/source/Target/Target.cpp' l='1668' u='c' c='_ZN12lldb_private6Target40ModuleIsExcludedForUnconstrainedSearchesERKNS_8FileSpecE'/>
<def f='llvm/lldb/source/Target/Target.cpp' l='1678' ll='1686' type='bool lldb_private::Target::ModuleIsExcludedForUnconstrainedSearches(const lldb::ModuleSP &amp; module_sp)'/>
