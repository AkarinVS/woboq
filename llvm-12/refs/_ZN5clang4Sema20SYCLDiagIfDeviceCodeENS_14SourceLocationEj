<dec f='llvm/clang/include/clang/Sema/Sema.h' l='12775' type='clang::Sema::SemaDiagnosticBuilder clang::Sema::SYCLDiagIfDeviceCode(clang::SourceLocation Loc, unsigned int DiagID)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='12757'>/// Creates a SemaDiagnosticBuilder that emits the diagnostic if the current
  /// context is &quot;used as device code&quot;.
  ///
  /// - If CurLexicalContext is a kernel function or it is known that the
  ///   function will be emitted for the device, emits the diagnostics
  ///   immediately.
  /// - If CurLexicalContext is a function and we are compiling
  ///   for the device, but we don&apos;t know that this function will be codegen&apos;ed
  ///   for devive yet, creates a diagnostic which is emitted if and when we
  ///   realize that the function will be codegen&apos;ed.
  ///
  /// Example usage:
  ///
  /// Diagnose __float128 type usage only from SYCL device code if the current
  /// target doesn&apos;t support it
  /// if (!S.Context.getTargetInfo().hasFloat128Type() &amp;&amp;
  ///     S.getLangOpts().SYCLIsDevice)
  ///   SYCLDiagIfDeviceCode(Loc, diag::err_type_unsupported) &lt;&lt; &quot;__float128&quot;;</doc>
<use f='llvm/clang/lib/Sema/Sema.cpp' l='1755' u='c' c='_ZN5clang4Sema10targetDiagENS_14SourceLocationEjPNS_12FunctionDeclE'/>
<def f='llvm/clang/lib/Sema/SemaSYCL.cpp' l='20' ll='33' type='Sema::SemaDiagnosticBuilder clang::Sema::SYCLDiagIfDeviceCode(clang::SourceLocation Loc, unsigned int DiagID)'/>
<doc f='llvm/clang/lib/Sema/SemaSYCL.cpp' l='16'>// -----------------------------------------------------------------------------
// SYCL device specific diagnostics implementation
// -----------------------------------------------------------------------------</doc>
