<dec f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='115' type='void * __sanitizer::MmapAlignedOrDieOnFatalError(__sanitizer::uptr size, __sanitizer::uptr alignment, const char * mem_type)'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h' l='300' u='c' c='__sanitizer::SizeClassAllocator32::AllocateRegion'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='113'>// Map aligned chunk of address space; size and alignment are powers of two.
// Dies on all but out of memory errors, in the latter case returns nullptr.</doc>
<use f='llvm/compiler-rt/lib/hwasan/hwasan_report.cpp' l='113' u='c' c='__hwasan::SavedStackAllocations::SavedStackAllocations'/>
<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_posix.cpp' l='83' ll='101' type='void * __sanitizer::MmapAlignedOrDieOnFatalError(__sanitizer::uptr size, __sanitizer::uptr alignment, const char * mem_type)'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_posix.cpp' l='80'>// We want to map a chunk of address space aligned to &apos;alignment&apos;.
// We do it by mapping a bit more and then unmapping redundant pieces.
// We probably can do it with fewer syscalls in some OS-dependent way.</doc>
