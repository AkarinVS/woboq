<dec f='llvm/polly/include/polly/PolyhedralInfo.h' l='88' type='bool polly::PolyhedralInfo::checkParallel(llvm::Loop * L, isl_pw_aff ** MinDepDistPtr = nullptr) const'/>
<def f='llvm/polly/lib/Analysis/PolyhedralInfo.cpp' l='73' ll='97' type='bool polly::PolyhedralInfo::checkParallel(llvm::Loop * L, isl_pw_aff ** MinDepDistPtr = nullptr) const'/>
<use f='llvm/polly/lib/Analysis/PolyhedralInfo.cpp' l='99' u='c' c='_ZNK5polly14PolyhedralInfo10isParallelEPN4llvm4LoopE'/>
<doc f='llvm/polly/include/polly/PolyhedralInfo.h' l='80'>/// Check if a given loop is parallel or vectorizable.
  ///
  /// @param L             The loop.
  /// @param MinDepDistPtr If not nullptr, the minimal dependence distance will
  ///                      be returned at the address of that pointer
  ///
  /// @return  Returns true if loop is parallel or vectorizable, false
  ///          otherwise.</doc>
