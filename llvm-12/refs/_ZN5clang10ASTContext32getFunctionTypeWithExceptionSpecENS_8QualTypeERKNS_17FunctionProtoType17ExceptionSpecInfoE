<dec f='llvm/clang/include/clang/AST/ASTContext.h' l='1178' type='clang::QualType clang::ASTContext::getFunctionTypeWithExceptionSpec(clang::QualType Orig, const FunctionProtoType::ExceptionSpecInfo &amp; ESI)'/>
<doc f='llvm/clang/include/clang/AST/ASTContext.h' l='1174'>/// Get a function type and produce the equivalent function type with the
  /// specified exception specification. Type sugar that can be present on a
  /// declaration of a function with an exception specification is permitted
  /// and preserved. Other type sugar (for instance, typedefs) is not.</doc>
<def f='llvm/clang/lib/AST/ASTContext.cpp' l='3036' ll='3062' type='clang::QualType clang::ASTContext::getFunctionTypeWithExceptionSpec(clang::QualType Orig, const FunctionProtoType::ExceptionSpecInfo &amp; ESI)'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='3041' u='c' c='_ZN5clang10ASTContext32getFunctionTypeWithExceptionSpecENS_8QualTypeERKNS_17FunctionProtoType17ExceptionSpecInfoE'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='3046' u='c' c='_ZN5clang10ASTContext32getFunctionTypeWithExceptionSpecENS_8QualTypeERKNS_17FunctionProtoType17ExceptionSpecInfoE'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='3053' u='c' c='_ZN5clang10ASTContext32getFunctionTypeWithExceptionSpecENS_8QualTypeERKNS_17FunctionProtoType17ExceptionSpecInfoE'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='3054' u='c' c='_ZN5clang10ASTContext32getFunctionTypeWithExceptionSpecENS_8QualTypeERKNS_17FunctionProtoType17ExceptionSpecInfoE'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='3068' u='c' c='_ZN5clang10ASTContext40hasSameFunctionTypeIgnoringExceptionSpecENS_8QualTypeES1_'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='3069' u='c' c='_ZN5clang10ASTContext40hasSameFunctionTypeIgnoringExceptionSpecENS_8QualTypeES1_'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='3100' u='c' c='_ZN5clang10ASTContext19adjustExceptionSpecEPNS_12FunctionDeclERKNS_17FunctionProtoType17ExceptionSpecInfoEb'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='3111' u='c' c='_ZN5clang10ASTContext19adjustExceptionSpecEPNS_12FunctionDeclERKNS_17FunctionProtoType17ExceptionSpecInfoEb'/>
<doc f='llvm/clang/lib/AST/ASTContext.cpp' l='3032'>/// Get a function type and produce the equivalent function type with the
/// specified exception specification. Type sugar that can be present on a
/// declaration of a function with an exception specification is permitted
/// and preserved. Other type sugar (for instance, typedefs) is not.</doc>
<use f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='5123' u='c' c='_ZN5clang7CodeGen15CodeGenFunction8EmitCallENS_8QualTypeERKNS0_8CGCalleeEPKNS_8CallExprENS0_15ReturnValueSlotEPN4llvm5ValueE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.cpp' l='893' u='c' c='_ZN5clang7CodeGen15CodeGenFunction13StartFunctionENS_10GlobalDeclENS_8QualTypeEPN4llvm8FunctionERKNS0_14CGFunctionInfoERKNS0_15FunctionArgListENS_14SourceLocationESD_'/>
<use f='llvm/clang/lib/CodeGen/ItaniumCXXABI.cpp' l='3995' u='c' c='_ZL17extractPBaseFlagsRN5clang10ASTContextERNS_8QualTypeE'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='1583' u='c' c='_ZN5clang4Sema20IsFunctionConversionENS_8QualTypeES1_RS1_'/>
<use f='llvm/clang/lib/Sema/SemaType.cpp' l='7507' u='c' c='_ZL22handleFunctionTypeAttrRN12_GLOBAL__N_119TypeProcessingStateERN5clang10ParsedAttrERNS2_8QualTypeE'/>
