<def f='llvm/clang/include/clang/Analysis/Analyses/CalledOnceCheck.h' l='88' ll='91' type='void clang::CalledOnceCheckHandler::handleNeverCalled(const clang::ParmVarDecl * Parameter, const clang::Stmt * Where, clang::NeverCalledReason Reason, bool IsCalledDirectly, bool IsCompletionHandler)'/>
<use f='llvm/clang/lib/Analysis/CalledOnceCheck.cpp' l='897' u='c' c='_ZN12_GLOBAL__N_117CalledOnceChecker30findAndReportNotCalledBranchesEPKN5clang8CFGBlockEjb'/>
<doc f='llvm/clang/include/clang/Analysis/Analyses/CalledOnceCheck.h' l='77'>/// Called when parameter is not called on one of the paths.
  /// Usually we try to find a statement that is the least common ancestor of
  /// the path containing the call and not containing the call.  This helps us
  /// to pinpoint a bad path for the user.
  /// \param Parameter -- parameter that should be called once.
  /// \param Where -- the least common ancestor statement.
  /// \param Reason -- a reason describing the path without a call.
  /// \param IsCalledDirectly -- true, if parameter actually gets called on
  /// the other path.  It is opposed to be used in some other way (added to some
  /// collection, passed as a parameter, etc.).
  /// \param IsCompletionHandler -- true, if parameter is a completion handler.</doc>
<ovr f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1652' c='_ZN12_GLOBAL__N_123CalledOnceCheckReporter17handleNeverCalledEPKN5clang11ParmVarDeclEPKNS1_4StmtENS1_17NeverCalledReasonEbb'/>
