<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='141' type='llvm::Instruction * llvm::InstCombinerImpl::foldItoFPtoI(llvm::CastInst &amp; FI)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='1861' ll='1899' type='llvm::Instruction * llvm::InstCombinerImpl::foldItoFPtoI(llvm::CastInst &amp; FI)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='1902' u='c' c='_ZN4llvm16InstCombinerImpl11visitFPToUIERNS_10FPToUIInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='1909' u='c' c='_ZN4llvm16InstCombinerImpl11visitFPToSIERNS_10FPToSIInstE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='1857'>/// fpto{s/u}i({u/s}itofp(X)) --&gt; X or zext(X) or sext(X) or trunc(X)
/// This is safe if the intermediate type has enough bits in its mantissa to
/// accurately represent all values of X.  For example, this won&apos;t work with
/// i64 -&gt; float -&gt; i64.</doc>
