<dec f='llvm/lldb/include/lldb/Host/MainLoop.h' l='58' type='lldb_private::MainLoop::SignalHandleUP lldb_private::MainLoop::RegisterSignal(int signo, const lldb_private::MainLoopBase::Callback &amp; callback, lldb_private::Status &amp; error)'/>
<def f='llvm/lldb/source/Host/common/MainLoop.cpp' l='299' ll='345' type='MainLoop::SignalHandleUP lldb_private::MainLoop::RegisterSignal(int signo, const lldb_private::MainLoopBase::Callback &amp; callback, lldb_private::Status &amp; error)'/>
<doc f='llvm/lldb/source/Host/common/MainLoop.cpp' l='297'>// We shall block the signal, then install the signal handler. The signal will
// be unblocked in the Run() function to check for signal delivery.</doc>
<doc f='llvm/lldb/include/lldb/Host/MainLoop.h' l='51'>// Listening for signals from multiple MainLoop instances is perfectly safe
  // as long as they don&apos;t try to listen for the same signal. The callback
  // function is invoked when the control returns to the Run() function, not
  // when the hander is executed. This mean that you can treat the callback as
  // a normal function and perform things which would not be safe in a signal
  // handler. However, since the callback is not invoked synchronously, you
  // cannot use this mechanism to handle SIGSEGV and the like.</doc>
<use f='llvm/lldb/source/Plugins/Process/Linux/NativeProcessLinux.cpp' l='298' u='c' c='_ZN12lldb_private13process_linux18NativeProcessLinuxC1EiiRNS_21NativeProcessProtocol14NativeDelegateERKNS_8ArchSpecERNS_8MainLoopEN4llvm8ArrayRefIiEE'/>
<use f='llvm/lldb/tools/lldb-server/lldb-gdbserver.cpp' l='384' u='c' c='_Z14main_gdbserveriPPc'/>
<use f='llvm/lldb/unittests/Host/MainLoopTest.cpp' l='125' u='c' c='_ZN24MainLoopTest_Signal_Test8TestBodyEv'/>
<use f='llvm/lldb/unittests/Host/MainLoopTest.cpp' l='143' u='c' c='_ZN35MainLoopTest_UnmonitoredSignal_Test8TestBodyEv'/>
