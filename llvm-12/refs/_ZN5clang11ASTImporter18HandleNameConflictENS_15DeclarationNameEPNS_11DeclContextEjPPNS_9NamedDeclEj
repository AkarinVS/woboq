<dec f='llvm/clang/include/clang/AST/ASTImporter.h' l='546' type='Expected&lt;clang::DeclarationName&gt; clang::ASTImporter::HandleNameConflict(clang::DeclarationName Name, clang::DeclContext * DC, unsigned int IDNS, clang::NamedDecl ** Decls, unsigned int NumDecls)'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2346' u='c' c='_ZN5clang15ASTNodeImporter18VisitNamespaceDeclEPNS_13NamespaceDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2480' u='c' c='_ZN5clang15ASTNodeImporter20VisitTypedefNameDeclEPNS_15TypedefNameDeclEb'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2564' u='c' c='_ZN5clang15ASTNodeImporter26VisitTypeAliasTemplateDeclEPNS_21TypeAliasTemplateDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2683' u='c' c='_ZN5clang15ASTNodeImporter13VisitEnumDeclEPNS_8EnumDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2819' u='c' c='_ZN5clang15ASTNodeImporter15VisitRecordDeclEPNS_10RecordDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2992' u='c' c='_ZN5clang15ASTNodeImporter21VisitEnumConstantDeclEPNS_16EnumConstantDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='3275' u='c' c='_ZN5clang15ASTNodeImporter17VisitFunctionDeclEPNS_12FunctionDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='3991' u='c' c='_ZN5clang15ASTNodeImporter12VisitVarDeclEPNS_7VarDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='5387' u='c' c='_ZN5clang15ASTNodeImporter22VisitClassTemplateDeclEPNS_17ClassTemplateDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='5675' u='c' c='_ZN5clang15ASTNodeImporter20VisitVarTemplateDeclEPNS_15VarTemplateDeclE'/>
<def f='llvm/clang/lib/AST/ASTImporter.cpp' l='9233' ll='9244' type='Expected&lt;clang::DeclarationName&gt; clang::ASTImporter::HandleNameConflict(clang::DeclarationName Name, clang::DeclContext * DC, unsigned int IDNS, clang::NamedDecl ** Decls, unsigned int NumDecls)'/>
<doc f='llvm/clang/include/clang/AST/ASTImporter.h' l='518'>/// Cope with a name conflict when importing a declaration into the
    /// given context.
    ///
    /// This routine is invoked whenever there is a name conflict while
    /// importing a declaration. The returned name will become the name of the
    /// imported declaration. By default, the returned name is the same as the
    /// original name, leaving the conflict unresolve such that name lookup
    /// for this name is likely to find an ambiguity later.
    ///
    /// Subclasses may override this routine to resolve the conflict, e.g., by
    /// renaming the declaration being imported.
    ///
    /// \param Name the name of the declaration being imported, which conflicts
    /// with other declarations.
    ///
    /// \param DC the declaration context (in the &quot;to&quot; AST context) in which
    /// the name is being imported.
    ///
    /// \param IDNS the identifier namespace in which the name will be found.
    ///
    /// \param Decls the set of declarations with the same name as the
    /// declaration being imported.
    ///
    /// \param NumDecls the number of conflicting declarations in \p Decls.
    ///
    /// \returns the name that the newly-imported declaration should have. Or
    /// an error if we can&apos;t handle the name conflict.</doc>
