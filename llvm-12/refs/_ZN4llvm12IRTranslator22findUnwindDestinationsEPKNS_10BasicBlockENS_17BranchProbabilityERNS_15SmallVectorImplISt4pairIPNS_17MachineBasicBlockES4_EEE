<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h' l='271' type='bool llvm::IRTranslator::findUnwindDestinations(const llvm::BasicBlock * EHPadBB, llvm::BranchProbability Prob, SmallVectorImpl&lt;std::pair&lt;MachineBasicBlock *, BranchProbability&gt; &gt; &amp; UnwindDests)'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='2361' ll='2415' type='bool llvm::IRTranslator::findUnwindDestinations(const llvm::BasicBlock * EHPadBB, llvm::BranchProbability Prob, SmallVectorImpl&lt;std::pair&lt;MachineBasicBlock *, BranchProbability&gt; &gt; &amp; UnwindDests)'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='2463' u='c' c='_ZN4llvm12IRTranslator15translateInvokeERKNS_4UserERNS_16MachineIRBuilderE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h' l='263'>/// When an invoke or a cleanupret unwinds to the next EH pad, there are
  /// many places it could ultimately go. In the IR, we have a single unwind
  /// destination, but in the machine CFG, we enumerate all the possible blocks.
  /// This function skips over imaginary basic blocks that hold catchswitch
  /// instructions, and finds all the &quot;real&quot; machine
  /// basic block destinations. As those destinations may not be successors of
  /// EHPadBB, here we also calculate the edge probability to those
  /// destinations. The passed-in Prob is the edge probability to EHPadBB.</doc>
