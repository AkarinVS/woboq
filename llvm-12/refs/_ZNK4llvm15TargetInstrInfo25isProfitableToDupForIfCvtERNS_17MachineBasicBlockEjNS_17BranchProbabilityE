<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='808' ll='812' type='bool llvm::TargetInstrInfo::isProfitableToDupForIfCvt(llvm::MachineBasicBlock &amp; MBB, unsigned int NumCycles, llvm::BranchProbability Probability) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='802'>/// Return true if it&apos;s profitable for if-converter to duplicate instructions
  /// of specified accumulated instruction latencies in the specified MBB to
  /// enable if-conversion.
  /// The probability of the instructions being executed is given by
  /// Probability, and Confidence is a measure of our confidence that it
  /// will be properly predicted.</doc>
<use f='llvm/llvm/lib/CodeGen/IfConversion.cpp' l='659' u='c' c='_ZNK12_GLOBAL__N_111IfConverter11ValidSimpleERNS0_6BBInfoERjN4llvm17BranchProbabilityE'/>
<use f='llvm/llvm/lib/CodeGen/IfConversion.cpp' l='700' u='c' c='_ZNK12_GLOBAL__N_111IfConverter13ValidTriangleERNS0_6BBInfoES2_bRjN4llvm17BranchProbabilityE'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/R600InstrInfo.cpp' l='896' c='_ZNK4llvm13R600InstrInfo25isProfitableToDupForIfCvtERNS_17MachineBasicBlockEjNS_17BranchProbabilityE'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='275' c='_ZNK4llvm16ARMBaseInstrInfo25isProfitableToDupForIfCvtERNS_17MachineBasicBlockEjNS_17BranchProbabilityE'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='788' c='_ZNK4llvm16HexagonInstrInfo25isProfitableToDupForIfCvtERNS_17MachineBasicBlockEjNS_17BranchProbabilityE'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='493' c='_ZNK4llvm12PPCInstrInfo25isProfitableToDupForIfCvtERNS_17MachineBasicBlockEjNS_17BranchProbabilityE'/>
<ovr f='llvm/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp' l='713' c='_ZNK4llvm16SystemZInstrInfo25isProfitableToDupForIfCvtERNS_17MachineBasicBlockEjNS_17BranchProbabilityE'/>
