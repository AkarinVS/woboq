<dec f='llvm/polly/include/polly/CodeGen/LoopGenerators.h' l='65' type='llvm::Value * polly::createLoop(llvm::Value * LowerBound, llvm::Value * UpperBound, llvm::Value * Stride, polly::PollyIRBuilder &amp; Builder, llvm::LoopInfo &amp; LI, llvm::DominatorTree &amp; DT, llvm::BasicBlock *&amp; ExitBlock, ICmpInst::Predicate Predicate, polly::ScopAnnotator * Annotator = __null, bool Parallel = false, bool UseGuard = true, bool LoopVectDisabled = false)'/>
<use f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='557' u='c' c='_ZN14IslNodeBuilder19createForSequentialEN3isl12noexceptions8ast_nodeEb'/>
<doc f='llvm/polly/include/polly/CodeGen/LoopGenerators.h' l='38'>/// Create a scalar do/for-style loop.
///
/// @param LowerBound         The starting value of the induction variable.
/// @param UpperBound         The upper bound of the induction variable.
/// @param Stride             The value by which the induction variable
///                           is incremented.
///
/// @param Builder            The builder used to create the loop.
/// @param P                  A pointer to the pass that uses this function.
///                           It is used to update analysis information.
/// @param LI                 The loop info for the current function
/// @param DT                 The dominator tree we need to update
/// @param ExitBlock          The block the loop will exit to.
/// @param Predicate          The predicate used to generate the upper loop
///                           bound.
/// @param Annotator          This function can (optionally) take
///                           a ScopAnnotator which
///                           annotates loops and alias information in the SCoP.
/// @param Parallel           If this loop should be marked parallel in
///                           the Annotator.
/// @param UseGuard           Create a guard in front of the header to check if
///                           the loop is executed at least once, otherwise just
///                           assume it.
/// @param LoopVectDisabled   If the Loop vectorizer should be disabled for this
///                           loop.
///
/// @return Value*    The newly created induction variable for this loop.</doc>
<def f='llvm/polly/lib/CodeGen/LoopGenerators.cpp' l='82' ll='173' type='llvm::Value * polly::createLoop(llvm::Value * LB, llvm::Value * UB, llvm::Value * Stride, polly::PollyIRBuilder &amp; Builder, llvm::LoopInfo &amp; LI, llvm::DominatorTree &amp; DT, llvm::BasicBlock *&amp; ExitBB, ICmpInst::Predicate Predicate, polly::ScopAnnotator * Annotator = __null, bool Parallel = false, bool UseGuard = true, bool LoopVectDisabled = false)'/>
<doc f='llvm/polly/lib/CodeGen/LoopGenerators.cpp' l='58'>// We generate a loop of either of the following structures:
//
//              BeforeBB                      BeforeBB
//                 |                             |
//                 v                             v
//              GuardBB                      PreHeaderBB
//              /      |                         |   _____
//     __  PreHeaderBB  |                        v  \/    |
//    /  \    /         |                     HeaderBB  latch
// latch  HeaderBB      |                        |\       |
//    \  /    \         /                        | \------/
//     &lt;       \       /                         |
//              \     /                          v
//              ExitBB                         ExitBB
//
// depending on whether or not we know that it is executed at least once. If
// not, GuardBB checks if the loop is executed at least once. If this is the
// case we branch to PreHeaderBB and subsequently to the HeaderBB, which
// contains the loop iv &apos;polly.indvar&apos;, the incremented loop iv
// &apos;polly.indvar_next&apos; as well as the condition to check if we execute another
// iteration of the loop. After the loop has finished, we branch to ExitBB.
// We expect the type of UB, LB, UB+Stride to be large enough for values that
// UB may take throughout the execution of the loop, including the computation
// of indvar + Stride before the final abort.</doc>
<use f='llvm/polly/lib/CodeGen/LoopGeneratorsGOMP.cpp' l='157' u='c' c='_ZN5polly25ParallelLoopGeneratorGOMP11createSubFnEPN4llvm5ValueEPNS1_10AllocaInstENS1_9SetVectorIS3_St6vectorIS3_SaIS3_EENS1_8DenseSetIS3_NS1_12DenseM14166442'/>
<use f='llvm/polly/lib/CodeGen/LoopGeneratorsKMP.cpp' l='293' u='c' c='_ZN5polly24ParallelLoopGeneratorKMP11createSubFnEPN4llvm5ValueEPNS1_10AllocaInstENS1_9SetVectorIS3_St6vectorIS3_SaIS3_EENS1_8DenseSetIS3_NS1_12DenseMa11000764'/>
