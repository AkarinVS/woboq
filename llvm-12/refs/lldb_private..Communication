<use f='llvm/lldb/include/lldb/lldb-forward.h' l='303'/>
<use f='llvm/lldb/include/lldb/API/SBCommunication.h' l='78'/>
<inh f='llvm/lldb/include/lldb/Utility/Broadcaster.h' l='242' c='lldb_private::Broadcaster'/>
<def f='llvm/lldb/include/lldb/Core/Communication.h' l='84' ll='364'/>
<use f='llvm/lldb/include/lldb/Core/Communication.h' l='362' c='_ZN12lldb_private13CommunicationC1ERKS0_'/>
<use f='llvm/lldb/include/lldb/Core/Communication.h' l='363' c='_ZN12lldb_private13CommunicationaSERKS0_'/>
<use f='llvm/lldb/include/lldb/Core/Communication.h' l='363' c='_ZN12lldb_private13CommunicationaSERKS0_'/>
<use f='llvm/lldb/include/lldb/Target/Process.h' l='2800'/>
<size>264</size>
<doc f='llvm/lldb/include/lldb/Core/Communication.h' l='33'>/// \class Communication Communication.h &quot;lldb/Core/Communication.h&quot; An
/// abstract communications class.
///
/// Communication is an class that handles data communication between two data
/// sources. It uses a Connection class to do the real communication. This
/// approach has a couple of advantages: it allows a single instance of this
/// class to be used even though its connection can change. Connections could
/// negotiate for different connections based on abilities like starting with
/// Bluetooth and negotiating up to WiFi if available. It also allows this
/// class to be subclassed by any interfaces that don&apos;t want to give bytes but
/// want to validate and give out packets. This can be done by overriding:
///
/// AppendBytesToCache (const uint8_t *src, size_t src_len, bool broadcast);
///
/// Communication inherits from Broadcaster which means it can be used in
/// conjunction with Listener to wait for multiple broadcaster objects and
/// multiple events from each of those objects. Communication defines a set of
/// pre-defined event bits (see enumerations definitions that start with
/// &quot;eBroadcastBit&quot; below).
///
/// There are two modes in which communications can occur:
///     \li single-threaded
///     \li multi-threaded
///
/// In single-threaded mode, all reads and writes happen synchronously on the
/// calling thread.
///
/// In multi-threaded mode, a read thread is spawned that continually reads
/// data and caches any received bytes. To start the read thread clients call:
///
///     bool Communication::StartReadThread (Status *);
///
/// If true is returned a read thread has been spawned that will continually
/// execute a call to the pure virtual DoRead function:
///
///     size_t Communication::ReadFromConnection (void *, size_t, uint32_t);
///
/// When bytes are received the data gets cached in \a m_bytes and this class
/// will broadcast a \b eBroadcastBitReadThreadGotBytes event. Clients that
/// want packet based communication should override AppendBytesToCache. The
/// subclasses can choose to call the built in AppendBytesToCache with the \a
/// broadcast parameter set to false. This will cause the \b
/// eBroadcastBitReadThreadGotBytes event not get broadcast, and then the
/// subclass can post a \b eBroadcastBitPacketAvailable event when a full
/// packet of data has been received.
///
/// If the connection is disconnected a \b eBroadcastBitDisconnected event
/// gets broadcast. If the read thread exits a \b
/// eBroadcastBitReadThreadDidExit event will be broadcast. Clients can also
/// post a \b eBroadcastBitReadThreadShouldExit event to this object which
/// will cause the read thread to exit.</doc>
<fun r='_ZN12lldb_private13CommunicationC1EPKc'/>
<fun r='_ZN12lldb_private13CommunicationD1Ev'/>
<fun r='_ZN12lldb_private13Communication5ClearEv'/>
<fun r='_ZN12lldb_private13Communication7ConnectEPKcPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication10DisconnectEPNS_6StatusE'/>
<fun r='_ZNK12lldb_private13Communication11IsConnectedEv'/>
<fun r='_ZNK12lldb_private13Communication13HasConnectionEv'/>
<fun r='_ZN12lldb_private13Communication13GetConnectionEv'/>
<fun r='_ZN12lldb_private13Communication4ReadEPvmRKNS_7TimeoutISt5ratioILl1ELl1000000EEEERN4lldb16ConnectionStatusEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication5WriteEPKvmRN4lldb16ConnectionStatusEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication13SetConnectionESt10unique_ptrINS_10ConnectionESt14default_deleteIS2_EE'/>
<fun r='_ZN12lldb_private13Communication15StartReadThreadEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication14StopReadThreadEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication14JoinReadThreadEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication19ReadThreadIsRunningEv'/>
<fun r='_ZN12lldb_private13Communication10ReadThreadEPv'/>
<fun r='_ZN12lldb_private13Communication34SetReadThreadBytesReceivedCallbackEPFvPvPKvmES1_'/>
<fun r='_ZN12lldb_private13Communication25SynchronizeWithReadThreadEv'/>
<fun r='_ZN12lldb_private13Communication24ConnectionStatusAsStringB5cxx11EN4lldb16ConnectionStatusE'/>
<fun r='_ZNK12lldb_private13Communication13GetCloseOnEOFEv'/>
<fun r='_ZN12lldb_private13Communication13SetCloseOnEOFEb'/>
<fun r='_ZN12lldb_private13Communication25GetStaticBroadcasterClassEv'/>
<fun r='_ZNK12lldb_private13Communication19GetBroadcasterClassEv'/>
<mbr r='lldb_private::Communication::m_connection_sp' o='384' t='lldb::ConnectionSP'/>
<mbr r='lldb_private::Communication::m_read_thread' o='512' t='lldb_private::HostThread'/>
<mbr r='lldb_private::Communication::m_read_thread_enabled' o='640' t='std::atomic&lt;bool&gt;'/>
<mbr r='lldb_private::Communication::m_read_thread_did_exit' o='648' t='std::atomic&lt;bool&gt;'/>
<mbr r='lldb_private::Communication::m_bytes' o='704' t='std::string'/>
<mbr r='lldb_private::Communication::m_bytes_mutex' o='960' t='std::recursive_mutex'/>
<mbr r='lldb_private::Communication::m_write_mutex' o='1280' t='std::mutex'/>
<mbr r='lldb_private::Communication::m_synchronize_mutex' o='1600' t='std::mutex'/>
<mbr r='lldb_private::Communication::m_callback' o='1920' t='lldb_private::Communication::ReadThreadBytesReceived'/>
<mbr r='lldb_private::Communication::m_callback_baton' o='1984' t='void *'/>
<mbr r='lldb_private::Communication::m_close_on_eof' o='2048' t='bool'/>
<fun r='_ZN12lldb_private13Communication18ReadFromConnectionEPvmRKNS_7TimeoutISt5ratioILl1ELl1000000EEEERN4lldb16ConnectionStatusEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication18AppendBytesToCacheEPKhmbN4lldb16ConnectionStatusE'/>
<fun r='_ZN12lldb_private13Communication14GetCachedBytesEPvm'/>
<fun r='_ZN12lldb_private13CommunicationC1ERKS0_'/>
<fun r='_ZN12lldb_private13CommunicationaSERKS0_'/>
<use f='llvm/lldb/include/lldb/Interpreter/ScriptInterpreter.h' l='62'/>
<size>264</size>
<use f='llvm/lldb/source/API/SBCommunication.cpp' l='24' c='_ZN4lldb15SBCommunicationC1EPKc'/>
<size>264</size>
<use f='llvm/lldb/source/Core/Communication.cpp' l='308' c='_ZN12lldb_private13Communication10ReadThreadEPv'/>
<use f='llvm/lldb/source/Core/Communication.cpp' l='308' c='_ZN12lldb_private13Communication10ReadThreadEPv'/>
<size>264</size>
<fun r='_ZN12lldb_private13Communication25GetStaticBroadcasterClassEv'/>
<fun r='_ZN12lldb_private13CommunicationC1EPKc'/>
<fun r='_ZN12lldb_private13CommunicationD1Ev'/>
<fun r='_ZN12lldb_private13Communication5ClearEv'/>
<fun r='_ZN12lldb_private13Communication7ConnectEPKcPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication10DisconnectEPNS_6StatusE'/>
<fun r='_ZNK12lldb_private13Communication11IsConnectedEv'/>
<fun r='_ZNK12lldb_private13Communication13HasConnectionEv'/>
<fun r='_ZN12lldb_private13Communication4ReadEPvmRKNS_7TimeoutISt5ratioILl1ELl1000000EEEERN4lldb16ConnectionStatusEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication5WriteEPKvmRN4lldb16ConnectionStatusEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication15StartReadThreadEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication14StopReadThreadEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication14JoinReadThreadEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication14GetCachedBytesEPvm'/>
<fun r='_ZN12lldb_private13Communication18AppendBytesToCacheEPKhmbN4lldb16ConnectionStatusE'/>
<fun r='_ZN12lldb_private13Communication18ReadFromConnectionEPvmRKNS_7TimeoutISt5ratioILl1ELl1000000EEEERN4lldb16ConnectionStatusEPNS_6StatusE'/>
<fun r='_ZN12lldb_private13Communication19ReadThreadIsRunningEv'/>
<fun r='_ZN12lldb_private13Communication10ReadThreadEPv'/>
<fun r='_ZN12lldb_private13Communication34SetReadThreadBytesReceivedCallbackEPFvPvPKvmES1_'/>
<fun r='_ZN12lldb_private13Communication25SynchronizeWithReadThreadEv'/>
<fun r='_ZN12lldb_private13Communication13SetConnectionESt10unique_ptrINS_10ConnectionESt14default_deleteIS2_EE'/>
<fun r='_ZN12lldb_private13Communication24ConnectionStatusAsStringB5cxx11EN4lldb16ConnectionStatusE'/>
<ovr f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunication.h' l='56' c='lldb_private::process_gdb_remote::GDBRemoteCommunication'/>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunication.h' l='56'/>
<size>264</size>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunication.cpp' l='64' c='_ZN12lldb_private18process_gdb_remote22GDBRemoteCommunicationC1EPKcS3_'/>
<size>264</size>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunicationServerLLGS.h' l='92'/>
<size>264</size>
<use f='llvm/lldb/unittests/Core/CommunicationTest.cpp' l='24' c='_ZN46CommunicationTest_SynchronizeWhileClosing_Test8TestBodyEv'/>
<size>264</size>
