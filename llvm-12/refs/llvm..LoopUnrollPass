<inh f='llvm/llvm/include/llvm/IR/PassManager.h' l='374' c='llvm::PassInfoMixin'/>
<def f='llvm/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h' l='133' ll='143'/>
<use f='llvm/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h' l='133'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1321' c='_ZN4llvm11PassBuilder31buildModuleOptimizationPipelineENS0_17OptimizationLevelEb'/>
<use f='llvm/llvm/lib/Passes/PassRegistry.def' l='338' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementE'/>
<use f='llvm/llvm/lib/Passes/PassRegistry.def' l='338' c='_ZN4llvm11PassBuilder14parseCGSCCPassERNS_11PassManagerINS_13LazyCallGraph3SCCENS_15AnalysisManagerIS3_JRS2_EEEJS5_RNS_17CGSCCUpdateResultEEEERKNS0_15PipelineElementE'/>
<use f='llvm/llvm/lib/Passes/PassRegistry.def' l='338' c='_ZN4llvm11PassBuilder17parseFunctionPassERNS_11PassManagerINS_8FunctionENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementE'/>
<size>28</size>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h' l='130'>/// Loop unroll pass that will support both full and partial unrolling.
/// It is a function pass to have access to function and module analyses.
/// It will also put loops into canonical form (simplified and LCSSA).</doc>
<mbr r='llvm::LoopUnrollPass::UnrollOpts' o='0' t='llvm::LoopUnrollOptions'/>
<fun r='_ZN4llvm14LoopUnrollPassC1ENS_17LoopUnrollOptionsE'/>
<fun r='_ZN4llvm14LoopUnrollPass3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
