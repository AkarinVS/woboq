<dec f='llvm/lldb/include/lldb/Core/Mangled.h' l='259' type='bool lldb_private::Mangled::DemangleWithRichManglingInfo(lldb_private::RichManglingContext &amp; context, lldb_private::Mangled::SkipMangledNameFn * skip_mangled_name)'/>
<doc f='llvm/lldb/include/lldb/Core/Mangled.h' l='237'>/// Trigger explicit demangling to obtain rich mangling information. This is
  /// optimized for batch processing while populating a name index. To get the
  /// pure demangled name string for a single entity, use GetDemangledName()
  /// instead.
  ///
  /// For names that match the Itanium mangling scheme, this uses LLVM&apos;s
  /// ItaniumPartialDemangler. All other names fall back to LLDB&apos;s builtin
  /// parser currently.
  ///
  /// This function is thread-safe when used with different \a context
  /// instances in different threads.
  ///
  /// \param[in] context
  ///     The context for this function. A single instance can be stack-
  ///     allocated in the caller&apos;s frame and used for multiple calls.
  ///
  /// \param[in] skip_mangled_name
  ///     A filtering function for skipping entities based on name and mangling
  ///     scheme. This can be null if unused.
  ///
  /// \return
  ///     True on success, false otherwise.</doc>
<def f='llvm/lldb/source/Core/Mangled.cpp' l='227' ll='284' type='bool lldb_private::Mangled::DemangleWithRichManglingInfo(lldb_private::RichManglingContext &amp; context, lldb_private::Mangled::SkipMangledNameFn * skip_mangled_name)'/>
<doc f='llvm/lldb/source/Core/Mangled.cpp' l='225'>// Explicit demangling for scheduled requests during batch processing. This
// makes use of ItaniumPartialDemangler&apos;s rich demangle info</doc>
<use f='llvm/lldb/source/Symbol/Symtab.cpp' l='294' u='c' c='_ZN12lldb_private6Symtab15InitNameIndexesEv'/>
