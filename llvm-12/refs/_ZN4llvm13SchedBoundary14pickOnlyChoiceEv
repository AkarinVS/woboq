<dec f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='789' type='llvm::SUnit * llvm::SchedBoundary::pickOnlyChoice()'/>
<def f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='2524' ll='2552' type='llvm::SUnit * llvm::SchedBoundary::pickOnlyChoice()'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3279' u='c' c='_ZN4llvm16GenericScheduler21pickNodeBidirectionalERb'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3284' u='c' c='_ZN4llvm16GenericScheduler21pickNodeBidirectionalERb'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3364' u='c' c='_ZN4llvm16GenericScheduler8pickNodeERb'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3375' u='c' c='_ZN4llvm16GenericScheduler8pickNodeERb'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3569' u='c' c='_ZN4llvm20PostGenericScheduler8pickNodeERb'/>
<doc f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='2521'>/// If this queue only has one ready candidate, return it. As a side effect,
/// defer any nodes that now hit a hazard, and advance the cycle until at least
/// one node is ready. If multiple instructions are ready, return NULL.</doc>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='786'>/// Call this before applying any other heuristics to the Available queue.
  /// Updates the Available/Pending Q&apos;s if necessary and returns the single
  /// available instruction, or NULL if there are multiple candidates.</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp' l='170' u='c' c='_ZN4llvm28GCNMaxOccupancySchedStrategy21pickNodeBidirectionalERb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp' l='174' u='c' c='_ZN4llvm28GCNMaxOccupancySchedStrategy21pickNodeBidirectionalERb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp' l='253' u='c' c='_ZN4llvm28GCNMaxOccupancySchedStrategy8pickNodeERb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp' l='263' u='c' c='_ZN4llvm28GCNMaxOccupancySchedStrategy8pickNodeERb'/>
