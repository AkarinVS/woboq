<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='582' type='void llvm::InnerLoopVectorizer::vectorizeMemoryInstruction(llvm::Instruction * Instr, llvm::VPTransformState &amp; State, llvm::VPValue * Def, llvm::VPValue * Addr, llvm::VPValue * StoredValue, llvm::VPValue * BlockInMask)'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2730' ll='2867' type='void llvm::InnerLoopVectorizer::vectorizeMemoryInstruction(llvm::Instruction * Instr, llvm::VPTransformState &amp; State, llvm::VPValue * Def, llvm::VPValue * Addr, llvm::VPValue * StoredValue, llvm::VPValue * BlockInMask)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='9159' u='c' c='_ZN4llvm30VPWidenMemoryInstructionRecipe7executeERNS_16VPTransformStateE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='578'>/// Vectorize Load and Store instructions with the base address given in \p
  /// Addr, optionally masking the vector operations if \p BlockInMask is
  /// non-null. Use \p State to translate given VPValues to IR values in the
  /// vectorized loop.</doc>
