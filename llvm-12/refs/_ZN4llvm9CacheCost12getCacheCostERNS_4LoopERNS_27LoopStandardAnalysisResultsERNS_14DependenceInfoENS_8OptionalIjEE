<dec f='llvm/llvm/include/llvm/Analysis/LoopCacheAnalysis.h' l='195' type='static std::unique_ptr&lt;CacheCost&gt; llvm::CacheCost::getCacheCost(llvm::Loop &amp; Root, llvm::LoopStandardAnalysisResults &amp; AR, llvm::DependenceInfo &amp; DI, Optional&lt;unsigned int&gt; TRT = None)'/>
<def f='llvm/llvm/lib/Analysis/LoopCacheAnalysis.cpp' l='499' ll='517' type='static std::unique_ptr&lt;CacheCost&gt; llvm::CacheCost::getCacheCost(llvm::Loop &amp; Root, llvm::LoopStandardAnalysisResults &amp; AR, llvm::DependenceInfo &amp; DI, Optional&lt;unsigned int&gt; TRT = None)'/>
<use f='llvm/llvm/lib/Analysis/LoopCacheAnalysis.cpp' l='662' u='c' c='_ZN4llvm20LoopCachePrinterPass3runERNS_4LoopERNS_15AnalysisManagerIS1_JRNS_27LoopStandardAnalysisResultsEEEES5_RNS_10LPMUpdaterE'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopCacheAnalysis.h' l='190'>/// Create a CacheCost for the loop nest rooted by \p Root.
  /// The optional parameter \p TRT can be used to specify the max. distance
  /// between array elements accessed in a loop so that the elements are
  /// classified to have temporal reuse.</doc>
