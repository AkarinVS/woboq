<def f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.h' l='444' ll='449' type='bool llvm::(anonymous namespace)::isDef32(const llvm::SDNode &amp; N)'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.h' l='438'>// Any instruction that defines a 32-bit result zeros out the high half of the
// register. Truncate can be lowered to EXTRACT_SUBREG. CopyFromReg may
// be copying from a truncate. But any other 32-bit operation will zero-extend
// up to 64 bits. AssertSext/AssertZext aren&apos;t saying anything about the upper
// 32 bits, they&apos;re probably just qualifying a CopyFromReg.
// FIXME: X86 also checks for CMOV here. Do we need something similar?</doc>
<use f='llvm/build/lib/Target/AArch64/AArch64GenDAGISel.inc' l='159636' u='c' c='_ZNK12_GLOBAL__N_119AArch64DAGToDAGISel18CheckNodePredicateEPN4llvm6SDNodeEj'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp' l='789' u='c' c='_ZN12_GLOBAL__N_119AArch64DAGToDAGISel27SelectArithExtendedRegisterEN4llvm7SDValueERS2_S3_'/>
