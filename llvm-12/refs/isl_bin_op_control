<def f='llvm/polly/lib/External/isl/isl_union_map.c' l='865' ll='871'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='879'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='993' c='gen_bin_op'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1023' c='isl_union_map_subtract'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1354' c='union_map_intersect_domain'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1388' c='isl_union_map_subtract_domain'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1402' c='isl_union_map_subtract_range'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1416' c='union_map_gist_domain'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1442' c='isl_union_map_gist_range'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1453' c='isl_union_map_intersect_range_union_set'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1476' c='isl_union_map_intersect_domain_factor_domain'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1492' c='isl_union_map_intersect_domain_factor_range'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1508' c='isl_union_map_intersect_range_factor_domain'/>
<use f='llvm/polly/lib/External/isl/isl_union_map.c' l='1524' c='isl_union_map_intersect_range_factor_range'/>
<size>32</size>
<doc f='llvm/polly/lib/External/isl/isl_union_map.c' l='848'>/* Data structure that specifies how gen_bin_op should
 * construct results from the inputs.
 *
 * If &quot;subtract&quot; is set, then a map in the first input is copied to the result
 * if there is no corresponding map in the second input.
 * Otherwise, a map in the first input with no corresponding map
 * in the second input is ignored.
 * If &quot;filter&quot; is not NULL, then it specifies which maps in the first
 * input may have a matching map in the second input.
 * In particular, it makes sure that &quot;match_space&quot; can be called
 * on the space of the map.
 * &quot;match_space&quot; specifies how to transform the space of a map
 * in the first input to the space of the corresponding map
 * in the second input.
 * &quot;fn_map&quot; specifies how the matching maps, one from each input,
 * should be combined to form a map in the result.
 */</doc>
