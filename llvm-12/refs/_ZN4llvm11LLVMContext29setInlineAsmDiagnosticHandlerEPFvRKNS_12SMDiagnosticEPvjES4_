<dec f='llvm/llvm/include/llvm/IR/LLVMContext.h' l='169' type='void llvm::LLVMContext::setInlineAsmDiagnosticHandler(llvm::LLVMContext::InlineAsmDiagHandlerTy DiagHandler, void * DiagContext = nullptr)'/>
<doc f='llvm/llvm/include/llvm/IR/LLVMContext.h' l='162'>/// setInlineAsmDiagnosticHandler - This method sets a handler that is invoked
  /// when problems with inline asm are detected by the backend.  The first
  /// argument is a function pointer and the second is a context pointer that
  /// gets passed into the DiagHandler.
  ///
  /// LLVMContext doesn&apos;t take ownership or interpret either of these
  /// pointers.</doc>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='313' u='c' c='_ZN5clang15BackendConsumer21HandleTranslationUnitERNS_10ASTContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='348' u='c' c='_ZN5clang15BackendConsumer21HandleTranslationUnitERNS_10ASTContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='1116' u='c' c='_ZN5clang13CodeGenAction13ExecuteActionEv'/>
<use f='llvm/lldb/source/Expression/IRExecutionUnit.cpp' l='260' u='c' c='_ZN12lldb_private15IRExecutionUnit15GetRunnableInfoERNS_6StatusERmS3_'/>
<def f='llvm/llvm/lib/IR/LLVMContext.cpp' l='108' ll='113' type='void llvm::LLVMContext::setInlineAsmDiagnosticHandler(llvm::LLVMContext::InlineAsmDiagHandlerTy DiagHandler, void * DiagContext = nullptr)'/>
<doc f='llvm/llvm/lib/IR/LLVMContext.cpp' l='104'>//===----------------------------------------------------------------------===//
// Recoverable Backend Errors
//===----------------------------------------------------------------------===//</doc>
<use f='llvm/llvm/tools/llc/llc.cpp' l='369' u='c' c='main'/>
