<dec f='llvm/llvm/include/llvm/Analysis/InlineAdvisor.h' l='264' type='Optional&lt;llvm::InlineCost&gt; llvm::shouldInline(llvm::CallBase &amp; CB, function_ref&lt;llvm::InlineCost (llvm::CallBase &amp;)&gt; GetInlineCost, llvm::OptimizationRemarkEmitter &amp; ORE, bool EnableDeferral = true)'/>
<doc f='llvm/llvm/include/llvm/Analysis/InlineAdvisor.h' l='256'>// Default (manual policy) decision making helper APIs. Shared with the legacy
// pass manager inliner.

/// Return the cost only if the inliner should attempt to inline at the given
/// CallSite. If we return the cost, we will emit an optimisation remark later
/// using that cost, so we won&apos;t do so from this function. Return None if
/// inlining should not be attempted.</doc>
<use f='llvm/llvm/lib/Analysis/InlineAdvisor.cpp' l='105' u='c' c='_ZL22getDefaultInlineAdviceRN4llvm8CallBaseERNS_15AnalysisManagerINS_8FunctionEJEEERKNS_12InlineParamsE'/>
<def f='llvm/llvm/lib/Analysis/InlineAdvisor.cpp' l='322' ll='383' type='Optional&lt;llvm::InlineCost&gt; llvm::shouldInline(llvm::CallBase &amp; CB, function_ref&lt;llvm::InlineCost (llvm::CallBase &amp;)&gt; GetInlineCost, llvm::OptimizationRemarkEmitter &amp; ORE, bool EnableDeferral = true)'/>
<doc f='llvm/llvm/lib/Analysis/InlineAdvisor.cpp' l='318'>/// Return the cost only if the inliner should attempt to inline at the given
/// CallSite. If we return the cost, we will emit an optimisation remark later
/// using that cost, so we won&apos;t do so from this function. Return None if
/// inlining should not be attempted.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/AlwaysInliner.cpp' l='69' u='c' c='_ZN4llvm17AlwaysInlinerPass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='420' u='c' c='_ZL15inlineCallsImplRN4llvm12CallGraphSCCERNS_9CallGraphESt8functionIFRNS_15AssumptionCacheERNS_8FunctionEEEPNS_18ProfileSummaryInfoES4_IFRKNS_17Targe9706474'/>
