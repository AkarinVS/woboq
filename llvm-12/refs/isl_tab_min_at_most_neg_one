<dec f='llvm/polly/lib/External/isl/isl_tab.h' l='306' type='int isl_tab_min_at_most_neg_one(struct isl_tab * tab, struct isl_tab_var * var)'/>
<def f='llvm/polly/lib/External/isl/isl_tab.c' l='1454' ll='1508' type='int isl_tab_min_at_most_neg_one(struct isl_tab * tab, struct isl_tab_var * var)'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='3241' u='c' c='con_is_redundant'/>
<doc f='llvm/polly/lib/External/isl/isl_tab.c' l='1445'>/* Return 1 if &quot;var&quot; can attain values &lt;= -1.
 * Return 0 otherwise.
 *
 * If the variable &quot;var&quot; is supposed to be non-negative (is_nonneg is set),
 * then the sample value of &quot;var&quot; is assumed to be non-negative when the
 * the function is called.  If 1 is returned then the constraint
 * is not redundant and the sample value is made non-negative again before
 * the function returns.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_tab_pip.c' l='2457' u='c' c='best_split'/>
<use f='llvm/polly/lib/External/isl/isl_tab_pip.c' l='2743' u='c' c='tab_detect_nonnegative_parameters'/>
