<dec f='llvm/llvm/include/llvm/LTO/LTOBackend.h' l='68' type='bool llvm::lto::loadReferencedModules(const llvm::Module &amp; M, const llvm::ModuleSummaryIndex &amp; CombinedIndex, FunctionImporter::ImportMapTy &amp; ImportList, MapVector&lt;llvm::StringRef, llvm::BitcodeModule&gt; &amp; ModuleMap, std::vector&lt;std::unique_ptr&lt;llvm::MemoryBuffer&gt; &gt; &amp; OwnedImportsLifetimeManager)'/>
<use f='llvm/clang/lib/CodeGen/BackendUtil.cpp' l='1460' u='c' c='_ZL17runThinLTOBackendRN5clang17DiagnosticsEngineEPN4llvm18ModuleSummaryIndexEPNS2_6ModuleERKNS_19HeaderSearchOptionsERKNS_14CodeGenOptionsERKNS_13Tar13930536'/>
<doc f='llvm/llvm/include/llvm/LTO/LTOBackend.h' l='65'>/// Distributed ThinLTO: load the referenced modules, keeping their buffers
/// alive in the provided OwnedImportLifetimeManager. Returns false if the
/// operation failed.</doc>
<def f='llvm/llvm/lib/LTO/LTOBackend.cpp' l='698' ll='746' type='bool llvm::lto::loadReferencedModules(const llvm::Module &amp; M, const llvm::ModuleSummaryIndex &amp; CombinedIndex, FunctionImporter::ImportMapTy &amp; ImportList, MapVector&lt;llvm::StringRef, llvm::BitcodeModule&gt; &amp; ModuleMap, std::vector&lt;std::unique_ptr&lt;llvm::MemoryBuffer&gt; &gt; &amp; OwnedImportsLifetimeManager)'/>
