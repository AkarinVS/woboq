<def f='llvm/compiler-rt/lib/tsan/rtl/tsan_sync.h' l='111' ll='141'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl.h' l='533'/>
<size>1048632</size>
<doc f='llvm/compiler-rt/lib/tsan/rtl/tsan_sync.h' l='107'>/* MetaMap allows to map arbitrary user pointers onto various descriptors.
   Currently it maps pointers to heap block descriptors and sync var descs.
   It uses 1/2 direct shadow, see tsan_platform.h.
*/</doc>
<fun r='__tsan::MetaMap::MetaMap'/>
<fun r='__tsan::MetaMap::AllocBlock'/>
<fun r='__tsan::MetaMap::FreeBlock'/>
<fun r='__tsan::MetaMap::FreeRange'/>
<fun r='__tsan::MetaMap::ResetRange'/>
<fun r='__tsan::MetaMap::GetBlock'/>
<fun r='__tsan::MetaMap::GetOrCreateAndLock'/>
<fun r='__tsan::MetaMap::GetIfExistsAndLock'/>
<fun r='__tsan::MetaMap::MoveMemory'/>
<fun r='__tsan::MetaMap::OnProcIdle'/>
<smbr r='__tsan::MetaMap::kFlagMask' t='const __sanitizer::u32'/>
<smbr r='__tsan::MetaMap::kFlagBlock' t='const __sanitizer::u32'/>
<smbr r='__tsan::MetaMap::kFlagSync' t='const __sanitizer::u32'/>
<mbr r='__tsan::MetaMap::block_alloc_' o='0' t='__tsan::MetaMap::BlockAlloc'/>
<mbr r='__tsan::MetaMap::sync_alloc_' o='4194496' t='__tsan::MetaMap::SyncAlloc'/>
<mbr r='__tsan::MetaMap::uid_gen_' o='8388992' t='__sanitizer::atomic_uint64_t'/>
<fun r='__tsan::MetaMap::GetAndLock'/>
