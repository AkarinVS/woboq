<dec f='llvm/polly/include/polly/ScopInfo.h' l='92' type='0'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='330' u='r' c='_ZNK5polly13ScopArrayInfo11isArrayKindEv'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='945' u='r' c='_ZNK5polly12MemoryAccess19isOriginalArrayKindEv'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='951' u='r' c='_ZNK5polly12MemoryAccess17isLatestArrayKindEv'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='963' u='r' c='_ZNK5polly12MemoryAccess20isOriginalScalarKindEv'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='969' u='r' c='_ZNK5polly12MemoryAccess18isLatestScalarKindEv'/>
<doc f='llvm/polly/include/polly/ScopInfo.h' l='78'>/// MemoryKind::Array: Models a one or multi-dimensional array
  ///
  /// A memory object that can be described by a multi-dimensional array.
  /// Memory objects of this type are used to model actual multi-dimensional
  /// arrays as they exist in LLVM-IR, but they are also used to describe
  /// other objects:
  ///   - A single data element allocated on the stack using &apos;alloca&apos; is
  ///     modeled as a one-dimensional, single-element array.
  ///   - A single data element allocated as a global variable is modeled as
  ///     one-dimensional, single-element array.
  ///   - Certain multi-dimensional arrays with variable size, which in
  ///     LLVM-IR are commonly expressed as a single-dimensional access with a
  ///     complicated access function, are modeled as multi-dimensional
  ///     memory objects (grep for &quot;delinearization&quot;).</doc>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2318' u='r' c='_ZN5polly11ScopBuilder14addArrayAccessEPNS_8ScopStmtENS_10MemAccInstENS_12MemoryAccess10AccessTypeEPN4llvm5ValueEPNS6_4TypeEbNS6_8ArrayRefIPKNS6_4SCEVEEESF_S8_'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3156' u='r' c='_ZL18findCanonicalArrayRN5polly4ScopERSt12forward_listIPNS_12MemoryAccessESaIS4_EE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3200' u='r' c='_ZN5polly11ScopBuilder27canonicalizeDynamicBasePtrsEv'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3230' u='r' c='_ZN5polly11ScopBuilder20buildAccessRelationsERNS_8ScopStmtE'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='225' u='r' c='_ZL24identifyBasePtrOriginSAIPN5polly4ScopEPN4llvm5ValueE'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='242' u='r' c='_ZN5polly13ScopArrayInfoC1EPN4llvm5ValueEPNS1_4TypeEN3isl12noexceptions3ctxENS1_8ArrayRefIPKNS1_4SCEVEEENS_10MemoryKindERKNS1_10DataLayoutEPNS_4ScopEPKc'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='905' u='r' c='_ZN5polly12MemoryAccessC1EPNS_8ScopStmtENS0_10AccessTypeEN3isl12noexceptions3mapE'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='1881' u='r' c='_ZN5polly4Scop19createScopArrayInfoEPN4llvm4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIjSaIjEE'/>
<use f='llvm/polly/lib/Transform/ForwardOpTree.cpp' l='435' u='r' c='_ZN12_GLOBAL__N_117ForwardOpTreeImpl19makeReadArrayAccessEPN5polly8ScopStmtEPN4llvm8LoadInstEN3isl12noexceptions3mapE'/>
