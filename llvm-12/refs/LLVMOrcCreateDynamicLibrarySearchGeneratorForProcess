<dec f='llvm/llvm/include/llvm-c/Orc.h' l='459' type='LLVMErrorRef LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess(LLVMOrcDefinitionGeneratorRef * Result, char GlobalPrefx, LLVMOrcSymbolPredicate Filter, void * FilterCtx)'/>
<doc f='llvm/llvm/include/llvm-c/Orc.h' l='441'>/**
 * Get a DynamicLibrarySearchGenerator that will reflect process symbols into
 * the JITDylib. On success the resulting generator is owned by the client.
 * Ownership is typically transferred by adding the instance to a JITDylib
 * using LLVMOrcJITDylibAddGenerator,
 *
 * The GlobalPrefix argument specifies the character that appears on the front
 * of linker-mangled symbols for the target platform (e.g. &apos;_&apos; on MachO).
 * If non-null, this character will be stripped from the start of all symbol
 * strings before passing the remaining substring to dlsym.
 *
 * The optional Filter and Ctx arguments can be used to supply a symbol name
 * filter: Only symbols for which the filter returns true will be visible to
 * JIT&apos;d code. If the Filter argument is null then all process symbols will
 * be visible to JIT&apos;d code. Note that the symbol name passed to the Filter
 * function is the full mangled symbol: The client is responsible for stripping
 * the global prefix if present.
 */</doc>
<use f='llvm/llvm/examples/OrcV2Examples/OrcV2CBindingsReflectProcessSymbols/OrcV2CBindingsReflectProcessSymbols.c' l='148' u='c' c='main'/>
<def f='llvm/llvm/lib/ExecutionEngine/Orc/OrcV2CBindings.cpp' l='308' ll='331' type='LLVMErrorRef LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess(LLVMOrcDefinitionGeneratorRef * Result, char GlobalPrefix, LLVMOrcSymbolPredicate Filter, void * FilterCtx)'/>
