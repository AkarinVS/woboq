<dec f='llvm/lldb/include/lldb/Target/Process.h' l='527' type='static bool lldb_private::Process::SetProcessExitStatus(lldb::pid_t pid, bool exited, int signo, int status)'/>
<doc f='llvm/lldb/include/lldb/Target/Process.h' l='516'>/// Static function that can be used with the \b host function
  /// Host::StartMonitoringChildProcess ().
  ///
  /// This function can be used by lldb_private::Process subclasses when they
  /// want to watch for a local process and have its exit status automatically
  /// set when the host child process exits. Subclasses should call
  /// Host::StartMonitoringChildProcess () with:
  ///     callback = Process::SetHostProcessExitStatus
  ///     pid = Process::GetID()
  ///     monitor_signals = false</doc>
<def f='llvm/lldb/source/Target/Process.cpp' l='1054' ll='1080' type='static bool lldb_private::Process::SetProcessExitStatus(lldb::pid_t pid, bool exited, int signo, int exit_status)'/>
<doc f='llvm/lldb/source/Target/Process.cpp' l='1050'>// This static callback can be used to watch for local child processes on the
// current host. The child process exits, the process will be found in the
// global target list (we want to be completely sure that the
// lldb_private::Process doesn&apos;t go away before we can deliver the signal.</doc>
