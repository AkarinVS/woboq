<dec f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='4565' type='llvm::SDValue llvm::TargetLowering::buildUREMEqFold(llvm::EVT SETCCVT, llvm::SDValue REMNode, llvm::SDValue CompTargetNode, ISD::CondCode Cond, llvm::TargetLowering::DAGCombinerInfo &amp; DCI, const llvm::SDLoc &amp; DL) const'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp' l='4300' u='c' c='_ZNK4llvm14TargetLowering13SimplifySetCCENS_3EVTENS_7SDValueES2_NS_3ISD8CondCodeEbRNS0_15DAGCombinerInfoERKNS_5SDLocE'/>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp' l='5368' ll='5382' type='llvm::SDValue llvm::TargetLowering::buildUREMEqFold(llvm::EVT SETCCVT, llvm::SDValue REMNode, llvm::SDValue CompTargetNode, ISD::CondCode Cond, llvm::TargetLowering::DAGCombinerInfo &amp; DCI, const llvm::SDLoc &amp; DL) const'/>
<doc f='llvm/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp' l='5363'>/// Given an ISD::UREM used only by an ISD::SETEQ or ISD::SETNE
/// where the divisor is constant and the comparison target is zero,
/// return a DAG expression that will generate the same comparison result
/// using only multiplications, additions and shifts/rotations.
/// Ref: &quot;Hacker&apos;s Delight&quot; 10-17.</doc>
