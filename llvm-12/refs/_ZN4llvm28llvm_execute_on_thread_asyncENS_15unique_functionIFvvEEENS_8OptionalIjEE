<dec f='llvm/llvm/include/llvm/Support/Threading.h' l='83' type='void llvm::llvm_execute_on_thread_async(llvm::unique_function&lt;void ()&gt; Func, llvm::Optional&lt;unsigned int&gt; StackSizeInBytes = llvm::None)'/>
<doc f='llvm/llvm/include/llvm/Support/Threading.h' l='72'>/// Schedule the given \p Func for execution on a separate thread, then return
/// to the caller immediately. Roughly equivalent to
/// `std::thread(Func).detach()`, except it allows requesting a specific stack
/// size, if supported for the platform.
///
/// This function would report a fatal error if it can&apos;t execute the code
/// on a separate thread.
///
/// \param Func - The callback to execute.
/// \param StackSizeInBytes - A requested size (in bytes) for the thread stack
/// (or None for default)</doc>
<def f='llvm/llvm/lib/Support/Threading.cpp' l='125' ll='131' type='void llvm::llvm_execute_on_thread_async(llvm::unique_function&lt;void ()&gt; Func, llvm::Optional&lt;unsigned int&gt; StackSizeInBytes = llvm::None)'/>
<use f='llvm/llvm/unittests/Support/Threading.cpp' l='66' u='c' c='_ZN12_GLOBAL__N_135Threading_RunOnThreadSyncAsync_Test8TestBodyEv'/>
