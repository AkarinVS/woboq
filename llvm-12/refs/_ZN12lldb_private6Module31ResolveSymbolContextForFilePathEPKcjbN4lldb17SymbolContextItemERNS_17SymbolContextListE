<dec f='llvm/lldb/include/lldb/Core/Module.h' l='731' type='uint32_t lldb_private::Module::ResolveSymbolContextForFilePath(const char * file_path, uint32_t line, bool check_inlines, lldb::SymbolContextItem resolve_scope, lldb_private::SymbolContextList &amp; sc_list)'/>
<doc f='llvm/lldb/include/lldb/Core/Module.h' l='692'>/// Resolve items in the symbol context for a given file and line.
  ///
  /// Tries to resolve \a file_path and \a line to a list of matching symbol
  /// contexts.
  ///
  /// The line table entries contains addresses that can be used to further
  /// resolve the values in each match: the function, block, symbol. Care
  /// should be taken to minimize the amount of information that is requested
  /// to only what is needed -- typically the module, compile unit, line table
  /// and line table entry are sufficient.
  ///
  /// \param[in] file_path
  ///     A path to a source file to match. If \a file_path does not
  ///     specify a directory, then this query will match all files
  ///     whose base filename matches. If \a file_path does specify
  ///     a directory, the fullpath to the file must match.
  ///
  /// \param[in] line
  ///     The source line to match, or zero if just the compile unit
  ///     should be resolved.
  ///
  /// \param[in] check_inlines
  ///     Check for inline file and line number matches. This option
  ///     should be used sparingly as it will cause all line tables
  ///     for every compile unit to be parsed and searched for
  ///     matching inline file entries.
  ///
  /// \param[in] resolve_scope
  ///     The scope that should be resolved (see
  ///     SymbolContext::Scope).
  ///
  /// \param[out] sc_list
  ///     A symbol context list that gets matching symbols contexts
  ///     appended to.
  ///
  /// \return
  ///     The number of matches that were added to \a sc_list.
  ///
  /// \see SymbolContext::Scope</doc>
<def f='llvm/lldb/source/Core/Module.cpp' l='582' ll='588' type='uint32_t lldb_private::Module::ResolveSymbolContextForFilePath(const char * file_path, uint32_t line, bool check_inlines, lldb::SymbolContextItem resolve_scope, lldb_private::SymbolContextList &amp; sc_list)'/>
