<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1535' type='bool llvm::LoopVectorizationCostModel::memoryInstructionCanBeWidened(llvm::Instruction * I, llvm::ElementCount VF = ElementCount::getFixed(1))'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='5232' ll='5258' type='bool llvm::LoopVectorizationCostModel::memoryInstructionCanBeWidened(llvm::Instruction * I, llvm::ElementCount VF = ElementCount::getFixed(1))'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='7047' u='c' c='_ZN4llvm26LoopVectorizationCostModel28setCostBasedWideningDecisionENS_12ElementCountE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1532'>/// Returns true if \p I is a memory instruction with consecutive memory
  /// access that can be widened.</doc>
