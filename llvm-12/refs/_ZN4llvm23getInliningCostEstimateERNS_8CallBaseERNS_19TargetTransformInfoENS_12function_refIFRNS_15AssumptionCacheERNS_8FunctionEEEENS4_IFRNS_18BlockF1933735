<dec f='llvm/llvm/include/llvm/Analysis/InlineCost.h' l='266' type='Optional&lt;int&gt; llvm::getInliningCostEstimate(llvm::CallBase &amp; Call, llvm::TargetTransformInfo &amp; CalleeTTI, function_ref&lt;llvm::AssumptionCache &amp;(llvm::Function &amp;)&gt; GetAssumptionCache, function_ref&lt;llvm::BlockFrequencyInfo &amp;(llvm::Function &amp;)&gt; GetBFI = nullptr, llvm::ProfileSummaryInfo * PSI = nullptr, llvm::OptimizationRemarkEmitter * ORE = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/InlineCost.h' l='258'>/// Get the cost estimate ignoring thresholds. This is similar to getInlineCost
/// when passed InlineParams::ComputeFullInlineCost, or a non-null ORE. It
/// uses default InlineParams otherwise.
/// Contrary to getInlineCost, which makes a threshold-based final evaluation of
/// should/shouldn&apos;t inline, captured in InlineResult, getInliningCostEstimate
/// returns:
/// - None, if the inlining cannot happen (is illegal)
/// - an integer, representing the cost.</doc>
<def f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='2482' ll='2505' type='Optional&lt;int&gt; llvm::getInliningCostEstimate(llvm::CallBase &amp; Call, llvm::TargetTransformInfo &amp; CalleeTTI, function_ref&lt;llvm::AssumptionCache &amp;(llvm::Function &amp;)&gt; GetAssumptionCache, function_ref&lt;llvm::BlockFrequencyInfo &amp;(llvm::Function &amp;)&gt; GetBFI = nullptr, llvm::ProfileSummaryInfo * PSI = nullptr, llvm::OptimizationRemarkEmitter * ORE = nullptr)'/>
