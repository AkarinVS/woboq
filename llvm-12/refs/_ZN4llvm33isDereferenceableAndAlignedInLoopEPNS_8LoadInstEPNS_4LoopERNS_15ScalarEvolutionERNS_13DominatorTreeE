<dec f='llvm/llvm/include/llvm/Analysis/Loads.h' l='77' type='bool llvm::isDereferenceableAndAlignedInLoop(llvm::LoadInst * LI, llvm::Loop * L, llvm::ScalarEvolution &amp; SE, llvm::DominatorTree &amp; DT)'/>
<doc f='llvm/llvm/include/llvm/Analysis/Loads.h' l='70'>/// Return true if we can prove that the given load (which is assumed to be
/// within the specified loop) would access only dereferenceable memory, and
/// be properly aligned on every iteration of the specified loop regardless of
/// its placement within the loop. (i.e. does not require predication beyond
/// that required by the the header itself and could be hoisted into the header
/// if desired.)  This is more powerful than the variants above when the
/// address loaded from is analyzeable by SCEV.  </doc>
<def f='llvm/llvm/lib/Analysis/Loads.cpp' l='236' ll='285' type='bool llvm::isDereferenceableAndAlignedInLoop(llvm::LoadInst * LI, llvm::Loop * L, llvm::ScalarEvolution &amp; SE, llvm::DominatorTree &amp; DT)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='1023' u='c' c='_ZN4llvm25LoopVectorizationLegality25canVectorizeWithIfConvertEv'/>
