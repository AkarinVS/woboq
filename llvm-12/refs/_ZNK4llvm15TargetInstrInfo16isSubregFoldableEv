<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1052' type='bool llvm::TargetInstrInfo::isSubregFoldable() const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1040'>/// Check whether the target can fold a load that feeds a subreg operand
  /// (or a subreg operand that feeds a store).
  /// For example, X86 may want to return true if it can fold
  /// movl (%esp), %eax
  /// subb, %al, ...
  /// Into:
  /// subb (%esp), ...
  ///
  /// Ideally, we&apos;d like the target implementation of foldMemoryOperand() to
  /// reject subregs - but since this behavior used to be enforced in the
  /// target-independent code, moving this responsibility to the targets
  /// has the potential of causing nasty silent breakage in out-of-tree targets.</doc>
<use f='llvm/llvm/lib/CodeGen/InlineSpiller.cpp' l='839' u='c' c='_ZN12_GLOBAL__N_113InlineSpiller17foldMemoryOperandEN4llvm8ArrayRefISt4pairIPNS1_12MachineInstrEjEEES5_'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='173' c='_ZNK4llvm16AArch64InstrInfo16isSubregFoldableEv'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InstrInfo.h' l='371' c='_ZNK4llvm12X86InstrInfo16isSubregFoldableEv'/>
