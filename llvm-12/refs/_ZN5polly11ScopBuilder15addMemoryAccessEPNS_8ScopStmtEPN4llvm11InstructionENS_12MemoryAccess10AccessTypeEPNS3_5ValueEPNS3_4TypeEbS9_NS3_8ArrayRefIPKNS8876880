<dec f='llvm/polly/include/polly/ScopBuilder.h' l='555' type='polly::MemoryAccess * polly::ScopBuilder::addMemoryAccess(polly::ScopStmt * Stmt, llvm::Instruction * Inst, MemoryAccess::AccessType AccType, llvm::Value * BaseAddress, llvm::Type * ElemType, bool Affine, llvm::Value * AccessValue, ArrayRef&lt;const llvm::SCEV *&gt; Subscripts, ArrayRef&lt;const llvm::SCEV *&gt; Sizes, polly::MemoryKind Kind)'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2270' ll='2306' type='polly::MemoryAccess * polly::ScopBuilder::addMemoryAccess(polly::ScopStmt * Stmt, llvm::Instruction * Inst, MemoryAccess::AccessType AccType, llvm::Value * BaseAddress, llvm::Type * ElementType, bool Affine, llvm::Value * AccessValue, ArrayRef&lt;const llvm::SCEV *&gt; Subscripts, ArrayRef&lt;const llvm::SCEV *&gt; Sizes, polly::MemoryKind Kind)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2316' u='c' c='_ZN5polly11ScopBuilder14addArrayAccessEPNS_8ScopStmtENS_10MemAccInstENS_12MemoryAccess10AccessTypeEPN4llvm5ValueEPNS6_4TypeEbNS6_8ArrayRefIPKNS6_4SCEVEEESF_S8_'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2547' u='c' c='_ZN5polly11ScopBuilder16ensureValueWriteEPN4llvm11InstructionE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2586' u='c' c='_ZN5polly11ScopBuilder15ensureValueReadEPN4llvm5ValueEPNS_8ScopStmtE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2626' u='c' c='_ZN5polly11ScopBuilder14ensurePHIWriteEPN4llvm7PHINodeEPNS_8ScopStmtEPNS1_10BasicBlockEPNS1_5ValueEb'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2635' u='c' c='_ZN5polly11ScopBuilder16addPHIReadAccessEPNS_8ScopStmtEPN4llvm7PHINodeE'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='539'>/// Create a new MemoryAccess object and add it to #AccFuncMap.
  ///
  /// @param Stmt        The statement where the access takes place.
  /// @param Inst        The instruction doing the access. It is not necessarily
  ///                    inside @p BB.
  /// @param AccType     The kind of access.
  /// @param BaseAddress The accessed array&apos;s base address.
  /// @param ElemType    The type of the accessed array elements.
  /// @param Affine      Whether all subscripts are affine expressions.
  /// @param AccessValue Value read or written.
  /// @param Subscripts  Access subscripts per dimension.
  /// @param Sizes       The array dimension&apos;s sizes.
  /// @param Kind        The kind of memory accessed.
  ///
  /// @return The created MemoryAccess, or nullptr if the access is not within
  ///         the SCoP.</doc>
