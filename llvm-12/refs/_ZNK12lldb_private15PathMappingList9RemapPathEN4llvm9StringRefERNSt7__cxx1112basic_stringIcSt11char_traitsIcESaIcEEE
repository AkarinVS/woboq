<dec f='llvm/lldb/include/lldb/Target/PathMappingList.h' l='81' type='bool lldb_private::PathMappingList::RemapPath(llvm::StringRef path, std::string &amp; new_path) const'/>
<doc f='llvm/lldb/include/lldb/Target/PathMappingList.h' l='66'>/// Remaps a source file given \a path into \a new_path.
  ///
  /// Remaps \a path if any source remappings match. This function
  /// does NOT stat the file system so it can be used in tight loops
  /// where debug info is being parsed.
  ///
  /// \param[in] path
  ///     The original source file path to try and remap.
  ///
  /// \param[out] new_path
  ///     The newly remapped filespec that is may or may not exist.
  ///
  /// \return
  ///     /b true if \a path was successfully located and \a new_path
  ///     is filled in with a new source path, \b false otherwise.</doc>
<use f='llvm/lldb/source/Core/Module.cpp' l='1604' u='c' c='_ZNK12lldb_private6Module15RemapSourceFileEN4llvm9StringRefERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='llvm/lldb/source/Target/PathMappingList.cpp' l='150' u='c' c='_ZNK12lldb_private15PathMappingList9RemapPathENS_11ConstStringERS1_'/>
<def f='llvm/lldb/source/Target/PathMappingList.cpp' l='157' ll='185' type='bool lldb_private::PathMappingList::RemapPath(llvm::StringRef path, std::string &amp; new_path) const'/>
