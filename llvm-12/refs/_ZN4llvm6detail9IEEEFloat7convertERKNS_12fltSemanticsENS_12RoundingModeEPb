<dec f='llvm/llvm/include/llvm/ADT/APFloat.h' l='300' type='llvm::APFloatBase::opStatus llvm::detail::IEEEFloat::convert(const llvm::fltSemantics &amp; , llvm::APFloatBase::roundingMode , bool * )'/>
<doc f='llvm/llvm/include/llvm/ADT/APFloat.h' l='295'>/// @}

  /// \name Conversions
  /// @{</doc>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1087' u='c' c='_ZN4llvm6detail9IEEEFloat19multiplySignificandERKS1_S1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1897' u='c' c='_ZN4llvm6detail9IEEEFloat9remainderERKS1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1900' u='c' c='_ZN4llvm6detail9IEEEFloat9remainderERKS1_'/>
<def f='llvm/llvm/lib/Support/APFloat.cpp' l='2163' ll='2261' type='IEEEFloat::opStatus llvm::detail::IEEEFloat::convert(const llvm::fltSemantics &amp; toSemantics, llvm::APFloatBase::roundingMode rounding_mode, bool * losesInfo)'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='3150' u='c' c='_ZNK4llvm6detail9IEEEFloat36convertPPCDoubleDoubleAPFloatToAPIntEv'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='3155' u='c' c='_ZNK4llvm6detail9IEEEFloat36convertPPCDoubleDoubleAPFloatToAPIntEv'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='3165' u='c' c='_ZNK4llvm6detail9IEEEFloat36convertPPCDoubleDoubleAPFloatToAPIntEv'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='3171' u='c' c='_ZNK4llvm6detail9IEEEFloat36convertPPCDoubleDoubleAPFloatToAPIntEv'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='3415' u='c' c='_ZN4llvm6detail9IEEEFloat28initFromPPCDoubleDoubleAPIntERKNS_5APIntE'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='3422' u='c' c='_ZN4llvm6detail9IEEEFloat28initFromPPCDoubleDoubleAPIntERKNS_5APIntE'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='4825' u='c' c='_ZN4llvm7APFloat7convertERKNS_12fltSemanticsENS_12RoundingModeEPb'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='4829' u='c' c='_ZN4llvm7APFloat7convertERKNS_12fltSemanticsENS_12RoundingModeEPb'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='4835' u='c' c='_ZN4llvm7APFloat7convertERKNS_12fltSemanticsENS_12RoundingModeEPb'/>
<doc f='llvm/llvm/lib/Support/APFloat.cpp' l='2156'>/// IEEEFloat::convert - convert a value of one floating point type to another.
/// The return value corresponds to the IEEE754 exceptions.  *losesInfo
/// records whether the transformation lost information, i.e. whether
/// converting the result back to the original type will produce the
/// original value (this is almost the same as return value==fsOK, but there
/// are edge cases where this is not so).</doc>
