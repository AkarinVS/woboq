<dec f='llvm/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h' l='211' type='bool llvm::mca::RegisterFile::tryEliminateMove(llvm::mca::WriteState &amp; WS, llvm::mca::ReadState &amp; RS)'/>
<doc f='llvm/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h' l='206'>// Returns true if a move from RS to WS can be eliminated.
  // On success, it updates WriteState by setting flag `WS.isEliminated`.
  // If RS is a read from a zero register, and WS is eliminated, then
  // `WS.WritesZero` is also set, so that method addRegisterWrite() would not
  // reserve a physical register for it.</doc>
<def f='llvm/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp' l='282' ll='345' type='bool llvm::mca::RegisterFile::tryEliminateMove(llvm::mca::WriteState &amp; WS, llvm::mca::ReadState &amp; RS)'/>
<use f='llvm/llvm/lib/MCA/Stages/DispatchStage.cpp' l='101' u='c' c='_ZN4llvm3mca13DispatchStage8dispatchENS0_7InstRefE'/>
