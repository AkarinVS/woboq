<def f='llvm/llvm/include/llvm/IR/Instruction.h' l='210' ll='212' type='static bool llvm::Instruction::isBitwiseLogicOp(unsigned int Opcode)'/>
<use f='llvm/llvm/include/llvm/IR/Instruction.h' l='216' u='c' c='_ZNK4llvm11Instruction16isBitwiseLogicOpEv'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='209'>/// Determine if the Opcode is and/or/xor.</doc>
<use f='llvm/llvm/include/llvm/IR/PatternMatch.h' l='1235' u='c' c='_ZN4llvm12PatternMatch18is_bitwiselogic_op8isOpTypeEj'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='556' u='c' c='_ZL24rightDistributesOverLeftN4llvm11Instruction9BinaryOpsES1_'/>
