<dec f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h' l='289' type='void clang::ento::ExprEngine::removeDead(clang::ento::ExplodedNode * Node, clang::ento::ExplodedNodeSet &amp; Out, const clang::Stmt * ReferenceStmt, const clang::LocationContext * LC, const clang::Stmt * DiagnosticStmt = nullptr, ProgramPoint::Kind K = ProgramPoint::PreStmtPurgeDeadSymbolsKind)'/>
<doc f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h' l='264'>/// Run the analyzer&apos;s garbage collection - remove dead symbols and
  /// bindings from the state.
  ///
  /// Checkers can participate in this process with two callbacks:
  /// \c checkLiveSymbols and \c checkDeadSymbols. See the CheckerDocumentation
  /// class for more information.
  ///
  /// \param Node The predecessor node, from which the processing should start.
  /// \param Out The returned set of output nodes.
  /// \param ReferenceStmt The statement which is about to be processed.
  ///        Everything needed for this statement should be considered live.
  ///        A null statement means that everything in child LocationContexts
  ///        is dead.
  /// \param LC The location context of the \p ReferenceStmt. A null location
  ///        context means that we have reached the end of analysis and that
  ///        all statements and local variables should be considered dead.
  /// \param DiagnosticStmt Used as a location for any warnings that should
  ///        occur while removing the dead (e.g. leaks). By default, the
  ///        \p ReferenceStmt is used.
  /// \param K Denotes whether this is a pre- or post-statement purge. This
  ///        must only be ProgramPoint::PostStmtPurgeDeadSymbolsKind if an
  ///        entire location context is being cleared, in which case the
  ///        \p ReferenceStmt must either be a ReturnStmt or \c NULL. Otherwise,
  ///        it must be ProgramPoint::PreStmtPurgeDeadSymbolsKind (the default)
  ///        and \p ReferenceStmt must be valid (non-null).</doc>
<def f='llvm/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp' l='689' ll='767' type='void clang::ento::ExprEngine::removeDead(clang::ento::ExplodedNode * Pred, clang::ento::ExplodedNodeSet &amp; Out, const clang::Stmt * ReferenceStmt, const clang::LocationContext * LC, const clang::Stmt * DiagnosticStmt = nullptr, ProgramPoint::Kind K = ProgramPoint::PreStmtPurgeDeadSymbolsKind)'/>
<use f='llvm/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp' l='781' u='c' c='_ZN5clang4ento10ExprEngine11ProcessStmtEPKNS_4StmtEPNS0_12ExplodedNodeE'/>
<use f='llvm/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp' l='182' u='c' c='_ZN5clang4ento10ExprEngine25removeDeadOnEndOfFunctionERNS0_18NodeBuilderContextEPNS0_12ExplodedNodeERNS0_15ExplodedNodeSetE'/>
<use f='llvm/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp' l='296' u='c' c='_ZN5clang4ento10ExprEngine15processCallExitEPNS0_12ExplodedNodeE'/>
