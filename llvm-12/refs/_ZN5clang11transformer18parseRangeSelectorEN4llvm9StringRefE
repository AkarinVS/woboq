<dec f='llvm/clang/include/clang/Tooling/Transformer/Parsing.h' l='36' type='llvm::Expected&lt;RangeSelector&gt; clang::transformer::parseRangeSelector(llvm::StringRef Input)'/>
<def f='llvm/clang/lib/Tooling/Transformer/Parsing.cpp' l='268' ll='279' type='Expected&lt;clang::transformer::RangeSelector&gt; clang::transformer::parseRangeSelector(llvm::StringRef Input)'/>
<doc f='llvm/clang/include/clang/Tooling/Transformer/Parsing.h' l='29'>/// Parses a string representation of a \c RangeSelector. The grammar of these
/// strings is closely based on the (sub)grammar of \c RangeSelectors as they&apos;d
/// appear in C++ code. However, this language constrains the set of permissible
/// strings (for node ids) -- it does not support escapes in the
/// string. Additionally, the \c charRange combinator is not supported, because
/// there is no representation of values of type \c CharSourceRange in this
/// (little) language.</doc>
<use f='llvm/clang/unittests/Tooling/RangeSelectorTest.cpp' l='157' u='c' c='_ZN12_GLOBAL__N_137RangeSelectorTest_BeforeOpParsed_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/RangeSelectorTest.cpp' l='274' u='c' c='_ZN12_GLOBAL__N_138RangeSelectorTest_BetweenOpParsed_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/RangeSelectorTest.cpp' l='312' u='c' c='_ZN12_GLOBAL__N_143RangeSelectorTest_EncloseOpNodesParsed_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/RangeSelectorTest.cpp' l='325' u='c' c='_ZN12_GLOBAL__N_145RangeSelectorTest_EncloseOpGeneralParsed_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/RangeSelectorTest.cpp' l='353' u='c' c='_ZN12_GLOBAL__N_140RangeSelectorTest_StatementOpParsed_Test8TestBodyEv'/>
