<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='74' type='void llvm::computeKnownBits(const llvm::Value * V, const llvm::APInt &amp; DemandedElts, llvm::KnownBits &amp; Known, const llvm::DataLayout &amp; DL, unsigned int Depth = 0, llvm::AssumptionCache * AC = nullptr, const llvm::Instruction * CxtI = nullptr, const llvm::DominatorTree * DT = nullptr, llvm::OptimizationRemarkEmitter * ORE = nullptr, bool UseInstrInfo = true)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='66'>/// Determine which bits of V are known to be either zero or one and return
  /// them in the KnownZero/KnownOne bit sets.
  ///
  /// This function is defined on values with integer type, values with pointer
  /// type, and vectors of integers.  In the case
  /// where V is a vector, the known zero and known one values are the
  /// same width as the vector element, and the bit is set only if it is true
  /// for all of the demanded elements in the vector.</doc>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='229' ll='236' type='void llvm::computeKnownBits(const llvm::Value * V, const llvm::APInt &amp; DemandedElts, llvm::KnownBits &amp; Known, const llvm::DataLayout &amp; DL, unsigned int Depth = 0, llvm::AssumptionCache * AC = nullptr, const llvm::Instruction * CxtI = nullptr, const llvm::DominatorTree * DT = nullptr, llvm::OptimizationRemarkEmitter * ORE = nullptr, bool UseInstrInfo = true)'/>
