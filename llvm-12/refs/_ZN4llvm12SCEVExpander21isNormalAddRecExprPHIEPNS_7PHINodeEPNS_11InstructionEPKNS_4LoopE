<dec f='llvm/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h' l='467' type='bool llvm::SCEVExpander::isNormalAddRecExprPHI(llvm::PHINode * PN, llvm::Instruction * IncV, const llvm::Loop * L)'/>
<def f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='923' ll='950' type='bool llvm::SCEVExpander::isNormalAddRecExprPHI(llvm::PHINode * PN, llvm::Instruction * IncV, const llvm::Loop * L)'/>
<use f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='949' u='c' c='_ZN4llvm12SCEVExpander21isNormalAddRecExprPHIEPNS_7PHINodeEPNS_11InstructionEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='1241' u='c' c='_ZN4llvm12SCEVExpander25getAddRecExprPHILiterallyEPKNS_14SCEVAddRecExprEPKNS_4LoopEPNS_4TypeES8_RS8_Rb'/>
<doc f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='921'>/// Determine if this is a well-behaved chain of instructions leading back to
/// the PHI. If so, it may be reused by expanded expressions.</doc>
