<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_checks.h' l='44' ll='51' type='bool __sanitizer::CheckAlignedAllocAlignmentAndSize(__sanitizer::uptr alignment, __sanitizer::uptr size)'/>
<use f='llvm/compiler-rt/lib/asan/asan_allocator.cpp' l='1044' u='c' c='__asan::asan_aligned_alloc'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_checks.h' l='36'>// In case of the check failure, the caller of the following Check... functions
// should &quot;return POLICY::OnBadRequest();&quot; where POLICY is the current allocator
// failure handling policy.

// Checks aligned_alloc() parameters, verifies that the alignment is a power of
// two and that the size is a multiple of alignment for POSIX implementation,
// and a bit relaxed requirement for non-POSIX ones, that the size is a multiple
// of alignment.</doc>
<use f='llvm/compiler-rt/lib/hwasan/hwasan_allocator.cpp' l='337' u='c' c='__hwasan::hwasan_aligned_alloc'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_allocator.cpp' l='164' u='c' c='__lsan::lsan_aligned_alloc'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_allocator.cpp' l='836' u='c' c='__memprof::memprof_aligned_alloc'/>
<use f='llvm/compiler-rt/lib/msan/msan_allocator.cpp' l='311' u='c' c='__msan::msan_aligned_alloc'/>
<use f='llvm/compiler-rt/lib/scudo/scudo_allocator.cpp' l='758' u='c' c='__scudo::scudoAlignedAlloc'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_mman.cpp' l='287' u='c' c='__tsan::user_aligned_alloc'/>
