<dec f='llvm/lld/wasm/SymbolTable.h' l='114' type='bool lld::wasm::SymbolTable::getFunctionVariant(lld::wasm::Symbol * sym, const llvm::wasm::WasmSignature * sig, const lld::wasm::InputFile * file, lld::wasm::Symbol ** out)'/>
<use f='llvm/lld/wasm/SymbolTable.cpp' l='349' u='c' c='_ZN3lld4wasm11SymbolTable18addDefinedFunctionEN4llvm9StringRefEjPNS0_9InputFileEPNS0_13InputFunctionE'/>
<use f='llvm/lld/wasm/SymbolTable.cpp' l='550' u='c' c='_ZN3lld4wasm11SymbolTable20addUndefinedFunctionEN4llvm9StringRefENS2_8OptionalIS3_EES5_jPNS0_9InputFileEPKNS2_4wasm13WasmSignatureEb'/>
<def f='llvm/lld/wasm/SymbolTable.cpp' l='676' ll='713' type='bool lld::wasm::SymbolTable::getFunctionVariant(lld::wasm::Symbol * sym, const llvm::wasm::WasmSignature * sig, const lld::wasm::InputFile * file, lld::wasm::Symbol ** out)'/>
<doc f='llvm/lld/wasm/SymbolTable.cpp' l='673'>// The new signature doesn&apos;t match.  Create a variant to the symbol with the
// signature encoded in the name and return that instead.  These symbols are
// then unified later in handleSymbolVariants.</doc>
