<dec f='llvm/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h' l='119' type='const clang::Expr * clang::ento::bugreporter::getDerefExpr(const clang::Stmt * S)'/>
<use f='llvm/clang/lib/StaticAnalyzer/Checkers/CallAndMessageChecker.cpp' l='146' u='c' c='_ZN12_GLOBAL__N_121CallAndMessageChecker11emitBadCallEPN5clang4ento7BugTypeERNS2_14CheckerContextEPKNS1_4ExprE'/>
<use f='llvm/clang/lib/StaticAnalyzer/Checkers/DereferenceChecker.cpp' l='198' u='c' c='_ZNK12_GLOBAL__N_118DereferenceChecker9reportBugENS0_9DerefKindEN4llvm18IntrusiveRefCntPtrIKN5clang4ento12ProgramStateEEEPKNS4_4StmtERNS5_14CheckerContextE'/>
<use f='llvm/clang/lib/StaticAnalyzer/Checkers/NonNullParamChecker.cpp' l='311' u='c' c='_ZNK12_GLOBAL__N_119NonNullParamChecker31genReportReferenceToNullPointerEPKN5clang4ento12ExplodedNodeEPKNS1_4ExprE'/>
<use f='llvm/clang/lib/StaticAnalyzer/Checkers/ReturnUndefChecker.cpp' l='118' u='c' c='_ZNK12_GLOBAL__N_118ReturnUndefChecker14checkReferenceERN5clang4ento14CheckerContextEPKNS1_4ExprENS2_20DefinedOrUnknownSValE'/>
<def f='llvm/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp' l='96' ll='154' type='const clang::Expr * clang::ento::bugreporter::getDerefExpr(const clang::Stmt * S)'/>
<use f='llvm/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp' l='1908' u='c' c='_ZL16peelOffOuterExprPKN5clang4ExprEPKNS_4ento12ExplodedNodeE'/>
<doc f='llvm/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp' l='84'>/// Given that expression S represents a pointer that would be dereferenced,
/// try to find a sub-expression from which the pointer came from.
/// This is used for tracking down origins of a null or undefined value:
/// &quot;this is null because that is null because that is null&quot; etc.
/// We wipe away field and element offsets because they merely add offsets.
/// We also wipe away all casts except lvalue-to-rvalue casts, because the
/// latter represent an actual pointer dereference; however, we remove
/// the final lvalue-to-rvalue cast before returning from this function
/// because it demonstrates more clearly from where the pointer rvalue was
/// loaded. Examples:
///   x-&gt;y.z      ==&gt;  x (lvalue)
///   foo()-&gt;y.z  ==&gt;  foo() (rvalue)</doc>
