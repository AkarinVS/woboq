<dec f='llvm/llvm/include/llvm/Analysis/IntervalPartition.h' l='103' type='void llvm::IntervalPartition::updatePredecessors(llvm::Interval * Int)'/>
<doc f='llvm/llvm/include/llvm/Analysis/IntervalPartition.h' l='99'>// updatePredecessors - Interval generation only sets the successor fields of
  // the interval data structures.  After interval generation is complete,
  // run through all of the intervals and propagate successor info as
  // predecessor info.</doc>
<def f='llvm/llvm/lib/Analysis/IntervalPartition.cpp' l='67' ll='71' type='void llvm::IntervalPartition::updatePredecessors(llvm::Interval * Int)'/>
<use f='llvm/llvm/lib/Analysis/IntervalPartition.cpp' l='91' u='c' c='_ZN4llvm17IntervalPartition13runOnFunctionERNS_8FunctionE'/>
<use f='llvm/llvm/lib/Analysis/IntervalPartition.cpp' l='117' u='c' c='_ZN4llvm17IntervalPartitionC1ERS0_b'/>
<doc f='llvm/llvm/lib/Analysis/IntervalPartition.cpp' l='63'>// updatePredecessors - Interval generation only sets the successor fields of
// the interval data structures.  After interval generation is complete,
// run through all of the intervals and propagate successor info as
// predecessor info.</doc>
