<dec f='llvm/llvm/include/llvm/MC/MCAssembler.h' l='227' type='void llvm::MCAssembler::MCAssembler(llvm::MCContext &amp; Context, std::unique_ptr&lt;MCAsmBackend&gt; Backend, std::unique_ptr&lt;MCCodeEmitter&gt; Emitter, std::unique_ptr&lt;MCObjectWriter&gt; Writer)'/>
<doc f='llvm/llvm/include/llvm/MC/MCAssembler.h' l='221'>/// Construct a new assembler instance.
  //
  // FIXME: How are we going to parameterize this? Two obvious options are stay
  // concrete and require clients to pass in a target like object. The other
  // option is to make this abstract, and have targets provide concrete
  // implementations as we do with AsmParser.</doc>
<def f='llvm/llvm/lib/MC/MCAssembler.cpp' l='83' ll='92' type='void llvm::MCAssembler::MCAssembler(llvm::MCContext &amp; Context, std::unique_ptr&lt;MCAsmBackend&gt; Backend, std::unique_ptr&lt;MCCodeEmitter&gt; Emitter, std::unique_ptr&lt;MCObjectWriter&gt; Writer)'/>
<doc f='llvm/llvm/lib/MC/MCAssembler.cpp' l='81'>/* *** */</doc>
