<dec f='llvm/llvm/tools/llvm-reduce/deltas/Delta.h' l='105' type='void llvm::runDeltaPass(llvm::TestRunner &amp; Test, int Targets, std::function&lt;void (const std::vector&lt;Chunk&gt; &amp;, Module *)&gt; ExtractChunksFromModule)'/>
<def f='llvm/llvm/tools/llvm-reduce/deltas/Delta.cpp' l='93' ll='180' type='void llvm::runDeltaPass(llvm::TestRunner &amp; Test, int Targets, std::function&lt;void (const std::vector&lt;Chunk&gt; &amp;, Module *)&gt; ExtractChunksFromModule)'/>
<doc f='llvm/llvm/tools/llvm-reduce/deltas/Delta.cpp' l='90'>/// Runs the Delta Debugging algorithm, splits the code into chunks and
/// reduces the amount of chunks that are considered interesting by the
/// given test.</doc>
<doc f='llvm/llvm/tools/llvm-reduce/deltas/Delta.h' l='84'>/// This function implements the Delta Debugging algorithm, it receives a
/// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and
/// splits them in half; these chunks of targets are then tested while ignoring
/// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test)
/// it is removed from consideration. The algorithm will attempt to split the
/// Chunks in half and start the process again until it can&apos;t split chunks
/// anymore.
///
/// This function is intended to be called by each specialized delta pass (e.g.
/// RemoveFunctions) and receives three key parameters:
/// * Test: The main TestRunner instance which is used to run the provided
/// interesting-ness test, as well as to store and access the reduced Program.
/// * Targets: The amount of Targets that are going to be reduced by the
/// algorithm, for example, the RemoveGlobalVars pass would send the amount of
/// initialized GVs.
/// * ExtractChunksFromModule: A function used to tailor the main program so it
/// only contains Targets that are inside Chunks of the given iteration.
/// Note: This function is implemented by each specialized Delta pass
///
/// Other implementations of the Delta Debugging algorithm can also be found in
/// the CReduce, Delta, and Lithium projects.</doc>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp' l='51' u='c' c='_ZN4llvm22reduceAliasesDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp' l='125' u='c' c='_ZN4llvm24reduceArgumentsDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp' l='199' u='c' c='_ZN4llvm25reduceAttributesDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp' l='149' u='c' c='_ZN4llvm26reduceBasicBlocksDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp' l='55' u='c' c='_ZN4llvm29reduceFunctionBodiesDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp' l='75' u='c' c='_ZN4llvm24reduceFunctionsDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp' l='51' u='c' c='_ZN4llvm34reduceGlobalsInitializersDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp' l='73' u='c' c='_ZN4llvm22reduceGlobalsDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp' l='66' u='c' c='_ZN4llvm27reduceInstructionsDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp' l='125' u='c' c='_ZN4llvm23reduceMetadataDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp' l='123' u='c' c='_ZN4llvm28reduceOperandBundesDeltaPassERNS_10TestRunnerE'/>
<use f='llvm/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp' l='60' u='c' c='_ZN4llvm29reduceSpecialGlobalsDeltaPassERNS_10TestRunnerE'/>
