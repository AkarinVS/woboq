<dec f='llvm/lldb/include/lldb/Target/TargetList.h' l='139' type='lldb::TargetSP lldb_private::TargetList::FindTargetWithExecutableAndArchitecture(const lldb_private::FileSpec &amp; exe_file_spec, const lldb_private::ArchSpec * exe_arch_ptr = nullptr) const'/>
<doc f='llvm/lldb/include/lldb/Target/TargetList.h' l='118'>/// Find the target that contains has an executable whose path
  /// matches \a exe_file_spec, and whose architecture matches
  /// \a arch_ptr if arch_ptr is not nullptr.
  ///
  /// \param[in] exe_file_spec
  ///     A file spec containing a basename, or a full path (directory
  ///     and basename). If \a exe_file_spec contains only a filename
  ///     (empty GetDirectory() value) then matching will be done
  ///     solely based on the filenames and directories won&apos;t be
  ///     compared. If \a exe_file_spec contains a filename and a
  ///     directory, then both must match.
  ///
  /// \param[in] exe_arch_ptr
  ///     If not nullptr then the architecture also needs to match, else
  ///     the architectures will be compared.
  ///
  /// \return
  ///     A shared pointer to a target object. The returned shared
  ///     pointer will contain nullptr if no target objects have a
  ///     executable whose full or partial path matches
  ///     with a matching process ID.</doc>
<use f='llvm/lldb/source/API/SBDebugger.cpp' l='950' u='c' c='_ZN4lldb10SBDebugger25FindTargetWithFileAndArchEPKcS2_'/>
<def f='llvm/lldb/source/Target/TargetList.cpp' l='415' ll='433' type='lldb::TargetSP lldb_private::TargetList::FindTargetWithExecutableAndArchitecture(const lldb_private::FileSpec &amp; exe_file_spec, const lldb_private::ArchSpec * exe_arch_ptr = nullptr) const'/>
