<dec f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='1039' type='int llvm::TargetTransformInfo::getArithmeticInstrCost(unsigned int Opcode, llvm::Type * Ty, TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput, llvm::TargetTransformInfo::OperandValueKind Opd1Info = OK_AnyValue, llvm::TargetTransformInfo::OperandValueKind Opd2Info = OK_AnyValue, llvm::TargetTransformInfo::OperandValueProperties Opd1PropInfo = OP_None, llvm::TargetTransformInfo::OperandValueProperties Opd2PropInfo = OP_None, ArrayRef&lt;const llvm::Value *&gt; Args = ArrayRef&lt;const llvm::Value *&gt;(), const llvm::Instruction * CxtI = nullptr) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='1023'>/// This is an approximation of reciprocal throughput of a math/logic op.
  /// A higher cost indicates less expected throughput.
  /// From Agner Fog&apos;s guides, reciprocal throughput is &quot;the average number of
  /// clock cycles per instruction when the instructions are not part of a
  /// limiting dependency chain.&quot;
  /// Therefore, costs should be scaled to account for multiple execution units
  /// on the target that can process this type of instruction. For example, if
  /// there are 5 scalar integer units and 2 vector integer units that can
  /// calculate an &apos;add&apos; in a single cycle, this model should indicate that the
  /// cost of the vector add instruction is 2.5 times the cost of the scalar
  /// add instruction.
  /// \p Args is an optional argument which holds the instruction operands
  /// values so the TTI can analyze those values searching for special
  /// cases or optimizations based on those values.
  /// \p CxtI is the optional original context instruction, if one exists, to
  /// provide even more information.</doc>
<def f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='745' ll='756' type='int llvm::TargetTransformInfo::getArithmeticInstrCost(unsigned int Opcode, llvm::Type * Ty, TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput, llvm::TargetTransformInfo::OperandValueKind Opd1Info = OK_AnyValue, llvm::TargetTransformInfo::OperandValueKind Opd2Info = OK_AnyValue, llvm::TargetTransformInfo::OperandValueProperties Opd1PropInfo = OP_None, llvm::TargetTransformInfo::OperandValueProperties Opd2PropInfo = OP_None, ArrayRef&lt;const llvm::Value *&gt; Args = ArrayRef&lt;const llvm::Value *&gt;(), const llvm::Instruction * CxtI = nullptr) const'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6962' u='c' c='_ZN12_GLOBAL__N_119VectorPromoteHelper21isProfitableToPromoteEv'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6964' u='c' c='_ZN12_GLOBAL__N_119VectorPromoteHelper21isProfitableToPromoteEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp' l='538' u='c' c='_ZL11visitIVCastPN4llvm8CastInstERNS_10WideIVInfoEPNS_15ScalarEvolutionEPKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp' l='539' u='c' c='_ZL11visitIVCastPN4llvm8CastInstERNS_10WideIVInfoEPNS_15ScalarEvolutionEPKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp' l='2157' u='c' c='_ZN12_GLOBAL__N_118LoopIdiomRecognize26recognizeShiftUntilBitTestEv'/>
<use f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='2214' u='c' c='_ZL22costAndCollectOperandsRKN4llvm11SCEVOperandERKNS_19TargetTransformInfoENS3_14TargetCostKindERNS_15SmallVectorImplIS0_EE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='3059' u='c' c='_ZN4llvm22FoldBranchToCommonDestEPNS_10BranchInstEPNS_14DomTreeUpdaterEPNS_16MemorySSAUpdaterEPKNS_19TargetTransformInfoEj'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='3062' u='c' c='_ZN4llvm22FoldBranchToCommonDestEPNS_10BranchInstEPNS_14DomTreeUpdaterEPNS_16MemorySSAUpdaterEPKNS_19TargetTransformInfoEj'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6911' u='c' c='_ZN4llvm26LoopVectorizationCostModel23getReductionPatternCostEPNS_11InstructionENS_12ElementCountEPNS_4TypeENS_19TargetTransformInfo14TargetCostKindE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6921' u='c' c='_ZN4llvm26LoopVectorizationCostModel23getReductionPatternCostEPNS_11InstructionENS_12ElementCountEPNS_4TypeENS_19TargetTransformInfo14TargetCostKindE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='7260' u='c' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionENS_12ElementCountERPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='7307' u='c' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionENS_12ElementCountERPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='7315' u='c' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionENS_12ElementCountERPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='7464' u='c' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionENS_12ElementCountERPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3719' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3726' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3737' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3743' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3846' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3847' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='7027' u='c' c='_ZN12_GLOBAL__N_119HorizontalReduction16getReductionCostEPN4llvm19TargetTransformInfoEPNS1_5ValueEj'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='292' u='c' c='_ZN12_GLOBAL__N_113VectorCombine21isExtractExtractCheapEPN4llvm18ExtractElementInstES3_jRS3_j'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='293' u='c' c='_ZN12_GLOBAL__N_113VectorCombine21isExtractExtractCheapEPN4llvm18ExtractElementInstES3_jRS3_j'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='620' u='c' c='_ZN12_GLOBAL__N_113VectorCombine19scalarizeBinopOrCmpERN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='621' u='c' c='_ZN12_GLOBAL__N_113VectorCombine19scalarizeBinopOrCmpERN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='719' u='c' c='_ZN12_GLOBAL__N_113VectorCombine17foldExtractedCmpsERN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='730' u='c' c='_ZN12_GLOBAL__N_113VectorCombine17foldExtractedCmpsERN4llvm11InstructionE'/>
