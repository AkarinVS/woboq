<def f='llvm/polly/lib/External/isl/isl_aff_lex_templ.c' l='27' macro='1' type='isl_map * isl_multi_pw_aff_lex_le_map_on_space(isl_multi_pw_aff * mpa1, isl_multi_pw_aff * mpa2, isl_space * space)'/>
<use f='llvm/polly/lib/External/isl/isl_aff_lex_templ.c' l='44' macro='1' u='a' c='isl_multi_pw_aff_lex_le_map'/>
<doc f='llvm/polly/lib/External/isl/isl_aff_lex_templ.c' l='14'>/* Return a map containing pairs of elements in the domains of &quot;mpa1&quot; and &quot;mpa2&quot;
 * where the function value of &quot;mpa1&quot; lexicographically compares as &quot;ORDER&quot;
 * to that of &quot;mpa2&quot;.  &quot;space&quot; is the space of the result.
 * The parameters of &quot;mpa1&quot; and &quot;mpa2&quot; are assumed to have been aligned.
 *
 * &quot;mpa1&quot; is in the given lexicographic order compared to &quot;mpa2&quot;
 * if, for some i, the i-th element of &quot;mpa1&quot; is in that order compared to
 * the i-th element of &quot;mpa2&quot; while all previous elements are
 * pairwise equal, where the order needs to be strict (not-equal)
 * if i corresponds to anything but the last element.
 * The strict version of &quot;ORDER&quot; is defined by &quot;STRICT_ORDER&quot;,
 * which is the same if &quot;ORDER&quot; itself is strict.
 */</doc>
