<dec f='llvm/lldb/include/lldb/Core/Address.h' l='511' type='bool lldb_private::operator&lt;(const lldb_private::Address &amp; lhs, const lldb_private::Address &amp; rhs)'/>
<doc f='llvm/lldb/include/lldb/Core/Address.h' l='500'>// NOTE: Be careful using this operator. It can correctly compare two
// addresses from the same Module correctly. It can&apos;t compare two addresses
// from different modules in any meaningful way, but it will compare the module
// pointers.
//
// To sum things up:
// - works great for addresses within the same module - it works for addresses
// across multiple modules, but don&apos;t expect the
//   address results to make much sense
//
// This basically lets Address objects be used in ordered collection classes.</doc>
<def f='llvm/lldb/source/Core/Address.cpp' l='955' ll='968' type='bool lldb_private::operator&lt;(const lldb_private::Address &amp; lhs, const lldb_private::Address &amp; rhs)'/>
<doc f='llvm/lldb/source/Core/Address.cpp' l='943'>// NOTE: Be careful using this operator. It can correctly compare two
// addresses from the same Module correctly. It can&apos;t compare two addresses
// from different modules in any meaningful way, but it will compare the module
// pointers.
//
// To sum things up:
// - works great for addresses within the same module - it works for addresses
// across multiple modules, but don&apos;t expect the
//   address results to make much sense
//
// This basically lets Address objects be used in ordered collection classes.</doc>
