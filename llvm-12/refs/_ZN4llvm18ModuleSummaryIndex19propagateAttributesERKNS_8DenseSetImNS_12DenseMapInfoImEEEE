<dec f='llvm/llvm/include/llvm/IR/ModuleSummaryIndex.h' l='1499' type='void llvm::ModuleSummaryIndex::propagateAttributes(const DenseSet&lt;GlobalValue::GUID&gt; &amp; PreservedSymbols)'/>
<doc f='llvm/llvm/include/llvm/IR/ModuleSummaryIndex.h' l='1498'>/// Analyze index and detect unmodified globals</doc>
<def f='llvm/llvm/lib/IR/ModuleSummaryIndex.cpp' l='222' ll='277' type='void llvm::ModuleSummaryIndex::propagateAttributes(const DenseSet&lt;GlobalValue::GUID&gt; &amp; GUIDPreservedSymbols)'/>
<doc f='llvm/llvm/lib/IR/ModuleSummaryIndex.cpp' l='196'>// Do the access attribute propagation in combined index.
// The goal of attribute propagation is internalization of readonly (RO)
// or writeonly (WO) variables. To determine which variables are RO or WO
// and which are not we take following steps:
// - During analysis we speculatively assign readonly and writeonly
//   attribute to all variables which can be internalized. When computing
//   function summary we also assign readonly or writeonly attribute to a
//   reference if function doesn&apos;t modify referenced variable (readonly)
//   or doesn&apos;t read it (writeonly).
//
// - After computing dead symbols in combined index we do the attribute
//   propagation. During this step we:
//   a. clear RO and WO attributes from variables which are preserved or
//      can&apos;t be imported
//   b. clear RO and WO attributes from variables referenced by any global
//      variable initializer
//   c. clear RO attribute from variable referenced by a function when
//      reference is not readonly
//   d. clear WO attribute from variable referenced by a function when
//      reference is not writeonly
//
//   Because of (c, d) we don&apos;t internalize variables read by function A
//   and modified by function B.
//
// Internalization itself happens in the backend after import is finished
// See internalizeGVsAfterImport.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/FunctionImport.cpp' l='923' u='c' c='_ZN4llvm31computeDeadSymbolsWithConstPropERNS_18ModuleSummaryIndexERKNS_8DenseSetImNS_12DenseMapInfoImEEEENS_12function_refIFNS_14PrevailingTypeEmEEEb'/>
