<dec f='llvm/llvm/lib/Transforms/Scalar/GVNHoist.cpp' l='398' type='void llvm::GVNHoist::findHoistableCandidates(llvm::OutValuesType &amp; CHIBBs, llvm::GVNHoist::InsKind K, llvm::HoistingPointList &amp; HPL)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVNHoist.cpp' l='474' u='c' c='_ZN4llvm8GVNHoist22computeInsertionPointsERKNS_8DenseMapISt4pairIjjENS_11SmallVectorIPNS_11InstructionELj4EEENS_12DenseMapInfoIS3_EENS_6detail12DenseM10721621'/>
<def f='llvm/llvm/lib/Transforms/Scalar/GVNHoist.cpp' l='873' ll='915' type='void llvm::GVNHoist::findHoistableCandidates(llvm::OutValuesType &amp; CHIBBs, GVNHoist::InsKind K, llvm::HoistingPointList &amp; HPL)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/GVNHoist.cpp' l='394'>// Walk all the CHI-nodes to find ones which have a empty-entry and remove
  // them Then collect all the instructions which are safe to hoist and see if
  // they form a list of anticipable values. OutValues contains CHIs
  // corresponding to each basic block.</doc>
