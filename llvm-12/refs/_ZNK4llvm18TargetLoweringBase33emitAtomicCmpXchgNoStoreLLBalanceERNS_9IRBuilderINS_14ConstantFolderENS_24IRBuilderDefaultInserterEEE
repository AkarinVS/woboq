<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='1946' type='void llvm::TargetLoweringBase::emitAtomicCmpXchgNoStoreLLBalance(IRBuilder&lt;&gt; &amp; Builder) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='1938'>/// @}

  // Emits code that executes when the comparison result in the ll/sc
  // expansion of a cmpxchg instruction is such that the store-conditional will
  // not execute.  This makes it possible to balance out the load-linked with
  // a dedicated instruction, if desired.
  // E.g., on ARM, if ldrex isn&apos;t followed by strex, the exclusive monitor would
  // be unnecessarily held, except if clrex, inserted by this hook, is executed.</doc>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='391' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand20expandAtomicLoadToLLEPN4llvm8LoadInstE'/>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='1283' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand19expandAtomicCmpXchgEPN4llvm17AtomicCmpXchgInstE'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='16415' c='_ZNK4llvm21AArch64TargetLowering33emitAtomicCmpXchgNoStoreLLBalanceERNS_9IRBuilderINS_14ConstantFolderENS_24IRBuilderDefaultInserterEEE'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='18799' c='_ZNK4llvm17ARMTargetLowering33emitAtomicCmpXchgNoStoreLLBalanceERNS_9IRBuilderINS_14ConstantFolderENS_24IRBuilderDefaultInserterEEE'/>
