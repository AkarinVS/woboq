<dec f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1132' type='void llvm::TargetInstrInfo::genAlternativeCodeSequence(llvm::MachineInstr &amp; Root, llvm::MachineCombinerPattern Pattern, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; InsInstrs, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; DelInstrs, DenseMap&lt;unsigned int, unsigned int&gt; &amp; InstIdxForVirtReg) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1122'>/// When getMachineCombinerPatterns() finds patterns, this function generates
  /// the instructions that could replace the original code sequence. The client
  /// has to decide whether the actual replacement is beneficial or not.
  /// \param Root - Instruction that could be combined with one of its operands
  /// \param Pattern - Combination pattern for Root
  /// \param InsInstrs - Vector of new instructions that implement P
  /// \param DelInstrs - Old instructions, including Root, that could be
  /// replaced by InsInstr
  /// \param InstIdxForVirtReg - map of virtual register to instruction in
  /// InsInstr that defines it</doc>
<use f='llvm/llvm/lib/CodeGen/MachineCombiner.cpp' l='518' u='c' c='_ZN12_GLOBAL__N_115MachineCombiner18verifyPatternOrderEPN4llvm17MachineBasicBlockERNS1_12MachineInstrERNS1_11SmallVectorINS1_22MachineCombinerPatternELj16EEE'/>
<use f='llvm/llvm/lib/CodeGen/MachineCombiner.cpp' l='603' u='c' c='_ZN12_GLOBAL__N_115MachineCombiner19combineInstructionsEPN4llvm17MachineBasicBlockE'/>
<def f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='894' ll='919' type='void llvm::TargetInstrInfo::genAlternativeCodeSequence(llvm::MachineInstr &amp; Root, llvm::MachineCombinerPattern Pattern, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; InsInstrs, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; DelInstrs, DenseMap&lt;unsigned int, unsigned int&gt; &amp; InstIdxForVirtReg) const'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='4864' c='_ZNK4llvm16AArch64InstrInfo26genAlternativeCodeSequenceERNS_12MachineInstrENS_22MachineCombinerPatternERNS_15SmallVectorImplIPS1_EES7_RNS_8DenseMapIjj15663382'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='4880' u='c' c='_ZNK4llvm16AArch64InstrInfo26genAlternativeCodeSequenceERNS_12MachineInstrENS_22MachineCombinerPatternERNS_15SmallVectorImplIPS1_EES7_RNS_8DenseMapIjj15663382'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='774' c='_ZNK4llvm12PPCInstrInfo26genAlternativeCodeSequenceERNS_12MachineInstrENS_22MachineCombinerPatternERNS_15SmallVectorImplIPS1_EES7_RNS_8DenseMapIjjNS_15227899'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='788' u='c' c='_ZNK4llvm12PPCInstrInfo26genAlternativeCodeSequenceERNS_12MachineInstrENS_22MachineCombinerPatternERNS_15SmallVectorImplIPS1_EES7_RNS_8DenseMapIjjNS_15227899'/>
