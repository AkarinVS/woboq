<dec f='llvm/lldb/include/lldb/API/SBTrace.h' l='49' type='size_t lldb::SBTrace::GetTraceData(lldb::SBError &amp; error, void * buf, size_t size, size_t offset = 0, lldb::tid_t thread_id = 0)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='64396' u='c' c='_ZL26_wrap_SBTrace_GetTraceDataP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBTrace.h' l='22'>/// Obtain the trace data as raw bytes.
  ///
  /// \param[out] error
  ///     An error explaining what went wrong.
  ///
  /// \param[in] buf
  ///     Buffer to write the trace data to.
  ///
  /// \param[in] size
  ///     The size of the buffer used to read the data. This is
  ///     also the size of the data intended to read. It is also
  ///     possible to partially read the trace data for some trace
  ///     technologies by specifying a smaller buffer.
  ///
  /// \param[in] offset
  ///     The start offset to begin reading the trace data.
  ///
  /// \param[in] thread_id
  ///     Tracing could be started for the complete process or a
  ///     single thread, in the first case the traceid obtained would
  ///     map to all the threads existing within the process and the
  ///     ones spawning later. The thread_id parameter can be used in
  ///     such a scenario to select the trace data for a specific
  ///     thread.
  ///
  /// \return
  ///     The size of the trace data effectively read by the API call.</doc>
<def f='llvm/lldb/source/API/SBTrace.cpp' l='27' ll='44' type='size_t lldb::SBTrace::GetTraceData(lldb::SBError &amp; error, void * buf, size_t size, size_t offset = 0, lldb::tid_t thread_id = 0)'/>
