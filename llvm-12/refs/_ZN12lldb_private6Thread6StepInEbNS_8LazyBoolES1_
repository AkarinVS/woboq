<dec f='llvm/lldb/include/lldb/Target/Thread.h' l='519' type='lldb_private::Status lldb_private::Thread::StepIn(bool source_step, lldb_private::LazyBool step_in_avoids_code_without_debug_info = eLazyBoolCalculate, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='498'>/// Default implementation for stepping into.
  ///
  /// This function is designed to be used by commands where the
  /// process is publicly stopped.
  ///
  /// \param[in] source_step
  ///     If true and the frame has debug info, then do a source level
  ///     step in, else do a single instruction step in.
  ///
  /// \param[in] step_in_avoids_code_without_debug_info
  ///     If \a true, then avoid stepping into code that doesn&apos;t have
  ///     debug info, else step into any code regardless of whether it
  ///     has debug info.
  ///
  /// \param[in] step_out_avoids_code_without_debug_info
  ///     If \a true, then if you step out to code with no debug info, keep
  ///     stepping out till you get to code with debug info.
  ///
  /// \return
  ///     An error that describes anything that went wrong</doc>
<use f='llvm/lldb/source/Core/IOHandlerCursesGUI.cpp' l='3096' u='c' c='_ZN19ApplicationDelegate18MenuDelegateActionERN6curses4MenuE'/>
<use f='llvm/lldb/source/Core/IOHandlerCursesGUI.cpp' l='4037' u='c' c='_ZN24SourceFileWindowDelegate24WindowDelegateHandleCharERN6curses6WindowEi'/>
<def f='llvm/lldb/source/Target/Thread.cpp' l='1902' ll='1936' type='lldb_private::Status lldb_private::Thread::StepIn(bool source_step, lldb_private::LazyBool step_in_avoids_code_without_debug_info = eLazyBoolCalculate, lldb_private::LazyBool step_out_avoids_code_without_debug_info = eLazyBoolCalculate)'/>
