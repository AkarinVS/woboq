<dec f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl.h' l='794' type='void __tsan::MutexCreate(__tsan::ThreadState * thr, __sanitizer::uptr pc, __sanitizer::uptr addr, __sanitizer::u32 flagz = 0)'/>
<doc f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl.h' l='792'>// Note: the parameter is called flagz, because flags is already taken
// by the global function that returns flags.</doc>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='1269' u='c' c='__interceptor_pthread_mutex_init'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='1309' u='c' c='__interceptor_pthread_spin_init'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='1354' u='c' c='__interceptor_pthread_rwlock_init'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interface_ann.cpp' l='255' u='c' c='AnnotateRWLockCreate'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interface_ann.cpp' l='260' u='c' c='AnnotateRWLockCreateStatic'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interface_ann.cpp' l='467' u='c' c='__tsan_mutex_create'/>
<def f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl_mutex.cpp' l='64' ll='78' type='void __tsan::MutexCreate(__tsan::ThreadState * thr, __sanitizer::uptr pc, __sanitizer::uptr addr, __sanitizer::u32 flagz = 0)'/>
