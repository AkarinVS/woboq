<def f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='1096' ll='1100' type='llvm::BasicBlock * llvm::memoryaccess_def_iterator_base::getPhiArgBlock() const'/>
<use f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='1214' u='c' c='_ZNK4llvm20upward_defs_iterator14getPhiArgBlockEv'/>
<use f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='1240' u='c' c='_ZN4llvm20upward_defs_iterator17fillInCurrentPairEv'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='1090'>// This is a bit ugly, but for MemoryPHI&apos;s, unlike PHINodes, you can&apos;t get the
  // block from the operand in constant time (In a PHINode, the uselist has
  // both, so it&apos;s just subtraction). We provide it as part of the
  // iterator to avoid callers having to linear walk to get the block.
  // If the operation becomes constant time on MemoryPHI&apos;s, this bit of
  // abstraction breaking should be removed.</doc>
