<dec f='llvm/llvm/include/llvm/Demangle/MicrosoftDemangle.h' l='185' type='std::pair&lt;uint64_t, bool&gt; llvm::ms_demangle::Demangler::demangleNumber(llvm::itanium_demangle::StringView &amp; MangledName)'/>
<def f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='893' ll='918' type='std::pair&lt;uint64_t, bool&gt; llvm::ms_demangle::Demangler::demangleNumber(llvm::itanium_demangle::StringView &amp; MangledName)'/>
<use f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='923' u='c' c='_ZN4llvm11ms_demangle9Demangler16demangleUnsignedERNS_16itanium_demangle10StringViewE'/>
<use f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='932' u='c' c='_ZN4llvm11ms_demangle9Demangler14demangleSignedERNS_16itanium_demangle10StringViewE'/>
<use f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='1309' u='c' c='_ZN4llvm11ms_demangle9Demangler21demangleStringLiteralERNS_16itanium_demangle10StringViewE'/>
<use f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='1438' u='c' c='_ZN4llvm11ms_demangle9Demangler30demangleLocallyScopedNamePieceERNS_16itanium_demangle10StringViewE'/>
<use f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='2076' u='c' c='_ZN4llvm11ms_demangle9Demangler17demangleArrayTypeERNS_16itanium_demangle10StringViewE'/>
<use f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='2088' u='c' c='_ZN4llvm11ms_demangle9Demangler17demangleArrayTypeERNS_16itanium_demangle10StringViewE'/>
<use f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='2285' u='c' c='_ZN4llvm11ms_demangle9Demangler29demangleTemplateParameterListERNS_16itanium_demangle10StringViewE'/>
<doc f='llvm/llvm/lib/Demangle/MicrosoftDemangle.cpp' l='882'>// Sometimes numbers are encoded in mangled symbols. For example,
// &quot;int (*x)[20]&quot; is a valid C type (x is a pointer to an array of
// length 20), so we need some way to embed numbers as part of symbols.
// This function parses it.
//
// &lt;number&gt;               ::= [?] &lt;non-negative integer&gt;
//
// &lt;non-negative integer&gt; ::= &lt;decimal digit&gt; # when 1 &lt;= Number &lt;= 10
//                        ::= &lt;hex digit&gt;+ @  # when Number == 0 or &gt;= 10
//
// &lt;hex-digit&gt;            ::= [A-P]           # A = 0, B = 1, ...</doc>
