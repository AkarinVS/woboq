<dec f='include/python3.8/cpython/pymem.h' l='67' type='void (*)(void *, void *)'/>
<dec f='include/python3.8/cpython/objimpl.h' l='26' type='void (*)(void *, void *, size_t)'/>
<offset>128</offset>
<doc f='include/python3.8/cpython/pymem.h' l='66'>/* release a memory block */</doc>
<doc f='include/python3.8/cpython/objimpl.h' l='25'>/* free an arena */</doc>
<dec f='include/lzma/base.h' l='421' type='void (*)(void *, void *)'/>
<offset>64</offset>
<doc f='include/lzma/base.h' l='409'>/**
	 * \brief       Pointer to a custom memory freeing function
	 *
	 * If you don&apos;t want a custom freeing function, but still
	 * want a custom allocator, set this to NULL and liblzma
	 * will use the standard free().
	 *
	 * \param       opaque  lzma_allocator.opaque (see below)
	 * \param       ptr     Pointer returned by lzma_allocator.alloc(),
	 *                      or when it is set to NULL, a pointer returned
	 *                      by the standard malloc().
	 */</doc>
