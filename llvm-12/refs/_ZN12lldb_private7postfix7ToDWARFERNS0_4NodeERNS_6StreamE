<dec f='llvm/lldb/include/lldb/Symbol/PostfixExpression.h' l='225' type='void lldb_private::postfix::ToDWARF(lldb_private::postfix::Node &amp; node, lldb_private::Stream &amp; stream)'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/Breakpad/SymbolFileBreakpad.cpp' l='441' u='c' c='_ZN12lldb_private8breakpad18SymbolFileBreakpad11SaveAsDWARFERNS_7postfix4NodeE'/>
<doc f='llvm/lldb/include/lldb/Symbol/PostfixExpression.h' l='220'>/// Serialize the given expression tree as DWARF. The result is written into the
/// given stream. The AST should not contain any SymbolNodes. If the expression
/// contains InitialValueNodes, the generated expression will assume that their
/// value will be provided as the top value of the initial evaluation stack (as
/// is the case with the CFA value in register eh_unwind rules).</doc>
<use f='llvm/lldb/source/Plugins/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpression.cpp' l='101' u='c' c='_ZN12lldb_private4npdb36TranslateFPOProgramToDWARFExpressionEN4llvm9StringRefES2_NS1_6Triple8ArchTypeERNS_6StreamE'/>
<def f='llvm/lldb/source/Symbol/PostfixExpression.cpp' l='245' ll='248' type='void lldb_private::postfix::ToDWARF(lldb_private::postfix::Node &amp; node, lldb_private::Stream &amp; stream)'/>
<use f='llvm/lldb/unittests/Symbol/PostfixExpressionTest.cpp' l='152' u='c' c='_ZL21ParseAndGenerateDWARFB5cxx11N4llvm9StringRefE'/>
