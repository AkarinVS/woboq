<dec f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='565' type='llvm::OpenMPIRBuilder::InsertPointTy llvm::OpenMPIRBuilder::createCopyinClauseBlocks(llvm::OpenMPIRBuilder::InsertPointTy IP, llvm::Value * MasterAddr, llvm::Value * PrivateAddr, llvm::IntegerType * IntPtrTy, bool BranchtoEnd = true)'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='553'>/// Generate conditional branch and relevant BasicBlocks through which private
  /// threads copy the &apos;copyin&apos; variables from Master copy to threadprivate
  /// copies.
  ///
  /// \param IP insertion block for copyin conditional
  /// \param MasterVarPtr a pointer to the master variable
  /// \param PrivateVarPtr a pointer to the threadprivate variable
  /// \param IntPtrTy Pointer size type
  /// \param BranchtoEnd Create a branch between the copyin.not.master blocks
  //				 and copy.in.end block
  ///
  /// \returns The insertion point where copying operation to be emitted.</doc>
<def f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='1633' ll='1681' type='OpenMPIRBuilder::InsertPointTy llvm::OpenMPIRBuilder::createCopyinClauseBlocks(llvm::OpenMPIRBuilder::InsertPointTy IP, llvm::Value * MasterAddr, llvm::Value * PrivateAddr, llvm::IntegerType * IntPtrTy, bool BranchtoEnd = true)'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1787' u='c' c='_ZN12_GLOBAL__N_137OpenMPIRBuilderTest_CopyinBlocks_Test8TestBodyEv'/>
