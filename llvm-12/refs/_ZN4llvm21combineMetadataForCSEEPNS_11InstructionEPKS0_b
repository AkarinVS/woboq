<dec f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='385' type='void llvm::combineMetadataForCSE(llvm::Instruction * K, const llvm::Instruction * J, bool DoesKMove)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='379'>/// Combine the metadata of two instructions so that K can replace J. This
/// specifically handles the case of CSE-like transformations. Some
/// metadata can only be kept if K dominates J. For this to be correct,
/// K cannot be hoisted.
///
/// Unknown metadata is removed.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='964' u='c' c='_ZN4llvm16InstCombinerImpl13visitLoadInstERNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVNSink.cpp' l='869' u='c' c='_ZN12_GLOBAL__N_17GVNSink19sinkLastInstructionEN4llvm8ArrayRefIPNS1_10BasicBlockEEES4_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1337' u='c' c='_ZN4llvm17JumpThreadingPass30simplifyPartiallyRedundantLoadEPNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1528' u='c' c='_ZN4llvm17JumpThreadingPass30simplifyPartiallyRedundantLoadEPNS_8LoadInstE'/>
<def f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2544' ll='2555' type='void llvm::combineMetadataForCSE(llvm::Instruction * K, const llvm::Instruction * J, bool KDominatesJ)'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1799' u='c' c='_ZL19sinkLastInstructionN4llvm8ArrayRefIPNS_10BasicBlockEEE'/>
