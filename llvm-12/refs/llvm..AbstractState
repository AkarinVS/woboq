<def f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='1712' ll='1738'/>
<ovr f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='1751' c='llvm::IntegerStateBase'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='1751'/>
<ovr f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2035' c='llvm::IntegerRangeState'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2035'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2266'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2359' c='_ZN4llvmlsERNS_11raw_ostreamERKNS_13AbstractStateE'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2365' c='_ZN4llvmlsERNS_11raw_ostreamERKNS_16IntegerStateBaseIT_XT0_EXT1_EEE'/>
<ovr f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2828' c='llvm::DerefState'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='2828'/>
<ovr f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='3523' c='llvm::PotentialValuesState'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='3523'/>
<size>8</size>
<doc f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='1695'>/// An interface to query the internal state of an abstract attribute.
///
/// The abstract state is a minimal interface that allows the Attributor to
/// communicate with the abstract attributes about their internal state without
/// enforcing or exposing implementation details, e.g., the (existence of an)
/// underlying lattice.
///
/// It is sufficient to be able to query if a state is (1) valid or invalid, (2)
/// at a fixpoint, and to indicate to the state that (3) an optimistic fixpoint
/// was reached or (4) a pessimistic fixpoint was enforced.
///
/// All methods need to be implemented by the subclass. For the common use case,
/// a single boolean state or a bit-encoded state, the BooleanState and
/// {Inc,Dec,Bit}IntegerState classes are already provided. An abstract
/// attribute can inherit from them to get the abstract state interface and
/// additional methods to directly modify the state based if needed. See the
/// class comments for help.</doc>
<fun r='_ZN4llvm13AbstractStateD1Ev'/>
<fun r='_ZNK4llvm13AbstractState12isValidStateEv'/>
<fun r='_ZNK4llvm13AbstractState12isAtFixpointEv'/>
<fun r='_ZN4llvm13AbstractState26indicateOptimisticFixpointEv'/>
<fun r='_ZN4llvm13AbstractState27indicatePessimisticFixpointEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='1079' c='_ZN4llvm10Attributor15runTillFixpointEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='1118' c='_ZN4llvm10Attributor18manifestAttributesEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='2214' c='_ZN4llvmlsERNS_11raw_ostreamERKNS_17IntegerRangeStateE'/>
<use f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='2217' c='_ZN4llvmlsERNS_11raw_ostreamERKNS_13AbstractStateE'/>
<size>8</size>
<ovr f='llvm/llvm/lib/Transforms/IPO/AttributorAttributes.cpp' l='768' c='(anonymousnamespace)::AAReturnedValuesImpl'/>
<use f='llvm/llvm/lib/Transforms/IPO/AttributorAttributes.cpp' l='768'/>
<use f='llvm/llvm/lib/Transforms/IPO/AttributorAttributes.cpp' l='831' c='_ZN12_GLOBAL__N_120AAReturnedValuesImpl8getStateEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/AttributorAttributes.cpp' l='834' c='_ZNK12_GLOBAL__N_120AAReturnedValuesImpl8getStateEv'/>
<size>8</size>
