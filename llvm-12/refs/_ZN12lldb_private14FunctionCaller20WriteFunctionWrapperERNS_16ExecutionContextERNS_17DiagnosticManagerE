<dec f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='133' type='bool lldb_private::FunctionCaller::WriteFunctionWrapper(lldb_private::ExecutionContext &amp; exe_ctx, lldb_private::DiagnosticManager &amp; diagnostic_manager)'/>
<def f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='63' ll='113' type='bool lldb_private::FunctionCaller::WriteFunctionWrapper(lldb_private::ExecutionContext &amp; exe_ctx, lldb_private::DiagnosticManager &amp; diagnostic_manager)'/>
<use f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='216' u='c' c='_ZN12lldb_private14FunctionCaller14InsertFunctionERNS_16ExecutionContextERmRNS_17DiagnosticManagerE'/>
<doc f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='122'>/// Insert the default function wrapper (using the JIT)
  ///
  /// \param[in] exe_ctx
  ///     The execution context to insert the function and its arguments
  ///     into.
  ///
  /// \param[in] diagnostic_manager
  ///     The diagnostic manager to report errors to.
  ///
  /// \return
  ///     True on success; false otherwise.</doc>
<use f='llvm/lldb/source/Expression/UtilityFunction.cpp' l='100' u='c' c='_ZN12lldb_private15UtilityFunction18MakeFunctionCallerERKNS_12CompilerTypeERKNS_9ValueListESt10shared_ptrINS_6ThreadEERNS_6StatusE'/>
