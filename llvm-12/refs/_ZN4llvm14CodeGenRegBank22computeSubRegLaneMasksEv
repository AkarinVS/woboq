<dec f='llvm/llvm/utils/TableGen/CodeGenRegisters.h' l='614' type='void llvm::CodeGenRegBank::computeSubRegLaneMasks()'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenRegisters.h' l='613'>// Compute a lane mask for each sub-register index.</doc>
<def f='llvm/llvm/utils/TableGen/CodeGenRegisters.cpp' l='1441' ll='1566' type='void llvm::CodeGenRegBank::computeSubRegLaneMasks()'/>
<use f='llvm/llvm/utils/TableGen/CodeGenRegisters.cpp' l='2099' u='c' c='_ZN4llvm14CodeGenRegBank18computeDerivedInfoEv'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenRegisters.cpp' l='1434'>// Compute lane masks. This is similar to register units, but at the
// sub-register index level. Each bit in the lane mask is like a register unit
// class, and two lane masks will have a bit in common if two sub-register
// indices overlap in some register.
//
// Conservatively share a lane mask bit if two sub-register indices overlap in
// some registers, but not in others. That shouldn&apos;t happen a lot.</doc>
