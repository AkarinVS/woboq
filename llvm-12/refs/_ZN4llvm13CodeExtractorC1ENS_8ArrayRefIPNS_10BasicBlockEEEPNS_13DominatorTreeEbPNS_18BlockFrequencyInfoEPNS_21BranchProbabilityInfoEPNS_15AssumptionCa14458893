<dec f='llvm/llvm/include/llvm/Transforms/Utils/CodeExtractor.h' l='119' type='void llvm::CodeExtractor::CodeExtractor(ArrayRef&lt;llvm::BasicBlock *&gt; BBs, llvm::DominatorTree * DT = nullptr, bool AggregateArgs = false, llvm::BlockFrequencyInfo * BFI = nullptr, llvm::BranchProbabilityInfo * BPI = nullptr, llvm::AssumptionCache * AC = nullptr, bool AllowVarArgs = false, bool AllowAlloca = false, std::string Suffix = &quot;&quot;)'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='139' u='c' c='_ZN4llvm15OpenMPIRBuilder8finalizeEb'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='693' u='c' c='_ZN4llvm15OpenMPIRBuilder14createParallelERKNS0_19LocationDescriptionENS_13IRBuilderBase11InsertPointENS_12function_refIFvS5_S5_RNS_10BasicBlockEEEENS2523171'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/CodeExtractor.h' l='109'>/// Create a code extractor for a sequence of blocks.
    ///
    /// Given a sequence of basic blocks where the first block in the sequence
    /// dominates the rest, prepare a code extractor object for pulling this
    /// sequence out into its new function. When a DominatorTree is also given,
    /// extra checking and transformations are enabled. If AllowVarArgs is true,
    /// vararg functions can be extracted. This is safe, if all vararg handling
    /// code is extracted, including vastart. If AllowAlloca is true, then
    /// extraction of blocks containing alloca instructions would be possible,
    /// however code extractor won&apos;t validate whether extraction is legal.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/BlockExtractor.cpp' l='225' u='c' c='_ZN12_GLOBAL__N_114BlockExtractor11runOnModuleERN4llvm6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/IPO/HotColdSplitting.cpp' l='352' u='c' c='_ZN4llvm16HotColdSplitting17extractColdRegionERKNS_11SmallVectorIPNS_10BasicBlockELj0EEERKNS_26CodeExtractorAnalysisCacheERNS_13DominatorTreeEPNS_18Bl3633580'/>
<use f='llvm/llvm/lib/Transforms/IPO/IROutliner.cpp' l='1582' u='c' c='_ZN4llvm10IROutliner9doOutlineERNS_6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PartialInlining.cpp' l='1158' u='c' c='_ZN12_GLOBAL__N_118PartialInlinerImpl14FunctionCloner30doMultiRegionFunctionOutliningEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/PartialInlining.cpp' l='1240' u='c' c='_ZN12_GLOBAL__N_118PartialInlinerImpl14FunctionCloner31doSingleRegionFunctionOutliningEv'/>
<def f='llvm/llvm/lib/Transforms/Utils/CodeExtractor.cpp' l='247' ll='255' type='void llvm::CodeExtractor::CodeExtractor(ArrayRef&lt;llvm::BasicBlock *&gt; BBs, llvm::DominatorTree * DT = nullptr, bool AggregateArgs = false, llvm::BlockFrequencyInfo * BFI = nullptr, llvm::BranchProbabilityInfo * BPI = nullptr, llvm::AssumptionCache * AC = nullptr, bool AllowVarArgs = false, bool AllowAlloca = false, std::string Suffix = &quot;&quot;)'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CodeExtractorTest.cpp' l='62' u='c' c='_ZN12_GLOBAL__N_127CodeExtractor_ExitStub_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CodeExtractorTest.cpp' l='113' u='c' c='_ZN12_GLOBAL__N_143CodeExtractor_ExitPHIOnePredFromRegion_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CodeExtractorTest.cpp' l='188' u='c' c='_ZN12_GLOBAL__N_152CodeExtractor_StoreOutputInvokeResultAfterEHPad_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CodeExtractorTest.cpp' l='223' u='c' c='_ZN12_GLOBAL__N_152CodeExtractor_StoreOutputInvokeResultInExitStub_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CodeExtractorTest.cpp' l='275' u='c' c='_ZN12_GLOBAL__N_154CodeExtractor_ExtractAndInvalidateAssumptionCache_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CodeExtractorTest.cpp' l='319' u='c' c='_ZN12_GLOBAL__N_160CodeExtractor_RemoveBitcastUsesFromOuterLifetimeMarkers_Test8TestBodyEv'/>
