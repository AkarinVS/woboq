<def f='llvm/lldb/include/lldb/Symbol/PostfixExpression.h' l='163' ll='193'/>
<doc f='llvm/lldb/include/lldb/Symbol/PostfixExpression.h' l='153'>/// A template class implementing a visitor pattern, but with a couple of
/// twists:
/// - It uses type switch instead of virtual double dispatch. This allows the
//    node classes to be vtable-free and trivially destructible.
/// - The Visit functions get an extra Node *&amp; parameter, which refers to the
///   child pointer of the parent of the node we are currently visiting. This
///   allows mutating algorithms, which replace the currently visited node with
///   a different one.
/// - The class is templatized on the return type of the Visit functions, which
///   means it&apos;s possible to return values from them.</doc>
<fun r='_ZN12lldb_private7postfix7VisitorD1Ev'/>
<fun r='_ZN12lldb_private7postfix7Visitor5VisitERNS0_12BinaryOpNodeERPNS0_4NodeE'/>
<fun r='_ZN12lldb_private7postfix7Visitor5VisitERNS0_16InitialValueNodeERPNS0_4NodeE'/>
<fun r='_ZN12lldb_private7postfix7Visitor5VisitERNS0_11IntegerNodeERPNS0_4NodeE'/>
<fun r='_ZN12lldb_private7postfix7Visitor5VisitERNS0_12RegisterNodeERPNS0_4NodeE'/>
<fun r='_ZN12lldb_private7postfix7Visitor5VisitERNS0_10SymbolNodeERPNS0_4NodeE'/>
<fun r='_ZN12lldb_private7postfix7Visitor5VisitERNS0_11UnaryOpNodeERPNS0_4NodeE'/>
<fun r='_ZN12lldb_private7postfix7Visitor8DispatchERPNS0_4NodeE'/>
<ovr f='llvm/lldb/source/Symbol/PostfixExpression.cpp' l='108' c='(anonymousnamespace)::SymbolResolver'/>
<use f='llvm/lldb/source/Symbol/PostfixExpression.cpp' l='108'/>
<use f='llvm/lldb/source/Symbol/PostfixExpression.cpp' l='113'/>
<ovr f='llvm/lldb/source/Symbol/PostfixExpression.cpp' l='141' c='(anonymousnamespace)::DWARFCodegen'/>
<use f='llvm/lldb/source/Symbol/PostfixExpression.cpp' l='141'/>
<use f='llvm/lldb/source/Symbol/PostfixExpression.cpp' l='145'/>
<ovr f='llvm/lldb/unittests/Symbol/PostfixExpressionTest.cpp' l='41' c='ASTPrinter'/>
<use f='llvm/lldb/unittests/Symbol/PostfixExpressionTest.cpp' l='41'/>
