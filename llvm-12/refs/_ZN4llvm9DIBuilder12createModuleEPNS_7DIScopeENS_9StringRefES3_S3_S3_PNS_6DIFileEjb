<dec f='llvm/llvm/include/llvm/IR/DIBuilder.h' l='783' type='llvm::DIModule * llvm::DIBuilder::createModule(llvm::DIScope * Scope, llvm::StringRef Name, llvm::StringRef ConfigurationMacros, llvm::StringRef IncludePath, llvm::StringRef APINotesFile = {}, llvm::DIFile * File = nullptr, unsigned int LineNo = 0, bool IsDecl = false)'/>
<doc f='llvm/llvm/include/llvm/IR/DIBuilder.h' l='766'>/// This creates new descriptor for a module with the specified
    /// parent scope.
    /// \param Scope       Parent scope
    /// \param Name        Name of this module
    /// \param ConfigurationMacros
    ///                    A space-separated shell-quoted list of -D macro
    ///                    definitions as they would appear on a command line.
    /// \param IncludePath The path to the module map file.
    /// \param APINotesFile The path to an API notes file for this module.
    /// \param File        Source file of the module.
    ///                    Used for Fortran modules.
    /// \param LineNo      Source line number of the module.
    ///                    Used for Fortran modules.
    /// \param IsDecl      This is a module declaration; default to false;
    ///                    when set to true, only Scope and Name are required
    ///                    as this entry is just a hint for the debugger to find
    ///                    the corresponding definition in the global scope.</doc>
<use f='llvm/clang/lib/CodeGen/CGDebugInfo.cpp' l='2615' u='c' c='_ZN5clang7CodeGen11CGDebugInfo20getOrCreateModuleRefENS_19ASTSourceDescriptorEb'/>
<def f='llvm/llvm/lib/IR/DIBuilder.cpp' l='874' ll='881' type='llvm::DIModule * llvm::DIBuilder::createModule(llvm::DIScope * Scope, llvm::StringRef Name, llvm::StringRef ConfigurationMacros, llvm::StringRef IncludePath, llvm::StringRef APINotesFile = {}, llvm::DIFile * File = nullptr, unsigned int LineNo = 0, bool IsDecl = false)'/>
<use f='llvm/llvm/lib/IR/DebugInfo.cpp' l='826' u='c' c='LLVMDIBuilderCreateModule'/>
