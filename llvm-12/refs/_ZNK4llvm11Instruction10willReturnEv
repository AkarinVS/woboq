<dec f='llvm/llvm/include/llvm/IR/Instruction.h' l='638' type='bool llvm::Instruction::willReturn() const'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='636'>/// Return true if the instruction will return (unwinding is considered as
  /// a form of returning control flow here).</doc>
<use f='llvm/llvm/lib/Analysis/DemandedBits.cpp' l='83' u='c' c='_ZL12isAlwaysLivePN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5028' u='c' c='_ZN4llvm42isGuaranteedToTransferExecutionToSuccessorEPKNS_11InstructionE'/>
<def f='llvm/llvm/lib/IR/Instruction.cpp' l='636' ll='644' type='bool llvm::Instruction::willReturn() const'/>
<use f='llvm/llvm/lib/Transforms/IPO/FunctionAttrs.cpp' l='1455' u='c' c='_ZL18functionWillReturnRKN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ADCE.cpp' l='328' u='c' c='_ZN12_GLOBAL__N_129AggressiveDeadCodeElimination12isAlwaysLiveERN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='423' u='c' c='_ZN4llvm31wouldInstructionBeTriviallyDeadEPNS_11InstructionEPKNS_17TargetLibraryInfoE'/>
