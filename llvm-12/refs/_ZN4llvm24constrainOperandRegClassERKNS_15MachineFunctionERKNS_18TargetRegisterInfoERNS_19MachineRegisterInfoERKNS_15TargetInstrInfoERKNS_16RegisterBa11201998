<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/Utils.h' l='80' type='llvm::Register llvm::constrainOperandRegClass(const llvm::MachineFunction &amp; MF, const llvm::TargetRegisterInfo &amp; TRI, llvm::MachineRegisterInfo &amp; MRI, const llvm::TargetInstrInfo &amp; TII, const llvm::RegisterBankInfo &amp; RBI, llvm::MachineInstr &amp; InsertPt, const llvm::MCInstrDesc &amp; II, llvm::MachineOperand &amp; RegMO, unsigned int OpIdx)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/Utils.h' l='70'>/// Try to constrain Reg so that it is usable by argument OpIdx of the provided
/// MCInstrDesc \p II. If this fails, create a new virtual register in the
/// correct class and insert a COPY before \p InsertPt if it is a use or after
/// if it is a definition. In both cases, the function also updates the register
/// of RegMo.
/// This is equivalent to constrainOperandRegClass(..., RegClass, ...)
/// with RegClass obtained from the MCInstrDesc. The debug location of \p
/// InsertPt is used for the new copy.
///
/// \return The virtual register constrained to the right register class.</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/Utils.cpp' l='92' ll='131' type='llvm::Register llvm::constrainOperandRegClass(const llvm::MachineFunction &amp; MF, const llvm::TargetRegisterInfo &amp; TRI, llvm::MachineRegisterInfo &amp; MRI, const llvm::TargetInstrInfo &amp; TII, const llvm::RegisterBankInfo &amp; RBI, llvm::MachineInstr &amp; InsertPt, const llvm::MCInstrDesc &amp; II, llvm::MachineOperand &amp; RegMO, unsigned int OpIdx)'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/Utils.cpp' l='166' u='c' c='_ZN4llvm32constrainSelectedInstRegOperandsERNS_12MachineInstrERKNS_15TargetInstrInfoERKNS_18TargetRegisterInfoERKNS_16RegisterBankInfoE'/>
<use f='llvm/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp' l='897' u='c' c='_ZNK4llvm19AArch64CallLowering13lowerTailCallERNS_16MachineIRBuilderERNS_12CallLowering16CallLoweringInfoERNS_15SmallVectorImplINS3_7ArgInfoEEE'/>
<use f='llvm/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp' l='981' u='c' c='_ZNK4llvm19AArch64CallLowering9lowerCallERNS_16MachineIRBuilderERNS_12CallLowering16CallLoweringInfoE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp' l='1337' u='c' c='_ZNK4llvm18AMDGPUCallLowering9lowerCallERNS_16MachineIRBuilderERNS_12CallLowering16CallLoweringInfoE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMCallLowering.cpp' l='533' u='c' c='_ZNK4llvm15ARMCallLowering9lowerCallERNS_16MachineIRBuilderERNS_12CallLowering16CallLoweringInfoE'/>
<use f='llvm/llvm/lib/Target/X86/X86CallLowering.cpp' l='449' u='c' c='_ZNK4llvm15X86CallLowering9lowerCallERNS_16MachineIRBuilderERNS_12CallLowering16CallLoweringInfoE'/>
