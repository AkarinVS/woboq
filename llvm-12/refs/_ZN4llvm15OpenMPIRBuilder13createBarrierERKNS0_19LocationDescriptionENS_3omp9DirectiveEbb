<dec f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='163' type='llvm::OpenMPIRBuilder::InsertPointTy llvm::OpenMPIRBuilder::createBarrier(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, omp::Directive DK, bool ForceSimpleCall = false, bool CheckCancelFlag = true)'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='150'>/// Emitter methods for OpenMP directives.
  ///
  ///{

  /// Generator for &apos;#omp barrier&apos;
  ///
  /// \param Loc The location where the barrier directive was encountered.
  /// \param DK The kind of directive that caused the barrier.
  /// \param ForceSimpleCall Flag to force a simple (=non-cancellation) barrier.
  /// \param CheckCancelFlag Flag to indicate a cancel barrier return value
  ///                        should be checked and acted upon.
  ///
  /// \returns The insertion point after the barrier.</doc>
<use f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='2526' u='c' c='_ZN5clang7CodeGen15CGOpenMPRuntime15emitBarrierCallERNS0_15CodeGenFunctionENS_14SourceLocationEN4llvm3omp9DirectiveEbb'/>
<def f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='310' ll='316' type='OpenMPIRBuilder::InsertPointTy llvm::OpenMPIRBuilder::createBarrier(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::omp::Directive DK, bool ForceSimpleCall = false, bool CheckCancelFlag = true)'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='1159' u='c' c='_ZN4llvm15OpenMPIRBuilder25createStaticWorkshareLoopERKNS0_19LocationDescriptionEPNS_17CanonicalLoopInfoENS_13IRBuilderBase11InsertPointEbPNS_5ValueE'/>
<use f='llvm/llvm/lib/Transforms/IPO/OpenMPOpt.cpp' l='717' u='c' c='_ZN12_GLOBAL__N_19OpenMPOpt20mergeParallelRegionsEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/OpenMPOpt.cpp' l='831' u='c' c='_ZN12_GLOBAL__N_19OpenMPOpt20mergeParallelRegionsEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='177' u='c' c='_ZN12_GLOBAL__N_138OpenMPIRBuilderTest_CreateBarrier_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='184' u='c' c='_ZN12_GLOBAL__N_138OpenMPIRBuilderTest_CreateBarrier_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='343' u='c' c='_ZN12_GLOBAL__N_144OpenMPIRBuilderTest_CreateCancelBarrier_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='389' u='c' c='_ZN12_GLOBAL__N_131OpenMPIRBuilderTest_DbgLoc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='866' u='c' c='_ZN12_GLOBAL__N_146OpenMPIRBuilderTest_ParallelCancelBarrier_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='878' u='c' c='_ZN12_GLOBAL__N_146OpenMPIRBuilderTest_ParallelCancelBarrier_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='888' u='c' c='_ZN12_GLOBAL__N_146OpenMPIRBuilderTest_ParallelCancelBarrier_Test8TestBodyEv'/>
