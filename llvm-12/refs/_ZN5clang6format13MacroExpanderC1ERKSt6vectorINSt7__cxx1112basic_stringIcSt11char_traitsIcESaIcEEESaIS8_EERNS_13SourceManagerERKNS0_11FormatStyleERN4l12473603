<dec f='llvm/clang/lib/Format/Macros.h' l='106' type='void clang::format::MacroExpander::MacroExpander(const std::vector&lt;std::string&gt; &amp; Macros, clang::SourceManager &amp; SourceMgr, const clang::format::FormatStyle &amp; Style, llvm::SpecificBumpPtrAllocator&lt;FormatToken&gt; &amp; Allocator, clang::IdentifierTable &amp; IdentTable)'/>
<def f='llvm/clang/lib/Format/MacroExpander.cpp' l='122' ll='132' type='void clang::format::MacroExpander::MacroExpander(const std::vector&lt;std::string&gt; &amp; Macros, clang::SourceManager &amp; SourceMgr, const clang::format::FormatStyle &amp; Style, llvm::SpecificBumpPtrAllocator&lt;FormatToken&gt; &amp; Allocator, clang::IdentifierTable &amp; IdentTable)'/>
<doc f='llvm/clang/lib/Format/Macros.h' l='93'>/// Construct a macro expander from a set of macro definitions.
  /// Macro definitions must be encoded as UTF-8.
  ///
  /// Each entry in \p Macros must conform to the following simple
  /// macro-definition language:
  /// &lt;definition&gt; ::= &lt;id&gt; &lt;expansion&gt; | &lt;id&gt; &quot;(&quot; &lt;params&gt; &quot;)&quot; &lt;expansion&gt;
  /// &lt;params&gt;     ::= &lt;id-list&gt; | &quot;&quot;
  /// &lt;id-list&gt;    ::= &lt;id&gt; | &lt;id&gt; &quot;,&quot; &lt;params&gt;
  /// &lt;expansion&gt;  ::= &quot;=&quot; &lt;tail&gt; | &lt;eof&gt;
  /// &lt;tail&gt;       ::= &lt;tok&gt; &lt;tail&gt; | &lt;eof&gt;
  ///
  /// Macros that cannot be parsed will be silently discarded.
  ///</doc>
