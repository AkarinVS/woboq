<dec f='llvm/polly/include/polly/Support/SCEVValidator.h' l='95' type='const llvm::SCEV * polly::tryForwardThroughPHI(const llvm::SCEV * Expr, llvm::Region &amp; R, llvm::ScalarEvolution &amp; SE, llvm::LoopInfo &amp; LI, const llvm::DominatorTree &amp; DT)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='499' u='c' c='_ZN5polly11ScopBuilder18buildConditionSetsEPN4llvm10BasicBlockEPNS1_5ValueEPNS1_11InstructionEPNS1_4LoopEP7isl_setRNS1_8DenseMapIS3_N3isl12noexception4960138'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='500' u='c' c='_ZN5polly11ScopBuilder18buildConditionSetsEPN4llvm10BasicBlockEPNS1_5ValueEPNS1_11InstructionEPNS1_4LoopEP7isl_setRNS1_8DenseMapIS3_N3isl12noexception4960138'/>
<doc f='llvm/polly/include/polly/Support/SCEVValidator.h' l='89'>/// Try to look through PHI nodes, where some incoming edges come from error
/// blocks.
///
/// In case a PHI node follows an error block we can assume that the incoming
/// value can only come from the node that is not an error block. As a result,
/// conditions that seemed non-affine before are now in fact affine.</doc>
<use f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='605' u='c' c='_ZNK5polly13ScopDetection13isValidBranchERN4llvm10BasicBlockEPNS1_10BranchInstEPNS1_5ValueEbRNS0_16DetectionContextE'/>
<use f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='606' u='c' c='_ZNK5polly13ScopDetection13isValidBranchERN4llvm10BasicBlockEPNS1_10BranchInstEPNS1_5ValueEbRNS0_16DetectionContextE'/>
<def f='llvm/polly/lib/Support/SCEVValidator.cpp' l='774' ll='798' type='const llvm::SCEV * polly::tryForwardThroughPHI(const llvm::SCEV * Expr, llvm::Region &amp; R, llvm::ScalarEvolution &amp; SE, llvm::LoopInfo &amp; LI, const llvm::DominatorTree &amp; DT)'/>
