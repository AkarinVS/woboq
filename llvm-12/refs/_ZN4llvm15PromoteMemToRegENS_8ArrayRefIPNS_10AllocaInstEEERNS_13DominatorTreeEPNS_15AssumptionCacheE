<dec f='llvm/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h' l='39' type='void llvm::PromoteMemToReg(ArrayRef&lt;llvm::AllocaInst *&gt; Allocas, llvm::DominatorTree &amp; DT, llvm::AssumptionCache * AC = nullptr)'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.cpp' l='471' u='c' c='_ZN5clang7CodeGen15CodeGenFunction14FinishFunctionENS_14SourceLocationE'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h' l='32'>/// Promote the specified list of alloca instructions into scalar
/// registers, inserting PHI nodes as appropriate.
///
/// This function makes use of DominanceFrontier information.  This function
/// does not modify the CFG of the function at all.  All allocas must be from
/// the same function.
///</doc>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroFrame.cpp' l='1963' u='c' c='_ZL19eliminateSwiftErrorRN4llvm8FunctionERNS_4coro5ShapeE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp' l='2023' u='c' c='_ZL19relocationViaAllocaRN4llvm8FunctionERNS_13DominatorTreeENS_8ArrayRefIPNS_5ValueEEENS4_IN12_GLOBAL__N_135PartiallyConstructedSafepointRecordEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='4717' u='c' c='_ZN4llvm4SROA14promoteAllocasERNS_8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Mem2Reg.cpp' l='54' u='c' c='_ZL23promoteMemoryToRegisterRN4llvm8FunctionERNS_13DominatorTreeERNS_15AssumptionCacheE'/>
<def f='llvm/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp' l='1017' ll='1024' type='void llvm::PromoteMemToReg(ArrayRef&lt;llvm::AllocaInst *&gt; Allocas, llvm::DominatorTree &amp; DT, llvm::AssumptionCache * AC = nullptr)'/>
