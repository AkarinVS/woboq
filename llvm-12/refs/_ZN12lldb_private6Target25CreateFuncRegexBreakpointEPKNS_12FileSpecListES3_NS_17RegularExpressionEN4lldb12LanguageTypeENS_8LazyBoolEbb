<dec f='llvm/lldb/include/lldb/Target/Target.h' l='647' type='lldb::BreakpointSP lldb_private::Target::CreateFuncRegexBreakpoint(const lldb_private::FileSpecList * containingModules, const lldb_private::FileSpecList * containingSourceFiles, lldb_private::RegularExpression func_regexp, lldb::LanguageType requested_language, lldb_private::LazyBool skip_prologue, bool internal, bool request_hardware)'/>
<doc f='llvm/lldb/include/lldb/Target/Target.h' l='643'>// Use this to create a function breakpoint by regexp in
  // containingModule/containingSourceFiles, or all modules if it is nullptr
  // When &quot;skip_prologue is set to eLazyBoolCalculate, we use the current
  // target setting, else we use the values passed in</doc>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='1012' u='c' c='_ZN4lldb8SBTarget23BreakpointCreateByRegexEPKcNS_12LanguageTypeERKNS_14SBFileSpecListES6_'/>
<use f='llvm/lldb/source/Commands/CommandObjectBreakpoint.cpp' l='653' u='c' c='_ZN26CommandObjectBreakpointSet9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Target/Target.cpp' l='556' ll='570' type='lldb::BreakpointSP lldb_private::Target::CreateFuncRegexBreakpoint(const lldb_private::FileSpecList * containingModules, const lldb_private::FileSpecList * containingSourceFiles, lldb_private::RegularExpression func_regex, lldb::LanguageType requested_language, lldb_private::LazyBool skip_prologue, bool internal, bool hardware)'/>
