<dec f='llvm/llvm/include/llvm/CodeGen/Analysis.h' l='132' type='bool llvm::returnTypeIsEligibleForTailCall(const llvm::Function * F, const llvm::Instruction * I, const llvm::ReturnInst * Ret, const llvm::TargetLoweringBase &amp; TLI)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/Analysis.h' l='129'>/// Test if given that the input instruction is in the tail call position if the
/// return type or any attributes of the function will inhibit tail call
/// optimization.</doc>
<use f='llvm/llvm/lib/CodeGen/Analysis.cpp' l='546' u='c' c='_ZN4llvm20isInTailCallPositionERKNS_8CallBaseERKNS_13TargetMachineE'/>
<def f='llvm/llvm/lib/CodeGen/Analysis.cpp' l='627' ll='710' type='bool llvm::returnTypeIsEligibleForTailCall(const llvm::Function * F, const llvm::Instruction * I, const llvm::ReturnInst * Ret, const llvm::TargetLoweringBase &amp; TLI)'/>
