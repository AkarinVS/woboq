<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h' l='419'/>
<inh f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h' l='277' c='clang::threadSafety::til::SExpr'/>
<def f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h' l='664' ll='710'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h' l='671' c='_ZN5clang12threadSafety3til8FunctionC1ERKS2_PNS1_8VariableEPNS1_5SExprE'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h' l='696' c='_ZNK5clang12threadSafety3til8Function7compareEPKS2_RT_'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyOps.def' l='23' c='_ZN5clang12threadSafety3til9Traversal14traverseByCaseEPNS1_5SExprENT0_5R_CtxE'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyOps.def' l='23' c='_ZN5clang12threadSafety3til9Traversal16traverseFunctionEPNS1_8FunctionENT0_5R_CtxE'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h' l='200' c='_ZN5clang12threadSafety3til12VisitReducer14reduceFunctionERNS1_8FunctionEPNS1_8VariableEb'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyOps.def' l='23' c='_ZN5clang12threadSafety3til10Comparator13compareByCaseEPKNS1_5SExprES5_'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyOps.def' l='23' c='_ZN5clang12threadSafety3til10Comparator13compareByCaseEPKNS1_5SExprES5_'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyOps.def' l='23' c='_ZN5clang12threadSafety3til13PrettyPrinter10printSExprEPKNS1_5SExprERT0_jb'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h' l='636' c='_ZN5clang12threadSafety3til13PrettyPrinter13printFunctionEPKNS1_8FunctionERT0_j'/>
<use f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h' l='654' c='_ZN5clang12threadSafety3til13PrettyPrinter13printFunctionEPKNS1_8FunctionERT0_j'/>
<size>32</size>
<doc f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h' l='661'>/// A function -- a.k.a. lambda abstraction.
/// Functions with multiple arguments are created by currying,
/// e.g. (Function (x: Int) (Function (y: Int) (Code { return x + y })))</doc>
<fun r='_ZN5clang12threadSafety3til8FunctionC1EPNS1_8VariableEPNS1_5SExprE'/>
<fun r='_ZN5clang12threadSafety3til8FunctionC1ERKS2_PNS1_8VariableEPNS1_5SExprE'/>
<fun r='_ZN5clang12threadSafety3til8Function7classofEPKNS1_5SExprE'/>
<fun r='_ZN5clang12threadSafety3til8Function12variableDeclEv'/>
<fun r='_ZNK5clang12threadSafety3til8Function12variableDeclEv'/>
<fun r='_ZN5clang12threadSafety3til8Function4bodyEv'/>
<fun r='_ZNK5clang12threadSafety3til8Function4bodyEv'/>
<fun r='_ZN5clang12threadSafety3til8Function8traverseERT_NS3_5R_CtxE'/>
<fun r='_ZNK5clang12threadSafety3til8Function7compareEPKS2_RT_'/>
<mbr r='clang::threadSafety::til::Function::VarDecl' o='128' t='clang::threadSafety::til::Variable *'/>
<mbr r='clang::threadSafety::til::Function::Body' o='192' t='clang::threadSafety::til::SExpr *'/>
