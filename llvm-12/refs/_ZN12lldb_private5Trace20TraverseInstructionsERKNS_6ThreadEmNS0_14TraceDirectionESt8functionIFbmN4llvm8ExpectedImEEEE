<dec f='llvm/lldb/include/lldb/Target/Trace.h' l='174' type='void lldb_private::Trace::TraverseInstructions(const lldb_private::Thread &amp; thread, size_t position, lldb_private::Trace::TraceDirection direction, std::function&lt;bool (size_t, llvm::Expected&lt;lldb::addr_t&gt;)&gt; callback)'/>
<doc f='llvm/lldb/include/lldb/Target/Trace.h' l='148'>/// Run the provided callback on the instructions of the trace of the given
  /// thread.
  ///
  /// The instructions will be traversed starting at the given \a position
  /// sequentially until the callback returns \b false, in which case no more
  /// instructions are inspected.
  ///
  /// The purpose of this method is to allow inspecting traced instructions
  /// without exposing the internal representation of how they are stored on
  /// memory.
  ///
  /// \param[in] thread
  ///     The thread whose trace will be traversed.
  ///
  /// \param[in] position
  ///     The instruction position to start iterating on.
  ///
  /// \param[in] direction
  ///     If \b TraceDirection::Forwards, then then instructions will be
  ///     traversed forwards chronologically, i.e. with incrementing indices. If
  ///     \b TraceDirection::Backwards, the traversal is done backwards
  ///     chronologically, i.e. with decrementing indices.
  ///
  /// \param[in] callback
  ///     The callback to execute on each instruction. If it returns \b false,
  ///     the iteration stops.</doc>
<use f='llvm/lldb/source/Target/Trace.cpp' l='230' u='c' c='_ZN12lldb_private5Trace21DumpTraceInstructionsERNS_6ThreadERNS_6StreamEmmb'/>
