<dec f='llvm/llvm/lib/Target/PowerPC/MCTargetDesc/PPCELFStreamer.h' l='52' type='Optional&lt;bool&gt; llvm::isPartOfGOTToPCRelPair(const llvm::MCInst &amp; Inst, const llvm::MCSubtargetInfo &amp; STI)'/>
<use f='llvm/llvm/lib/Target/PowerPC/MCTargetDesc/PPCELFStreamer.cpp' l='97' u='c' c='_ZN4llvm14PPCELFStreamer15emitInstructionERKNS_6MCInstERKNS_15MCSubtargetInfoE'/>
<def f='llvm/llvm/lib/Target/PowerPC/MCTargetDesc/PPCELFStreamer.cpp' l='201' ll='222' type='Optional&lt;bool&gt; llvm::isPartOfGOTToPCRelPair(const llvm::MCInst &amp; Inst, const llvm::MCSubtargetInfo &amp; STI)'/>
<doc f='llvm/llvm/lib/Target/PowerPC/MCTargetDesc/PPCELFStreamer.cpp' l='188'>// This funciton checks if the parameter Inst is part of the setup for a link
// time GOT PC Relative optimization. For example in this situation:
// &lt;MCInst PLDpc &lt;MCOperand Reg:282&gt; &lt;MCOperand Expr:(glob_double@got@pcrel)&gt;
//   &lt;MCOperand Imm:0&gt; &lt;MCOperand Expr:(.Lpcrel@&lt;&lt;invalid&gt;&gt;)&gt;&gt;
// &lt;MCInst SOME_LOAD &lt;MCOperand Reg:22&gt; &lt;MCOperand Imm:0&gt; &lt;MCOperand Reg:282&gt;
//   &lt;MCOperand Expr:(.Lpcrel@&lt;&lt;invalid&gt;&gt;)&gt;&gt;
// The above is a pair of such instructions and this function will not return
// None for either one of them. In both cases we are looking for the last
// operand &lt;MCOperand Expr:(.Lpcrel@&lt;&lt;invalid&gt;&gt;)&gt; which needs to be an MCExpr
// and has the flag MCSymbolRefExpr::VK_PPC_PCREL_OPT. After that we just look
// at the opcode and in the case of PLDpc we will return true. For the load
// (or store) this function will return false indicating it has found the second
// instruciton in the pair.</doc>
<doc f='llvm/llvm/lib/Target/PowerPC/MCTargetDesc/PPCELFStreamer.h' l='50'>// Check if the instruction Inst is part of a pair of instructions that make up
// a link time GOT PC Rel optimization.</doc>
