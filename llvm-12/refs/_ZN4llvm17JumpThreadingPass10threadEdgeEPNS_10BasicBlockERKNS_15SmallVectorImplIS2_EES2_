<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='126' type='void llvm::JumpThreadingPass::threadEdge(llvm::BasicBlock * BB, const SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; PredBBs, llvm::BasicBlock * SuccBB)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2310' u='c' c='_ZN4llvm17JumpThreadingPass27threadThroughTwoBasicBlocksEPNS_10BasicBlockES2_S2_S2_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2346' u='c' c='_ZN4llvm17JumpThreadingPass13tryThreadEdgeEPNS_10BasicBlockERKNS_15SmallVectorImplIS2_EES2_'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2353' ll='2430' type='void llvm::JumpThreadingPass::threadEdge(llvm::BasicBlock * BB, const SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; PredBBs, llvm::BasicBlock * SuccBB)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2350'>/// threadEdge - We have decided that it is safe and profitable to factor the
/// blocks in PredBBs to one predecessor, then thread an edge from it to SuccBB
/// across BB.  Transform the IR to reflect this change.</doc>
