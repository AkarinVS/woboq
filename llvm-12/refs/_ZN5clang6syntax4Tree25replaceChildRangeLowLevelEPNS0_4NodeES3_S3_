<dec f='llvm/clang/include/clang/Tooling/Syntax/Tree.h' l='265' type='void clang::syntax::Tree::replaceChildRangeLowLevel(clang::syntax::Node * Begin, clang::syntax::Node * End, clang::syntax::Node * New)'/>
<doc f='llvm/clang/include/clang/Tooling/Syntax/Tree.h' l='259'>/// Replace a range of children [Begin, End) with a list of
  /// new nodes starting at \p New.
  /// Only used by MutationsImpl to implement higher-level mutation operations.
  /// (!) \p New can be null to model removal of the child range.
  /// (!) \p End can be null to model one past the end.
  /// (!) \p Begin can be null to model an append.</doc>
<use f='llvm/clang/lib/Tooling/Syntax/Mutations.cpp' l='42' u='c' c='_ZN5clang6syntax13MutationsImpl8addAfterEPNS0_4NodeES3_NS0_8NodeRoleE'/>
<use f='llvm/clang/lib/Tooling/Syntax/Mutations.cpp' l='60' u='c' c='_ZN5clang6syntax13MutationsImpl7replaceEPNS0_4NodeES3_'/>
<use f='llvm/clang/lib/Tooling/Syntax/Mutations.cpp' l='72' u='c' c='_ZN5clang6syntax13MutationsImpl6removeEPNS0_4NodeE'/>
<def f='llvm/clang/lib/Tooling/Syntax/Tree.cpp' l='118' ll='189' type='void clang::syntax::Tree::replaceChildRangeLowLevel(clang::syntax::Node * Begin, clang::syntax::Node * End, clang::syntax::Node * New)'/>
