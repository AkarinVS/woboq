<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='260' type='bool IRForTarget::RewriteObjCSelector(llvm::Instruction * selector_load)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='245'>/// A basic block-level pass to find all Objective-C method calls and
  /// rewrite them to use sel_registerName instead of statically allocated
  /// selectors.  The reason is that the selectors are created on the
  /// assumption that the Objective-C runtime will scan the appropriate
  /// section and prepare them.  This doesn&apos;t happen when code is copied into
  /// the target, though, and there&apos;s no easy way to induce the runtime to
  /// scan them.  So instead we get our selectors from sel_registerName.

  /// Replace a single selector reference
  ///
  /// \param[in] selector_load
  ///     The load of the statically-allocated selector.
  ///
  /// \return
  ///     True on success; false otherwise</doc>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='759' ll='884' type='bool IRForTarget::RewriteObjCSelector(llvm::Instruction * selector_load)'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='899' u='c' c='_ZN11IRForTarget20RewriteObjCSelectorsERN4llvm10BasicBlockE'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='758'>// This function does not report errors; its callers are responsible.</doc>
