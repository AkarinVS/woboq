<dec f='llvm/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h' l='467' type='unsigned int llvm::mca::LSUnit::dispatch(const llvm::mca::InstRef &amp; IR)'/>
<doc f='llvm/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h' l='454'>/// Allocates LS resources for instruction IR.
  ///
  /// This method assumes that a previous call to `isAvailable(IR)` succeeded
  /// returning LSU_AVAILABLE.
  ///
  /// Rules are:
  /// By default, rules are:
  /// 1. A store may not pass a previous store.
  /// 2. A load may not pass a previous store unless flag &apos;NoAlias&apos; is set.
  /// 3. A load may pass a previous load.
  /// 4. A store may not pass a previous load (regardless of flag &apos;NoAlias&apos;).
  /// 5. A load has to wait until an older load barrier is fully executed.
  /// 6. A store has to wait until an older store barrier is fully executed.</doc>
<inh f='llvm/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h' l='259' c='_ZN4llvm3mca10LSUnitBase8dispatchERKNS0_7InstRefE'/>
<def f='llvm/llvm/lib/MCA/HardwareUnits/LSUnit.cpp' l='69' ll='193' type='unsigned int llvm::mca::LSUnit::dispatch(const llvm::mca::InstRef &amp; IR)'/>
