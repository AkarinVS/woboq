<dec f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='124' type='static llvm::UnaryOperator * llvm::UnaryOperator::Create(llvm::Instruction::UnaryOps Op, llvm::Value * S, const llvm::Twine &amp; Name = llvm::Twine(), llvm::Instruction * InsertBefore = nullptr)'/>
<use f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='161' u='c' c='_ZN4llvm13UnaryOperator21CreateWithCopiedFlagsENS_11Instruction8UnaryOpsEPNS_5ValueEPS1_RKNS_5TwineES5_'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='119'>/// Construct a unary instruction, given the opcode and an operand.
  /// Optionally (if InstBefore is specified) insert the instruction
  /// into a BasicBlock right before the specified instruction.  The specified
  /// Instruction is allowed to be a dereferenced end iterator.
  ///</doc>
<use f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='1676' u='c' c='_ZN4llvm13IRBuilderBase10CreateUnOpENS_11Instruction8UnaryOpsEPNS_5ValueERKNS_5TwineEPNS_6MDNodeE'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='6725' u='c' c='_ZN4llvm8LLParser12parseUnaryOpERPNS_11InstructionERNS0_16PerFunctionStateEjb'/>
<use f='llvm/llvm/lib/Bitcode/Reader/BitcodeReader.cpp' l='3984' u='c' c='_ZN12_GLOBAL__N_113BitcodeReader17parseFunctionBodyEPN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/IR/Constants.cpp' l='3481' u='c' c='_ZNK4llvm12ConstantExpr16getAsInstructionEv'/>
<use f='llvm/llvm/include/llvm/IR/NoFolder.h' l='175' u='c' c='_ZNK4llvm8NoFolder10CreateUnOpENS_11Instruction8UnaryOpsEPNS_8ConstantE'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='2390' ll='2394' type='static llvm::UnaryOperator * llvm::UnaryOperator::Create(llvm::Instruction::UnaryOps Op, llvm::Value * S, const llvm::Twine &amp; Name = llvm::Twine(), llvm::Instruction * InsertBefore = nullptr)'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2399' u='c' c='_ZN4llvm13UnaryOperator6CreateENS_11Instruction8UnaryOpsEPNS_5ValueERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='4302' u='c' c='_ZNK4llvm13UnaryOperator9cloneImplEv'/>
