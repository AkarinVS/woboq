<dec f='llvm/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h' l='411' type='bool llvm::LoopVectorizationLegality::blockCanBePredicated(llvm::BasicBlock * BB, SmallPtrSetImpl&lt;llvm::Value *&gt; &amp; SafePtrs, SmallPtrSetImpl&lt;const llvm::Instruction *&gt; &amp; MaskedOp, SmallPtrSetImpl&lt;llvm::Instruction *&gt; &amp; ConditionalAssumes, bool PreserveGuards = false) const'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='925' ll='985' type='bool llvm::LoopVectorizationLegality::blockCanBePredicated(llvm::BasicBlock * BB, SmallPtrSetImpl&lt;llvm::Value *&gt; &amp; SafePtrs, SmallPtrSetImpl&lt;const llvm::Instruction *&gt; &amp; MaskedOp, SmallPtrSetImpl&lt;llvm::Instruction *&gt; &amp; ConditionalAssumes, bool PreserveGuards = false) const'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='1042' u='c' c='_ZN4llvm25LoopVectorizationLegality25canVectorizeWithIfConvertEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='1278' u='c' c='_ZN4llvm25LoopVectorizationLegality26prepareToFoldTailByMaskingEv'/>
<doc f='llvm/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h' l='398'>/// Return true if all of the instructions in the block can be speculatively
  /// executed, and record the loads/stores that require masking. If&apos;s that
  /// guard loads can be ignored under &quot;assume safety&quot; unless \p PreserveGuards
  /// is true. This can happen when we introduces guards for which the original
  /// &quot;unguarded-loads are safe&quot; assumption does not hold. For example, the
  /// vectorizer&apos;s fold-tail transformation changes the loop to execute beyond
  /// its original trip-count, under a proper guard, which should be preserved.
  /// \p SafePtrs is a list of addresses that are known to be legal and we know
  /// that we can read from them without segfault.
  /// \p MaskedOp is a list of instructions that have to be transformed into
  /// calls to the appropriate masked intrinsic when the loop is vectorized.
  /// \p ConditionalAssumes is a list of assume instructions in predicated
  /// blocks that must be dropped if the CFG gets flattened.</doc>
