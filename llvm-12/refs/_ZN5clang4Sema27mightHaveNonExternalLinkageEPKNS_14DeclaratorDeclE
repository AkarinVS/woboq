<dec f='llvm/clang/include/clang/Sema/Sema.h' l='353' type='static bool clang::Sema::mightHaveNonExternalLinkage(const clang::DeclaratorDecl * FD)'/>
<def f='llvm/clang/lib/Sema/SemaDecl.cpp' l='1653' ll='1664' type='static bool clang::Sema::mightHaveNonExternalLinkage(const clang::DeclaratorDecl * D)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='1734' u='c' c='_ZNK5clang4Sema32ShouldWarnIfUnusedFileScopedDeclEPKNS_14DeclaratorDeclE'/>
<doc f='llvm/clang/lib/Sema/SemaDecl.cpp' l='1641'>// We need this to handle
//
// typedef struct {
//   void *foo() { return 0; }
// } A;
//
// When we see foo we don&apos;t know if after the typedef we will get &apos;A&apos; or &apos;*A&apos;
// for example. If &apos;A&apos;, foo will have external linkage. If we have &apos;*A&apos;,
// foo will have no linkage. Since we can&apos;t know until we get to the end
// of the typedef, this function finds out if D might have non-external linkage.
// Callers should verify at the end of the TU if it D has external linkage or
// not.</doc>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='16970' u='c' c='_ZN5clang4Sema22MarkFunctionReferencedENS_14SourceLocationEPNS_12FunctionDeclEb'/>
