<dec f='llvm/llvm/include/llvm/Transforms/Scalar/Reassociate.h' l='127' type='llvm::Instruction * llvm::ReassociatePass::canonicalizeNegFPConstants(llvm::Instruction * I)'/>
<def f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2153' ll='2167' type='llvm::Instruction * llvm::ReassociatePass::canonicalizeNegFPConstants(llvm::Instruction * I)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2196' u='c' c='_ZN4llvm15ReassociatePass12OptimizeInstEPNS_11InstructionE'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2145'>/// Canonicalize expressions that contain a negative floating-point constant
/// of the following form:
///   OtherOp + (subtree) -&gt; OtherOp {+/-} (canonical subtree)
///   (subtree) + OtherOp -&gt; OtherOp {+/-} (canonical subtree)
///   OtherOp - (subtree) -&gt; OtherOp {+/-} (canonical subtree)
///
/// The fadd/fsub opcode may be switched to allow folding a negation into the
/// input instruction.</doc>
