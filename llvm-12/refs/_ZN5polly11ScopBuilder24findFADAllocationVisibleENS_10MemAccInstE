<dec f='llvm/polly/include/polly/ScopBuilder.h' l='131' type='llvm::Value * polly::ScopBuilder::findFADAllocationVisible(polly::MemAccInst Inst)'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1388' ll='1456' type='llvm::Value * polly::ScopBuilder::findFADAllocationVisible(polly::MemAccInst Inst)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2325' u='c' c='_ZN5polly11ScopBuilder14addArrayAccessEPNS_8ScopStmtENS_10MemAccInstENS_12MemoryAccess10AccessTypeEPN4llvm5ValueEPNS6_4TypeEbNS6_8ArrayRefIPKNS6_4SCEVEEESF_S8_'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='107'>/// Try to match for the descriptor of a Fortran array whose allocation
  /// call is visible. When we have a Fortran array, we try to look for a
  /// Fortran array where we can see the lowered ALLOCATE call. ALLOCATE
  /// is materialized as a malloc(...) which we pattern match for.
  ///
  /// Pattern match for &quot;%untypedmem&quot;:
  ///  1. %untypedmem = i8* @malloc(...)
  ///
  ///  2. %typedmem = bitcast i8* %untypedmem to &lt;memtype&gt;
  ///
  ///  3. [%slot = getelementptr inbounds i8, i8* %typedmem, i64 &lt;index&gt;]
  ///  3 is optional because if you are writing to the 0th index, you don&apos;t
  ///     need a GEP.
  ///
  ///  4.1 store/load &lt;memtype&gt; &lt;val&gt;, &lt;memtype&gt;* %slot, align 8
  ///  4.2 store/load &lt;memtype&gt; &lt;val&gt;, &lt;memtype&gt;* %mem, align 8
  ///
  /// @see polly::MemoryAccess, polly::ScopArrayInfo
  ///
  /// @note assumes -polly-canonicalize has been run.
  ///
  /// @param Inst The LoadInst/StoreInst that accesses the memory.
  ///
  /// @returns Reference to %untypedmem on success, nullptr on failure.</doc>
