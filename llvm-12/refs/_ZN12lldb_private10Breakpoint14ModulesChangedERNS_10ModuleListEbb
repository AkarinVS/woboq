<dec f='llvm/lldb/include/lldb/Breakpoint/Breakpoint.h' l='218' type='void lldb_private::Breakpoint::ModulesChanged(lldb_private::ModuleList &amp; changed_modules, bool load_event, bool delete_locations = false)'/>
<doc f='llvm/lldb/include/lldb/Breakpoint/Breakpoint.h' l='207'>/// Like ResolveBreakpointInModules, but allows for &quot;unload&quot; events, in
  /// which case we will remove any locations that are in modules that got
  /// unloaded.
  ///
  /// \param[in] changed_modules
  ///    The list of modules to look in for new locations.
  /// \param[in] load_event
  ///    If \b true then the modules were loaded, if \b false, unloaded.
  /// \param[in] delete_locations
  ///    If \b true then the modules were unloaded delete any locations in the
  ///    changed modules.</doc>
<def f='llvm/lldb/source/Breakpoint/Breakpoint.cpp' l='503' ll='622' type='void lldb_private::Breakpoint::ModulesChanged(lldb_private::ModuleList &amp; module_list, bool load, bool delete_locations = false)'/>
<doc f='llvm/lldb/source/Breakpoint/Breakpoint.cpp' l='501'>// ModulesChanged: Pass in a list of new modules, and</doc>
<use f='llvm/lldb/source/Breakpoint/BreakpointList.cpp' l='176' u='c' c='_ZN12lldb_private14BreakpointList17UpdateBreakpointsERNS_10ModuleListEbb'/>
