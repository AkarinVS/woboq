<dec f='llvm/llvm/include/llvm/CodeGen/LiveRangeCalc.h' l='158' type='void llvm::LiveRangeCalc::updateSSA()'/>
<doc f='llvm/llvm/include/llvm/CodeGen/LiveRangeCalc.h' l='153'>/// updateSSA - Compute the values that will be live in to all requested
  /// blocks in LiveIn.  Create PHI-def values as required to preserve SSA form.
  ///
  /// Every live-in block must be jointly dominated by the added live-out
  /// blocks.  No values are read from the live ranges.</doc>
<use f='llvm/llvm/lib/CodeGen/LiveRangeCalc.cpp' l='120' u='c' c='_ZN4llvm13LiveRangeCalc15calculateValuesEv'/>
<def f='llvm/llvm/lib/CodeGen/LiveRangeCalc.cpp' l='330' ll='433' type='void llvm::LiveRangeCalc::updateSSA()'/>
<doc f='llvm/llvm/lib/CodeGen/LiveRangeCalc.cpp' l='328'>// This is essentially the same iterative algorithm that SSAUpdater uses,
// except we already have a dominator tree, so we don&apos;t have to recompute it.</doc>
