<dec f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.h' l='848' type='llvm::MachineBasicBlock * llvm::PPCTargetLowering::emitProbedAlloca(llvm::MachineInstr &amp; MI, llvm::MachineBasicBlock * MBB) const'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='11163' ll='11323' type='llvm::MachineBasicBlock * llvm::PPCTargetLowering::emitProbedAlloca(llvm::MachineInstr &amp; MI, llvm::MachineBasicBlock * MBB) const'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='12109' u='c' c='_ZNK4llvm17PPCTargetLowering27EmitInstrWithCustomInserterERNS_12MachineInstrEPNS_17MachineBasicBlockE'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='11157'>// Lower dynamic stack allocation with probing. `emitProbedAlloca` is splitted
// into three phases. In the first phase, it uses pseudo instruction
// PREPARE_PROBED_ALLOCA to get the future result of actual FramePointer and
// FinalStackPtr. In the second phase, it generates a loop for probing blocks.
// At last, it uses pseudo instruction DYNAREAOFFSET to get the future result of
// MaxCallFrameSize so that it can calculate correct data area pointer.</doc>
