<dec f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='340' type='llvm::json::Value lldb_vscode::CreateSource(lldb::SBFrame &amp; frame, int64_t &amp; disasm_line)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='317'>/// Create a &quot;Source&quot; object for a given frame.
///
/// When there is no source file information for a stack frame, we will
/// create disassembly for a function and store a permanent
/// &quot;sourceReference&quot; that contains the textual disassembly for a
/// function along with address to line information. The &quot;Source&quot; object
/// that is created will contain a &quot;sourceReference&quot; that the VSCode
/// protocol can later fetch as text in order to display disassembly.
/// The PC will be extracted from the frame and the disassembly line
/// within the source referred to by &quot;sourceReference&quot; will be filled
/// in.
///
/// \param[in] frame
///     The LLDB stack frame to use when populating out the &quot;Source&quot;
///     object.
///
/// \param[out] disasm_line
///     The line within the &quot;sourceReference&quot; file that the PC from
///     \a frame matches.
///
/// \return
///     A &quot;Source&quot; JSON object with that follows the formal JSON
///     definition outlined by Microsoft.</doc>
<def f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='589' ll='674' type='llvm::json::Value lldb_vscode::CreateSource(lldb::SBFrame &amp; frame, int64_t &amp; disasm_line)'/>
<use f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='738' u='c' c='_ZN11lldb_vscode16CreateStackFrameERN4lldb7SBFrameE'/>
