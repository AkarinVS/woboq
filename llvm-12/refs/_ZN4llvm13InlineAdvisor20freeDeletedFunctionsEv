<dec f='llvm/llvm/include/llvm/Analysis/InlineAdvisor.h' l='181' type='void llvm::InlineAdvisor::freeDeletedFunctions()'/>
<use f='llvm/llvm/include/llvm/Analysis/InlineAdvisor.h' l='213' u='c' c='_ZN4llvm20DefaultInlineAdvisor10onPassExitEv'/>
<doc f='llvm/llvm/include/llvm/Analysis/InlineAdvisor.h' l='174'>/// We may want to defer deleting functions to after the inlining for a whole
  /// module has finished. This allows us to reliably use function pointers as
  /// unique identifiers, as an efficient implementation detail of the
  /// InlineAdvisor. Otherwise, it is possible the memory allocator
  /// re-allocate Function objects at the same address of a deleted Function;
  /// and Functions are potentially created during the function passes called
  /// after each SCC inlining (e.g. argument promotion does that).</doc>
<def f='llvm/llvm/lib/Analysis/InlineAdvisor.cpp' l='130' ll='134' type='void llvm::InlineAdvisor::freeDeletedFunctions()'/>
<use f='llvm/llvm/lib/Analysis/InlineAdvisor.cpp' l='471' u='c' c='_ZN4llvm13InlineAdvisorD1Ev'/>
