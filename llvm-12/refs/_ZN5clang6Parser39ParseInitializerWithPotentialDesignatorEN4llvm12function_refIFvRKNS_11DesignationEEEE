<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2021' type='clang::ExprResult clang::Parser::ParseInitializerWithPotentialDesignator(llvm::function_ref&lt;void (const Designation &amp;)&gt; CodeCompleteCB)'/>
<def f='llvm/clang/lib/Parse/ParseInit.cpp' l='161' ll='418' type='clang::ExprResult clang::Parser::ParseInitializerWithPotentialDesignator(llvm::function_ref&lt;void (const Designation &amp;)&gt; CodeCompleteCB)'/>
<use f='llvm/clang/lib/Parse/ParseInit.cpp' l='479' u='c' c='_ZN5clang6Parser21ParseBraceInitializerEv'/>
<use f='llvm/clang/lib/Parse/ParseInit.cpp' l='569' u='c' c='_ZN5clang6Parser38ParseMicrosoftIfExistsBraceInitializerERN4llvm11SmallVectorIPNS_4ExprELj12EEERb'/>
<doc f='llvm/clang/lib/Parse/ParseInit.cpp' l='119'>/// ParseInitializerWithPotentialDesignator - Parse the &apos;initializer&apos; production
/// checking to see if the token stream starts with a designator.
///
/// C99:
///
///       designation:
///         designator-list &apos;=&apos;
/// [GNU]   array-designator
/// [GNU]   identifier &apos;:&apos;
///
///       designator-list:
///         designator
///         designator-list designator
///
///       designator:
///         array-designator
///         &apos;.&apos; identifier
///
///       array-designator:
///         &apos;[&apos; constant-expression &apos;]&apos;
/// [GNU]   &apos;[&apos; constant-expression &apos;...&apos; constant-expression &apos;]&apos;
///
/// C++20:
///
///       designated-initializer-list:
///         designated-initializer-clause
///         designated-initializer-list &apos;,&apos; designated-initializer-clause
///
///       designated-initializer-clause:
///         designator brace-or-equal-initializer
///
///       designator:
///         &apos;.&apos; identifier
///
/// We allow the C99 syntax extensions in C++20, but do not allow the C++20
/// extension (a braced-init-list after the designator with no &apos;=&apos;) in C99.
///
/// NOTE: [OBC] allows &apos;[ objc-receiver objc-message-args ]&apos; as an
/// initializer (because it is an expression).  We need to consider this case
/// when parsing array designators.
///
/// \p CodeCompleteCB is called with Designation parsed so far.</doc>
