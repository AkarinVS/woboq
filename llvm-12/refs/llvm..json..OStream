<use f='llvm/llvm/include/llvm/Support/JSON.h' l='468'/>
<def f='llvm/llvm/include/llvm/Support/JSON.h' l='886' ll='991'/>
<use f='llvm/llvm/include/llvm/Support/JSON.h' l='997' c='_ZN4llvm4jsonlsERNS_11raw_ostreamERKNS0_5ValueE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='154' c='_ZNK12lldb_private14StructuredData6Object9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='157' c='_ZNK12lldb_private14StructuredData6Object4DumpERNS_6StreamEb'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='278' c='_ZNK12lldb_private14StructuredData5Array9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='296' c='_ZNK12lldb_private14StructuredData7Integer9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='313' c='_ZNK12lldb_private14StructuredData5Float9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='330' c='_ZNK12lldb_private14StructuredData7Boolean9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='346' c='_ZNK12lldb_private14StructuredData6String9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='515' c='_ZNK12lldb_private14StructuredData10Dictionary9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='530' c='_ZNK12lldb_private14StructuredData4Null9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/include/lldb/Utility/StructuredData.h' l='544' c='_ZNK12lldb_private14StructuredData7Generic9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h' l='90' c='_ZNK12lldb_private6python22StructuredPythonObject9SerializeERN4llvm4json7OStreamE'/>
<size>176</size>
<doc f='llvm/llvm/include/llvm/Support/JSON.h' l='832'>/// json::OStream allows writing well-formed JSON without materializing
/// all structures as json::Value ahead of time.
/// It&apos;s faster, lower-level, and less safe than OS &lt;&lt; json::Value.
/// It also allows emitting more constructs, such as comments.
///
/// Only one &quot;top-level&quot; object can be written to a stream.
/// Simplest usage involves passing lambdas (Blocks) to fill in containers:
///
///   json::OStream J(OS);
///   J.array([&amp;]{
///     for (const Event &amp;E : Events)
///       J.object([&amp;] {
///         J.attribute(&quot;timestamp&quot;, int64_t(E.Time));
///         J.attributeArray(&quot;participants&quot;, [&amp;] {
///           for (const Participant &amp;P : E.Participants)
///             J.value(P.toString());
///         });
///       });
///   });
///
/// This would produce JSON like:
///
///   [
///     {
///       &quot;timestamp&quot;: 19287398741,
///       &quot;participants&quot;: [
///         &quot;King Kong&quot;,
///         &quot;Miley Cyrus&quot;,
///         &quot;Cleopatra&quot;
///       ]
///     },
///     ...
///   ]
///
/// The lower level begin/end methods (arrayBegin()) are more flexible but
/// care must be taken to pair them correctly:
///
///   json::OStream J(OS);
//    J.arrayBegin();
///   for (const Event &amp;E : Events) {
///     J.objectBegin();
///     J.attribute(&quot;timestamp&quot;, int64_t(E.Time));
///     J.attributeBegin(&quot;participants&quot;);
///     for (const Participant &amp;P : E.Participants)
///       J.value(P.toString());
///     J.attributeEnd();
///     J.objectEnd();
///   }
///   J.arrayEnd();
///
/// If the call sequence isn&apos;t valid JSON, asserts will fire in debug mode.
/// This can be mismatched begin()/end() pairs, trying to emit attributes inside
/// an array, and so on.
/// With asserts disabled, this is undefined behavior.</doc>
<fun r='_ZN4llvm4json7OStreamC1ERNS_11raw_ostreamEj'/>
<fun r='_ZN4llvm4json7OStreamD1Ev'/>
<fun r='_ZN4llvm4json7OStream5flushEv'/>
<fun r='_ZN4llvm4json7OStream5valueERKNS0_5ValueE'/>
<fun r='_ZN4llvm4json7OStream5arrayENS_12function_refIFvvEEE'/>
<fun r='_ZN4llvm4json7OStream6objectENS_12function_refIFvvEEE'/>
<fun r='_ZN4llvm4json7OStream8rawValueENS_12function_refIFvRNS_11raw_ostreamEEEE'/>
<fun r='_ZN4llvm4json7OStream8rawValueENS_9StringRefE'/>
<fun r='_ZN4llvm4json7OStream7commentENS_9StringRefE'/>
<fun r='_ZN4llvm4json7OStream9attributeENS_9StringRefERKNS0_5ValueE'/>
<fun r='_ZN4llvm4json7OStream14attributeArrayENS_9StringRefENS_12function_refIFvvEEE'/>
<fun r='_ZN4llvm4json7OStream15attributeObjectENS_9StringRefENS_12function_refIFvvEEE'/>
<fun r='_ZN4llvm4json7OStream10arrayBeginEv'/>
<fun r='_ZN4llvm4json7OStream8arrayEndEv'/>
<fun r='_ZN4llvm4json7OStream11objectBeginEv'/>
<fun r='_ZN4llvm4json7OStream9objectEndEv'/>
<fun r='_ZN4llvm4json7OStream14attributeBeginENS_9StringRefE'/>
<fun r='_ZN4llvm4json7OStream12attributeEndEv'/>
<fun r='_ZN4llvm4json7OStream13rawValueBeginEv'/>
<fun r='_ZN4llvm4json7OStream11rawValueEndEv'/>
<fun r='_ZN4llvm4json7OStream13attributeImplENS_9StringRefENS_12function_refIFvvEEE'/>
<fun r='_ZN4llvm4json7OStream10valueBeginEv'/>
<fun r='_ZN4llvm4json7OStream12flushCommentEv'/>
<fun r='_ZN4llvm4json7OStream7newlineEv'/>
<mbr r='llvm::json::OStream::Stack' o='0' t='llvm::SmallVector&lt;State, 16&gt;'/>
<mbr r='llvm::json::OStream::PendingComment' o='1152' t='llvm::StringRef'/>
<mbr r='llvm::json::OStream::OS' o='1280' t='llvm::raw_ostream &amp;'/>
<mbr r='llvm::json::OStream::IndentSize' o='1344' t='unsigned int'/>
<mbr r='llvm::json::OStream::Indent' o='1376' t='unsigned int'/>
<use f='llvm/clang/include/clang/AST/JSONNodeDumper.h' l='39'/>
<size>176</size>
<use f='llvm/lldb/include/lldb/Core/StructuredDataImpl.h' l='57' c='_ZNK12lldb_private18StructuredDataImpl9GetAsJSONERNS_6StreamE'/>
<size>176</size>
<use f='llvm/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp' l='121' c='_ZNK12lldb_private6python22StructuredPythonObject9SerializeERN4llvm4json7OStreamE'/>
<size>176</size>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='130' c='_ZNK12lldb_private14StructuredData6Object12DumpToStdoutEb'/>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='134' c='_ZNK12lldb_private14StructuredData5Array9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='142' c='_ZNK12lldb_private14StructuredData7Integer9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='146' c='_ZNK12lldb_private14StructuredData5Float9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='150' c='_ZNK12lldb_private14StructuredData7Boolean9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='154' c='_ZNK12lldb_private14StructuredData6String9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='158' c='_ZNK12lldb_private14StructuredData10Dictionary9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='168' c='_ZNK12lldb_private14StructuredData4Null9SerializeERN4llvm4json7OStreamE'/>
<use f='llvm/lldb/source/Utility/StructuredData.cpp' l='172' c='_ZNK12lldb_private14StructuredData7Generic9SerializeERN4llvm4json7OStreamE'/>
<size>176</size>
<use f='llvm/llvm/lib/Support/JSON.cpp' l='254' c='_ZN4llvm4json12_GLOBAL__N_110abbreviateERKNS0_5ValueERNS0_7OStreamE'/>
<use f='llvm/llvm/lib/Support/JSON.cpp' l='280' c='_ZN4llvm4json12_GLOBAL__N_118abbreviateChildrenERKNS0_5ValueERNS0_7OStreamE'/>
<use f='llvm/llvm/lib/Support/JSON.cpp' l='305' c='_ZNK4llvm4json4Path4Root17printErrorContextERKNS0_5ValueERNS_11raw_ostreamE'/>
<use f='llvm/llvm/lib/Support/JSON.cpp' l='909' c='_ZN4llvm15format_providerINS_4json5ValueEvE6formatERKS2_RNS_11raw_ostreamENS_9StringRefE'/>
<size>176</size>
<fun r='_ZN4llvm4json7OStream5valueERKNS0_5ValueE'/>
<fun r='_ZN4llvm4json7OStream10valueBeginEv'/>
<fun r='_ZN4llvm4json7OStream7commentENS_9StringRefE'/>
<fun r='_ZN4llvm4json7OStream12flushCommentEv'/>
<fun r='_ZN4llvm4json7OStream7newlineEv'/>
<fun r='_ZN4llvm4json7OStream10arrayBeginEv'/>
<fun r='_ZN4llvm4json7OStream8arrayEndEv'/>
<fun r='_ZN4llvm4json7OStream11objectBeginEv'/>
<fun r='_ZN4llvm4json7OStream9objectEndEv'/>
<fun r='_ZN4llvm4json7OStream14attributeBeginENS_9StringRefE'/>
<fun r='_ZN4llvm4json7OStream12attributeEndEv'/>
<fun r='_ZN4llvm4json7OStream13rawValueBeginEv'/>
<fun r='_ZN4llvm4json7OStream11rawValueEndEv'/>
<use f='llvm/llvm/lib/Support/TimeProfiler.cpp' l='135' c='_ZN4llvm17TimeTraceProfiler5writeERNS_17raw_pwrite_streamE'/>
<size>176</size>
<use f='llvm/llvm/tools/llvm-dwarfdump/Statistics.cpp' l='496' c='_ZL10printDatumRN4llvm4json7OStreamEPKcNS0_5ValueE'/>
<use f='llvm/llvm/tools/llvm-dwarfdump/Statistics.cpp' l='501' c='_ZL18printLocationStatsRN4llvm4json7OStreamEPKcRSt6vectorIjSaIjEE'/>
<use f='llvm/llvm/tools/llvm-dwarfdump/Statistics.cpp' l='538' c='_ZL17printSectionSizesRN4llvm4json7OStreamERKNS_9dwarfdump12SectionSizesE'/>
<use f='llvm/llvm/tools/llvm-dwarfdump/Statistics.cpp' l='620' c='_ZN4llvm9dwarfdump25collectStatsForObjectFileERNS_6object10ObjectFileERNS_12DWARFContextERKNS_5TwineERNS_11raw_ostreamE'/>
<size>176</size>
<use f='llvm/llvm/tools/sancov/sancov.cpp' l='298' c='_ZN12_GLOBAL__N_1lsERN4llvm4json7OStreamERKSt6vectorINS_13CoveragePointESaIS5_EE'/>
<use f='llvm/llvm/tools/sancov/sancov.cpp' l='343' c='_ZN12_GLOBAL__N_1lsERN4llvm4json7OStreamERKNS_18SymbolizedCoverageE'/>
<use f='llvm/llvm/tools/sancov/sancov.cpp' l='1183' c='main'/>
<size>176</size>
<use f='llvm/llvm/unittests/Support/JSONTest.cpp' l='467' c='_ZN4llvm4json12_GLOBAL__N_120JSONTest_Stream_Test8TestBodyEv'/>
<size>176</size>
