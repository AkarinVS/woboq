<dec f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='733' type='Expected&lt;std::unique_ptr&lt;raw_pwrite_stream&gt; &gt; clang::CompilerInstance::createOutputFileImpl(llvm::StringRef OutputPath, bool Binary, bool RemoveFileOnSignal, bool UseTemporary, bool CreateMissingDirectories)'/>
<doc f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='715'>/// Create a new output file and add it to the list of tracked output files.
  ///
  /// If \p OutputPath is empty, then createOutputFile will derive an output
  /// path location as \p BaseInput, with any suffix removed, and \p Extension
  /// appended. If \p OutputPath is not stdout and \p UseTemporary
  /// is true, createOutputFile will create a new temporary file that must be
  /// renamed to \p OutputPath in the end.
  ///
  /// \param OutputPath - If given, the path to the output file.
  /// \param Binary - The mode to open the file in.
  /// \param RemoveFileOnSignal - Whether the file should be registered with
  /// llvm::sys::RemoveFileOnSignal. Note that this is not safe for
  /// multithreaded use, as the underlying signal mechanism is not reentrant
  /// \param UseTemporary - Create a new temporary file that must be renamed to
  /// OutputPath in the end.
  /// \param CreateMissingDirectories - When \p UseTemporary is true, create
  /// missing directories in the output path.</doc>
<use f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='716' u='c' c='_ZN5clang16CompilerInstance16createOutputFileEN4llvm9StringRefEbbbb'/>
<def f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='725' ll='813' type='Expected&lt;std::unique_ptr&lt;llvm::raw_pwrite_stream&gt; &gt; clang::CompilerInstance::createOutputFileImpl(llvm::StringRef OutputPath, bool Binary, bool RemoveFileOnSignal, bool UseTemporary, bool CreateMissingDirectories)'/>
