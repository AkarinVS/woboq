<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='1365' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildBlockAddress(llvm::Register Res, const llvm::BlockAddress * BA)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='1357'>/// Build and insert \p Res = G_BLOCK_ADDR \p BA
  ///
  /// G_BLOCK_ADDR computes the address of a basic block.
  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p Res must be a generic virtual register of a pointer type.
  ///
  /// \return The newly created instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='2930' u='c' c='_ZN4llvm12IRTranslator9translateERKNS_8ConstantENS_8RegisterE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp' l='930' ll='937' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildBlockAddress(llvm::Register Res, const llvm::BlockAddress * BA)'/>
