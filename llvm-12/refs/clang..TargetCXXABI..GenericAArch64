<dec f='llvm/clang/include/clang/Basic/TargetCXXABI.h' l='84' type='5'/>
<use f='llvm/clang/include/clang/Basic/TargetCXXABI.h' l='152' c='_ZNK5clang12TargetCXXABI15isItaniumFamilyEv'/>
<use f='llvm/clang/include/clang/Basic/TargetCXXABI.h' l='173' c='_ZNK5clang12TargetCXXABI11isMicrosoftEv'/>
<use f='llvm/clang/include/clang/Basic/TargetCXXABI.h' l='206' c='_ZNK5clang12TargetCXXABI25areMemberFunctionsAlignedEv'/>
<use f='llvm/clang/include/clang/Basic/TargetCXXABI.h' l='287' c='_ZNK5clang12TargetCXXABI22canKeyFunctionBeInlineEv'/>
<use f='llvm/clang/include/clang/Basic/TargetCXXABI.h' l='326' c='_ZNK5clang12TargetCXXABI22getTailPaddingUseRulesEv'/>
<doc f='llvm/clang/include/clang/Basic/TargetCXXABI.h' l='78'>/// The generic AArch64 ABI is also a modified version of the Itanium ABI,
    /// but it has fewer divergences than the 32-bit ARM ABI.
    ///
    /// The relevant changes from the generic ABI in this case are:
    ///   - representation of member function pointers adjusted as in ARM.
    ///   - guard variables  are smaller.</doc>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='891' c='_ZN5clang10ASTContext12createCXXABIERKNS_10TargetInfoE'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='10877' c='_ZN5clang10ASTContext19createMangleContextEPKNS_10TargetInfoE'/>
<use f='llvm/clang/lib/Basic/Targets/AArch64.cpp' l='101' u='r' c='_ZN5clang7targets17AArch64TargetInfoC1ERKN4llvm6TripleERKNS_13TargetOptionsE'/>
<use f='llvm/clang/lib/Basic/Targets/AArch64.cpp' l='857' u='r' c='_ZN5clang7targets20MinGWARM64TargetInfoC1ERKN4llvm6TripleERKNS_13TargetOptionsE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='81' c='_ZL12createCXXABIRN5clang7CodeGen13CodeGenModuleE'/>
<use f='llvm/clang/lib/CodeGen/ItaniumCXXABI.cpp' l='563' c='_ZN5clang7CodeGen19CreateItaniumCXXABIERNS0_13CodeGenModuleE'/>
