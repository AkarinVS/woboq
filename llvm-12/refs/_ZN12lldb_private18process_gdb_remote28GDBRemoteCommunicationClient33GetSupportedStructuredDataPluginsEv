<dec f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunicationClient.h' l='499' type='lldb_private::StructuredData::Array * lldb_private::process_gdb_remote::GDBRemoteCommunicationClient::GetSupportedStructuredDataPlugins()'/>
<doc f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunicationClient.h' l='482'>/// Return the array of async JSON packet types supported by the remote.
  ///
  /// This method returns the remote side&apos;s array of supported JSON
  /// packet types as a list of type names.  Each of the results are
  /// expected to have an Enable{type_name} command to enable and configure
  /// the related feature.  Each type_name for an enabled feature will
  /// possibly send async-style packets that contain a payload of a
  /// binhex-encoded JSON dictionary.  The dictionary will have a
  /// string field named &apos;type&apos;, that contains the type_name of the
  /// supported packet type.
  ///
  /// There is a Plugin category called structured-data plugins.
  /// A plugin indicates whether it knows how to handle a type_name.
  /// If so, it can be used to process the async JSON packet.
  ///
  /// \return
  ///     The string returned by the server to the qSupported query.</doc>
<def f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunicationClient.cpp' l='4042' ll='4088' type='StructuredData::Array * lldb_private::process_gdb_remote::GDBRemoteCommunicationClient::GetSupportedStructuredDataPlugins()'/>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp' l='1102' u='c' c='_ZN12lldb_private18process_gdb_remote16ProcessGDBRemote17DidLaunchOrAttachERNS_8ArchSpecE'/>
