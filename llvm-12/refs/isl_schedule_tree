<use f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='10'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='12' macro='1' c='isl_schedule_tree_list_get_schedule_tree'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='12' macro='1' c='isl_schedule_tree_list_set_schedule_tree'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='12' macro='1' c='isl_schedule_tree_list_sort'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='12' macro='1' c='isl_schedule_tree_list_sort'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='12' macro='1' c='isl_schedule_tree_list_foreach_scc'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='12' macro='1' c='isl_schedule_tree_list_foreach_scc'/>
<def f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='54' ll='73'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_private.h' l='22'/>
<size>48</size>
<doc f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='14'>/* A schedule (sub)tree.
 *
 * The leaves of a tree are not explicitly represented inside
 * the isl_schedule_tree, except when the tree consists of only a leaf.
 *
 * The &quot;band&quot; field is valid when type is isl_schedule_node_band.
 * The &quot;context&quot; field is valid when type is isl_schedule_node_context
 * and represents constraints on the flat product of the outer band nodes,
 * possibly introducing additional parameters.
 * The &quot;domain&quot; field is valid when type is isl_schedule_node_domain
 * and introduces the statement instances scheduled by the tree.
 *
 * The &quot;contraction&quot; and &quot;expansion&quot; fields are valid when type
 * is isl_schedule_node_expansion.
 * &quot;expansion&quot; expands the reaching domain elements to one or more
 * domain elements for the subtree.
 * &quot;contraction&quot; maps these elements back to the corresponding
 * reaching domain element.  It does not involve any domain constraints.
 *
 * The &quot;extension&quot; field is valid when the is isl_schedule_node_extension
 * maps outer schedule dimensions (the flat product of the outer band nodes)
 * to additional iteration domains.
 *
 * The &quot;filter&quot; field is valid when type is isl_schedule_node_filter
 * and represents the statement instances selected by the node.
 *
 * The &quot;guard&quot; field is valid when type is isl_schedule_node_guard
 * and represents constraints on the flat product of the outer band nodes
 * that need to be enforced by the outer nodes in the generated AST.
 *
 * The &quot;mark&quot; field is valid when type is isl_schedule_node_mark and
 * identifies the mark.
 *
 * The &quot;children&quot; field is valid for all types except
 * isl_schedule_node_leaf.  This field is NULL if there are
 * no children (except for the implicit leaves).
 *
 * anchored is set if the node or any of its descendants depends
 * on its position in the schedule tree.
 */</doc>
<mbr r='isl_schedule_tree::ref' o='0' t='int'/>
<mbr r='isl_schedule_tree::ctx' o='64' t='isl_ctx *'/>
<mbr r='isl_schedule_tree::anchored' o='128' t='int'/>
<mbr r='isl_schedule_tree::type' o='160' t='enum isl_schedule_node_type'/>
<mbr r='isl_schedule_tree::children' o='320' t='isl_schedule_tree_list *'/>
