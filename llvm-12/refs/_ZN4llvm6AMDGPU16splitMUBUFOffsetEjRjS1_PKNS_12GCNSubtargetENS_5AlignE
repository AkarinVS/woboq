<dec f='llvm/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.h' l='846' type='bool llvm::AMDGPU::splitMUBUFOffset(uint32_t Imm, uint32_t &amp; SOffset, uint32_t &amp; ImmOffset, const llvm::GCNSubtarget * Subtarget, llvm::Align Alignment = llvm::Align(4))'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='1329' u='c' c='_ZL16setBufferOffsetsRN4llvm16MachineIRBuilderERKNS_22AMDGPURegisterBankInfoENS_8RegisterERS5_S6_RlNS_5AlignE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='1348' u='c' c='_ZL16setBufferOffsetsRN4llvm16MachineIRBuilderERKNS_22AMDGPURegisterBankInfoENS_8RegisterERS5_S6_RlNS_5AlignE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='7735' u='c' c='_ZNK4llvm16SITargetLowering16setBufferOffsetsENS_7SDValueERNS_12SelectionDAGEPS1_NS_5AlignE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='7748' u='c' c='_ZNK4llvm16SITargetLowering16setBufferOffsetsENS_7SDValueERNS_12SelectionDAGEPS1_NS_5AlignE'/>
<def f='llvm/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp' l='1672' ll='1709' type='bool llvm::AMDGPU::splitMUBUFOffset(uint32_t Imm, uint32_t &amp; SOffset, uint32_t &amp; ImmOffset, const llvm::GCNSubtarget * Subtarget, llvm::Align Alignment = llvm::Align(4))'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp' l='1665'>// Given Imm, split it into the values to put into the SOffset and ImmOffset
// fields in an MUBUF instruction. Return false if it is not possible (due to a
// hardware bug needing a workaround).
//
// The required alignment ensures that individual address components remain
// aligned if they are aligned to begin with. It also ensures that additional
// offsets within the given alignment can be added to the resulting ImmOffset.</doc>
