<dec f='llvm/polly/include/polly/ScopBuilder.h' l='698' type='void polly::ScopBuilder::hoistInvariantLoads()'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2772' ll='2789' type='void polly::ScopBuilder::hoistInvariantLoads()'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3768' u='c' c='_ZN5polly11ScopBuilder9buildScopERN4llvm6RegionERNS1_15AssumptionCacheE'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='681'>/// Hoist invariant memory loads and check for required ones.
  ///
  /// We first identify &quot;common&quot; invariant loads, thus loads that are invariant
  /// and can be hoisted. Then we check if all required invariant loads have
  /// been identified as (common) invariant. A load is a required invariant load
  /// if it was assumed to be invariant during SCoP detection, e.g., to assume
  /// loop bounds to be affine or runtime alias checks to be placeable. In case
  /// a required invariant load was not identified as (common) invariant we will
  /// drop this SCoP. An example for both &quot;common&quot; as well as required invariant
  /// loads is given below:
  ///
  /// for (int i = 1; i &lt; *LB[0]; i++)
  ///   for (int j = 1; j &lt; *LB[1]; j++)
  ///     A[i][j] += A[0][0] + (*V);
  ///
  /// Common inv. loads: V, A[0][0], LB[0], LB[1]
  /// Required inv. loads: LB[0], LB[1], (V, if it may alias with A or LB)</doc>
