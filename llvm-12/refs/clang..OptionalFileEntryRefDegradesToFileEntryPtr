<inh f='llvm/llvm/include/llvm/ADT/Optional.h' l='239' c='llvm::Optional'/>
<def f='llvm/clang/include/clang/Basic/FileEntry.h' l='280' ll='319'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='285' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtrC1EOS0_'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='287' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtrC1ERKS0_'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='288' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSEOS0_'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='289' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSEOS0_'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='290' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSERKS0_'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='291' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSERKS0_'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='299' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSEN4llvm8NoneTypeE'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='303' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSENS_12FileEntryRefE'/>
<use f='llvm/clang/include/clang/Basic/FileEntry.h' l='307' c='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSEN4llvm8OptionalINS_12FileEntryRefEEE'/>
<use f='llvm/clang/include/clang/Basic/Module.h' l='193'/>
<use f='llvm/clang/include/clang/Basic/Module.h' l='531' c='_ZNK5clang6Module10getASTFileEv'/>
<size>8</size>
<doc f='llvm/clang/include/clang/Basic/FileEntry.h' l='259'>/// Wrapper around Optional&lt;FileEntryRef&gt; that degrades to &apos;const FileEntry*&apos;,
/// facilitating incremental patches to propagate FileEntryRef.
///
/// This class can be used as return value or field where it&apos;s convenient for
/// an Optional&lt;FileEntryRef&gt; to degrade to a &apos;const FileEntry*&apos;. The purpose
/// is to avoid code churn due to dances like the following:
/// \code
/// // Old code.
/// lvalue = rvalue;
///
/// // Temporary code from an incremental patch.
/// Optional&lt;FileEntryRef&gt; MaybeF = rvalue;
/// lvalue = MaybeF ? &amp;MaybeF.getFileEntry() : nullptr;
///
/// // Final code.
/// lvalue = rvalue;
/// \endcode
///
/// FIXME: Once FileEntryRef is &quot;everywhere&quot; and FileEntry::LastRef and
/// FileEntry::getName have been deleted, delete this class and replace
/// instances with Optional&lt;FileEntryRef&gt;.</doc>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtrC1Ev'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtrC1EOS0_'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtrC1ERKS0_'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSEOS0_'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSERKS0_'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtrC1EN4llvm8NoneTypeE'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtrC1ENS_12FileEntryRefE'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtrC1EN4llvm8OptionalINS_12FileEntryRefEEE'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSEN4llvm8NoneTypeE'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSENS_12FileEntryRefE'/>
<fun r='_ZN5clang42OptionalFileEntryRefDegradesToFileEntryPtraSEN4llvm8OptionalINS_12FileEntryRefEEE'/>
<fun r='_ZNK5clang42OptionalFileEntryRefDegradesToFileEntryPtrcvPKNS_9FileEntryEEv'/>
<use f='llvm/clang/include/clang/Serialization/ModuleFile.h' l='93' c='_ZNK5clang13serialization9InputFile7getFileEv'/>
<use f='llvm/clang/include/clang/Serialization/ModuleFile.h' l='166'/>
<size>8</size>
<use f='llvm/clang/lib/Serialization/ASTReader.cpp' l='2322' c='_ZN5clang9ASTReader12getInputFileERNS_13serialization10ModuleFileEjb'/>
<size>8</size>
<use f='llvm/clang/lib/Serialization/ModuleManager.cpp' l='115' c='_ZN5clang13serialization13ModuleManager9addModuleEN4llvm9StringRefENS0_10ModuleKindENS_14SourceLocationEPNS0_10ModuleFileEjllNS_16ASTFileSignatureEPFS9262631'/>
<size>8</size>
<use f='llvm/clang/unittests/Basic/FileEntryTest.cpp' l='88' c='_ZN12_GLOBAL__N_161FileEntryTest_OptionalFileEntryRefDegradesToFileEntryPtr_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Basic/FileEntryTest.cpp' l='89' c='_ZN12_GLOBAL__N_161FileEntryTest_OptionalFileEntryRefDegradesToFileEntryPtr_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Basic/FileEntryTest.cpp' l='90' c='_ZN12_GLOBAL__N_161FileEntryTest_OptionalFileEntryRefDegradesToFileEntryPtr_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Basic/FileEntryTest.cpp' l='91' c='_ZN12_GLOBAL__N_161FileEntryTest_OptionalFileEntryRefDegradesToFileEntryPtr_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Basic/FileEntryTest.cpp' l='92' c='_ZN12_GLOBAL__N_161FileEntryTest_OptionalFileEntryRefDegradesToFileEntryPtr_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Basic/FileEntryTest.cpp' l='117' c='_ZN12_GLOBAL__N_125FileEntryTest_equals_Test8TestBodyEv'/>
<size>8</size>
