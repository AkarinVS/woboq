<dec f='llvm/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h' l='107' type='llvm::Expected&lt;FullDependenciesResult&gt; clang::tooling::dependencies::DependencyScanningTool::getFullDependencies(const tooling::CompilationDatabase &amp; Compilations, llvm::StringRef CWD, const llvm::StringSet&lt;&gt; &amp; AlreadySeen)'/>
<def f='llvm/clang/lib/Tooling/DependencyScanning/DependencyScanningTool.cpp' l='97' ll='169' type='llvm::Expected&lt;FullDependenciesResult&gt; clang::tooling::dependencies::DependencyScanningTool::getFullDependencies(const tooling::CompilationDatabase &amp; Compilations, llvm::StringRef CWD, const llvm::StringSet&lt;&gt; &amp; AlreadySeen)'/>
<doc f='llvm/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h' l='94'>/// Collect the full module depenedency graph for the input, ignoring any
  /// modules which have already been seen.
  ///
  /// \param AlreadySeen this is used to not report modules that have previously
  ///                    been reported. Use the same `llvm::StringSet&lt;&gt;` for all
  ///                    calls to `getFullDependencies` for a single
  ///                    `DependencyScanningTool` for a single build. Use a
  ///                    different one for different tools, and clear it between
  ///                    builds.
  ///
  /// \returns a \c StringError with the diagnostic output if clang errors
  /// occurred, \c FullDependencies otherwise.</doc>
<use f='llvm/clang/tools/clang-scan-deps/ClangScanDeps.cpp' l='535' u='c' c='main'/>
