<dec f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='270' type='llvm::CanonicalLoopInfo * llvm::OpenMPIRBuilder::createCanonicalLoop(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::OpenMPIRBuilder::LoopBodyGenCallbackTy BodyGenCB, llvm::Value * Start, llvm::Value * Stop, llvm::Value * Step, bool IsSigned, bool InclusiveStop, llvm::OpenMPIRBuilder::InsertPointTy ComputeIP = {}, const llvm::Twine &amp; Name = &quot;loop&quot;)'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='221'>/// Generator for the control flow structure of an OpenMP canonical loop.
  ///
  /// Instead of a logical iteration space, this allows specifying user-defined
  /// loop counter values using increment, upper- and lower bounds. To
  /// disambiguate the terminology when counting downwards, instead of lower
  /// bounds we use \p Start for the loop counter value in the first body
  /// iteration.
  ///
  /// Consider the following limitations:
  ///
  ///  * A loop counter space over all integer values of its bit-width cannot be
  ///    represented. E.g using uint8_t, its loop trip count of 256 cannot be
  ///    stored into an 8 bit integer):
  ///
  ///      DO I = 0, 255, 1
  ///
  ///  * Unsigned wrapping is only supported when wrapping only &quot;once&quot;; E.g.
  ///    effectively counting downwards:
  ///
  ///      for (uint8_t i = 100u; i &gt; 0; i += 127u)
  ///
  ///
  /// TODO: May need to add additional parameters to represent:
  ///
  ///  * Allow representing downcounting with unsigned integers.
  ///
  ///  * Sign of the step and the comparison operator might disagree:
  ///
  ///      for (int i = 0; i &lt; 42; --i)
  ///
  //
  /// \param Loc       The insert and source location description.
  /// \param BodyGenCB Callback that will generate the loop body code.
  /// \param Start     Value of the loop counter for the first iterations.
  /// \param Stop      Loop counter values past this will stop the the
  ///                  iterations.
  /// \param Step      Loop counter increment after each iteration; negative
  ///                  means counting down. \param IsSigned  Whether Start, Stop
  ///                  and Stop are signed integers.
  /// \param InclusiveStop Whether  \p Stop itself is a valid value for the loop
  ///                      counter.
  /// \param ComputeIP Insertion point for instructions computing the trip
  ///                  count. Can be used to ensure the trip count is available
  ///                  at the outermost loop of a loop nest. If not set,
  ///                  defaults to the preheader of the generated loop.
  /// \param Name      Base name used to derive BB and instruction names.
  ///
  /// \returns An object representing the created control flow structure which
  ///          can be used for loop-associated directives.</doc>
<def f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='982' ll='1052' type='llvm::CanonicalLoopInfo * llvm::OpenMPIRBuilder::createCanonicalLoop(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::OpenMPIRBuilder::LoopBodyGenCallbackTy BodyGenCB, llvm::Value * Start, llvm::Value * Stop, llvm::Value * Step, bool IsSigned, bool InclusiveStop, llvm::OpenMPIRBuilder::InsertPointTy ComputeIP = {}, const llvm::Twine &amp; Name = &quot;loop&quot;)'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1108' u='c' c='_ZN12_GLOBAL__N_144OpenMPIRBuilderTest_CanonicalLoopBounds_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1348' u='c' c='_ZN12_GLOBAL__N_150OpenMPIRBuilderTest_TileNestedLoopsWithBounds_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1352' u='c' c='_ZN12_GLOBAL__N_150OpenMPIRBuilderTest_TileNestedLoopsWithBounds_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1460' u='c' c='_ZN12_GLOBAL__N_145OpenMPIRBuilderTest_TileSingleLoopCounts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1536' u='c' c='_ZN12_GLOBAL__N_144OpenMPIRBuilderTest_StaticWorkShareLoop_Test8TestBodyEv'/>
