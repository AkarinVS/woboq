<def f='llvm/llvm/include/llvm/MC/ConstantPools.h' l='43' ll='67'/>
<use f='llvm/llvm/include/llvm/MC/ConstantPools.h' l='84'/>
<use f='llvm/llvm/include/llvm/MC/ConstantPools.h' l='95' c='_ZN4llvm22AssemblerConstantPools15getConstantPoolEPNS_9MCSectionE'/>
<use f='llvm/llvm/include/llvm/MC/ConstantPools.h' l='96' c='_ZN4llvm22AssemblerConstantPools23getOrCreateConstantPoolEPNS_9MCSectionE'/>
<use f='llvm/llvm/lib/MC/ConstantPools.cpp' l='66' c='_ZN4llvm22AssemblerConstantPools15getConstantPoolEPNS_9MCSectionE'/>
<use f='llvm/llvm/lib/MC/ConstantPools.cpp' l='74' c='_ZN4llvm22AssemblerConstantPools23getOrCreateConstantPoolEPNS_9MCSectionE'/>
<use f='llvm/llvm/lib/MC/ConstantPools.cpp' l='80' c='_ZL16emitConstantPoolRN4llvm10MCStreamerEPNS_9MCSectionERNS_12ConstantPoolE'/>
<use f='llvm/llvm/lib/MC/ConstantPools.cpp' l='91' c='_ZN4llvm22AssemblerConstantPools7emitAllERNS_10MCStreamerE'/>
<use f='llvm/llvm/lib/MC/ConstantPools.cpp' l='99' c='_ZN4llvm22AssemblerConstantPools21emitForCurrentSectionERNS_10MCStreamerE'/>
<use f='llvm/llvm/lib/MC/ConstantPools.cpp' l='105' c='_ZN4llvm22AssemblerConstantPools27clearCacheForCurrentSectionERNS_10MCStreamerE'/>
<size>192</size>
<doc f='llvm/llvm/include/llvm/MC/ConstantPools.h' l='41'>// A class to keep track of assembler-generated constant pools that are use to
// implement the ldr-pseudo.</doc>
<mbr r='llvm::ConstantPool::Entries' o='0' t='llvm::ConstantPool::EntryVecTy'/>
<mbr r='llvm::ConstantPool::CachedEntries' o='1152' t='std::map&lt;int64_t, const MCSymbolRefExpr *&gt;'/>
<fun r='_ZN4llvm12ConstantPoolC1Ev'/>
<fun r='_ZN4llvm12ConstantPool8addEntryEPKNS_6MCExprERNS_9MCContextEjNS_5SMLocE'/>
<fun r='_ZN4llvm12ConstantPool11emitEntriesERNS_10MCStreamerE'/>
<fun r='_ZN4llvm12ConstantPool5emptyEv'/>
<fun r='_ZN4llvm12ConstantPool10clearCacheEv'/>
<fun r='_ZN4llvm12ConstantPool11emitEntriesERNS_10MCStreamerE'/>
<fun r='_ZN4llvm12ConstantPool8addEntryEPKNS_6MCExprERNS_9MCContextEjNS_5SMLocE'/>
<fun r='_ZN4llvm12ConstantPool5emptyEv'/>
<fun r='_ZN4llvm12ConstantPool10clearCacheEv'/>
