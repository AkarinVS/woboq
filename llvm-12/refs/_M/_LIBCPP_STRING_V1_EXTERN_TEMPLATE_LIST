<dec f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_x86_64/include/c++/v1/__string' l='91'/>
<use f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_x86_64/include/c++/v1/string' l='1730' u='c'/>
<use f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_x86_64/include/c++/v1/string' l='1731' u='c'/>
<doc f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_x86_64/include/c++/v1/__string' l='75'>// The the extern template ABI lists are kept outside of &lt;string&gt; to improve the
// readability of that header.

// The extern template ABI lists are kept outside of &lt;string&gt; to improve the
// readability of that header. We maintain 2 ABI lists:
// - _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST
// - _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST
// As the name implies, the ABI lists define the V1 (Stable) and unstable ABI.
//
// For unstable, we may explicitly remove function that are external in V1,
// and add (new) external functions to better control inlining and compiler
// optimization opportunities.
//
// For stable, the ABI list should rarely change, except for adding new
// functions supporting new c++ version / API changes. Typically entries
// must never be removed from the stable list.</doc>
<dec f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_i386/include/c++/v1/__string' l='91'/>
<use f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_i386/include/c++/v1/string' l='1730' u='c'/>
<use f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_i386/include/c++/v1/string' l='1731' u='c'/>
<doc f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_i386/include/c++/v1/__string' l='75'>// The the extern template ABI lists are kept outside of &lt;string&gt; to improve the
// readability of that header.

// The extern template ABI lists are kept outside of &lt;string&gt; to improve the
// readability of that header. We maintain 2 ABI lists:
// - _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST
// - _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST
// As the name implies, the ABI lists define the V1 (Stable) and unstable ABI.
//
// For unstable, we may explicitly remove function that are external in V1,
// and add (new) external functions to better control inlining and compiler
// optimization opportunities.
//
// For stable, the ABI list should rarely change, except for adding new
// functions supporting new c++ version / API changes. Typically entries
// must never be removed from the stable list.</doc>
<dec f='llvm/build/include/c++/v1/__string' l='91'/>
<use f='llvm/build/include/c++/v1/string' l='1730' u='c'/>
<use f='llvm/build/include/c++/v1/string' l='1731' u='c'/>
<doc f='llvm/build/include/c++/v1/__string' l='75'>// The the extern template ABI lists are kept outside of &lt;string&gt; to improve the
// readability of that header.

// The extern template ABI lists are kept outside of &lt;string&gt; to improve the
// readability of that header. We maintain 2 ABI lists:
// - _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST
// - _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST
// As the name implies, the ABI lists define the V1 (Stable) and unstable ABI.
//
// For unstable, we may explicitly remove function that are external in V1,
// and add (new) external functions to better control inlining and compiler
// optimization opportunities.
//
// For stable, the ABI list should rarely change, except for adding new
// functions supporting new c++ version / API changes. Typically entries
// must never be removed from the stable list.</doc>
<use f='llvm/libcxx/src/string.cpp' l='27' u='c'/>
<use f='llvm/libcxx/src/string.cpp' l='28' u='c'/>
