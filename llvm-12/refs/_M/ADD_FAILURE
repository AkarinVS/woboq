<dec f='llvm/llvm/utils/unittest/googletest/include/gtest/gtest.h' l='1808'/>
<doc f='llvm/llvm/utils/unittest/googletest/include/gtest/gtest.h' l='1788'>// Macros for indicating success/failure in test code.

// ADD_FAILURE unconditionally adds a failure to the current test.
// SUCCEED generates a success - it doesn&apos;t automatically make the
// current test successful, as a test is only successful when it has
// no failure.
//
// EXPECT_* verifies that a certain condition is satisfied.  If not,
// it behaves like ADD_FAILURE.  In particular:
//
//   EXPECT_TRUE  verifies that a Boolean condition is true.
//   EXPECT_FALSE verifies that a Boolean condition is false.
//
// FAIL and ASSERT_* are similar to ADD_FAILURE and EXPECT_*, except
// that they will also abort the current function on failure.  People
// usually want the fail-fast behavior of FAIL and ASSERT_*, but those
// writing data-driven tests often find themselves using ADD_FAILURE
// and EXPECT_* more.

// Generates a nonfatal failure with a generic message.</doc>
<use f='llvm/clang/unittests/Driver/SanitizerArgsTest.cpp' l='71' u='c'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='62' u='c'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='75' u='c'/>
<use f='llvm/clang/unittests/Tooling/SourceCodeBuildersTest.cpp' l='56' u='c'/>
<use f='llvm/clang/unittests/Tooling/SourceCodeBuildersTest.cpp' l='63' u='c'/>
<use f='llvm/clang/unittests/Tooling/StencilTest.cpp' l='74' u='c'/>
<use f='llvm/clang/unittests/Tooling/StencilTest.cpp' l='81' u='c'/>
<use f='llvm/clang/unittests/Tooling/StencilTest.cpp' l='114' u='c'/>
<use f='llvm/clang/unittests/Tooling/StencilTest.cpp' l='121' u='c'/>
<use f='llvm/clang/unittests/Tooling/Syntax/MutationsTest.cpp' l='36' u='c'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='155' u='c'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='215' u='c'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='226' u='c'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='233' u='c'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TreeTestBase.cpp' l='155' u='c'/>
<use f='llvm/clang/unittests/Tooling/TransformerTest.cpp' l='72' u='c'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/CoreAPIsTest.cpp' l='119' u='c'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/CoreAPIsTest.cpp' l='171' u='c'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/CoreAPIsTest.cpp' l='193' u='c'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/CoreAPIsTest.cpp' l='991' u='c'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/CoreAPIsTest.cpp' l='1026' u='c'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/CoreAPIsTest.cpp' l='1117' u='c'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/CoreAPIsTest.cpp' l='1167' u='c'/>
<use f='llvm/llvm/unittests/ExecutionEngine/Orc/ResourceTrackerTest.cpp' l='233' u='c'/>
<use f='llvm/llvm/unittests/IR/ValueMapTest.cpp' l='139' u='c'/>
<use f='llvm/llvm/unittests/IR/ValueMapTest.cpp' l='159' u='c'/>
<use f='llvm/llvm/unittests/Object/ELFObjectFileTest.cpp' l='382' u='c'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='2145' u='c'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='2301' u='c'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='2313' u='c'/>
