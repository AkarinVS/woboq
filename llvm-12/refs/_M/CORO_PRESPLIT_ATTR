<dec f='llvm/llvm/lib/Transforms/Coroutines/CoroInternal.h' l='39'/>
<doc f='llvm/llvm/lib/Transforms/Coroutines/CoroInternal.h' l='29'>// CoroEarly pass marks every function that has coro.begin with a string
// attribute &quot;coroutine.presplit&quot;=&quot;0&quot;. CoroSplit pass processes the coroutine
// twice. First, it lets it go through complete IPO optimization pipeline as a
// single function. It forces restart of the pipeline by inserting an indirect
// call to an empty function &quot;coro.devirt.trigger&quot; which is devirtualized by
// CoroElide pass that triggers a restart of the pipeline by CGPassManager.
// When CoroSplit pass sees the same coroutine the second time, it splits it up,
// adds coroutine subfunctions to the SCC to be processed by IPO pipeline.
// Async lowering similarily triggers a restart of the pipeline after it has
// split the coroutine.</doc>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroEarly.cpp' l='182' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroEarly.cpp' l='192' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroElide.cpp' l='422' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='1829' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='2037' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='2052' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='2059' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='2062' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='2128' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='2147' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='2154' u='c'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='2161' u='c'/>
