<dec f='llvm/llvm/include/llvm/Analysis/LazyValueInfo.h' l='77' type='llvm::LazyValueInfo::Tristate llvm::LazyValueInfo::getPredicateAt(unsigned int Pred, llvm::Value * V, llvm::Constant * C, llvm::Instruction * CxtI, bool UseBlockValue = false)'/>
<def f='llvm/llvm/lib/Analysis/LazyValueInfo.cpp' l='1755' ll='1858' type='LazyValueInfo::Tristate llvm::LazyValueInfo::getPredicateAt(unsigned int Pred, llvm::Value * V, llvm::Constant * C, llvm::Instruction * CxtI, bool UseBlockValue = false)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyValueInfo.h' l='73'>/// Determine whether the specified value comparison with a constant is known
  /// to be true or false at the specified instruction.
  /// \p Pred is a CmpInst predicate. If \p UseBlockValue is true, the block
  /// value is also taken into account.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='308' u='c' c='_ZL10processCmpPN4llvm7CmpInstEPNS_13LazyValueInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='346' u='c' c='_ZL13processSwitchPN4llvm10SwitchInstEPNS_13LazyValueInfoEPNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='540' u='c' c='_ZL15processCallSiteRN4llvm8CallBaseEPNS_13LazyValueInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='563' u='c' c='_ZL13isNonNegativePN4llvm5ValueEPNS_13LazyValueInfoEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='569' u='c' c='_ZL13isNonPositivePN4llvm5ValueEPNS_13LazyValueInfoEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='923' u='c' c='_ZL13getConstantAtPN4llvm5ValueEPNS_11InstructionEPNS_13LazyValueInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1153' u='c' c='_ZN4llvm17JumpThreadingPass12processBlockEPNS_10BasicBlockE'/>
