<dec f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64TargetStreamer.h' l='124' type='void llvm::AArch64TargetWinCOFFStreamer::EmitARM64WinUnwindCode(unsigned int UnwindCode, int Reg, int Offset)'/>
<def f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='70' ll='83' type='void llvm::AArch64TargetWinCOFFStreamer::EmitARM64WinUnwindCode(unsigned int UnwindCode, int Reg, int Offset)'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='91' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer25EmitARM64WinCFIAllocStackEj'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='95' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer26EmitARM64WinCFISaveR19R20XEi'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='99' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveFPLREi'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='103' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFISaveFPLRXEi'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='110' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer22EmitARM64WinCFISaveRegEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='115' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveRegXEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='120' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveRegPEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='125' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFISaveRegPXEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='130' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer25EmitARM64WinCFISaveLRPairEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='137' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveFRegEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='142' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFISaveFRegXEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='147' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFISaveFRegPEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='152' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer25EmitARM64WinCFISaveFRegPXEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='156' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer20EmitARM64WinCFISetFPEv'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='161' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer20EmitARM64WinCFIAddFPEj'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='165' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer18EmitARM64WinCFINopEv'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='169' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveNextEv'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='211' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFITrapFrameEv'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='215' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer27EmitARM64WinCFIMachineFrameEv'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='219' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer22EmitARM64WinCFIContextEv'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='223' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer33EmitARM64WinCFIClearUnwoundToCallEv'/>
<doc f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='64'>// Helper function to common out unwind code setup for those codes that can
// belong to both prolog and epilog.
// There are three types of Windows ARM64 SEH codes.  They can
// 1) take no operands: SEH_Nop, SEH_PrologEnd, SEH_EpilogStart, SEH_EpilogEnd
// 2) take an offset: SEH_StackAlloc, SEH_SaveFPLR, SEH_SaveFPLR_X
// 3) take a register and an offset/size: all others</doc>
