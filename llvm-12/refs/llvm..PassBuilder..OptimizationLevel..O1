<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='201' type='const llvm::PassBuilder::OptimizationLevel'/>
<use f='llvm/clang/lib/CodeGen/BackendUtil.cpp' l='1039' u='r' c='_ZL10mapToLevelRKN5clang14CodeGenOptionsE'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='187'>/// Optimize quickly without destroying debuggability.
    ///
    /// This level is tuned to produce a result from the optimizer as quickly
    /// as possible and to avoid destroying debuggability. This tends to result
    /// in a very good development mode where the compiled code will be
    /// immediately executed as part of testing. As a consequence, where
    /// possible, we would like to produce efficient-to-execute code, but not
    /// if it significantly slows down compilation or would prevent even basic
    /// debugging of the resulting binary.
    ///
    /// As an example, complex loop transformations such as versioning,
    /// vectorization, or fusion don&apos;t make sense here due to the degree to
    /// which the executed code differs from the source code, and the compile
    /// time cost.</doc>
<use f='llvm/llvm/lib/LTO/LTOBackend.cpp' l='270' u='r' c='_ZL14runNewPMPassesRKN4llvm3lto6ConfigERNS_6ModuleEPNS_13TargetMachineEjbPNS_18ModuleSummaryIndexEPKS8_'/>
<def f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='317' ll='319' type='const PassBuilder::OptimizationLevel'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1631' u='r' c='_ZN4llvm11PassBuilder23buildLTODefaultPipelineENS0_17OptimizationLevelEPNS_18ModuleSummaryIndexE'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='2456' u='r' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementE'/>
