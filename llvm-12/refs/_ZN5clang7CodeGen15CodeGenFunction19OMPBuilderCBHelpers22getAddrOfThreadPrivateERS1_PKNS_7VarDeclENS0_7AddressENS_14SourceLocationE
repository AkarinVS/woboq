<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='1690' type='static clang::CodeGen::Address clang::CodeGen::CodeGenFunction::OMPBuilderCBHelpers::getAddrOfThreadPrivate(clang::CodeGen::CodeGenFunction &amp; CGF, const clang::VarDecl * VD, clang::CodeGen::Address VDAddr, clang::SourceLocation Loc)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='1684'>/// Returns address of the threadprivate variable for the current
    /// thread. This Also create any necessary OMP runtime calls.
    ///
    /// \param VD VarDecl for Threadprivate variable.
    /// \param VDAddr Address of the Vardecl
    /// \param Loc  The location where the barrier directive was encountered</doc>
<use f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='2443' u='c' c='_ZL30EmitThreadPrivateVarDeclLValueRN5clang7CodeGen15CodeGenFunctionEPKNS_7VarDeclENS_8QualTypeENS0_7AddressEPN4llvm4TypeENS_14SourceLocationE'/>
<def f='llvm/clang/lib/CodeGen/CGStmtOpenMP.cpp' l='1631' ll='1652' type='static clang::CodeGen::Address clang::CodeGen::CodeGenFunction::OMPBuilderCBHelpers::getAddrOfThreadPrivate(clang::CodeGen::CodeGenFunction &amp; CGF, const clang::VarDecl * VD, clang::CodeGen::Address VDAddr, clang::SourceLocation Loc)'/>
