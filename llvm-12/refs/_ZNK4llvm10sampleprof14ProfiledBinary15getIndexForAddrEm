<def f='llvm/llvm/tools/llvm-profgen/ProfiledBinary.h' l='215' ll='219' type='uint32_t llvm::sampleprof::ProfiledBinary::getIndexForAddr(uint64_t Address) const'/>
<use f='llvm/llvm/tools/llvm-profgen/ProfiledBinary.h' l='222' u='c' c='_ZNK4llvm10sampleprof14ProfiledBinary24getCallAddrFromFrameAddrEm'/>
<doc f='llvm/llvm/tools/llvm-profgen/ProfiledBinary.h' l='211'>// Get the index in CodeAddrs for the address
  // As we might get an address which is not the code
  // here it would round to the next valid code address by
  // using lower bound operation</doc>
<use f='llvm/llvm/tools/llvm-profgen/ProfiledBinary.cpp' l='417' u='c' c='_ZN4llvm10sampleprof18InstructionPointerC1EPNS0_14ProfiledBinaryEmb'/>
<use f='llvm/llvm/tools/llvm-profgen/ProfiledBinary.cpp' l='437' u='c' c='_ZN4llvm10sampleprof18InstructionPointer6updateEm'/>
