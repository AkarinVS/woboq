<dec f='llvm/llvm/lib/Target/NVPTX/NVPTXInstrInfo.h' l='51' type='void llvm::NVPTXInstrInfo::copyPhysReg(llvm::MachineBasicBlock &amp; MBB, MachineBasicBlock::iterator I, const llvm::DebugLoc &amp; DL, llvm::MCRegister DestReg, llvm::MCRegister SrcReg, bool KillSrc) const'/>
<doc f='llvm/llvm/lib/Target/NVPTX/NVPTXInstrInfo.h' l='33'>/* The following virtual functions are used in register allocation.
   * They are not implemented because the existing interface and the logic
   * at the caller side do not work for the elementized vector load and store.
   *
   * virtual unsigned isLoadFromStackSlot(const MachineInstr *MI,
   *                                  int &amp;FrameIndex) const;
   * virtual unsigned isStoreToStackSlot(const MachineInstr *MI,
   *                                 int &amp;FrameIndex) const;
   * virtual void storeRegToStackSlot(MachineBasicBlock &amp;MBB,
   *                              MachineBasicBlock::iterator MBBI,
   *                             unsigned SrcReg, bool isKill, int FrameIndex,
   *                              const TargetRegisterClass *RC) const;
   * virtual void loadRegFromStackSlot(MachineBasicBlock &amp;MBB,
   *                               MachineBasicBlock::iterator MBBI,
   *                               unsigned DestReg, int FrameIndex,
   *                               const TargetRegisterClass *RC) const;
   */</doc>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='947' c='_ZNK4llvm15TargetInstrInfo11copyPhysRegERNS_17MachineBasicBlockENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEERKNS_8DebugLocENS_10MCRegisterES9_b'/>
<def f='llvm/llvm/lib/Target/NVPTX/NVPTXInstrInfo.cpp' l='32' ll='70' type='void llvm::NVPTXInstrInfo::copyPhysReg(llvm::MachineBasicBlock &amp; MBB, MachineBasicBlock::iterator I, const llvm::DebugLoc &amp; DL, llvm::MCRegister DestReg, llvm::MCRegister SrcReg, bool KillSrc) const'/>
