<dec f='llvm/clang/include/clang/Basic/TargetID.h' l='46' type='std::string clang::getCanonicalTargetID(llvm::StringRef Processor, const llvm::StringMap&lt;bool&gt; &amp; Features)'/>
<def f='llvm/clang/lib/Basic/TargetID.cpp' l='130' ll='139' type='std::string clang::getCanonicalTargetID(llvm::StringRef Processor, const llvm::StringMap&lt;bool&gt; &amp; Features)'/>
<doc f='llvm/clang/lib/Basic/TargetID.cpp' l='128'>// A canonical target ID is a target ID containing a canonical processor name
// and features in alphabetical order.</doc>
<doc f='llvm/clang/include/clang/Basic/TargetID.h' l='44'>/// Returns canonical target ID, assuming \p Processor is canonical and all
/// entries in \p Features are valid.</doc>
<use f='llvm/clang/lib/Basic/Targets/AMDGPU.h' l='430' u='c' c='_ZNK5clang7targets16AMDGPUTargetInfo11getTargetIDB5cxx11Ev'/>
<use f='llvm/clang/lib/Driver/Driver.cpp' l='2808' u='c' c='_ZN12_GLOBAL__N_123OffloadingActionBuilder16HIPActionBuilder23getCanonicalOffloadArchEN4llvm9StringRefE'/>
