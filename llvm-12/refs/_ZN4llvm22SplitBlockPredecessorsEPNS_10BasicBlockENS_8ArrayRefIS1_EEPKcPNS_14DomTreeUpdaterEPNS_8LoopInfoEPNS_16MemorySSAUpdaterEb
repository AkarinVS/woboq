<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='328' type='llvm::BasicBlock * llvm::SplitBlockPredecessors(llvm::BasicBlock * BB, ArrayRef&lt;llvm::BasicBlock *&gt; Preds, const char * Suffix, llvm::DomTreeUpdater * DTU = nullptr, llvm::LoopInfo * LI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, bool PreserveLCSSA = false)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='314'>/// This method introduces at least one new basic block into the function and
/// moves some of the predecessors of BB to be predecessors of the new block.
/// The new predecessors are indicated by the Preds array. The new block is
/// given a suffix of &apos;Suffix&apos;. Returns new basic block to which predecessors
/// from Preds are now pointing.
///
/// If BB is a landingpad block then additional basicblock might be introduced.
/// It will have Suffix+&quot;.split_lp&quot;. See SplitLandingPadPredecessors for more
/// details on this case.
///
/// This currently updates the LLVM IR, DominatorTree, LoopInfo, and LCCSA but
/// no other analyses. In particular, it does not preserve LoopSimplify
/// (because it&apos;s complicated to handle the case where one of the edges being
/// split is an exit of a loop with other exits).</doc>
<use f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='1285' u='c' c='_ZN4llvm10Attributor9cleanupIREv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVNSink.cpp' l='819' u='c' c='_ZN12_GLOBAL__N_17GVNSink6sinkBBEPN4llvm10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2454' u='c' c='_ZN4llvm17JumpThreadingPass15splitBlockPredsEPNS_10BasicBlockENS_8ArrayRefIS2_EEPKc'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp' l='332' u='c' c='_ZN12_GLOBAL__N_121MergedLoadStoreMotion11mergeStoresEPN4llvm10BasicBlockE'/>
<def f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='941' ll='949' type='llvm::BasicBlock * llvm::SplitBlockPredecessors(llvm::BasicBlock * BB, ArrayRef&lt;llvm::BasicBlock *&gt; Preds, const char * Suffix, llvm::DomTreeUpdater * DTU = nullptr, llvm::LoopInfo * LI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, bool PreserveLCSSA = false)'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1339' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt35FoldValueComparisonIntoPredecessorsEPN4llvm11InstructionERNS1_9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='2004' u='c' c='_ZL30SinkCommonCodeFromPredecessorsPN4llvm10BasicBlockEPNS_14DomTreeUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='3234' u='c' c='_ZL30mergeConditionalStoreToAddressPN4llvm10BasicBlockES1_S1_S1_S1_PNS_5ValueEbbPNS_14DomTreeUpdaterERKNS_10DataLayoutERKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4663' u='c' c='_ZL30createUnreachableSwitchDefaultPN4llvm10SwitchInstEPNS_14DomTreeUpdaterE'/>
