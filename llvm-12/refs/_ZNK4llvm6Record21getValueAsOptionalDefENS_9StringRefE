<dec f='llvm/llvm/include/llvm/TableGen/Record.h' l='1700' type='llvm::Record * llvm::Record::getValueAsOptionalDef(llvm::StringRef FieldName) const'/>
<use f='llvm/clang/utils/TableGen/ASTTableGen.h' l='167' u='c' c='_ZNK5clang6tblgen7ASTNode7getBaseEv'/>
<doc f='llvm/llvm/include/llvm/TableGen/Record.h' l='1696'>/// This method looks up the specified field and returns its value as a
  /// Record, returning null if the field exists but is &quot;uninitialized&quot;
  /// (i.e. set to `?`), and throwing an exception if the field does not
  /// exist or if its value is not the right type.</doc>
<use f='llvm/clang/utils/TableGen/ClangASTNodesEmitter.cpp' l='154' u='c' c='_ZN12_GLOBAL__N_120ClangASTNodesEmitter15deriveChildTreeEv'/>
<use f='llvm/clang/utils/TableGen/ClangASTNodesEmitter.cpp' l='229' u='c' c='_ZN5clang20EmitClangDeclContextERN4llvm12RecordKeeperERNS0_11raw_ostreamE'/>
<use f='llvm/clang/utils/TableGen/ClangAttrEmitter.cpp' l='1863' u='c' c='_ZL18doesDeclDeriveFromPKN4llvm6RecordES2_'/>
<use f='llvm/clang/utils/TableGen/ClangAttrEmitter.cpp' l='3418' u='c' c='_ZN5clangL21GetDiagnosticSpellingB5cxx11ERKN4llvm6RecordE'/>
<use f='llvm/clang/utils/TableGen/ClangSyntaxEmitter.cpp' l='48' u='c' c='_ZN12_GLOBAL__N_19HierarchyC1ERKN4llvm12RecordKeeperE'/>
<def f='llvm/llvm/lib/TableGen/Record.cpp' l='2517' ll='2529' type='llvm::Record * llvm::Record::getValueAsOptionalDef(llvm::StringRef FieldName) const'/>
