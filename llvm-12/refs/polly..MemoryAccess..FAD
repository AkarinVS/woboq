<dec f='llvm/polly/include/polly/ScopInfo.h' l='617' type='AssertingVH&lt;llvm::Value&gt;'/>
<use f='llvm/polly/include/polly/ScopInfo.h' l='912' u='m' c='_ZNK5polly12MemoryAccess25getFortranArrayDescriptorEv'/>
<offset>2176</offset>
<doc f='llvm/polly/include/polly/ScopInfo.h' l='612'>/// Fortran arrays whose sizes are not statically known are stored in terms
  /// of a descriptor struct. This maintains a raw pointer to the memory,
  /// along with auxiliary fields with information such as dimensions.
  /// We hold a reference to the descriptor corresponding to a MemoryAccess
  /// into a Fortran array. FAD for &quot;Fortran Array Descriptor&quot;</doc>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='896' u='w' c='_ZN5polly12MemoryAccessC1EPNS_8ScopStmtEPN4llvm11InstructionENS0_10AccessTypeEPNS3_5ValueEPNS3_4TypeEbNS3_8ArrayRefIPKNS3_4SCEVEEESF_S8_NS_10MemoryKindE'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='907' u='w' c='_ZN5polly12MemoryAccessC1EPNS_8ScopStmtENS0_10AccessTypeEN3isl12noexceptions3mapE'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='951' u='w' c='_ZN5polly12MemoryAccess25setFortranArrayDescriptorEPN4llvm5ValueE'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='968' u='m' c='_ZNK5polly12MemoryAccess5printERN4llvm11raw_ostreamE'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='969' u='m' c='_ZNK5polly12MemoryAccess5printERN4llvm11raw_ostreamE'/>
