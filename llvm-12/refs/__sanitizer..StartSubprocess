<dec f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_file.h' l='90' type='__sanitizer::pid_t __sanitizer::StartSubprocess(const char * filename, const char *const * argv, const char *const * envp, __sanitizer::fd_t stdin_fd = ((__sanitizer::fd_t)-1), __sanitizer::fd_t stdout_fd = ((__sanitizer::fd_t)-1), __sanitizer::fd_t stderr_fd = ((__sanitizer::fd_t)-1))'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_file.h' l='84'>// Starts a subprocess and returs its pid.
// If *_fd parameters are not kInvalidFd their corresponding input/output
// streams will be redirect to the file. The files will always be closed
// in parent process even in case of an error.
// The child process will close all fds after STDERR_FILENO
// before passing control to a program.</doc>
<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp' l='424' ll='475' type='__sanitizer::pid_t __sanitizer::StartSubprocess(const char * program, const char *const * argv, const char *const * envp, __sanitizer::fd_t stdin_fd, __sanitizer::fd_t stdout_fd, __sanitizer::fd_t stderr_fd)'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cpp' l='179' u='c' c='__sanitizer::SymbolizerProcess::StartSymbolizerSubprocess'/>
