<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='288' type='std::unique_ptr&lt;Dependence&gt; llvm::DependenceInfo::depends(llvm::Instruction * Src, llvm::Instruction * Dst, bool PossiblyLoopIndependent)'/>
<use f='llvm/llvm/include/llvm/Analysis/DDG.h' l='466' u='c' c='_ZNK4llvm19DependenceGraphInfo15getDependenciesERKT_S3_RNS_11SmallVectorISt10unique_ptrINS_10DependenceESt14default_deleteIS6_EELj1EEE'/>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='282'>/// depends - Tests for a dependence between the Src and Dst instructions.
    /// Returns NULL if no dependence; otherwise, returns a Dependence (or a
    /// FullDependence) with as much information as can be gleaned.
    /// The flag PossiblyLoopIndependent should be set by the caller
    /// if it appears that control flow can reach from Src to Dst
    /// without traversing a loop back edge.</doc>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='187' u='c' c='_ZL21dumpExampleDependenceRN4llvm11raw_ostreamEPNS_14DependenceInfoE'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3480' ll='3856' type='std::unique_ptr&lt;Dependence&gt; llvm::DependenceInfo::depends(llvm::Instruction * Src, llvm::Instruction * Dst, bool PossiblyLoopIndependent)'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3469'>// depends -
// Returns NULL if there is no dependence.
// Otherwise, return a Dependence with as many details as possible.
// Corresponds to Section 3.1 in the paper
//
//            Practical Dependence Testing
//            Goff, Kennedy, Tseng
//            PLDI 1991
//
// Care is required to keep the routine below, getSplitIteration(),
// up to date with respect to this routine.</doc>
<use f='llvm/llvm/lib/Analysis/DependenceGraphBuilder.cpp' l='299' u='c' c='_ZN4llvm30AbstractDependenceGraphBuilder27createMemoryDependencyEdgesEv'/>
<use f='llvm/llvm/lib/Analysis/LoopCacheAnalysis.cpp' l='219' u='c' c='_ZNK4llvm16IndexedReference16hasTemporalReuseERKS0_jRKNS_4LoopERNS_14DependenceInfoERNS_9AAResultsE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopFuse.cpp' l='1120' u='c' c='_ZN12_GLOBAL__N_19LoopFuser22dependencesAllowFusionERKNS_15FusionCandidateES3_RN4llvm11InstructionES6_b30FusionDependenceAnalysisChoice'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopInterchange.cpp' l='128' u='c' c='_ZL24populateDependencyMatrixRSt6vectorIS_IcSaIcEESaIS1_EEjPN4llvm4LoopEPNS5_14DependenceInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp' l='378' u='c' c='_ZN4llvm18isSafeToMoveBeforeERNS_11InstructionES1_RNS_13DominatorTreeEPKNS_17PostDominatorTreeEPNS_14DependenceInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='715' u='c' c='_ZL15checkDependencyPN4llvm11InstructionES1_jjbRNS_14DependenceInfoE'/>
