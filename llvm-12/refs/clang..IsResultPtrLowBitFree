<def f='llvm/clang/include/clang/Sema/Ownership.h' l='141' ll='143'/>
<use f='llvm/clang/include/clang/Sema/Ownership.h' l='151'/>
<def f='llvm/clang/include/clang/Sema/Ownership.h' l='249' ll='251'/>
<use f='llvm/clang/include/clang/Sema/Ownership.h' l='249'/>
<def f='llvm/clang/include/clang/Sema/Ownership.h' l='252' ll='254'/>
<use f='llvm/clang/include/clang/Sema/Ownership.h' l='252'/>
<def f='llvm/clang/include/clang/Sema/Ownership.h' l='255' ll='257'/>
<use f='llvm/clang/include/clang/Sema/Ownership.h' l='255'/>
<def f='llvm/clang/include/clang/Sema/Ownership.h' l='258' ll='260'/>
<use f='llvm/clang/include/clang/Sema/Ownership.h' l='258'/>
<size>1</size>
<doc f='llvm/clang/include/clang/Sema/Ownership.h' l='138'>// Determines whether the low bit of the result pointer for the
// given UID is always zero. If so, ActionResult will use that bit
// for it&apos;s &quot;invalid&quot; flag.</doc>
<doc f='llvm/clang/include/clang/Sema/Ownership.h' l='246'>// We can re-use the low bit of expression, statement, base, and
  // member-initializer pointers for the &quot;invalid&quot; flag of
  // ActionResult.</doc>
<smbr r='clang::IsResultPtrLowBitFree::value' t='const bool'/>
<smbr r='clang::IsResultPtrLowBitFree{clang::Expr*}::value' t='const bool'/>
<smbr r='clang::IsResultPtrLowBitFree{clang::Stmt*}::value' t='const bool'/>
<smbr r='clang::IsResultPtrLowBitFree{clang::CXXBaseSpecifier*}::value' t='const bool'/>
<smbr r='clang::IsResultPtrLowBitFree{clang::CXXCtorInitializer*}::value' t='const bool'/>
