<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='763' type='llvm::Value * llvm::Negator::visitImpl(llvm::Value * V, unsigned int Depth)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='133' ll='438' type='llvm::Value * llvm::Negator::visitImpl(llvm::Value * V, unsigned int Depth)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='470' u='c' c='_ZN4llvm7Negator6negateEPNS_5ValueEj'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='131'>// FIXME: can this be reworked into a worklist-based algorithm while preserving
// the depth-first, early bailout traversal?</doc>
