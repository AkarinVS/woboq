<def f='llvm/llvm/utils/benchmark/src/complexity.cc' l='76' ll='111' type='benchmark::LeastSq benchmark::MinimalLeastSq(const std::vector&lt;int64_t&gt; &amp; n, const std::vector&lt;double&gt; &amp; time, benchmark::BigOFunc * fitting_curve)'/>
<use f='llvm/llvm/utils/benchmark/src/complexity.cc' l='133' u='c' c='_ZN9benchmark14MinimalLeastSqERKSt6vectorIlSaIlEERKS0_IdSaIdEENS_4BigOE'/>
<use f='llvm/llvm/utils/benchmark/src/complexity.cc' l='138' u='c' c='_ZN9benchmark14MinimalLeastSqERKSt6vectorIlSaIlEERKS0_IdSaIdEENS_4BigOE'/>
<use f='llvm/llvm/utils/benchmark/src/complexity.cc' l='145' u='c' c='_ZN9benchmark14MinimalLeastSqERKSt6vectorIlSaIlEERKS0_IdSaIdEENS_4BigOE'/>
<use f='llvm/llvm/utils/benchmark/src/complexity.cc' l='176' u='c' c='_ZN9benchmark11ComputeBigOERKSt6vectorINS_17BenchmarkReporter3RunESaIS2_EE'/>
<use f='llvm/llvm/utils/benchmark/src/complexity.cc' l='177' u='c' c='_ZN9benchmark11ComputeBigOERKSt6vectorINS_17BenchmarkReporter3RunESaIS2_EE'/>
<doc f='llvm/llvm/utils/benchmark/src/complexity.cc' l='66'>// Find the coefficient for the high-order term in the running time, by
// minimizing the sum of squares of relative error, for the fitting curve
// given by the lambda expression.
//   - n             : Vector containing the size of the benchmark tests.
//   - time          : Vector containing the times for the benchmark tests.
//   - fitting_curve : lambda expression (e.g. [](int64_t n) {return n; };).

// For a deeper explanation on the algorithm logic, look the README file at
// http://github.com/ismaelJimenez/Minimal-Cpp-Least-Squared-Fit</doc>
