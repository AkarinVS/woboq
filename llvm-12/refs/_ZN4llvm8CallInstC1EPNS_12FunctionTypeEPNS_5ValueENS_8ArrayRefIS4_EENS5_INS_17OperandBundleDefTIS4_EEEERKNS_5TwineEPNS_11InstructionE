<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='1455' type='void llvm::CallInst::CallInst(llvm::FunctionType * Ty, llvm::Value * Func, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;llvm::OperandBundleDef&gt; Bundles, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='1461' u='c' c='_ZN4llvm8CallInstC1EPNS_12FunctionTypeEPNS_5ValueENS_8ArrayRefIS4_EERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='1502' u='c' c='_ZN4llvm8CallInst6CreateEPNS_12FunctionTypeEPNS_5ValueENS_8ArrayRefIS4_EERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='1514' u='c' c='_ZN4llvm8CallInst6CreateEPNS_12FunctionTypeEPNS_5ValueENS_8ArrayRefIS4_EENS5_INS_17OperandBundleDefTIS4_EEEERKNS_5TwineEPNS_11InstructionE'/>
<def f='llvm/llvm/include/llvm/IR/Instructions.h' l='1708' ll='1717' type='void llvm::CallInst::CallInst(llvm::FunctionType * Ty, llvm::Value * Func, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;llvm::OperandBundleDef&gt; Bundles, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='1453'>/// Construct a CallInst given a range of arguments.
  /// Construct a CallInst from a range of arguments</doc>
