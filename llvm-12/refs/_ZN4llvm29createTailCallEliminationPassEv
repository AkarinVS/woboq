<dec f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='286' type='llvm::FunctionPass * llvm::createTailCallEliminationPass()'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='281'>//===----------------------------------------------------------------------===//
//
// TailCallElimination - This pass eliminates call instructions to the current
// function which occur immediately before return instructions.
//</doc>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='175' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<use f='llvm/llvm/examples/OrcV2Examples/LLJITWithOptimizingIRTransform/LLJITWithOptimizingIRTransform.cpp' l='75' u='c' c='_ZN23MyOptimizationTransformC1Ev'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='423' u='c' c='_ZN4llvm18PassManagerBuilder31addFunctionSimplificationPassesERNS_6legacy15PassManagerBaseE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='1048' u='c' c='_ZN4llvm18PassManagerBuilder24addLTOOptimizationPassesERNS_6legacy15PassManagerBaseE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Scalar.cpp' l='258' u='c' c='LLVMAddTailCallEliminationPass'/>
<def f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='875' ll='877' type='llvm::FunctionPass * llvm::createTailCallEliminationPass()'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='874'>// Public interface to the TailCallElimination pass</doc>
<use f='llvm/polly/lib/CodeGen/CodegenCleanup.cpp' l='76' u='c' c='_ZN12_GLOBAL__N_114CodegenCleanup16doInitializationERN4llvm6ModuleE'/>
<use f='llvm/polly/lib/Transform/Canonicalization.cpp' l='39' u='c' c='_ZN5polly30registerCanonicalicationPassesERN4llvm6legacy15PassManagerBaseE'/>
