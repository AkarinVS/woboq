<dec f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='593' type='bool llvm::Loop::getIncomingAndBackEdge(llvm::BasicBlock *&amp; Incoming, llvm::BasicBlock *&amp; Backedge) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='591'>/// Obtain the unique incoming and back edge. Return false if they are
  /// non-unique or the loop is dead; otherwise, return true.</doc>
<def f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='123' ll='147' type='bool llvm::Loop::getIncomingAndBackEdge(llvm::BasicBlock *&amp; Incoming, llvm::BasicBlock *&amp; Backedge) const'/>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='153' u='c' c='_ZNK4llvm4Loop29getCanonicalInductionVariableEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/ScalarEvolutionExpanderTest.cpp' l='600' u='c' c='_ZN4llvm60ScalarEvolutionExpanderTest_SCEVExpandInsertCanonicalIV_Test8TestBodyEv'/>
