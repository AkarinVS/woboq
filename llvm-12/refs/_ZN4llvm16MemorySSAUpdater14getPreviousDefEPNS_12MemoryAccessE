<dec f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='258' type='llvm::MemoryAccess * llvm::MemorySSAUpdater::getPreviousDef(llvm::MemoryAccess * )'/>
<def f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='144' ll='149' type='llvm::MemoryAccess * llvm::MemorySSAUpdater::getPreviousDef(llvm::MemoryAccess * MA)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='247' u='c' c='_ZN4llvm16MemorySSAUpdater9insertUseEPNS_9MemoryUseEb'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='318' u='c' c='_ZN4llvm16MemorySSAUpdater9insertDefEPNS_9MemoryDefEb'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='514' u='c' c='_ZN4llvm16MemorySSAUpdater9fixupDefsERKNS_15SmallVectorImplINS_6WeakVHEEE'/>
<doc f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='140'>// This starts at the memory access, and goes backwards in the block to find the
// previous definition. If a definition is not found the block of the access,
// it continues globally, creating phi nodes to ensure we have a single
// definition.</doc>
