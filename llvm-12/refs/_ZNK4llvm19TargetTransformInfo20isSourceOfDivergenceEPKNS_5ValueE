<dec f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='359' type='bool llvm::TargetTransformInfo::isSourceOfDivergence(const llvm::Value * V) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='353'>/// Returns whether V is a source of divergence.
  ///
  /// This function provides the target-dependent information for
  /// the target-independent LegacyDivergenceAnalysis. LegacyDivergenceAnalysis
  /// first builds the dependency graph, and then runs the reachability
  /// algorithm starting with the sources of divergence.</doc>
<use f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='365' u='c' c='_ZN4llvm21GPUDivergenceAnalysisC1ERNS_8FunctionERKNS_13DominatorTreeERKNS_17PostDominatorTreeERKNS_8LoopInfoERKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='372' u='c' c='_ZN4llvm21GPUDivergenceAnalysisC1ERNS_8FunctionERKNS_13DominatorTreeERKNS_17PostDominatorTreeERKNS_8LoopInfoERKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Analysis/LegacyDivergenceAnalysis.cpp' l='133' u='c' c='_ZN12_GLOBAL__N_120DivergencePropagator31populateWithSourcesOfDivergenceEv'/>
<use f='llvm/llvm/lib/Analysis/LegacyDivergenceAnalysis.cpp' l='139' u='c' c='_ZN12_GLOBAL__N_120DivergencePropagator31populateWithSourcesOfDivergenceEv'/>
<def f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='288' ll='290' type='bool llvm::TargetTransformInfo::isSourceOfDivergence(const llvm::Value * V) const'/>
