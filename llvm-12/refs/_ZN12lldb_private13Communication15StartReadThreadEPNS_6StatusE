<dec f='llvm/lldb/include/lldb/Core/Communication.h' l='248' type='bool lldb_private::Communication::StartReadThread(lldb_private::Status * error_ptr = nullptr)'/>
<doc f='llvm/lldb/include/lldb/Core/Communication.h' l='226'>/// Starts a read thread whose sole purpose it to read bytes from the
  /// current connection. This function will call connection&apos;s read function:
  ///
  /// size_t Connection::Read (void *, size_t);
  ///
  /// When bytes are read and cached, this function will call:
  ///
  /// Communication::AppendBytesToCache (const uint8_t * bytes, size_t len,
  /// bool
  /// broadcast);
  ///
  /// Subclasses should override this function if they wish to override the
  /// default action of caching the bytes and broadcasting a \b
  /// eBroadcastBitReadThreadGotBytes event.
  ///
  /// \return
  ///     \b True if the read thread was successfully started, \b
  ///     false otherwise.
  ///
  /// \see size_t Connection::Read (void *, size_t);
  /// \see void Communication::AppendBytesToCache (const uint8_t * bytes,
  ///                                              size_t len, bool broadcast);</doc>
<use f='llvm/lldb/source/API/SBCommunication.cpp' l='144' u='c' c='_ZN4lldb15SBCommunication15ReadThreadStartEv'/>
<def f='llvm/lldb/source/Core/Communication.cpp' l='192' ll='225' type='bool lldb_private::Communication::StartReadThread(lldb_private::Status * error_ptr = nullptr)'/>
<use f='llvm/lldb/source/Interpreter/ScriptInterpreter.cpp' l='178' u='c' c='_ZN12lldb_private27ScriptInterpreterIORedirectC1ERNS_8DebuggerEPNS_19CommandReturnObjectE'/>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp' l='981' u='c' c='_ZN12lldb_private18process_gdb_remote16ProcessGDBRemote20ConnectToDebugserverEN4llvm9StringRefE'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='4409' u='c' c='_ZN12lldb_private7Process22SetSTDIOFileDescriptorEi'/>
<use f='llvm/lldb/unittests/Core/CommunicationTest.cpp' l='28' u='c' c='_ZN46CommunicationTest_SynchronizeWhileClosing_Test8TestBodyEv'/>
