<dec f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='600' type='llvm::CallInst * llvm::OpenMPIRBuilder::createCachedThreadPrivate(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::Value * Pointer, llvm::ConstantInt * Size, const llvm::Twine &amp; Name = llvm::Twine(&quot;&quot;))'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='592'>/// Create a runtime call for kmpc_threadprivate_cached
  ///
  /// \param Loc The insert and source location description.
  /// \param Pointer pointer to data to be cached
  /// \param Size size of data to be cached
  /// \param Name Name of call Instruction for callinst
  ///
  /// \returns CallInst to the thread private cache call.</doc>
<use f='llvm/clang/lib/CodeGen/CGStmtOpenMP.cpp' l='1649' u='c' c='_ZN5clang7CodeGen15CodeGenFunction19OMPBuilderCBHelpers22getAddrOfThreadPrivateERS1_PKNS_7VarDeclENS0_7AddressENS_14SourceLocationE'/>
<def f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='1713' ll='1730' type='llvm::CallInst * llvm::OpenMPIRBuilder::createCachedThreadPrivate(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::Value * Pointer, llvm::ConstantInt * Size, const llvm::Twine &amp; Name = llvm::Twine(&quot;&quot;))'/>
