<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='615' type='bool llvm::DependenceInfo::testSIV(const llvm::SCEV * Src, const llvm::SCEV * Dst, unsigned int &amp; Level, llvm::FullDependence &amp; Result, llvm::DependenceInfo::Constraint &amp; NewConstraint, const llvm::SCEV *&amp; SplitIter) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='605'>/// testSIV - Tests the SIV subscript pair (Src and Dst) for dependence.
    /// Things of the form [c1 + a1*i] and [c2 + a2*j], where
    /// i and j are induction variables, c1 and c2 are loop invariant,
    /// and a1 and a2 are constant.
    /// Returns true if any possible dependence is disproved.
    /// If there might be a dependence, returns false.
    /// Sets appropriate direction vector entry and, when possible,
    /// the distance vector entry.
    /// If the dependence isn&apos;t proven to exist,
    /// marks the Result as inconsistent.</doc>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2139' ll='2191' type='bool llvm::DependenceInfo::testSIV(const llvm::SCEV * Src, const llvm::SCEV * Dst, unsigned int &amp; Level, llvm::FullDependence &amp; Result, llvm::DependenceInfo::Constraint &amp; NewConstraint, const llvm::SCEV *&amp; SplitIter) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3683' u='c' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3735' u='c' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='4002' u='c' c='_ZN4llvm14DependenceInfo17getSplitIterationERKNS_10DependenceEj'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='4041' u='c' c='_ZN4llvm14DependenceInfo17getSplitIterationERKNS_10DependenceEj'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2131'>// testSIV -
// When we have a pair of subscripts of the form [c1 + a1*i] and [c2 - a2*i]
// where i is an induction variable, c1 and c2 are loop invariant, and a1 and
// a2 are constant, we attack it with an SIV test. While they can all be
// solved with the Exact SIV test, it&apos;s worthwhile to use simpler tests when
// they apply; they&apos;re cheaper and sometimes more precise.
//
// Return true if dependence disproved.</doc>
