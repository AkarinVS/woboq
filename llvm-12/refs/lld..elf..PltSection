<inh f='llvm/lld/ELF/SyntheticSections.h' l='39' c='lld::elf::SyntheticSection'/>
<def f='llvm/lld/ELF/SyntheticSections.h' l='677' ll='690'/>
<ovr f='llvm/lld/ELF/SyntheticSections.h' l='708' c='lld::elf::PPC32GlinkSection'/>
<use f='llvm/lld/ELF/SyntheticSections.h' l='708'/>
<use f='llvm/lld/ELF/SyntheticSections.h' l='1209'/>
<size>224</size>
<doc f='llvm/lld/ELF/SyntheticSections.h' l='666'>// Used for PLT entries. It usually has a PLT header for lazy binding. Each PLT
// entry is associated with a JUMP_SLOT relocation, which may be resolved lazily
// at runtime.
//
// On PowerPC, this section contains lazy symbol resolvers. A branch instruction
// jumps to a PLT call stub, which will then jump to the target (BIND_NOW) or a
// lazy symbol resolver.
//
// On x86 when IBT is enabled, this section (.plt.sec) contains PLT call stubs.
// A call instruction jumps to a .plt.sec entry, which will then jump to the
// target (BIND_NOW) or a .plt entry.</doc>
<fun r='_ZN3lld3elf10PltSectionC1Ev'/>
<fun r='_ZN3lld3elf10PltSection7writeToEPh'/>
<fun r='_ZNK3lld3elf10PltSection7getSizeEv'/>
<fun r='_ZNK3lld3elf10PltSection8isNeededEv'/>
<fun r='_ZN3lld3elf10PltSection10addSymbolsEv'/>
<fun r='_ZN3lld3elf10PltSection8addEntryERNS0_6SymbolE'/>
<fun r='_ZNK3lld3elf10PltSection13getNumEntriesEv'/>
<mbr r='lld::elf::PltSection::headerSize' o='1536' t='size_t'/>
<mbr r='lld::elf::PltSection::entries' o='1600' t='std::vector&lt;const Symbol *&gt;'/>
<use f='llvm/lld/ELF/Writer.cpp' l='556' c='_ZN3lld3elf23createSyntheticSectionsEv'/>
<size>224</size>
