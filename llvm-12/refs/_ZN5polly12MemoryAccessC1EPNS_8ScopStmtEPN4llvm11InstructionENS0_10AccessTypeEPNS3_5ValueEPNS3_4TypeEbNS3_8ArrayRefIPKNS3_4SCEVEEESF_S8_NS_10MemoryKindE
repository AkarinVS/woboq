<dec f='llvm/polly/include/polly/ScopInfo.h' l='706' type='void polly::MemoryAccess::MemoryAccess(polly::ScopStmt * Stmt, llvm::Instruction * AccessInst, polly::MemoryAccess::AccessType AccType, llvm::Value * BaseAddress, llvm::Type * ElemType, bool Affine, ArrayRef&lt;const llvm::SCEV *&gt; Subscripts, ArrayRef&lt;const llvm::SCEV *&gt; Sizes, llvm::Value * AccessValue, polly::MemoryKind Kind)'/>
<doc f='llvm/polly/include/polly/ScopInfo.h' l='695'>/// Create a new MemoryAccess.
  ///
  /// @param Stmt       The parent statement.
  /// @param AccessInst The instruction doing the access.
  /// @param BaseAddr   The accessed array&apos;s address.
  /// @param ElemType   The type of the accessed array elements.
  /// @param AccType    Whether read or write access.
  /// @param IsAffine   Whether the subscripts are affine expressions.
  /// @param Kind       The kind of memory accessed.
  /// @param Subscripts Subscript expressions
  /// @param Sizes      Dimension lengths of the accessed array.</doc>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2300' u='c' c='_ZN5polly11ScopBuilder15addMemoryAccessEPNS_8ScopStmtEPN4llvm11InstructionENS_12MemoryAccess10AccessTypeEPNS3_5ValueEPNS3_4TypeEbS9_NS3_8ArrayRefIPKNS8876880'/>
<def f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='885' ll='902' type='void polly::MemoryAccess::MemoryAccess(polly::ScopStmt * Stmt, llvm::Instruction * AccessInst, polly::MemoryAccess::AccessType AccType, llvm::Value * BaseAddress, llvm::Type * ElementType, bool Affine, ArrayRef&lt;const llvm::SCEV *&gt; Subscripts, ArrayRef&lt;const llvm::SCEV *&gt; Sizes, llvm::Value * AccessValue, polly::MemoryKind Kind)'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='1377' u='c' c='_ZN5polly8ScopStmt15ensureValueReadEPN4llvm5ValueE'/>
<use f='llvm/polly/lib/Transform/ForwardOpTree.cpp' l='434' u='c' c='_ZN12_GLOBAL__N_117ForwardOpTreeImpl19makeReadArrayAccessEPN5polly8ScopStmtEPN4llvm8LoadInstEN3isl12noexceptions3mapE'/>
