<dec f='llvm/llvm/include/llvm/Transforms/Instrumentation.h' l='116' type='llvm::CallBase &amp; llvm::pgo::promoteIndirectCall(llvm::CallBase &amp; CB, llvm::Function * F, uint64_t Count, uint64_t TotalCount, bool AttachProfToDirectCall, llvm::OptimizationRemarkEmitter * ORE)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Instrumentation.h' l='103'>// Helper function that transforms CB (either an indirect-call instruction, or
// an invoke instruction , to a conditional call to F. This is like:
//     if (Inst.CalledValue == F)
//        F(...);
//     else
//        Inst(...);
//     end
// TotalCount is the profile count value that the instruction executes.
// Count is the profile count value that F is the target function.
// These two values are used to update the branch weight.
// If \p AttachProfToDirectCall is true, a prof metadata is attached to the
// new direct call to contain \p Count.
// Returns the promoted direct call instruction.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/SampleProfile.cpp' l='1130' u='c' c='_ZN12_GLOBAL__N_119SampleProfileLoader28tryPromoteAndInlineCandidateERN4llvm8FunctionERNS_15InlineCandidateEmRmRNS1_8DenseSetIPNS1_11InstructionENS1_113444809'/>
<def f='llvm/llvm/lib/Transforms/Instrumentation/IndirectCallPromotion.cpp' l='303' ll='335' type='llvm::CallBase &amp; llvm::pgo::promoteIndirectCall(llvm::CallBase &amp; CB, llvm::Function * DirectCallee, uint64_t Count, uint64_t TotalCount, bool AttachProfToDirectCall, llvm::OptimizationRemarkEmitter * ORE)'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/IndirectCallPromotion.cpp' l='345' u='c' c='_ZN12_GLOBAL__N_118ICallPromotionFunc12tryToPromoteERN4llvm8CallBaseERKSt6vectorINS0_18PromotionCandidateESaIS5_EERm'/>
