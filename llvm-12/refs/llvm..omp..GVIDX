<def f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h' l='56' ll='90'/>
<use f='llvm/clang/include/clang/Basic/TargetInfo.h' l='1365' c='_ZNK5clang10TargetInfo12getGridValueEN4llvm3omp5GVIDXE'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h' l='21'>/// \brief Defines various target-specific GPU grid values that must be
///        consistent between host RTL (plugin), device RTL, and clang.
///        We can change grid values for a &quot;fat&quot; binary so that different
///        passes get the correct values when generating code for a
///        multi-target binary. Both amdgcn and nvptx values are stored in
///        this file. In the future, should there be differences between GPUs
///        of the same architecture, then simply make a different array and
///        use the new array name.
///
/// Example usage in clang:
///   const unsigned slot_size =
///   ctx.GetTargetInfo().getGridValue(llvm::omp::GVIDX::GV_Warp_Size);
///
/// Example usage in libomptarget/deviceRTLs:
///   #include &quot;llvm/Frontend/OpenMP/OMPGridValues.h&quot;
///   #ifdef __AMDGPU__
///     #define GRIDVAL AMDGPUGpuGridValues
///   #else
///     #define GRIDVAL NVPTXGpuGridValues
///   #endif
///   ... Then use this reference for GV_Warp_Size in the deviceRTL source.
///   llvm::omp::GRIDVAL[llvm::omp::GVIDX::GV_Warp_Size]
///
/// Example usage in libomptarget hsa plugin:
///   #include &quot;llvm/Frontend/OpenMP/OMPGridValues.h&quot;
///   #define GRIDVAL AMDGPUGpuGridValues
///   ... Then use this reference to access GV_Warp_Size in the hsa plugin.
///   llvm::omp::GRIDVAL[llvm::omp::GVIDX::GV_Warp_Size]
///
/// Example usage in libomptarget cuda plugin:
///    #include &quot;llvm/Frontend/OpenMP/OMPGridValues.h&quot;
///    #define GRIDVAL NVPTXGpuGridValues
///   ... Then use this reference to access GV_Warp_Size in the cuda plugin.
///    llvm::omp::GRIDVAL[llvm::omp::GVIDX::GV_Warp_Size]
///</doc>
