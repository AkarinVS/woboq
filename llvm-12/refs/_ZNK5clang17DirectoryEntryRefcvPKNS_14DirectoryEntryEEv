<def f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='84' type='const clang::DirectoryEntry * clang::DirectoryEntryRef::operator const clang::DirectoryEntry *() const'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='220' u='c' c='_ZN4llvm12DenseMapInfoIN5clang17DirectoryEntryRefEE7isEqualES2_S2_'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='220' u='c' c='_ZN4llvm12DenseMapInfoIN5clang17DirectoryEntryRefEE7isEqualES2_S2_'/>
<doc f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='67'>/// Allow DirectoryEntryRef to degrade into &apos;const DirectoryEntry*&apos; to
  /// facilitate incremental adoption.
  ///
  /// The goal is to avoid code churn due to dances like the following:
  /// \code
  /// // Old code.
  /// lvalue = rvalue;
  ///
  /// // Temporary code from an incremental patch.
  /// lvalue = &amp;rvalue.getDirectoryEntry();
  ///
  /// // Final code.
  /// lvalue = rvalue;
  /// \endcode
  ///
  /// FIXME: Once DirectoryEntryRef is &quot;everywhere&quot; and DirectoryEntry::getName
  /// has been deleted, delete this implicit conversion.</doc>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1129' u='c' c='_ZN5clang9ModuleMap17setUmbrellaHeaderEPNS_6ModuleENS_12FileEntryRefEN4llvm5TwineE'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1140' u='c' c='_ZN5clang9ModuleMap14setUmbrellaDirEPNS_6ModuleENS_17DirectoryEntryRefEN4llvm5TwineE'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='2462' u='c' c='_ZN5clang15ModuleMapParser20parseUmbrellaDirDeclENS_14SourceLocationE'/>
