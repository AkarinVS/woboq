<dec f='llvm/llvm/include/llvm/BinaryFormat/MsgPackDocument.h' l='410' type='bool llvm::msgpack::Document::readFromBlob(llvm::StringRef Blob, bool Multi, function_ref&lt;int (llvm::msgpack::DocNode *, llvm::msgpack::DocNode, llvm::msgpack::DocNode)&gt; Merger = [](llvm::msgpack::DocNode *DestNode, llvm::msgpack::DocNode SrcNode, llvm::msgpack::DocNode MapKey) {
    return -1;
})'/>
<doc f='llvm/llvm/include/llvm/BinaryFormat/MsgPackDocument.h' l='387'>/// Read a document from a binary msgpack blob, merging into anything already
  /// in the Document. The blob data must remain valid for the lifetime of this
  /// Document (because a string object in the document contains a StringRef
  /// into the original blob). If Multi, then this sets root to an array and
  /// adds top-level objects to it. If !Multi, then it only reads a single
  /// top-level object, even if there are more, and sets root to that. Returns
  /// false if failed due to illegal format or merge error.
  ///
  /// The Merger arg is a callback function that is called when the merge has a
  /// conflict, that is, it is trying to set an item that is already set. If the
  /// conflict cannot be resolved, the callback function returns -1. If the
  /// conflict can be resolved, the callback returns a non-negative number and
  /// sets *DestNode to the resolved node. The returned non-negative number is
  /// significant only for an array node; it is then the array index to start
  /// populating at. That allows Merger to choose whether to merge array
  /// elements (returns 0) or append new elements (returns existing size).
  ///
  /// If SrcNode is an array or map, the resolution must be that *DestNode is an
  /// array or map respectively, although it could be the array or map
  /// (respectively) that was already there. MapKey is the key if *DestNode is a
  /// map entry, a nil node otherwise.
  ///
  /// The default for Merger is to disallow any conflict.</doc>
<def f='llvm/llvm/lib/BinaryFormat/MsgPackDocument.cpp' l='127' ll='237' type='bool llvm::msgpack::Document::readFromBlob(llvm::StringRef Blob, bool Multi, function_ref&lt;int (llvm::msgpack::DocNode *, llvm::msgpack::DocNode, llvm::msgpack::DocNode)&gt; Merger = [](llvm::msgpack::DocNode *DestNode, llvm::msgpack::DocNode SrcNode, llvm::msgpack::DocNode MapKey) {
    return -1;
})'/>
<doc f='llvm/llvm/lib/BinaryFormat/MsgPackDocument.cpp' l='118'>// Read a document from a binary msgpack blob, merging into anything already in
// the Document.
// The blob data must remain valid for the lifetime of this Document (because a
// string object in the document contains a StringRef into the original blob).
// If Multi, then this sets root to an array and adds top-level objects to it.
// If !Multi, then it only reads a single top-level object, even if there are
// more, and sets root to that.
// Returns false if failed due to illegal format or merge error.</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp' l='88' u='c' c='_ZN4llvm17AMDGPUPALMetadata18setFromMsgPackBlobENS_9StringRefE'/>
<use f='llvm/llvm/tools/llvm-readobj/ELFDumper.cpp' l='4944' u='c' c='_ZL13getAMDGPUNotejN4llvm8ArrayRefIhEE'/>
<use f='llvm/llvm/unittests/BinaryFormat/MsgPackDocumentTest.cpp' l='28' u='c' c='_ZN32MsgPackDocument_TestReadInt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/BinaryFormat/MsgPackDocumentTest.cpp' l='36' u='c' c='_ZN39MsgPackDocument_TestReadMergeArray_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/BinaryFormat/MsgPackDocumentTest.cpp' l='47' u='c' c='_ZN39MsgPackDocument_TestReadMergeArray_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/BinaryFormat/MsgPackDocumentTest.cpp' l='72' u='c' c='_ZN40MsgPackDocument_TestReadAppendArray_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/BinaryFormat/MsgPackDocumentTest.cpp' l='83' u='c' c='_ZN40MsgPackDocument_TestReadAppendArray_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/BinaryFormat/MsgPackDocumentTest.cpp' l='105' u='c' c='_ZN37MsgPackDocument_TestReadMergeMap_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/BinaryFormat/MsgPackDocumentTest.cpp' l='122' u='c' c='_ZN37MsgPackDocument_TestReadMergeMap_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/BinaryFormat/MsgPackDocumentTest.cpp' l='146' u='c' c='_ZN37MsgPackDocument_TestReadMergeMap_Test8TestBodyEv'/>
