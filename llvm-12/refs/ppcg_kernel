<def f='llvm/polly/lib/External/ppcg/gpu.h' l='379' ll='424'/>
<use f='llvm/polly/lib/External/ppcg/gpu.h' l='435' c='ppcg_kernel_requires_array_argument'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='201' c='print_grid_size'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='230' c='print_grid'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='252' c='print_kernel_arguments'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='322' c='print_kernel_header'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='338' c='print_kernel_headers'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='389' c='print_kernel_iterators'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='430' c='print_kernel_vars'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='480' c='print_kernel'/>
<use f='llvm/polly/lib/External/ppcg/cuda.c' l='604' c='print_host_user'/>
<size>240</size>
<doc f='llvm/polly/lib/External/ppcg/gpu.h' l='305'>/* Representation of a kernel.
 *
 * prog describes the original code from which the kernel is extracted.
 *
 * id is the sequence number of the kernel.
 *
 * block_ids contains the list of block identifiers for this kernel.
 * thread_ids contains the list of thread identifiers for this kernel.
 *
 * the first n_grid elements of grid_dim represent the specified size
 * of the grid.
 * the first n_block elements of block_dim represent the specified or
 * effective size of the block.
 * Note that in the input file, the sizes of the grid and the blocks
 * are specified in the order x, y, z, but internally, the sizes
 * are stored in reverse order, so that the last element always
 * refers to the x dimension.
 *
 * grid_size reflects the effective grid size.
 * grid_size_expr contains a corresponding access AST expression, built within
 * the context where the launch appears.
 *
 * context contains the values of the parameters and outer schedule dimensions
 * for which any statement instance in this kernel needs to be executed.
 *
 * n_sync is the number of synchronization operations that have
 * been introduced in the schedule tree corresponding to this kernel (so far).
 *
 * core contains the spaces of the statement domains that form
 * the core computation of the kernel.  It is used to navigate
 * the tree during the construction of the device part of the schedule
 * tree in gpu_create_kernel.
 *
 * expanded_domain contains the original statement instances,
 * i.e., those that appear in the domains of access relations,
 * that are involved in the kernel.
 * contraction maps those original statement instances to
 * the statement instances that are active at the point
 * in the schedule tree where the kernel is created.
 *
 * arrays is the set of possibly accessed outer array elements.
 *
 * space is the schedule space of the AST context.  That is, it represents
 * the loops of the generated host code containing the kernel launch.
 *
 * n_array is the total number of arrays in the input program and also
 * the number of element in the array array.
 * array contains information about each array that is local
 * to the current kernel.  If an array is not used in a kernel,
 * then the corresponding entry does not contain any information.
 *
 * any_force_private is set if any array in the kernel is marked force_private
 *
 * block_filter contains constraints on the domain elements in the kernel
 * that encode the mapping to block identifiers, where the block identifiers
 * are represented by &quot;n_grid&quot; parameters with as names the elements
 * of &quot;block_ids&quot;.
 *
 * thread_filter contains constraints on the domain elements in the kernel
 * that encode the mapping to thread identifiers, where the thread identifiers
 * are represented by &quot;n_block&quot; parameters with as names the elements
 * of &quot;thread_ids&quot;.
 *
 * copy_schedule corresponds to the schedule dimensions of
 * the (tiled) schedule for this kernel that have been taken into account
 * for computing private/shared memory tiles.
 * The domain corresponds to the original statement instances, i.e.,
 * those that appear in the leaves of the schedule tree.
 * copy_schedule_dim is the dimension of this schedule.
 *
 * sync_writes contains write references that require synchronization.
 * Each reference is represented by a universe set in a space [S[i,j] -&gt; R[]]
 * with S[i,j] the statement instance space and R[] the array reference.
 */</doc>
<mbr r='ppcg_kernel::ctx' o='0' t='isl_ctx *'/>
<mbr r='ppcg_kernel::options' o='64' t='struct ppcg_options *'/>
<mbr r='ppcg_kernel::prog' o='128' t='struct gpu_prog *'/>
<mbr r='ppcg_kernel::id' o='192' t='int'/>
<mbr r='ppcg_kernel::block_ids' o='256' t='isl_id_list *'/>
<mbr r='ppcg_kernel::thread_ids' o='320' t='isl_id_list *'/>
<mbr r='ppcg_kernel::n_grid' o='384' t='int'/>
<mbr r='ppcg_kernel::n_block' o='416' t='int'/>
<mbr r='ppcg_kernel::grid_dim' o='448' t='int [2]'/>
<mbr r='ppcg_kernel::block_dim' o='512' t='int [3]'/>
<mbr r='ppcg_kernel::grid_size' o='640' t='isl_multi_pw_aff *'/>
<mbr r='ppcg_kernel::grid_size_expr' o='704' t='isl_ast_expr *'/>
<mbr r='ppcg_kernel::context' o='768' t='isl_set *'/>
<mbr r='ppcg_kernel::n_sync' o='832' t='int'/>
<mbr r='ppcg_kernel::core' o='896' t='isl_union_set *'/>
<mbr r='ppcg_kernel::arrays' o='960' t='isl_union_set *'/>
<mbr r='ppcg_kernel::contraction' o='1024' t='isl_union_pw_multi_aff *'/>
<mbr r='ppcg_kernel::expanded_domain' o='1088' t='isl_union_set *'/>
<mbr r='ppcg_kernel::space' o='1152' t='isl_space *'/>
<mbr r='ppcg_kernel::n_array' o='1216' t='int'/>
<mbr r='ppcg_kernel::array' o='1280' t='struct gpu_local_array_info *'/>
<mbr r='ppcg_kernel::n_var' o='1344' t='int'/>
<mbr r='ppcg_kernel::var' o='1408' t='struct ppcg_kernel_var *'/>
<mbr r='ppcg_kernel::any_force_private' o='1472' t='int'/>
<mbr r='ppcg_kernel::block_filter' o='1536' t='isl_union_set *'/>
<mbr r='ppcg_kernel::thread_filter' o='1600' t='isl_union_set *'/>
<mbr r='ppcg_kernel::copy_schedule' o='1664' t='isl_union_pw_multi_aff *'/>
<mbr r='ppcg_kernel::copy_schedule_dim' o='1728' t='int'/>
<mbr r='ppcg_kernel::sync_writes' o='1792' t='isl_union_set *'/>
<mbr r='ppcg_kernel::tree' o='1856' t='isl_ast_node *'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.h' l='49' c='gpu_group_references'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.h' l='23' c='gpu_tree_id_is_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.h' l='25' c='gpu_tree_ensure_sync_after_core'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.h' l='27' c='gpu_tree_ensure_following_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.h' l='29' c='gpu_tree_move_left_to_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.h' l='31' c='gpu_tree_move_right_to_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='615' c='read_block_sizes'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='644' c='read_grid_sizes'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='670' c='read_grid_and_block_sizes'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='906' c='compute_sched_to_copy'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='937' c='check_shared_memory_bound'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='981' c='mark_global_arrays'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1003' c='compute_group_tilings'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1035' c='extract_grid_size'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1112' c='extract_block_size'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1152' c='ppcg_kernel_free'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1152' c='ppcg_kernel_free'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1202' c='ppcg_kernel_free_wrap'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1231' c='create_kernel_vars'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1303' c='localize_bounds'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1349' c='ppcg_kernel_create_local_arrays'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1350' c='ppcg_kernel_create_local_arrays'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1372' c='ppcg_kernel_requires_array_argument'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1431' c='find_array_index'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1463'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1841' c='create_domain_leaf'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1924' c='create_access_leaf'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='1979' c='create_sync_leaf'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2051'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2313' c='remove_local_accesses_group'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2331' c='build_grid_size'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2349' c='build_local_array_sizes'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2372' c='build_grid_and_local_array_sizes'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2422' c='after_mark'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2674' c='any_sync_writes_in_group'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2702' c='collect_non_private_tagged_writes'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='2733' c='any_global_or_shared_sync_writes'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3054' c='insert_context'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3111' c='kernel_requires_unroll'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3160' c='add_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3197' c='anchored_non_local_accesses'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3259' c='add_group_write_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3332' c='add_copies_group_private'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3486' c='add_copies_group_shared'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3595' c='add_copies_group'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3615' c='add_copies'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3705' c='compute_sync_writes'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3838' c='gpu_create_kernel'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3851' c='gpu_create_kernel'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3851' c='gpu_create_kernel'/>
<size>240</size>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='955' c='report_no_reuse_and_coalesced'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1091' c='compute_group_bounds_core'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1200' c='compute_group_bounds'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1222' c='group_writes'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1261' c='group_overlapping_writes'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1300' c='group_depth_overlapping_writes'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1342' c='group_common_shared_memory_tile'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1444' c='group_array_references'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1497' c='check_can_be_private_live_ranges'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1562' c='compute_privatization'/>
<use f='llvm/polly/lib/External/ppcg/gpu_group.c' l='1627' c='gpu_group_references'/>
<size>240</size>
<use f='llvm/polly/lib/External/ppcg/gpu_print.c' l='210' c='at_node'/>
<size>240</size>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='316' c='create_sync_domain'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='332' c='gpu_tree_id_is_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='348' c='domain_is_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='369' c='node_is_sync_filter'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='393' c='has_preceding_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='418' c='has_following_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='443' c='has_sync_before_core'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='468' c='has_sync_after_core'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='492' c='insert_sync_before'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='512' c='insert_sync_after'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='532' c='gpu_tree_ensure_preceding_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='549' c='gpu_tree_ensure_following_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='567' c='gpu_tree_ensure_sync_after_core'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='592' c='gpu_tree_move_left_to_sync'/>
<use f='llvm/polly/lib/External/ppcg/gpu_tree.c' l='621' c='gpu_tree_move_right_to_sync'/>
<size>240</size>
