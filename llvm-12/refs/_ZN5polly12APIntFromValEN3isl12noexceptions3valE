<def f='llvm/polly/include/polly/Support/GICHelper.h' l='147' ll='149' type='llvm::APInt polly::APIntFromVal(isl::val V)'/>
<doc f='llvm/polly/include/polly/Support/GICHelper.h' l='120'>/// Translate isl::val to llvm::APInt.
///
/// This function can only be called on isl::val values which are integers.
/// Calling this function with a non-integral rational, NaN or infinity value
/// is not allowed.
///
/// As the input isl::val may be negative, the APInt that this function returns
/// must always be interpreted as signed two&apos;s complement value. The bitwidth of
/// the generated APInt is always the minimal bitwidth necessary to model the
/// provided integer when interpreting the bit pattern as signed value.
///
/// Some example conversions are:
///
///   Input      Bits    Signed  Bitwidth
///       0 -&gt;      0         0         1
///      -1 -&gt;      1        -1         1
///       1 -&gt;     01         1         2
///      -2 -&gt;     10        -2         2
///       2 -&gt;    010         2         3
///      -3 -&gt;    101        -3         3
///       3 -&gt;    011         3         3
///      -4 -&gt;    100        -4         3
///       4 -&gt;   0100         4         4
///
/// @param Val The isl val to translate.
///
/// @return The APInt value corresponding to @p Val.</doc>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2395' u='c' c='_ZN5polly11ScopBuilder24foldSizeConstantsToRightEv'/>
<use f='llvm/polly/lib/CodeGen/IslExprBuilder.cpp' l='81' u='c' c='_ZN5polly14IslExprBuilder12hasLargeIntsEN3isl12noexceptions8ast_exprE'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='168' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='176' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='184' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='192' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='200' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='207' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='214' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='221' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='228' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='235' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='244' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='252' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='261' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='270' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='279' u='c' c='_ZN12_GLOBAL__N_122Isl_IslValToAPInt_Test8TestBodyEv'/>
