<def f='llvm/llvm/include/llvm/CodeGen/DIE.h' l='400' ll='414' type='void llvm::DIEValue::destroyVal()'/>
<use f='llvm/llvm/include/llvm/CodeGen/DIE.h' l='445' u='c' c='_ZN4llvm8DIEValueaSERKS0_'/>
<use f='llvm/llvm/include/llvm/CodeGen/DIE.h' l='453' u='c' c='_ZN4llvm8DIEValueD1Ev'/>
<doc f='llvm/llvm/include/llvm/CodeGen/DIE.h' l='395'>/// Destroy the underlying value.
  ///
  /// This should get optimized down to a no-op.  We could skip it if we could
  /// add a static assert on \a std::is_trivially_copyable(), but we currently
  /// support versions of GCC that don&apos;t understand that.</doc>
