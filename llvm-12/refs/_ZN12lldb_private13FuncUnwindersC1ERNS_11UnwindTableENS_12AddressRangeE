<dec f='llvm/lldb/include/lldb/Symbol/FuncUnwinders.h' l='34' type='void lldb_private::FuncUnwinders::FuncUnwinders(lldb_private::UnwindTable &amp; unwind_table, lldb_private::AddressRange range)'/>
<doc f='llvm/lldb/include/lldb/Symbol/FuncUnwinders.h' l='15'>// FuncUnwinders objects are used to track UnwindPlans for a function (named
  // or not - really just an address range)

  // We&apos;ll record four different UnwindPlans for each address range:
  //
  //   1. Unwinding from a call site (a valid exception throw location)
  //      This is often sourced from the eh_frame exception handling info
  //   2. Unwinding from a non-call site (any location in the function)
  //      This is often done by analyzing the function prologue assembly
  //      language instructions
  //   3. A fast unwind method for this function which only retrieves a
  //      limited set of registers necessary to walk the stack
  //   4. An architectural default unwind plan when none of the above are
  //      available for some reason.

  // Additionally, FuncUnwinds object can be asked where the prologue
  // instructions are finished for migrating breakpoints past the stack frame
  // setup instructions when we don&apos;t have line table information.</doc>
<def f='llvm/lldb/source/Symbol/FuncUnwinders.cpp' l='36' ll='54' type='void lldb_private::FuncUnwinders::FuncUnwinders(lldb_private::UnwindTable &amp; unwind_table, lldb_private::AddressRange range)'/>
<doc f='llvm/lldb/source/Symbol/FuncUnwinders.cpp' l='34'>/// constructor</doc>
<use f='llvm/lldb/source/Symbol/UnwindTable.cpp' l='141' u='c' c='_ZN12lldb_private11UnwindTable33GetFuncUnwindersContainingAddressERKNS_7AddressERNS_13SymbolContextE'/>
