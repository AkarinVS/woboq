<dec f='llvm/lldb/include/lldb/API/SBModule.h' l='275' type='uint32_t lldb::SBModule::GetVersion(uint32_t * versions, uint32_t num_versions)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='40193' u='c' c='_ZL25_wrap_SBModule_GetVersionP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBModule.h' l='237'>/// Get the module version numbers.
  ///
  /// Many object files have a set of version numbers that describe
  /// the version of the executable or shared library. Typically there
  /// are major, minor and build, but there may be more. This function
  /// will extract the versions from object files if they are available.
  ///
  /// If \a versions is NULL, or if \a num_versions is 0, the return
  /// value will indicate how many version numbers are available in
  /// this object file. Then a subsequent call can be made to this
  /// function with a value of \a versions and \a num_versions that
  /// has enough storage to store some or all version numbers.
  ///
  /// \param[out] versions
  ///     A pointer to an array of uint32_t types that is \a num_versions
  ///     long. If this value is NULL, the return value will indicate
  ///     how many version numbers are required for a subsequent call
  ///     to this function so that all versions can be retrieved. If
  ///     the value is non-NULL, then at most \a num_versions of the
  ///     existing versions numbers will be filled into \a versions.
  ///     If there is no version information available, \a versions
  ///     will be filled with \a num_versions UINT32_MAX values
  ///     and zero will be returned.
  ///
  /// \param[in] num_versions
  ///     The maximum number of entries to fill into \a versions. If
  ///     this value is zero, then the return value will indicate
  ///     how many version numbers there are in total so another call
  ///     to this function can be make with adequate storage in
  ///     \a versions to get all of the version numbers. If \a
  ///     num_versions is less than the actual number of version
  ///     numbers in this object file, only \a num_versions will be
  ///     filled into \a versions (if \a versions is non-NULL).
  ///
  /// \return
  ///     This function always returns the number of version numbers
  ///     that this object file has regardless of the number of
  ///     version numbers that were copied into \a versions.</doc>
<def f='llvm/lldb/source/API/SBModule.cpp' l='615' ll='642' type='uint32_t lldb::SBModule::GetVersion(uint32_t * versions, uint32_t num_versions)'/>
<use f='llvm/lldb/source/API/SBModule.cpp' l='616' u='a' c='_ZN4lldb8SBModule10GetVersionEPjj'/>
<use f='llvm/lldb/source/API/SBModule.cpp' l='616' u='a' c='_ZN4lldb8SBModule10GetVersionEPjj'/>
<use f='llvm/lldb/source/API/SBModule.cpp' l='761' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
<use f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='406' u='c' c='_ZN11lldb_vscode12CreateModuleERN4lldb8SBModuleE'/>
