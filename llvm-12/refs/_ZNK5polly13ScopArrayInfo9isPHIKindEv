<def f='llvm/polly/include/polly/ScopInfo.h' l='324' type='bool polly::ScopArrayInfo::isPHIKind() const'/>
<doc f='llvm/polly/include/polly/ScopInfo.h' l='314'>/// Is this array info modeling special PHI node memory?
  ///
  /// During code generation of PHI nodes, there is a need for two kinds of
  /// virtual storage. The normal one as it is used for all scalar dependences,
  /// where the result of the PHI node is stored and later loaded from as well
  /// as a second one where the incoming values of the PHI nodes are stored
  /// into and reloaded when the PHI is executed. As both memories use the
  /// original PHI node as virtual base pointer, we have this additional
  /// attribute to distinguish the PHI node specific array modeling from the
  /// normal scalar array modeling.</doc>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='507' u='c' c='_ZN5polly14BlockGenerator17getOrCreateAllocaEPKNS_13ScopArrayInfoE'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='821' u='c' c='_ZN5polly14BlockGenerator26createScalarInitializationERNS_4ScopE'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='912' u='c' c='_ZN5polly14BlockGenerator16findOutsideUsersERNS_4ScopE'/>
<use f='llvm/polly/lib/Transform/DeLICM.cpp' l='583' u='c' c='_ZN12_GLOBAL__N_110DeLICMImpl10isMappableEPKN5polly13ScopArrayInfoE'/>
<use f='llvm/polly/lib/Transform/DeLICM.cpp' l='849' u='c' c='_ZN12_GLOBAL__N_110DeLICMImpl9tryMapPHIEPKN5polly13ScopArrayInfoEN3isl12noexceptions3mapE'/>
<use f='llvm/polly/lib/Transform/DeLICM.cpp' l='1094' u='c' c='_ZN12_GLOBAL__N_110DeLICMImpl22collapseScalarsToStoreEPN5polly12MemoryAccessE'/>
<use f='llvm/polly/lib/Transform/MaximalStaticExpansion.cpp' l='179' u='c' c='_ZN12_GLOBAL__N_121MaximalStaticExpander12isExpandableEPKN5polly13ScopArrayInfoERN4llvm15SmallPtrSetImplIPNS1_12MemoryAccessEEESA_RNS1_4ScopERKN3isl1213245712'/>
<use f='llvm/polly/lib/Transform/MaximalStaticExpansion.cpp' l='458' u='c' c='_ZN12_GLOBAL__N_121MaximalStaticExpander9runOnScopERN5polly4ScopE'/>
