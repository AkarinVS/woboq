<def f='llvm/lld/MachO/InputFiles.cpp' l='506' type='const llvm::MachO::InterfaceFile *'/>
<use f='llvm/lld/MachO/InputFiles.cpp' l='520' u='r' c='_ZL18loadReexportHelperN4llvm9StringRefEPN3lld5macho9DylibFileE'/>
<use f='llvm/lld/MachO/InputFiles.cpp' l='522' u='r' c='_ZL18loadReexportHelperN4llvm9StringRefEPN3lld5macho9DylibFileE'/>
<use f='llvm/lld/MachO/InputFiles.cpp' l='655' u='r' c='_ZN3lld5macho9DylibFileC1ERKN4llvm5MachO13InterfaceFileEPS1_'/>
<use f='llvm/lld/MachO/InputFiles.cpp' l='656' u='w' c='_ZN3lld5macho9DylibFileC1ERKN4llvm5MachO13InterfaceFileEPS1_'/>
<use f='llvm/lld/MachO/InputFiles.cpp' l='664' u='w' c='_ZN3lld5macho9DylibFileC1ERKN4llvm5MachO13InterfaceFileEPS1_'/>
<doc f='llvm/lld/MachO/InputFiles.cpp' l='496'>// TBD files are parsed into a series of TAPI documents (InterfaceFiles), with
// the first document storing child pointers to the rest of them. When we are
// processing a given TBD file, we store that top-level document here. When
// processing re-exports, we search its children for potentially matching
// documents in the same TBD file. Note that the children themselves don&apos;t
// point to further documents, i.e. this is a two-level tree.
//
// ld64 allows a TAPI re-export to reference documents nested within other TBD
// files, but that seems like a strange design, so this is an intentional
// deviation.</doc>
