<dec f='llvm/clang/include/clang/Parse/Parser.h' l='3108' type='void clang::Parser::ParseOpenMPAssumesDirective(clang::OpenMPDirectiveKind DKind, clang::SourceLocation Loc)'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='3107'>/// Parse &apos;omp [begin] assume[s]&apos; directive.</doc>
<def f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1532' ll='1608' type='void clang::Parser::ParseOpenMPAssumesDirective(clang::OpenMPDirectiveKind DKind, clang::SourceLocation Loc)'/>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1972' u='c' c='_ZN5clang6Parser42ParseOpenMPDeclarativeDirectiveWithExtDeclERNS_15AccessSpecifierERNS0_25ParsedAttributesWithRangeEbNS_17TypeSpecifierTypeEPNS_4DeclE'/>
<doc f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1520'>/// `omp assumes` or `omp begin/end assumes` &lt;clause&gt; [[,]&lt;clause&gt;]...
/// where
///
///   clause:
///     &apos;ext_IMPL_DEFINED&apos;
///     &apos;absent&apos; &apos;(&apos; directive-name [, directive-name]* &apos;)&apos;
///     &apos;contains&apos; &apos;(&apos; directive-name [, directive-name]* &apos;)&apos;
///     &apos;holds&apos; &apos;(&apos; scalar-expression &apos;)&apos;
///     &apos;no_openmp&apos;
///     &apos;no_openmp_routines&apos;
///     &apos;no_parallelism&apos;
///</doc>
