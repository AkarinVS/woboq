<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='1594' type='static llvm::CallInst * llvm::CallInst::CreateWithReplacedBundle(llvm::CallInst * CI, llvm::OperandBundleDef Bundle, llvm::Instruction * InsertPt = nullptr)'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='1588'>/// Create a clone of \p CI with a different set of operand bundles and
  /// insert it before \p InsertPt.
  ///
  /// The returned call instruction is identical \p CI in every way except that
  /// the operand bundle for the new instruction is set to the operand bundle
  /// in \p Bundle.</doc>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='509' ll='519' type='static llvm::CallInst * llvm::CallInst::CreateWithReplacedBundle(llvm::CallInst * CI, llvm::OperandBundleDef OpB, llvm::Instruction * InsertPt = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp' l='1648' u='c' c='_ZN4llvm16InstCombinerImpl13visitCallInstERNS_8CallInstE'/>
