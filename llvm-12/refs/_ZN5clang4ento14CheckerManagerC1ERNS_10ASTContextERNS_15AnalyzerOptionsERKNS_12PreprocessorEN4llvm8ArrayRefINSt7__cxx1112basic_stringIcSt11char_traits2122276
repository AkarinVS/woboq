<dec f='llvm/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h' l='143' type='void clang::ento::CheckerManager::CheckerManager(clang::ASTContext &amp; Context, clang::AnalyzerOptions &amp; AOptions, const clang::Preprocessor &amp; PP, ArrayRef&lt;std::string&gt; plugins, ArrayRef&lt;std::function&lt;void (CheckerRegistry &amp;)&gt; &gt; checkerRegistrationFns)'/>
<use f='llvm/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h' l='153' u='c' c='_ZN5clang4ento14CheckerManagerC1ERNS_10ASTContextERNS_15AnalyzerOptionsERKNS_12PreprocessorE'/>
<doc f='llvm/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h' l='137'>// These constructors are defined in the Frontend library, because
  // CheckerRegistry, a crucial component of the initialization is in there.
  // CheckerRegistry cannot be moved to the Core library, because the checker
  // registration functions are defined in the Checkers library, and the library
  // dependencies look like this: Core -&gt; Checkers -&gt; Frontend.</doc>
<def f='llvm/clang/lib/StaticAnalyzer/Frontend/CreateCheckerManager.cpp' l='20' ll='32' type='void clang::ento::CheckerManager::CheckerManager(clang::ASTContext &amp; Context, clang::AnalyzerOptions &amp; AOptions, const clang::Preprocessor &amp; PP, ArrayRef&lt;std::string&gt; plugins, ArrayRef&lt;std::function&lt;void (CheckerRegistry &amp;)&gt; &gt; checkerRegistrationFns)'/>
