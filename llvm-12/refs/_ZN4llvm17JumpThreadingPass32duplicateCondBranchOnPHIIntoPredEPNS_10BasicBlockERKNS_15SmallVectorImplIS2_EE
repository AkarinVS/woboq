<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='128' type='bool llvm::JumpThreadingPass::duplicateCondBranchOnPHIIntoPred(llvm::BasicBlock * BB, const SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; PredBBs)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1818' u='c' c='_ZN4llvm17JumpThreadingPass18processBranchOnPHIEPNS_7PHINodeE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1938' u='c' c='_ZN4llvm17JumpThreadingPass18processBranchOnXOREPNS_14BinaryOperatorE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2593' ll='2714' type='bool llvm::JumpThreadingPass::duplicateCondBranchOnPHIIntoPred(llvm::BasicBlock * BB, const SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; PredBBs)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2588'>/// duplicateCondBranchOnPHIIntoPred - PredBB contains an unconditional branch
/// to BB which contains an i1 PHI node and a conditional branch on that PHI.
/// If we can duplicate the contents of BB up into PredBB do so now, this
/// improves the odds that the branch will be on an analyzable instruction like
/// a compare.</doc>
