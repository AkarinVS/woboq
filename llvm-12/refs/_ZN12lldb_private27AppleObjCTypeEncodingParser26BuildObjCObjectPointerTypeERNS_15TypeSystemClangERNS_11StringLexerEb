<dec f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCTypeEncodingParser.h' l='60' type='clang::QualType lldb_private::AppleObjCTypeEncodingParser::BuildObjCObjectPointerType(lldb_private::TypeSystemClang &amp; clang_ast_ctx, lldb_private::StringLexer &amp; type, bool for_expression)'/>
<def f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCTypeEncodingParser.cpp' l='167' ll='249' type='clang::QualType lldb_private::AppleObjCTypeEncodingParser::BuildObjCObjectPointerType(lldb_private::TypeSystemClang &amp; clang_ast_ctx, lldb_private::StringLexer &amp; type, bool for_expression)'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCTypeEncodingParser.cpp' l='270' u='c' c='_ZN12lldb_private27AppleObjCTypeEncodingParser9BuildTypeERNS_15TypeSystemClangERNS_11StringLexerEbPj'/>
<doc f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCTypeEncodingParser.cpp' l='162'>// the runtime can emit these in the form of @&quot;SomeType&quot;, giving more specifics
// this would be interesting for expression parser interop, but since we
// actually try to avoid exposing the ivar info to the expression evaluator,
// consume but ignore the type info and always return an &apos;id&apos;; if anything,
// dynamic typing will resolve things for us anyway</doc>
