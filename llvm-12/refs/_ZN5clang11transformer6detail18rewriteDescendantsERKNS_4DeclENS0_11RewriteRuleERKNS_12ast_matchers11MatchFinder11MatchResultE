<dec f='llvm/clang/include/clang/Tooling/Transformer/RewriteRule.h' l='406' type='llvm::Expected&lt;SmallVector&lt;Edit, 1&gt; &gt; clang::transformer::detail::rewriteDescendants(const clang::Decl &amp; Node, clang::transformer::RewriteRule Rule, const ast_matchers::MatchFinder::MatchResult &amp; Result)'/>
<def f='llvm/clang/lib/Tooling/Transformer/RewriteRule.cpp' l='278' ll='282' type='llvm::Expected&lt;SmallVector&lt;clang::transformer::Edit, 1&gt; &gt; clang::transformer::detail::rewriteDescendants(const clang::Decl &amp; Node, clang::transformer::RewriteRule Rule, const MatchResult &amp; Result)'/>
<doc f='llvm/clang/include/clang/Tooling/Transformer/RewriteRule.h' l='390'>/// The following overload set is a version of `rewriteDescendants` that
/// operates directly on the AST, rather than generating a Transformer
/// combinator. It applies `Rule` to all descendants of `Node`, although not
/// `Node` itself. `Rule` can refer to nodes bound in `Result`.
///
/// For example, assuming that &quot;body&quot; is bound to a function body in MatchResult
/// `Results`, this will produce edits to change all appearances of `x` in that
/// body to `3`.
/// ```
/// auto InlineX =
///     makeRule(declRefExpr(to(varDecl(hasName(&quot;x&quot;)))), changeTo(cat(&quot;3&quot;)));
/// const auto *Node = Results.Nodes.getNodeAs&lt;Stmt&gt;(&quot;body&quot;);
/// auto Edits = rewriteDescendants(*Node, InlineX, Results);
/// ```
/// @{</doc>
<use f='llvm/clang/unittests/Tooling/TransformerTest.cpp' l='636' u='c' c='_ZN12_GLOBAL__N_148TransformerTest_RewriteDescendantsTypedDecl_Test8TestBodyEv'/>
