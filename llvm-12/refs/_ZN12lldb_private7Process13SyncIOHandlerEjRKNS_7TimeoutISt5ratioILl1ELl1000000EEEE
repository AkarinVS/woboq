<dec f='llvm/lldb/include/lldb/Target/Process.h' l='2093' type='void lldb_private::Process::SyncIOHandler(uint32_t iohandler_id, const Timeout&lt;std::micro&gt; &amp; timeout)'/>
<doc f='llvm/lldb/include/lldb/Target/Process.h' l='2085'>/// Waits for the process state to be running within a given msec timeout.
  ///
  /// The main purpose of this is to implement an interlock waiting for
  /// HandlePrivateEvent to push an IOHandler.
  ///
  /// \param[in] timeout
  ///     The maximum time length to wait for the process to transition to the
  ///     eStateRunning state.</doc>
<use f='llvm/lldb/source/Commands/CommandObjectProcess.cpp' l='231' u='c' c='_ZN26CommandObjectProcessLaunch9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<use f='llvm/lldb/source/Commands/CommandObjectProcess.cpp' l='575' u='c' c='_ZN28CommandObjectProcessContinue9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<use f='llvm/lldb/source/Commands/CommandObjectThread.cpp' l='580' u='c' c='_ZN39CommandObjectThreadStepWithTypeAndScope9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Target/Process.cpp' l='595' ll='614' type='void lldb_private::Process::SyncIOHandler(uint32_t iohandler_id, const Timeout&lt;std::micro&gt; &amp; timeout)'/>
