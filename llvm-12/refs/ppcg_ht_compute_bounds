<dec f='llvm/polly/lib/External/ppcg/hybrid.h' l='18' type='ppcg_ht_bounds * ppcg_ht_compute_bounds(struct ppcg_scop * scop, isl_schedule_node * node)'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='4050' u='c' c='try_hybrid_tile'/>
<def f='llvm/polly/lib/External/ppcg/hybrid.c' l='1315' ll='1359' type='ppcg_ht_bounds * ppcg_ht_compute_bounds(struct ppcg_scop * scop, isl_schedule_node * node)'/>
<doc f='llvm/polly/lib/External/ppcg/hybrid.c' l='1294'>/* Given a schedule node &quot;node&quot; that, together with its child,
 * satisfies the input pattern for hybrid tiling, compute bounds
 * on the relative dependence distances of the child node with
 * respect to the parent node.  These bounds are needed to
 * construct a hybrid tiling.
 *
 * First all relevant dependences are collected and mapped
 * to the schedule space of the pair of nodes.  Then, the
 * dependence distances are computed in this space.
 *
 * These dependence distances are then projected onto a two-dimensional
 * space consisting of the single schedule dimension of the outer node
 * and one of the schedule dimensions of the inner node.
 * The maximal and minimal relative dependence distances are extracted
 * from these projections.
 * This process is repeated for each of the schedule dimensions
 * of the inner node.  For the first dimension, both minimal and
 * maximal relative dependence distances are stored in the result.
 * For the other dimensions, only the minimal relative dependence
 * distance is stored.
 */</doc>
