<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='945' type='void __sanitizer::SignalContext::SignalContext()'/>
<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='950' ll='958' type='void __sanitizer::SignalContext::SignalContext(void * siginfo, void * context)'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='943'>// VS2013 doesn&apos;t implement unrestricted unions, so we need a trivial default
  // constructor</doc>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='947'>// Creates signal context in a platform-specific manner.
  // SignalContext is going to keep pointers to siginfo and context without
  // owning them.</doc>
<use f='llvm/compiler-rt/lib/asan/asan_errors.h' l='45' u='c' c='__asan::ErrorDeadlySignal::ErrorDeadlySignal'/>
<use f='llvm/compiler-rt/lib/asan/asan_posix.cpp' l='38' u='c' c='__asan::AsanOnDeadlySignal'/>
<use f='llvm/compiler-rt/lib/hwasan/hwasan_linux.cpp' l='405' u='c' c='__hwasan::HwasanOnSIGTRAP'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cpp' l='258' u='c' c='__sanitizer::TracerThreadSignalHandler'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_report.cpp' l='245' u='c' c='__sanitizer::HandleDeadlySignal'/>
