<dec f='llvm/clang/lib/Format/FormatTokenLexer.h' l='85' type='void clang::format::FormatTokenLexer::handleTemplateStrings()'/>
<doc f='llvm/clang/lib/Format/FormatTokenLexer.h' l='76'>// Handles JavaScript template strings.
  //
  // JavaScript template strings use backticks (&apos;`&apos;) as delimiters, and allow
  // embedding expressions nested in ${expr-here}. Template strings can be
  // nested recursively, i.e. expressions can contain template strings in turn.
  //
  // The code below parses starting from a backtick, up to a closing backtick or
  // an opening ${. It also maintains a stack of lexing contexts to handle
  // nested template parts by balancing curly braces.</doc>
<use f='llvm/clang/lib/Format/FormatTokenLexer.cpp' l='68' u='c' c='_ZN5clang6format16FormatTokenLexer3lexEv'/>
<def f='llvm/clang/lib/Format/FormatTokenLexer.cpp' l='638' ll='703' type='void clang::format::FormatTokenLexer::handleTemplateStrings()'/>
