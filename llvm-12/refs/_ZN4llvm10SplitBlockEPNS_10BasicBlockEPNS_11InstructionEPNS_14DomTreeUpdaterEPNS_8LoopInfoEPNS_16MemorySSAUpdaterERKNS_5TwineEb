<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='278' type='llvm::BasicBlock * llvm::SplitBlock(llvm::BasicBlock * Old, llvm::Instruction * SplitPt, llvm::DomTreeUpdater * DTU = nullptr, llvm::LoopInfo * LI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, const llvm::Twine &amp; BBName = &quot;&quot;, bool Before = false)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='270'>/// Split the specified block at the specified instruction.
///
/// If \p Before is true, splitBlockBefore handles the block
/// splitting. Otherwise, execution proceeds as described below.
///
/// Everything before \p SplitPt stays in \p Old and everything starting with \p
/// SplitPt moves to a new block. The two blocks are joined by an unconditional
/// branch. The new block with name \p BBName is returned.</doc>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='421' u='c' c='_ZN4llvm15OpenMPIRBuilder24emitCancelationCheckImplEPNS_5ValueENS_3omp9DirectiveE'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='688' u='c' c='_ZN4llvm15OpenMPIRBuilder14createParallelERKNS0_19LocationDescriptionENS_13IRBuilderBase11InsertPointENS_12function_refIFvS5_S5_RNS_10BasicBlockEEEENS2523171'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUPrintfRuntimeBinding.cpp' l='366' u='c' c='_ZN12_GLOBAL__N_130AMDGPUPrintfRuntimeBindingImpl17lowerPrintfForGpuERN4llvm6ModuleE'/>
<use f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp' l='994' u='c' c='_ZN12_GLOBAL__N_132WebAssemblyLowerEmscriptenEHSjLj17runSjLjOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp' l='1083' u='c' c='_ZN12_GLOBAL__N_132WebAssemblyLowerEmscriptenEHSjLj17runSjLjOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp' l='1089' u='c' c='_ZN12_GLOBAL__N_132WebAssemblyLowerEmscriptenEHSjLj17runSjLjOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp' l='1111' u='c' c='_ZN12_GLOBAL__N_121LowerMatrixIntrinsics21getNonAliasingPointerEPN4llvm8LoadInstEPNS1_9StoreInstEPNS1_8CallInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp' l='1114' u='c' c='_ZN12_GLOBAL__N_121LowerMatrixIntrinsics21getNonAliasingPointerEPN4llvm8LoadInstEPNS1_9StoreInstEPNS1_8CallInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp' l='1117' u='c' c='_ZN12_GLOBAL__N_121LowerMatrixIntrinsics21getNonAliasingPointerEPN4llvm8LoadInstEPNS1_9StoreInstEPNS1_8CallInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/PartiallyInlineLibCalls.cpp' l='56' u='c' c='_ZL12optimizeSQRTPN4llvm8CallInstEPNS_8FunctionERNS_10BasicBlockERNS_14ilist_iteratorINS_12ilist_detail12node_optionsIS4_Lb0ELb0EvEELb0ELb0EEEPKNS_19TargetTransformInfoE'/>
<def f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='606' ll='612' type='llvm::BasicBlock * llvm::SplitBlock(llvm::BasicBlock * Old, llvm::Instruction * SplitPt, llvm::DomTreeUpdater * DTU = nullptr, llvm::LoopInfo * LI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, const llvm::Twine &amp; BBName = &quot;&quot;, bool Before = false)'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4029' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt25SimplifyBranchOnICmpChainEPN4llvm10BranchInstERNS1_9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEERKNS1_10DataLayoutE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4670' u='c' c='_ZL30createUnreachableSwitchDefaultPN4llvm10SwitchInstEPNS_14DomTreeUpdaterE'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='558' u='c' c='_ZN12_GLOBAL__N_139OpenMPIRBuilderTest_ParallelNested_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='651' u='c' c='_ZN12_GLOBAL__N_145OpenMPIRBuilderTest_ParallelNested2Inner_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='652' u='c' c='_ZN12_GLOBAL__N_145OpenMPIRBuilderTest_ParallelNested2Inner_Test8TestBodyEv'/>
