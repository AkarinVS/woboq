<dec f='llvm/clang/lib/CodeGen/CodeGenTypes.h' l='202' type='const clang::CodeGen::CGFunctionInfo &amp; clang::CodeGen::CodeGenTypes::arrangeFreeFunctionCall(const clang::CodeGen::CallArgList &amp; Args, const clang::FunctionType * Ty, bool ChainCall)'/>
<def f='llvm/clang/lib/CodeGen/CGCall.cpp' l='613' ll='619' type='const clang::CodeGen::CGFunctionInfo &amp; clang::CodeGen::CodeGenTypes::arrangeFreeFunctionCall(const clang::CodeGen::CallArgList &amp; args, const clang::FunctionType * fnType, bool chainCall)'/>
<doc f='llvm/clang/lib/CodeGen/CGCall.cpp' l='609'>/// Figure out the rules for calling a function with the given formal
/// type using the given arguments.  The arguments are necessary
/// because the function might be unprototyped, in which case it&apos;s
/// target-dependent in crazy ways.</doc>
<use f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='5236' u='c' c='_ZN5clang7CodeGen15CodeGenFunction8EmitCallENS_8QualTypeERKNS0_8CGCalleeEPKNS_8CallExprENS0_15ReturnValueSlotEPN4llvm5ValueE'/>
<use f='llvm/clang/lib/CodeGen/CGExprCXX.cpp' l='1309' u='c' c='_ZL17EmitNewDeleteCallRN5clang7CodeGen15CodeGenFunctionEPKNS_12FunctionDeclEPKNS_17FunctionProtoTypeERKNS0_11CallArgListE'/>
<use f='llvm/clang/lib/CodeGen/CGExprComplex.cpp' l='651' u='c' c='_ZN12_GLOBAL__N_118ComplexExprEmitter23EmitComplexBinOpLibCallEN4llvm9StringRefERKNS0_9BinOpInfoE'/>
