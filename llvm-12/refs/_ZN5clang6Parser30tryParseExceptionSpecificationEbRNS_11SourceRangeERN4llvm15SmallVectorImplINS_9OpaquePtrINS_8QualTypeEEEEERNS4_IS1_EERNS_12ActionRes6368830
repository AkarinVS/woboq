<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1945' type='clang::ExceptionSpecificationType clang::Parser::tryParseExceptionSpecification(bool Delayed, clang::SourceRange &amp; SpecificationRange, SmallVectorImpl&lt;clang::ParsedType&gt; &amp; DynamicExceptions, SmallVectorImpl&lt;clang::SourceRange&gt; &amp; DynamicExceptionRanges, clang::ExprResult &amp; NoexceptExpr, clang::CachedTokens *&amp; ExceptionSpecTokens)'/>
<use f='llvm/clang/lib/Parse/ParseCXXInlineMethods.cpp' l='471' u='c' c='_ZN5clang6Parser27ParseLexedMethodDeclarationERNS0_27LateParsedMethodDeclarationE'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6544' u='c' c='_ZN5clang6Parser23ParseFunctionDeclaratorERNS_10DeclaratorERNS_16ParsedAttributesERNS_24BalancedDelimiterTrackerEbb'/>
<def f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='3659' ll='3762' type='clang::ExceptionSpecificationType clang::Parser::tryParseExceptionSpecification(bool Delayed, clang::SourceRange &amp; SpecificationRange, SmallVectorImpl&lt;clang::ParsedType&gt; &amp; DynamicExceptions, SmallVectorImpl&lt;clang::SourceRange&gt; &amp; DynamicExceptionRanges, clang::ExprResult &amp; NoexceptExpr, clang::CachedTokens *&amp; ExceptionSpecTokens)'/>
<doc f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='3650'>/// Parse a C++ exception-specification if present (C++0x [except.spec]).
///
///       exception-specification:
///         dynamic-exception-specification
///         noexcept-specification
///
///       noexcept-specification:
///         &apos;noexcept&apos;
///         &apos;noexcept&apos; &apos;(&apos; constant-expression &apos;)&apos;</doc>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='1365' u='c' c='_ZN5clang6Parser36ParseLambdaExpressionAfterIntroducerERNS_16LambdaIntroducerE'/>
