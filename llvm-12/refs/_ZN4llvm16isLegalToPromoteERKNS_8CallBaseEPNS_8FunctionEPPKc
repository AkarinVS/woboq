<dec f='llvm/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h' l='30' type='bool llvm::isLegalToPromote(const llvm::CallBase &amp; CB, llvm::Function * Callee, const char ** FailureReason = nullptr)'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUFixFunctionBitcasts.cpp' l='40' u='c' c='_ZN12_GLOBAL__N_125AMDGPUFixFunctionBitcasts13visitCallBaseERN4llvm8CallBaseE'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h' l='23'>/// Return true if the given indirect call site can be made to call \p Callee.
///
/// This function ensures that the number and type of the call site&apos;s arguments
/// and return value match those of the given function. If the types do not
/// match exactly, they must at least be bitcast compatible. If \p FailureReason
/// is non-null and the indirect call cannot be promoted, the failure reason
/// will be stored in it.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/SampleProfile.cpp' l='1128' u='c' c='_ZN12_GLOBAL__N_119SampleProfileLoader28tryPromoteAndInlineCandidateERN4llvm8FunctionERNS_15InlineCandidateEmRmRNS1_8DenseSetIPNS1_11InstructionENS1_113444809'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/IndirectCallPromotion.cpp' l='285' u='c' c='_ZN12_GLOBAL__N_118ICallPromotionFunc33getPromotionCandidatesForCallSiteERKN4llvm8CallBaseERKNS1_8ArrayRefI18InstrProfValueDataEEmj'/>
<def f='llvm/llvm/lib/Transforms/Utils/CallPromotionUtils.cpp' l='382' ll='439' type='bool llvm::isLegalToPromote(const llvm::CallBase &amp; CB, llvm::Function * Callee, const char ** FailureReason = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/Utils/CallPromotionUtils.cpp' l='587' u='c' c='_ZN4llvm14tryPromoteCallERNS_8CallBaseE'/>
