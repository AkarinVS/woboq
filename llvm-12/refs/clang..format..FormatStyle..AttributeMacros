<dec f='llvm/clang/include/clang/Format/Format.h' l='846' type='std::vector&lt;std::string&gt;'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='3058' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='3058' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<offset>384</offset>
<doc f='llvm/clang/include/clang/Format/Format.h' l='830'>/// A vector of strings that should be interpreted as attributes/qualifiers
  /// instead of identifiers. This can be useful for language extensions or
  /// static analyzer annotations.
  ///
  /// For example:
  /// \code
  ///   x = (char *__capability)&amp;y;
  ///   int function(void) __ununsed;
  ///   void only_writes_to_buffer(char *__output buffer);
  /// \endcode
  ///
  /// In the .clang-format configuration file, this can be configured like:
  /// \code{.yaml}
  ///   AttributeMacros: [&apos;__capability&apos;, &apos;__output&apos;, &apos;__ununsed&apos;]
  /// \endcode
  ///</doc>
<use f='llvm/clang/lib/Format/Format.cpp' l='525' u='a' c='_ZN4llvm4yaml13MappingTraitsIN5clang6format11FormatStyleEE7mappingERNS0_2IOERS4_'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='907' u='m' c='_ZN5clang6format12getLLVMStyleENS0_11FormatStyle12LanguageKindE'/>
<use f='llvm/clang/lib/Format/FormatTokenLexer.cpp' l='42' c='_ZN5clang6format16FormatTokenLexerC1ERKNS_13SourceManagerENS_6FileIDEjRKNS0_11FormatStyleENS0_8encoding8EncodingERN4llvm24SpecificBumpPtrAllocatorINS01923091'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8204' u='m' c='_ZN5clang6format12_GLOBAL__N_143FormatTest_UnderstandsUsesOfStarAndAmp_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8205' u='m' c='_ZN5clang6format12_GLOBAL__N_143FormatTest_UnderstandsUsesOfStarAndAmp_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8206' u='m' c='_ZN5clang6format12_GLOBAL__N_143FormatTest_UnderstandsUsesOfStarAndAmp_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8349' u='m' c='_ZN5clang6format12_GLOBAL__N_137FormatTest_UnderstandsAttributes_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8350' u='m' c='_ZN5clang6format12_GLOBAL__N_137FormatTest_UnderstandsAttributes_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8351' u='m' c='_ZN5clang6format12_GLOBAL__N_137FormatTest_UnderstandsAttributes_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8352' u='m' c='_ZN5clang6format12_GLOBAL__N_137FormatTest_UnderstandsAttributes_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8417' u='m' c='_ZN5clang6format12_GLOBAL__N_150FormatTest_UnderstandsPointerQualifiersInCast_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='12737' u='m' c='_ZN5clang6format12_GLOBAL__N_156FormatTest_ConfigurableSpaceAroundPointerQualifiers_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15911' u='m' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15912' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15912' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15914' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15914' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
