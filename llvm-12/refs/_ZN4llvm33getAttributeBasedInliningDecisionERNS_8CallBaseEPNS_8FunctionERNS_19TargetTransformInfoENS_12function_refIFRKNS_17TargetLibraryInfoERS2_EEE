<dec f='llvm/llvm/include/llvm/Analysis/InlineCost.h' l='254' type='Optional&lt;llvm::InlineResult&gt; llvm::getAttributeBasedInliningDecision(llvm::CallBase &amp; Call, llvm::Function * Callee, llvm::TargetTransformInfo &amp; CalleeTTI, function_ref&lt;const llvm::TargetLibraryInfo &amp;(llvm::Function &amp;)&gt; GetTLI)'/>
<doc f='llvm/llvm/include/llvm/Analysis/InlineCost.h' l='248'>/// Returns InlineResult::success() if the call site should be always inlined
/// because of user directives, and the inlining is viable. Returns
/// InlineResult::failure() if the inlining may never happen because of user
/// directives or incompatibilities detectable without needing callee traversal.
/// Otherwise returns None, meaning that inlining should be decided based on
/// other criteria (e.g. cost modeling).</doc>
<use f='llvm/llvm/lib/Analysis/InlineAdvisor.cpp' l='491' u='c' c='_ZN4llvm13InlineAdvisor16getMandatoryKindERNS_8CallBaseERNS_15AnalysisManagerINS_8FunctionEJEEERNS_25OptimizationRemarkEmitterE'/>
<def f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='2507' ll='2582' type='Optional&lt;llvm::InlineResult&gt; llvm::getAttributeBasedInliningDecision(llvm::CallBase &amp; Call, llvm::Function * Callee, llvm::TargetTransformInfo &amp; CalleeTTI, function_ref&lt;const llvm::TargetLibraryInfo &amp;(llvm::Function &amp;)&gt; GetTLI)'/>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='2593' u='c' c='_ZN4llvm13getInlineCostERNS_8CallBaseEPNS_8FunctionERKNS_12InlineParamsERNS_19TargetTransformInfoENS_12function_refIFRNS_15AssumptionCacheERS2_EEENS9_4080712'/>
