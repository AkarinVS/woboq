<dec f='llvm/polly/include/polly/ScopInfo.h' l='237' type='bool polly::ScopArrayInfo::updateSizes(ArrayRef&lt;const llvm::SCEV *&gt; Sizes, bool CheckConsistency = true)'/>
<doc f='llvm/polly/include/polly/ScopInfo.h' l='225'>///  Update the sizes of the ScopArrayInfo object.
  ///
  ///  A ScopArrayInfo object may be created without all outer dimensions being
  ///  available. This function is called when new memory accesses are added for
  ///  this ScopArrayInfo object. It verifies that sizes are compatible and adds
  ///  additional outer array dimensions, if needed.
  ///
  ///  @param Sizes       A vector of array sizes where the rightmost array
  ///                     sizes need to match the innermost array sizes already
  ///                     defined in SAI.
  ///  @param CheckConsistency Update sizes, even if new sizes are inconsistent
  ///                          with old sizes</doc>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2452' u='c' c='_ZN5polly11ScopBuilder24foldSizeConstantsToRightEv'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='240' u='c' c='_ZN5polly13ScopArrayInfoC1EPN4llvm5ValueEPNS1_4TypeEN3isl12noexceptions3ctxENS1_8ArrayRefIPKNS1_4SCEVEEENS_10MemoryKindERKNS1_10DataLayoutEPNS_4ScopEPKc'/>
<def f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='326' ll='357' type='bool polly::ScopArrayInfo::updateSizes(ArrayRef&lt;const llvm::SCEV *&gt; NewSizes, bool CheckConsistency = true)'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='1862' u='c' c='_ZN5polly4Scop24getOrCreateScopArrayInfoEPN4llvm5ValueEPNS1_4TypeENS1_8ArrayRefIPKNS1_4SCEVEEENS_10MemoryKindEPKc'/>
