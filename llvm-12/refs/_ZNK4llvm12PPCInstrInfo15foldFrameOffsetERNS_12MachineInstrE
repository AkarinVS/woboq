<dec f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='607' type='bool llvm::PPCInstrInfo::foldFrameOffset(llvm::MachineInstr &amp; MI) const'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='3423' ll='3518' type='bool llvm::PPCInstrInfo::foldFrameOffset(llvm::MachineInstr &amp; MI) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='3399'>// This opt tries to convert the following imm form to an index form to save an
// add for stack variables.
// Return false if no such pattern found.
//
// ADDI instr: ToBeChangedReg = ADDI FrameBaseReg, OffsetAddi
// ADD instr:  ToBeDeletedReg = ADD ToBeChangedReg(killed), ScaleReg
// Imm instr:  Reg            = op OffsetImm, ToBeDeletedReg(killed)
//
// can be converted to:
//
// new ADDI instr: ToBeChangedReg = ADDI FrameBaseReg, (OffsetAddi + OffsetImm)
// Index instr:    Reg            = opx ScaleReg, ToBeChangedReg(killed)
//
// In order to eliminate ADD instr, make sure that:
// 1: (OffsetAddi + OffsetImm) must be int16 since this offset will be used in
//    new ADDI instr and ADDI can only take int16 Imm.
// 2: ToBeChangedReg must be killed in ADD instr and there is no other use
//    between ADDI and ADD instr since its original def in ADDI will be changed
//    in new ADDI instr. And also there should be no new def for it between
//    ADD and Imm instr as ToBeChangedReg will be used in Index instr.
// 3: ToBeDeletedReg must be killed in Imm instr and there is no other use
//    between ADD and Imm instr since ADD instr will be eliminated.
// 4: ScaleReg must not be redefined between ADD and Imm instr since it will be
//    moved to Index instr.</doc>
<use f='llvm/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp' l='468' u='c' c='_ZN12_GLOBAL__N_118PPCPreEmitPeephole20runOnMachineFunctionERN4llvm15MachineFunctionE'/>
