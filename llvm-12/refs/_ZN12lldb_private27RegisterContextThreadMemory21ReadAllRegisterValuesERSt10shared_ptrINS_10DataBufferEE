<dec f='llvm/lldb/source/Plugins/Process/Utility/RegisterContextThreadMemory.h' l='54' type='bool lldb_private::RegisterContextThreadMemory::ReadAllRegisterValues(lldb::DataBufferSP &amp; data_sp)'/>
<inh f='llvm/lldb/include/lldb/Target/RegisterContext.h' l='50' c='_ZN12lldb_private15RegisterContext21ReadAllRegisterValuesERSt10shared_ptrINS_10DataBufferEE'/>
<def f='llvm/lldb/source/Plugins/Process/Utility/RegisterContextThreadMemory.cpp' l='109' ll='115' type='bool lldb_private::RegisterContextThreadMemory::ReadAllRegisterValues(lldb::DataBufferSP &amp; data_sp)'/>
<doc f='llvm/lldb/source/Plugins/Process/Utility/RegisterContextThreadMemory.h' l='42'>// These two functions are used to implement &quot;push&quot; and &quot;pop&quot; of register
  // states.  They are used primarily
  // for expression evaluation, where we need to push a new state (storing the
  // old one in data_sp) and then
  // restoring the original state by passing the data_sp we got from
  // ReadAllRegisters to WriteAllRegisterValues.
  // ReadAllRegisters will do what is necessary to return a coherent set of
  // register values for this thread, which
  // may mean e.g. interrupting a thread that is sitting in a kernel trap.  That
  // is a somewhat disruptive operation,
  // so these API&apos;s should only be used when this behavior is needed.</doc>
