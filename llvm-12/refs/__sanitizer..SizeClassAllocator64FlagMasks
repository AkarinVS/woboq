<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary64.h' l='39' ll='43'/>
<size>1</size>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary64.h' l='18'>// SizeClassAllocator64 -- allocator for 64-bit address space.
// The template parameter Params is a class containing the actual parameters.
//
// Space: a portion of address space of kSpaceSize bytes starting at SpaceBeg.
// If kSpaceBeg is ~0 then SpaceBeg is chosen dynamically my mmap.
// Otherwise SpaceBeg=kSpaceBeg (fixed address).
// kSpaceSize is a power of two.
// At the beginning the entire space is mprotect-ed, then small parts of it
// are mapped on demand.
//
// Region: a part of Space dedicated to a single size class.
// There are kNumClasses Regions of equal size.
//
// UserChunk: a piece of memory returned to user.
// MetaChunk: kMetadataSize bytes of metadata associated with a UserChunk.

// FreeArray is an array free-d chunks (stored as 4-byte offsets)
//
// A Region looks like this:
// UserChunk1 ... UserChunkN &lt;gap&gt; MetaChunkN ... MetaChunk1 FreeArray</doc>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary64.h' l='39'>//  Bit masks.</doc>
