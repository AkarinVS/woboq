<dec f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='762' type='unsigned int llvm::slpvectorizer::BoUpSLP::canMapToVector(llvm::Type * T, const llvm::DataLayout &amp; DL) const'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3310' ll='3339' type='unsigned int llvm::slpvectorizer::BoUpSLP::canMapToVector(llvm::Type * T, const llvm::DataLayout &amp; DL) const'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3357' u='c' c='_ZNK4llvm13slpvectorizer7BoUpSLP15canReuseExtractENS_8ArrayRefIPNS_5ValueEEES4_RNS_15SmallVectorImplIjEE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='7386' u='c' c='_ZN4llvm17SLPVectorizerPass24vectorizeInsertValueInstEPNS_15InsertValueInstEPNS_10BasicBlockERNS_13slpvectorizer7BoUpSLPE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='756'>/// Check if homogeneous aggregate is isomorphic to some VectorType.
  /// Accepts homogeneous multidimensional aggregate of scalars/vectors like
  /// {[4 x i16], [4 x i16]}, { &lt;2 x float&gt;, &lt;2 x float&gt; },
  /// {{{i16, i16}, {i16, i16}}, {{i16, i16}, {i16, i16}}} and so on.
  ///
  /// \returns number of elements in vector if isomorphism exists, 0 otherwise.</doc>
