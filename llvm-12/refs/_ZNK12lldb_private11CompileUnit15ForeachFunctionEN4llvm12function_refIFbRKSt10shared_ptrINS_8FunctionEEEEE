<dec f='llvm/lldb/include/lldb/Symbol/CompileUnit.h' l='161' type='void lldb_private::CompileUnit::ForeachFunction(llvm::function_ref&lt;bool (const lldb::FunctionSP &amp;)&gt; lambda) const'/>
<doc f='llvm/lldb/include/lldb/Symbol/CompileUnit.h' l='151'>/// Apply a lambda to each function in this compile unit.
  ///
  /// This provides raw access to the function shared pointer list and will not
  /// cause the SymbolFile plug-in to parse any unparsed functions.
  ///
  /// \note Prefer using FindFunctionByUID over this if possible.
  ///
  /// \param[in] lambda
  ///     The lambda that should be applied to every function. The lambda can
  ///     return true if the iteration should be aborted earlier.</doc>
<use f='llvm/lldb/source/Core/Module.cpp' l='396' u='c' c='_ZN12lldb_private6Module20ParseAllDebugSymbolsEv'/>
<use f='llvm/lldb/source/Core/SearchFilter.cpp' l='329' u='c' c='_ZN12lldb_private12SearchFilter13DoCUIterationERKSt10shared_ptrINS_6ModuleEERKNS_13SymbolContextERNS_8SearcherE'/>
<def f='llvm/lldb/source/Symbol/CompileUnit.cpp' l='60' ll='74' type='void lldb_private::CompileUnit::ForeachFunction(llvm::function_ref&lt;bool (const FunctionSP &amp;)&gt; lambda) const'/>
<use f='llvm/lldb/source/Symbol/CompileUnit.cpp' l='122' u='c' c='_ZNK12lldb_private11CompileUnit4DumpEPNS_6StreamEb'/>
