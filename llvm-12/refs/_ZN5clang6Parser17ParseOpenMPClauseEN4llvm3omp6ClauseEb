<dec f='llvm/clang/include/clang/Parse/Parser.h' l='3215' type='clang::OMPClause * clang::Parser::ParseOpenMPClause(clang::OpenMPClauseKind Kind, bool ParseOnly = false)'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='3209'>/// Parses clause without any additional arguments.
  ///
  /// \param Kind Kind of current clause.
  /// \param ParseOnly true to skip the clause&apos;s semantic actions and return
  /// nullptr.
  ///</doc>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='2759' u='c' c='_ZN5clang6Parser17ParseOpenMPClauseEN4llvm3omp9DirectiveENS2_6ClauseEb'/>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='2834' u='c' c='_ZN5clang6Parser17ParseOpenMPClauseEN4llvm3omp9DirectiveENS2_6ClauseEb'/>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='2845' u='c' c='_ZN5clang6Parser17ParseOpenMPClauseEN4llvm3omp9DirectiveENS2_6ClauseEb'/>
<def f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='3027' ll='3034' type='clang::OMPClause * clang::Parser::ParseOpenMPClause(clang::OpenMPClauseKind Kind, bool ParseOnly = false)'/>
<doc f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='3001'>/// Parsing of OpenMP clauses like &apos;ordered&apos;.
///
///    ordered-clause:
///         &apos;ordered&apos;
///
///    nowait-clause:
///         &apos;nowait&apos;
///
///    untied-clause:
///         &apos;untied&apos;
///
///    mergeable-clause:
///         &apos;mergeable&apos;
///
///    read-clause:
///         &apos;read&apos;
///
///    threads-clause:
///         &apos;threads&apos;
///
///    simd-clause:
///         &apos;simd&apos;
///
///    nogroup-clause:
///         &apos;nogroup&apos;
///</doc>
