<dec f='llvm/lldb/source/Plugins/UnwindAssembly/x86/x86AssemblyInspectionEngine.h' l='97' type='bool lldb_private::x86AssemblyInspectionEngine::push_extended_pattern_p()'/>
<def f='llvm/lldb/source/Plugins/UnwindAssembly/x86/x86AssemblyInspectionEngine.cpp' l='335' ll='347' type='bool lldb_private::x86AssemblyInspectionEngine::push_extended_pattern_p()'/>
<use f='llvm/lldb/source/Plugins/UnwindAssembly/x86/x86AssemblyInspectionEngine.cpp' l='1190' u='c' c='_ZN12lldb_private27x86AssemblyInspectionEngine36GetNonCallSiteUnwindPlanFromAssemblyEPhmRNS_12AddressRangeERNS_10UnwindPlanE'/>
<use f='llvm/lldb/source/Plugins/UnwindAssembly/x86/x86AssemblyInspectionEngine.cpp' l='1495' u='c' c='_ZN12lldb_private27x86AssemblyInspectionEngine29AugmentUnwindPlanFromCallSiteEPhmRNS_12AddressRangeERNS_10UnwindPlanERSt10shared_ptrINS_15RegisterContextEE'/>
<doc f='llvm/lldb/source/Plugins/UnwindAssembly/x86/x86AssemblyInspectionEngine.cpp' l='324'>// pushl imm8(%esp)
//
// e.g. 0xff 0x74 0x24 0x20 - &apos;pushl 0x20(%esp)&apos; (same byte pattern for &apos;pushq
// 0x20(%rsp)&apos; in an x86_64 program)
//
// 0xff (with opcode bits &apos;6&apos; in next byte, PUSH r/m32) 0x74 (ModR/M byte with
// three bits used to specify the opcode)
//      mod == b01, opcode == b110, R/M == b100
//      &quot;+disp8&quot;
// 0x24 (SIB byte - scaled index = 0, r32 == esp) 0x20 imm8 value</doc>
