<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='499' type='bool llvm::LazyCallGraph::SCC::isAncestorOf(const llvm::LazyCallGraph::SCC &amp; C) const'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='511' u='c' c='_ZNK4llvm13LazyCallGraph3SCC14isDescendantOfERKS1_'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='493'>/// Test if this SCC is an ancestor of \a C.
    ///
    /// Note that in the worst case this is linear in the number of edges
    /// departing the current SCC and every SCC in the entire graph reachable
    /// from this SCC. Thus this very well may walk every edge in the entire
    /// call graph! Do not call this in a tight loop!</doc>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='294' ll='326' type='bool llvm::LazyCallGraph::SCC::isAncestorOf(const llvm::LazyCallGraph::SCC &amp; TargetC) const'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='632' u='c' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_OutgoingEdgeMutation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='655' u='c' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_OutgoingEdgeMutation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='676' u='c' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_OutgoingEdgeMutation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='697' u='c' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_OutgoingEdgeMutation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='718' u='c' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_OutgoingEdgeMutation_Test8TestBodyEv'/>
