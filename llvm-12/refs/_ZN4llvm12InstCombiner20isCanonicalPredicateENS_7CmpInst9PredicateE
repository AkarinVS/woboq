<def f='llvm/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h' l='143' ll='158' type='static bool llvm::InstCombiner::isCanonicalPredicate(CmpInst::Predicate Pred)'/>
<doc f='llvm/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h' l='138'>/// Predicate canonicalization reduces the number of patterns that need to be
  /// matched by other transforms. For example, we may swap the operands of a
  /// conditional branch or select to create a compare with a canonical
  /// (inverted) predicate which is then more likely to be matched with other
  /// values.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='5297' u='c' c='_ZL27canonicalizeCmpWithConstantRN4llvm8ICmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='5319' u='c' c='_ZN4llvm16InstCombinerImpl25canonicalizeICmpPredicateERNS_7CmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='1358' u='c' c='_ZL40tryToReuseConstantFromSelectInComparisonRN4llvm10SelectInstERNS_8ICmpInstERNS_16InstCombinerImplE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='2928' u='c' c='_ZN4llvm16InstCombinerImpl15visitBranchInstERNS_10BranchInstE'/>
