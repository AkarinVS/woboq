<dec f='llvm/clang/include/clang/Sema/Sema.h' l='5075' type='clang::ExprResult clang::Sema::ActOnDependentIdExpression(const clang::CXXScopeSpec &amp; SS, clang::SourceLocation TemplateKWLoc, const clang::DeclarationNameInfo &amp; NameInfo, bool isAddressOfOperand, const clang::TemplateArgumentListInfo * TemplateArgs)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='1216' u='c' c='_ZN5clang4Sema37ActOnNameClassifiedAsDependentNonTypeERKNS_12CXXScopeSpecEPNS_14IdentifierInfoENS_14SourceLocationEb'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='2473' u='c' c='_ZN5clang4Sema17ActOnIdExpressionEPNS_5ScopeERNS_12CXXScopeSpecENS_14SourceLocationERNS_13UnqualifiedIdEbbPNS_27CorrectionCandidateCallbackEbPNS_5TokenE'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='2496' u='c' c='_ZN5clang4Sema17ActOnIdExpressionEPNS_5ScopeERNS_12CXXScopeSpecENS_14SourceLocationERNS_13UnqualifiedIdEbbPNS_27CorrectionCandidateCallbackEbPNS_5TokenE'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='2505' u='c' c='_ZN5clang4Sema17ActOnIdExpressionEPNS_5ScopeERNS_12CXXScopeSpecENS_14SourceLocationERNS_13UnqualifiedIdEbbPNS_27CorrectionCandidateCallbackEbPNS_5TokenE'/>
<def f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='722' ll='764' type='clang::ExprResult clang::Sema::ActOnDependentIdExpression(const clang::CXXScopeSpec &amp; SS, clang::SourceLocation TemplateKWLoc, const clang::DeclarationNameInfo &amp; NameInfo, bool isAddressOfOperand, const clang::TemplateArgumentListInfo * TemplateArgs)'/>
<doc f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='719'>/// ActOnDependentIdExpression - Handle a dependent id-expression that
/// was just parsed.  This is only possible with an explicit scope
/// specifier naming a dependent type.</doc>
