<dec f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='784' type='bool llvm::slpvectorizer::BoUpSLP::isLoadCombineCandidate() const'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3937' ll='3948' type='bool llvm::slpvectorizer::BoUpSLP::isLoadCombineCandidate() const'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='5989' u='c' c='_ZN4llvm17SLPVectorizerPass19vectorizeStoreChainENS_8ArrayRefIPNS_5ValueEEERNS_13slpvectorizer7BoUpSLPEj'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='777'>/// Assume that a vector of stores of bitwise-or/shifted/zexted loaded values
  /// can be load combined in the backend. Load combining may not be allowed in
  /// the IR optimizer, so we do not want to alter the pattern. For example,
  /// partially transforming a scalar bswap() pattern into vector code is
  /// effectively impossible for the backend to undo.
  /// TODO: If load combining is allowed in the IR optimizer, this analysis
  ///       may not be necessary.</doc>
