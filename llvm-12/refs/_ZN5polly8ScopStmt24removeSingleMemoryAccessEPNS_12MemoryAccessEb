<dec f='llvm/polly/include/polly/ScopInfo.h' l='1520' type='void polly::ScopStmt::removeSingleMemoryAccess(polly::MemoryAccess * MA, bool AfterHoisting = true)'/>
<doc f='llvm/polly/include/polly/ScopInfo.h' l='1510'>/// Remove @p MA from this statement.
  ///
  /// In contrast to removeMemoryAccess(), no other access will be eliminated.
  ///
  /// @param MA            The MemoryAccess to be removed.
  /// @param AfterHoisting If true, also remove from data access lists.
  ///                      These lists are filled during
  ///                      ScopBuilder::buildAccessRelations. Therefore, if this
  ///                      method is called before buildAccessRelations, false
  ///                      must be passed.</doc>
<def f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='1352' ll='1368' type='void polly::ScopStmt::removeSingleMemoryAccess(polly::MemoryAccess * MA, bool AfterHoisting = true)'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='1778' u='c' c='_ZN5polly4Scop11removeStmtsEN4llvm12function_refIFbRNS_8ScopStmtEEEEb'/>
<use f='llvm/polly/lib/Transform/ForwardOpTree.cpp' l='935' u='c' c='_ZN12_GLOBAL__N_117ForwardOpTreeImpl22applyForwardingActionsEPN5polly8ScopStmtEPN4llvm5ValueEPNS1_12MemoryAccessE'/>
<use f='llvm/polly/lib/Transform/Simplify.cpp' l='195' u='c' c='_ZN5polly15SimplifyVisitor16removeOverwritesEv'/>
<use f='llvm/polly/lib/Transform/Simplify.cpp' l='327' u='c' c='_ZN5polly15SimplifyVisitor14coalesceWritesEv'/>
<use f='llvm/polly/lib/Transform/Simplify.cpp' l='448' u='c' c='_ZN5polly15SimplifyVisitor21removeRedundantWritesEv'/>
<use f='llvm/polly/lib/Transform/Simplify.cpp' l='514' u='c' c='_ZN5polly15SimplifyVisitor26removeEmptyPartialAccessesEv'/>
<use f='llvm/polly/lib/Transform/Simplify.cpp' l='543' u='c' c='_ZN5polly15SimplifyVisitor12markAndSweepEPN4llvm8LoopInfoE'/>
