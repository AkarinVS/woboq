<dec f='llvm/polly/include/polly/CodeGen/Utils.h' l='69' type='std::pair&lt;BBPair, llvm::BranchInst *&gt; polly::executeScopConditionally(polly::Scop &amp; S, llvm::Value * RTC, llvm::DominatorTree &amp; DT, llvm::RegionInfo &amp; RI, llvm::LoopInfo &amp; LI)'/>
<use f='llvm/polly/lib/CodeGen/CodeGeneration.cpp' l='221' u='c' c='_ZL7CodeGenRN5polly4ScopERNS_10IslAstInfoERN4llvm8LoopInfoERNS4_13DominatorTreeERNS4_15ScalarEvolutionERNS4_10RegionInfoE'/>
<doc f='llvm/polly/include/polly/CodeGen/Utils.h' l='32'>/// Execute a Scop conditionally wrt @p RTC.
///
/// In the CFG the optimized code of the Scop is generated next to the
/// original code. Both the new and the original version of the code remain
/// in the CFG. A branch statement decides which version is executed based on
/// the runtime value of @p RTC.
///
/// Before transformation:
///
///                        bb0
///                         |
///                     orig_scop
///                         |
///                        bb1
///
/// After transformation:
///                        bb0
///                         |
///                  polly.splitBlock
///                     /       \.
///                     |     startBlock
///                     |        |
///               orig_scop   new_scop
///                     \      /
///                      \    /
///                        bb1 (joinBlock)
///
/// @param S   The Scop to execute conditionally.
/// @param P   A reference to the pass calling this function.
/// @param RTC The runtime condition checked before executing the new SCoP.
///
/// @return  An std::pair:
///              - The first element is a BBPair of (StartBlock, EndBlock).
///              - The second element is the BranchInst which conditionally
///                branches to the SCoP based on the RTC.
///</doc>
<def f='llvm/polly/lib/CodeGen/Utils.cpp' l='77' ll='219' type='std::pair&lt;polly::BBPair, BranchInst *&gt; polly::executeScopConditionally(polly::Scop &amp; S, llvm::Value * RTC, llvm::DominatorTree &amp; DT, llvm::RegionInfo &amp; RI, llvm::LoopInfo &amp; LI)'/>
