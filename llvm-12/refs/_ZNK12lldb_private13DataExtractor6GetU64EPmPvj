<dec f='llvm/lldb/include/lldb/Utility/DataExtractor.h' l='758' type='void * lldb_private::DataExtractor::GetU64(lldb::offset_t * offset_ptr, void * dst, uint32_t count) const'/>
<doc f='llvm/lldb/include/lldb/Utility/DataExtractor.h' l='735'>/// Extract \a count uint64_t values from \a *offset_ptr.
  ///
  /// Extract \a count uint64_t values from the binary data at the offset
  /// pointed to by \a offset_ptr, and advance the offset on success. The
  /// extracted values are copied into \a dst.
  ///
  /// \param[in,out] offset_ptr
  ///     A pointer to an offset within the data that will be advanced
  ///     by the appropriate number of bytes if the value is extracted
  ///     correctly. If the offset is out of bounds or there are not
  ///     enough bytes to extract this value, the offset will be left
  ///     unmodified.
  ///
  /// \param[out] dst
  ///     A buffer to copy \a count uint64_t values into. \a dst must
  ///     be large enough to hold all requested data.
  ///
  /// \param[in] count
  ///     The number of uint64_t values to extract.
  ///
  /// \return
  ///     \a dst if all values were properly extracted and copied,
  ///     nullptr otherwise.</doc>
<use f='llvm/lldb/source/Plugins/DynamicLoader/MacOSX-DYLD/DynamicLoaderMacOSXDYLD.cpp' l='860' u='c' c='_ZN23DynamicLoaderMacOSXDYLD17ParseLoadCommandsERKN12lldb_private13DataExtractorERNS0_19DynamicLoaderDarwin9ImageInfoEPNS0_8FileSpecE'/>
<use f='llvm/lldb/source/Plugins/ObjectFile/ELF/ELFHeader.cpp' l='350' u='c' c='_ZN3elf9ELFSymbol5ParseERKN12lldb_private13DataExtractorEPm'/>
<use f='llvm/lldb/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp' l='5555' u='c' c='_ZN15ObjectFileMachO25GetCorefileMainBinaryInfoERmRN12lldb_private4UUIDERNS1_10ObjectFile10BinaryTypeE'/>
<def f='llvm/lldb/source/Utility/DataExtractor.cpp' l='496' ll='519' type='void * lldb_private::DataExtractor::GetU64(lldb::offset_t * offset_ptr, void * void_dst, uint32_t count) const'/>
<doc f='llvm/lldb/source/Utility/DataExtractor.cpp' l='491'>// GetU64
//
// Get multiple consecutive 64 bit values. Return true if the entire read
// succeeds and increment the offset pointed to by offset_ptr, else return
// false and leave the offset pointed to by offset_ptr unchanged.</doc>
