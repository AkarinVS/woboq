<def f='llvm/clang/include/clang/Basic/Lambda.h' l='33' ll='39'/>
<use f='llvm/clang/include/clang/AST/LambdaCapture.h' l='73' c='_ZN5clang13LambdaCaptureC1ENS_14SourceLocationEbNS_17LambdaCaptureKindEPNS_7VarDeclES1_'/>
<use f='llvm/clang/include/clang/AST/LambdaCapture.h' l='78' c='_ZNK5clang13LambdaCapture14getCaptureKindEv'/>
<use f='llvm/clang/include/clang/Sema/DeclSpec.h' l='2668'/>
<use f='llvm/clang/include/clang/Sema/DeclSpec.h' l='2677' c='_ZN5clang16LambdaIntroducer13LambdaCaptureC1ENS_17LambdaCaptureKindENS_14SourceLocationEPNS_14IdentifierInfoES3_NS_21LambdaCaptureInitKindENS_12Action10970978'/>
<use f='llvm/clang/include/clang/Sema/DeclSpec.h' l='2696' c='_ZN5clang16LambdaIntroducer10addCaptureENS_17LambdaCaptureKindENS_14SourceLocationEPNS_14IdentifierInfoES2_NS_21LambdaCaptureInitKindENS_12ActionResul2337769'/>
<doc f='llvm/clang/include/clang/Basic/Lambda.h' l='28'>/// The different capture forms in a lambda introducer
///
/// C++11 allows capture of \c this, or of local variables by copy or
/// by reference.  C++1y also allows &quot;init-capture&quot;, where the initializer
/// is an expression.</doc>
<use f='llvm/clang/lib/AST/ExprCXX.cpp' l='1084' c='_ZN5clang13LambdaCaptureC1ENS_14SourceLocationEbNS_17LambdaCaptureKindEPNS_7VarDeclES1_'/>
<use f='llvm/clang/lib/AST/ExprCXX.cpp' l='1113' c='_ZNK5clang13LambdaCapture14getCaptureKindEv'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='908' c='_ZN5clang6Parser21ParseLambdaIntroducerERNS_16LambdaIntroducerEPNS0_30LambdaIntroducerTentativeParseE'/>
<use f='llvm/clang/lib/Sema/SemaLambda.cpp' l='1855' c='_ZN5clang4Sema15BuildLambdaExprENS_14SourceLocationES1_PNS_4sema15LambdaScopeInfoE'/>
<use f='llvm/clang/lib/Serialization/ASTReaderDecl.cpp' l='1760' c='_ZN5clang13ASTDeclReader21ReadCXXDefinitionDataERNS_13CXXRecordDecl14DefinitionDataEPKS1_'/>
