<def f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='2406' ll='2409' type='llvm::Value * llvm::IRBuilderBase::CreateFCmpS(CmpInst::Predicate P, llvm::Value * LHS, llvm::Value * RHS, const llvm::Twine &amp; Name = &quot;&quot;, llvm::MDNode * FPMathTag = nullptr)'/>
<doc f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='2403'>// Create a signaling floating-point comparison (i.e. one that raises an FP
  // exception whenever an input is any NaN, signaling or quiet).
  // Note that this differs from CreateFCmp only if IsFPConstrained is true.</doc>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='12149' u='c' c='_ZN5clang7CodeGen15CodeGenFunction18EmitX86BuiltinExprEjPKNS_8CallExprE'/>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='14182' u='c' c='_ZN5clang7CodeGen15CodeGenFunction18EmitX86BuiltinExprEjPKNS_8CallExprE'/>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='4044' u='c' c='_ZN12_GLOBAL__N_117ScalarExprEmitter11EmitCompareEPKN5clang14BinaryOperatorEN4llvm7CmpInst9PredicateES7_S7_b'/>
