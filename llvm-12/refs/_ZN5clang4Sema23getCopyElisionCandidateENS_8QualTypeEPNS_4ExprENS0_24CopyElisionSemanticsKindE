<dec f='llvm/clang/include/clang/Sema/Sema.h' l='4730' type='clang::VarDecl * clang::Sema::getCopyElisionCandidate(clang::QualType ReturnType, clang::Expr * E, clang::Sema::CopyElisionSemanticsKind CESK)'/>
<use f='llvm/clang/lib/Sema/SemaCoroutine.cpp' l='999' u='c' c='_ZN5clang4Sema17BuildCoreturnStmtENS_14SourceLocationEPNS_4ExprEb'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='875' u='c' c='_ZN5clang4Sema13BuildCXXThrowENS_14SourceLocationEPNS_4ExprEb'/>
<def f='llvm/clang/lib/Sema/SemaStmt.cpp' l='3042' ll='3056' type='clang::VarDecl * clang::Sema::getCopyElisionCandidate(clang::QualType ReturnType, clang::Expr * E, clang::Sema::CopyElisionSemanticsKind CESK)'/>
<use f='llvm/clang/lib/Sema/SemaStmt.cpp' l='3230' u='c' c='_ZN5clang4Sema31PerformMoveOrCopyInitializationERKNS_17InitializedEntityEPKNS_7VarDeclENS_8QualTypeEPNS_4ExprEb'/>
<use f='llvm/clang/lib/Sema/SemaStmt.cpp' l='3235' u='c' c='_ZN5clang4Sema31PerformMoveOrCopyInitializationERKNS_17InitializedEntityEPKNS_7VarDeclENS_8QualTypeEPNS_4ExprEb'/>
<use f='llvm/clang/lib/Sema/SemaStmt.cpp' l='3271' u='c' c='_ZN5clang4Sema31PerformMoveOrCopyInitializationERKNS_17InitializedEntityEPKNS_7VarDeclENS_8QualTypeEPNS_4ExprEb'/>
<use f='llvm/clang/lib/Sema/SemaStmt.cpp' l='3456' u='c' c='_ZN5clang4Sema23ActOnCapScopeReturnStmtENS_14SourceLocationEPNS_4ExprE'/>
<use f='llvm/clang/lib/Sema/SemaStmt.cpp' l='3469' u='c' c='_ZN5clang4Sema23ActOnCapScopeReturnStmtENS_14SourceLocationEPNS_4ExprE'/>
<use f='llvm/clang/lib/Sema/SemaStmt.cpp' l='3868' u='c' c='_ZN5clang4Sema15BuildReturnStmtENS_14SourceLocationEPNS_4ExprE'/>
<doc f='llvm/clang/lib/Sema/SemaStmt.cpp' l='3023'>/// Determine whether the given expression is a candidate for
/// copy elision in either a return statement or a throw expression.
///
/// \param ReturnType If we&apos;re determining the copy elision candidate for
/// a return statement, this is the return type of the function. If we&apos;re
/// determining the copy elision candidate for a throw expression, this will
/// be a NULL type.
///
/// \param E The expression being returned from the function or block, or
/// being thrown.
///
/// \param CESK Whether we allow function parameters or
/// id-expressions that could be moved out of the function to be considered NRVO
/// candidates. C++ prohibits these for NRVO itself, but we re-use this logic to
/// determine whether we should try to move as part of a return or throw (which
/// does allow function parameters).
///
/// \returns The NRVO candidate variable, if the return statement may use the
/// NRVO, or NULL if there is no such candidate.</doc>
