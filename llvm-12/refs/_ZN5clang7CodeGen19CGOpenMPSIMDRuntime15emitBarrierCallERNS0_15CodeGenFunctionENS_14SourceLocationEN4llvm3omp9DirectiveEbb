<dec f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='2021' type='void clang::CodeGen::CGOpenMPSIMDRuntime::emitBarrierCall(clang::CodeGen::CodeGenFunction &amp; CGF, clang::SourceLocation Loc, clang::OpenMPDirectiveKind Kind, bool EmitChecks = true, bool ForceSimpleCall = false)'/>
<doc f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='2013'>/// Emit an implicit/explicit barrier for OpenMP threads.
  /// \param Kind Directive for which this implicit barrier call must be
  /// generated. Must be OMPD_barrier for explicit barrier generation.
  /// \param EmitChecks true if need to emit checks for cancellation barriers.
  /// \param ForceSimpleCall true simple barrier call must be emitted, false if
  /// runtime class decides which one to emit (simple or with cancellation
  /// checks).
  ///</doc>
<inh f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='2519' c='_ZN5clang7CodeGen15CGOpenMPRuntime15emitBarrierCallERNS0_15CodeGenFunctionENS_14SourceLocationEN4llvm3omp9DirectiveEbb'/>
<def f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='12494' ll='12500' type='void clang::CodeGen::CGOpenMPSIMDRuntime::emitBarrierCall(clang::CodeGen::CodeGenFunction &amp; CGF, clang::SourceLocation Loc, clang::OpenMPDirectiveKind Kind, bool EmitChecks = true, bool ForceSimpleCall = false)'/>
