<dec f='llvm/clang/include/clang/AST/Type.h' l='4703' type='bool clang::AttributedType::isQualifier() const'/>
<use f='llvm/clang/include/clang/AST/TypeLoc.h' l='861' u='c' c='_ZNK5clang17AttributedTypeLoc11isQualifierEv'/>
<doc f='llvm/clang/include/clang/AST/Type.h' l='4688'>/// Does this attribute behave like a type qualifier?
  ///
  /// A type qualifier adjusts a type to provide specialized rules for
  /// a specific object, like the standard const and volatile qualifiers.
  /// This includes attributes controlling things like nullability,
  /// address spaces, and ARC ownership.  The value of the object is still
  /// largely described by the modified type.
  ///
  /// In contrast, many type attributes &quot;rewrite&quot; their modified type to
  /// produce a fundamentally different type, not necessarily related in any
  /// formalizable way to the original type.  For example, calling convention
  /// and vector attributes are not simple type qualifiers.
  ///
  /// Type qualifiers are often, but not always, reflected in the canonical
  /// type.</doc>
<def f='llvm/clang/lib/AST/Type.cpp' l='3505' ll='3527' type='bool clang::AttributedType::isQualifier() const'/>
