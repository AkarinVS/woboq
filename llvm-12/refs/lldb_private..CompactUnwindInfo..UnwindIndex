<def f='llvm/lldb/include/lldb/Symbol/CompactUnwindInfo.h' l='52' ll='76'/>
<use f='llvm/lldb/include/lldb/Symbol/CompactUnwindInfo.h' l='69' c='_ZNK12lldb_private17CompactUnwindInfo11UnwindIndexltERKS1_'/>
<use f='llvm/lldb/include/lldb/Symbol/CompactUnwindInfo.h' l='73' c='_ZNK12lldb_private17CompactUnwindInfo11UnwindIndexeqERKS1_'/>
<use f='llvm/lldb/include/lldb/Symbol/CompactUnwindInfo.h' l='151'/>
<use f='llvm/lldb/source/Symbol/CompactUnwindInfo.cpp' l='361' c='_ZN12lldb_private17CompactUnwindInfo9ScanIndexERKSt10shared_ptrINS_7ProcessEE'/>
<use f='llvm/lldb/source/Symbol/CompactUnwindInfo.cpp' l='514' c='_ZN12lldb_private17CompactUnwindInfo31GetCompactUnwindInfoForFunctionERNS_6TargetENS_7AddressERNS0_12FunctionInfoE'/>
<size>20</size>
<doc f='llvm/lldb/include/lldb/Symbol/CompactUnwindInfo.h' l='47'>// The top level index entries of the compact unwind info
  //   (internal representation of struct
  //   unwind_info_section_header_index_entry)
  // There are relatively few of these (one per 500/1000 functions, depending
  // on format) so creating them on first scan will not be too costly.</doc>
<mbr r='lldb_private::CompactUnwindInfo::UnwindIndex::function_offset' o='0' t='uint32_t'/>
<mbr r='lldb_private::CompactUnwindInfo::UnwindIndex::second_level' o='32' t='uint32_t'/>
<mbr r='lldb_private::CompactUnwindInfo::UnwindIndex::lsda_array_start' o='64' t='uint32_t'/>
<mbr r='lldb_private::CompactUnwindInfo::UnwindIndex::lsda_array_end' o='96' t='uint32_t'/>
<mbr r='lldb_private::CompactUnwindInfo::UnwindIndex::sentinal_entry' o='128' t='bool'/>
<fun r='_ZN12lldb_private17CompactUnwindInfo11UnwindIndexC1Ev'/>
<fun r='_ZNK12lldb_private17CompactUnwindInfo11UnwindIndexltERKS1_'/>
<fun r='_ZNK12lldb_private17CompactUnwindInfo11UnwindIndexeqERKS1_'/>
