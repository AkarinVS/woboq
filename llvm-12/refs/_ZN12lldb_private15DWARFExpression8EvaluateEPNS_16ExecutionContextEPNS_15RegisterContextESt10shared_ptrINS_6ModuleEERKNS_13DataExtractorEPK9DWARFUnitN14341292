<dec f='llvm/lldb/include/lldb/Expression/DWARFExpression.h' l='203' type='static bool lldb_private::DWARFExpression::Evaluate(lldb_private::ExecutionContext * exe_ctx, lldb_private::RegisterContext * reg_ctx, lldb::ModuleSP opcode_ctx, const lldb_private::DataExtractor &amp; opcodes, const DWARFUnit * dwarf_cu, const lldb::RegisterKind reg_set, const lldb_private::Value * initial_value_ptr, const lldb_private::Value * object_address_ptr, lldb_private::Value &amp; result, lldb_private::Status * error_ptr)'/>
<doc f='llvm/lldb/include/lldb/Expression/DWARFExpression.h' l='165'>/// Evaluate a DWARF location expression in a particular context
  ///
  /// \param[in] exe_ctx
  ///     The execution context in which to evaluate the location
  ///     expression.  The location expression may access the target&apos;s
  ///     memory, especially if it comes from the expression parser.
  ///
  /// \param[in] opcode_ctx
  ///     The module which defined the expression.
  ///
  /// \param[in] opcodes
  ///     This is a static method so the opcodes need to be provided
  ///     explicitly.
  ///
  ///  \param[in] reg_ctx
  ///     An optional parameter which provides a RegisterContext for use
  ///     when evaluating the expression (i.e. for fetching register values).
  ///     Normally this will come from the ExecutionContext&apos;s StackFrame but
  ///     in the case where an expression needs to be evaluated while building
  ///     the stack frame list, this short-cut is available.
  ///
  /// \param[in] reg_set
  ///     The call-frame-info style register kind.
  ///
  /// \param[in] initial_value_ptr
  ///     A value to put on top of the interpreter stack before evaluating
  ///     the expression, if the expression is parametrized.  Can be NULL.
  ///
  /// \param[in] result
  ///     A value into which the result of evaluating the expression is
  ///     to be placed.
  ///
  /// \param[in] error_ptr
  ///     If non-NULL, used to report errors in expression evaluation.
  ///
  /// \return
  ///     True on success; false otherwise.  If error_ptr is non-NULL,
  ///     details of the failure are provided through it.</doc>
<use f='llvm/lldb/source/Expression/DWARFExpression.cpp' l='891' u='c' c='_ZNK12lldb_private15DWARFExpression8EvaluateEPNS_16ExecutionContextEPNS_15RegisterContextEmPKNS_5ValueES7_RS5_PNS_6StatusE'/>
<use f='llvm/lldb/source/Expression/DWARFExpression.cpp' l='902' u='c' c='_ZNK12lldb_private15DWARFExpression8EvaluateEPNS_16ExecutionContextEPNS_15RegisterContextEmPKNS_5ValueES7_RS5_PNS_6StatusE'/>
<def f='llvm/lldb/source/Expression/DWARFExpression.cpp' l='907' ll='2577' type='static bool lldb_private::DWARFExpression::Evaluate(lldb_private::ExecutionContext * exe_ctx, lldb_private::RegisterContext * reg_ctx, lldb::ModuleSP module_sp, const lldb_private::DataExtractor &amp; opcodes, const DWARFUnit * dwarf_cu, const lldb::RegisterKind reg_kind, const lldb_private::Value * initial_value_ptr, const lldb_private::Value * object_address_ptr, lldb_private::Value &amp; result, lldb_private::Status * error_ptr)'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp' l='2421' u='c' c='_ZN19DWARFASTParserClang17ParseSingleMemberERK8DWARFDIES2_RKN12lldb_private12CompilerTypeERSt6vectorIiSaIiEEN4lldb10AccessTypeERS7_INS_27DelayedAddObj8488390'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp' l='2826' u='c' c='_ZN19DWARFASTParserClang17ParseChildMembersERK8DWARFDIERN12lldb_private12CompilerTypeERSt6vectorISt10unique_ptrIN5clang16CXXBaseSpecifierESt14default_4707216'/>
<use f='llvm/lldb/source/Target/RegisterContext.cpp' l='88' u='c' c='_ZN12lldb_private15RegisterContext25UpdateDynamicRegisterSizeERKNS_8ArchSpecEPNS_12RegisterInfoE'/>
<use f='llvm/lldb/unittests/Expression/DWARFExpressionTest.cpp' l='29' u='c' c='_ZL8EvaluateN4llvm8ArrayRefIhEESt10shared_ptrIN12lldb_private6ModuleEEP9DWARFUnit'/>
