<dec f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='44' type='llvm::FunctionPass * llvm::createSCCPPass()'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='40'>//===----------------------------------------------------------------------===//
//
// SCCP - Sparse conditional constant propagation.
//</doc>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='167' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='1074' u='c' c='_ZL16postSplitCleanupRN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='476' u='c' c='_ZN4llvm18PassManagerBuilder31addFunctionSimplificationPassesERNS_6legacy15PassManagerBaseE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='1092' u='c' c='_ZN4llvm18PassManagerBuilder24addLTOOptimizationPassesERNS_6legacy15PassManagerBaseE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/SCCP.cpp' l='1815' type='llvm::FunctionPass * llvm::createSCCPPass()'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/SCCP.cpp' l='1814'>// createSCCPPass - This is the public interface to this file.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/Scalar.cpp' l='237' u='c' c='LLVMAddSCCPPass'/>
<use f='llvm/polly/lib/CodeGen/CodegenCleanup.cpp' l='93' u='c' c='_ZN12_GLOBAL__N_114CodegenCleanup16doInitializationERN4llvm6ModuleE'/>
