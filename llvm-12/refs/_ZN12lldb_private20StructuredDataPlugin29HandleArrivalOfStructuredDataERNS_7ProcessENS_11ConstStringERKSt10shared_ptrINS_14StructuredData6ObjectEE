<dec f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='95' type='void lldb_private::StructuredDataPlugin::HandleArrivalOfStructuredData(lldb_private::Process &amp; process, lldb_private::ConstString type_name, const StructuredData::ObjectSP &amp; object_sp)'/>
<doc f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='69'>/// Handle the arrival of asynchronous structured data from the process.
  ///
  /// When asynchronous structured data arrives from the process monitor,
  /// it is immediately delivered to the plugin mapped for that feature
  /// if one exists.  The structured data that arrives from a process
  /// monitor must be a dictionary, and it must have a string field named
  /// &quot;type&quot; that must contain the StructuredData feature name set as the
  /// value.  This is the manner in which the data is routed to the proper
  /// plugin instance.
  ///
  /// \param[in] process
  ///     The process instance that just received the structured data.
  ///     This will always be the same process for a given instance of
  ///     a plugin.
  ///
  /// \param[in] type_name
  ///     The name of the feature tag for the asynchronous structured data.
  ///     Note this data will also be present in the \b object_sp dictionary
  ///     under the string value with key &quot;type&quot;.
  ///
  /// \param[in] object_sp
  ///     A shared pointer to the structured data that arrived.  This must
  ///     be a dictionary.  The only key required is the aforementioned
  ///     key named &quot;type&quot; that must be a string value containing the
  ///     structured data type name.</doc>
<ovr f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.cpp' l='1089' c='_ZN12lldb_private23StructuredDataDarwinLog29HandleArrivalOfStructuredDataERNS_7ProcessENS_11ConstStringERKSt10shared_ptrINS_14StructuredData6ObjectEE'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='5945' u='c' c='_ZN12lldb_private7Process24RouteAsyncStructuredDataESt10shared_ptrINS_14StructuredData6ObjectEE'/>
