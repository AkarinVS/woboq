<dec f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='374' type='llvm::ConstantRange llvm::ConstantRange::subWithNoWrap(const llvm::ConstantRange &amp; Other, unsigned int NoWrapKind, llvm::ConstantRange::PreferredRangeType RangeType = Smallest) const'/>
<doc f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='369'>/// Return a new range representing the possible values resulting
  /// from an subtraction with wrap type \p NoWrapKind of a value in this
  /// range and a value in \p Other.
  /// If the result range is disjoint, the preferred range is determined by the
  /// \p PreferredRangeType.</doc>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='846' u='c' c='_ZNK4llvm13ConstantRange19overflowingBinaryOpENS_11Instruction9BinaryOpsERKS0_j'/>
<def f='llvm/llvm/lib/IR/ConstantRange.cpp' l='969' ll='997' type='llvm::ConstantRange llvm::ConstantRange::subWithNoWrap(const llvm::ConstantRange &amp; Other, unsigned int NoWrapKind, llvm::ConstantRange::PreferredRangeType RangeType = Smallest) const'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1025' u='c' c='_ZN12_GLOBAL__N_136ConstantRangeTest_SubWithNoWrap_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1032' u='c' c='_ZN12_GLOBAL__N_136ConstantRangeTest_SubWithNoWrap_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1039' u='c' c='_ZN12_GLOBAL__N_136ConstantRangeTest_SubWithNoWrap_Test8TestBodyEv'/>
