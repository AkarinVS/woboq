<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='297' type='llvm::TransformationMode llvm::hasUnrollTransformation(llvm::Loop * L)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='295'>/// @{
/// Get the mode for LLVM&apos;s supported loop transformations.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='222' u='c' c='_ZN4llvm26gatherUnrollingPreferencesEPNS_4LoopERNS_15ScalarEvolutionERKNS_19TargetTransformInfoEPNS_18BlockFrequencyInfoEPNS_18ProfileSummaryInfoEiNS_12420692'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='1037' u='c' c='_ZL15tryToUnrollLoopPN4llvm4LoopERNS_13DominatorTreeEPNS_8LoopInfoERNS_15ScalarEvolutionERKNS_19TargetTransformInfoERNS_15AssumptionCacheERNS_25Optimi16672969'/>
<use f='llvm/llvm/lib/Transforms/Scalar/WarnMissedTransforms.cpp' l='27' u='c' c='_ZL32warnAboutLeftoverTransformationsPN4llvm4LoopEPNS_25OptimizationRemarkEmitterE'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='426' ll='445' type='llvm::TransformationMode llvm::hasUnrollTransformation(llvm::Loop * L)'/>
