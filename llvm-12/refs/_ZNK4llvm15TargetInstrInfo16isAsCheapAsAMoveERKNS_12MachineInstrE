<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='368' ll='370' type='bool llvm::TargetInstrInfo::isAsCheapAsAMove(const llvm::MachineInstr &amp; MI) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='364'>/// Return true if the instruction is as cheap as a move instruction.
  ///
  /// Targets for different archs need to override this, and different
  /// micro-architectures can also be finely tuned inside.</doc>
<use f='llvm/llvm/lib/CodeGen/LiveRangeEdit.cpp' l='154' u='c' c='_ZN4llvm13LiveRangeEdit18canRematerializeAtERNS0_5RematEPNS_6VNInfoENS_9SlotIndexEb'/>
<use f='llvm/llvm/lib/CodeGen/MachineCSE.cpp' l='457' u='c' c='_ZN12_GLOBAL__N_110MachineCSE17isProfitableToCSEEN4llvm8RegisterES2_PNS1_17MachineBasicBlockEPNS1_12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='1159' u='c' c='_ZNK12_GLOBAL__N_115MachineLICMBase18IsCheapInstructionERN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/MachineSink.cpp' l='486' u='c' c='_ZN12_GLOBAL__N_114MachineSinking27isWorthBreakingCriticalEdgeERN4llvm12MachineInstrEPNS1_17MachineBasicBlockES5_'/>
<use f='llvm/llvm/lib/CodeGen/RegisterCoalescer.cpp' l='1284' u='c' c='_ZN12_GLOBAL__N_117RegisterCoalescer23reMaterializeTrivialDefERKN4llvm13CoalescerPairEPNS1_12MachineInstrERb'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='802' c='_ZNK4llvm16AArch64InstrInfo16isAsCheapAsAMoveERKNS_12MachineInstrE'/>
<ovr f='llvm/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp' l='552' c='_ZNK4llvm14RISCVInstrInfo16isAsCheapAsAMoveERKNS_12MachineInstrE'/>
