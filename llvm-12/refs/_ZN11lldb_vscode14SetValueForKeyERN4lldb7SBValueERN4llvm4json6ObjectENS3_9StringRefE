<dec f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='185' type='void lldb_vscode::SetValueForKey(lldb::SBValue &amp; v, llvm::json::Object &amp; object, llvm::StringRef key)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='164'>/// Emplace the string value from an SBValue into the supplied object
/// using \a key as the key that will contain the value.
///
/// The value is what we will display in VS Code. Some SBValue objects
/// can have a value and/or a summary. If a value has both, we
/// combine the value and the summary into one string. If we only have a
/// value or summary, then that is considered the value. If there is
/// no value and no summary then the value is the type name followed by
/// the address of the type if it has an address.
///
///
/// \param[in] v
///     A lldb::SBValue object to extract the string value from
///
///
/// \param[in] object
///     The object to place the value object into
///
///
/// \param[in] key
///     The key name to use when inserting the value object we create</doc>
<def f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='131' ll='154' type='void lldb_vscode::SetValueForKey(lldb::SBValue &amp; v, llvm::json::Object &amp; object, llvm::StringRef key)'/>
<use f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='975' u='c' c='_ZN11lldb_vscode14CreateVariableEN4lldb7SBValueEllb'/>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='1154' u='c' c='_ZN12_GLOBAL__N_116request_evaluateERKN4llvm4json6ObjectE'/>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='2751' u='c' c='_ZN12_GLOBAL__N_119request_setVariableERKN4llvm4json6ObjectE'/>
