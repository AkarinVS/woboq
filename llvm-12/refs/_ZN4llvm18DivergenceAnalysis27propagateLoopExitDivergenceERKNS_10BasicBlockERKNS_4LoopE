<dec f='llvm/llvm/include/llvm/Analysis/DivergenceAnalysis.h' l='98' type='void llvm::DivergenceAnalysis::propagateLoopExitDivergence(const llvm::BasicBlock &amp; DivExit, const llvm::Loop &amp; DivLoop)'/>
<def f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='245' ll='264' type='void llvm::DivergenceAnalysis::propagateLoopExitDivergence(const llvm::BasicBlock &amp; DivExit, const llvm::Loop &amp; InnerDivLoop)'/>
<use f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='309' u='c' c='_ZN4llvm18DivergenceAnalysis24analyzeControlDivergenceERKNS_11InstructionE'/>
<doc f='llvm/llvm/include/llvm/Analysis/DivergenceAnalysis.h' l='95'>/// \brief Identify all Instructions that become divergent because \p DivExit
  /// is a divergent loop exit of \p DivLoop. Mark those instructions as
  /// divergent and push them on the worklist.</doc>
