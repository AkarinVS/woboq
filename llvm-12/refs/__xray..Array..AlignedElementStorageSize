<dec f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='59' type='const uint64_t'/>
<use f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='157' u='r' c='__xray::Array::Iterator::operator*'/>
<use f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='372' u='r' c='__xray::Array::AppendEmplace'/>
<use f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='404' u='r' c='__xray::Array::Append'/>
<use f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='424' u='r' c='__xray::Array::operator[]'/>
<doc f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='41'>// Each segment of the array will be laid out with the following assumptions:
  //
  //   - Each segment will be on a cache-line address boundary (kCacheLineSize
  //     aligned).
  //
  //   - The elements will be accessed through an aligned pointer, dependent on
  //     the alignment of T.
  //
  //   - Each element is at least two-pointers worth from the beginning of the
  //     Segment, aligned properly, and the rest of the elements are accessed
  //     through appropriate alignment.
  //
  // We then compute the size of the segment to follow this logic:
  //
  //   - Compute the number of elements that can fit within
  //     kCacheLineSize-multiple segments, minus the size of two pointers.
  //
  //   - Request cacheline-multiple sized elements from the allocator.</doc>
