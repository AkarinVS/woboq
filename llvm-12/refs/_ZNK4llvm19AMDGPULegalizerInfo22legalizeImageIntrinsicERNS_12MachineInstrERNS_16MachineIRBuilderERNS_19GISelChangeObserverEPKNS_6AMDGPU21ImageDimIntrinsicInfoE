<dec f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.h' l='174' type='bool llvm::AMDGPULegalizerInfo::legalizeImageIntrinsic(llvm::MachineInstr &amp; MI, llvm::MachineIRBuilder &amp; B, llvm::GISelChangeObserver &amp; Observer, const AMDGPU::ImageDimIntrinsicInfo * ImageDimIntr) const'/>
<def f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='4077' ll='4449' type='bool llvm::AMDGPULegalizerInfo::legalizeImageIntrinsic(llvm::MachineInstr &amp; MI, llvm::MachineIRBuilder &amp; B, llvm::GISelChangeObserver &amp; Observer, const AMDGPU::ImageDimIntrinsicInfo * Intr) const'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='4833' u='c' c='_ZNK4llvm19AMDGPULegalizerInfo17legalizeIntrinsicERNS_15LegalizerHelperERNS_12MachineInstrE'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='4064'>/// Rewrite image intrinsics to use register layouts expected by the subtarget.
///
/// Depending on the subtarget, load/store with 16-bit element data need to be
/// rewritten to use the low half of 32-bit registers, or directly use a packed
/// layout. 16-bit addresses should also sometimes be packed into 32-bit
/// registers.
///
/// We don&apos;t want to directly select image instructions just yet, but also want
/// to exposes all register repacking to the legalizer/combiners. We also don&apos;t
/// want a selected instrution entering RegBankSelect. In order to avoid
/// defining a multitude of intermediate image instructions, directly hack on
/// the intrinsic&apos;s arguments. In cases like a16 addreses, this requires padding
/// now unnecessary arguments with $noreg.</doc>
