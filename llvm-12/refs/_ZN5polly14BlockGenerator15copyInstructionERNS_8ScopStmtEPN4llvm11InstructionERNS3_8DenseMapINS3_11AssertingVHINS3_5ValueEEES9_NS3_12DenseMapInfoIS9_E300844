<dec f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='572' type='void polly::BlockGenerator::copyInstruction(polly::ScopStmt &amp; Stmt, llvm::Instruction * Inst, polly::ValueMapT &amp; BBMap, llvm::LoopToScevMapT &amp; LTS, isl_id_to_ast_expr * NewAccesses)'/>
<def f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='356' ll='396' type='void polly::BlockGenerator::copyInstruction(polly::ScopStmt &amp; Stmt, llvm::Instruction * Inst, polly::ValueMapT &amp; BBMap, llvm::LoopToScevMapT &amp; LTS, isl_id_to_ast_expr * NewAccesses)'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='463' u='c' c='_ZN5polly14BlockGenerator6copyBBERNS_8ScopStmtEPN4llvm10BasicBlockES5_RNS3_8DenseMapINS3_11AssertingVHINS3_5ValueEEES9_NS3_12DenseMapInfoIS9_EENS3_6de11627821'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='466' u='c' c='_ZN5polly14BlockGenerator6copyBBERNS_8ScopStmtEPN4llvm10BasicBlockES5_RNS3_8DenseMapINS3_11AssertingVHINS3_5ValueEEES9_NS3_12DenseMapInfoIS9_EENS3_6de11627821'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1273' u='c' c='_ZN5polly20VectorBlockGenerator18copyInstScalarizedERNS_8ScopStmtEPN4llvm11InstructionERNS3_8DenseMapINS3_11AssertingVHINS3_5ValueEEES9_NS3_12DenseMap15883421'/>
<doc f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='553'>/// Copy a single Instruction.
  ///
  /// This copies a single Instruction and updates references to old values
  /// with references to new values, as defined by GlobalMap and BBMap.
  ///
  /// @param Stmt        The statement to code generate.
  /// @param Inst        The instruction to copy.
  /// @param BBMap       A mapping from old values to their new values
  ///                    (for values recalculated within this basic block).
  /// @param GlobalMap   A mapping from old values to their new values
  ///                    (for values recalculated in the new ScoP, but not
  ///                    within this basic block).
  /// @param LTS         A mapping from loops virtual canonical induction
  ///                    variable to their new values
  ///                    (for values recalculated in the new ScoP, but not
  ///                     within this basic block).
  /// @param NewAccesses A map from memory access ids to new ast expressions,
  ///                    which may contain new access expressions for certain
  ///                    memory accesses.</doc>
