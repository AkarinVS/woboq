<dec f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='398' type='void llvm::BranchProbabilityInfo::propagateEstimatedBlockWeight(const llvm::BranchProbabilityInfo::LoopBlock &amp; LoopBB, llvm::DominatorTree * DT, llvm::PostDominatorTree * PDT, uint32_t BBWeight, SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; WorkList, SmallVectorImpl&lt;llvm::BranchProbabilityInfo::LoopBlock&gt; &amp; LoopWorkList)'/>
<doc f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='396'>/// Starting from \p LoopBB (including \p LoopBB itself) propagate \p BBWeight
  /// up the domination tree.</doc>
<def f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='682' ll='713' type='void llvm::BranchProbabilityInfo::propagateEstimatedBlockWeight(const llvm::BranchProbabilityInfo::LoopBlock &amp; LoopBB, llvm::DominatorTree * DT, llvm::PostDominatorTree * PDT, uint32_t BBWeight, SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; BlockWorkList, SmallVectorImpl&lt;llvm::BranchProbabilityInfo::LoopBlock&gt; &amp; LoopWorkList)'/>
<use f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='771' u='c' c='_ZN4llvm21BranchProbabilityInfo27computeEestimateBlockWeightERKNS_8FunctionEPNS_13DominatorTreeEPNS_17PostDominatorTreeE'/>
<use f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='819' u='c' c='_ZN4llvm21BranchProbabilityInfo27computeEestimateBlockWeightERKNS_8FunctionEPNS_13DominatorTreeEPNS_17PostDominatorTreeE'/>
<doc f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='670'>// Starting from \p BB traverse through dominator blocks and assign \p BBWeight
// to all such blocks that are post dominated by \BB. In other words to all
// blocks that the one is executed if and only if another one is executed.
// Importantly, we skip loops here for two reasons. First weights of blocks in
// a loop should be scaled by trip count (yet possibly unknown). Second there is
// no any value in doing that because that doesn&apos;t give any additional
// information regarding distribution of probabilities inside the loop.
// Exception is loop &apos;enter&apos; and &apos;exit&apos; edges that are handled in a special way
// at calcEstimatedHeuristics.
//
// In addition, \p WorkList is populated with basic blocks if at leas one
// successor has updated estimated weight.</doc>
