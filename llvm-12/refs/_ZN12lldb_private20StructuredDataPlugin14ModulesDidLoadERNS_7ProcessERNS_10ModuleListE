<dec f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='144' type='void lldb_private::StructuredDataPlugin::ModulesDidLoad(lldb_private::Process &amp; process, lldb_private::ModuleList &amp; module_list)'/>
<doc f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='129'>/// Allow the plugin to do work related to modules that loaded in the
  /// the corresponding process.
  ///
  /// This method defaults to doing nothing.  Plugins can override it
  /// if they have any behavior they want to enable/modify based on loaded
  /// modules.
  ///
  /// \param[in] process
  ///     The process that just was notified of modules having been loaded.
  ///     This will always be the same process for a given instance of
  ///     a plugin.
  ///
  /// \param[in] module_list
  ///     The list of modules that the process registered as having just
  ///     loaded.  See \b Process::ModulesDidLoad(...).</doc>
<ovr f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.cpp' l='1239' c='_ZN12lldb_private23StructuredDataDarwinLog14ModulesDidLoadERNS_7ProcessERNS_10ModuleListE'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='5631' u='c' c='_ZN12lldb_private7Process14ModulesDidLoadERNS_10ModuleListE'/>
<def f='llvm/lldb/source/Target/StructuredDataPlugin.cpp' l='64' ll='67' type='void lldb_private::StructuredDataPlugin::ModulesDidLoad(lldb_private::Process &amp; process, lldb_private::ModuleList &amp; module_list)'/>
