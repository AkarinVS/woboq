<dec f='llvm/llvm/include/llvm/CodeGen/TailDuplicator.h' l='91' type='bool llvm::TailDuplicator::tailDuplicateAndUpdate(bool IsSimple, llvm::MachineBasicBlock * MBB, llvm::MachineBasicBlock * ForcedLayoutPred, SmallVectorImpl&lt;llvm::MachineBasicBlock *&gt; * DuplicatedPreds = nullptr, function_ref&lt;void (llvm::MachineBasicBlock *)&gt; * RemovalCallback = nullptr, SmallVectorImpl&lt;llvm::MachineBasicBlock *&gt; * CandidatePtr = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/MachineBlockPlacement.cpp' l='3076' u='c' c='_ZN12_GLOBAL__N_121MachineBlockPlacement23maybeTailDuplicateBlockEPN4llvm17MachineBasicBlockES3_RNS_10BlockChainEPNS1_14SmallSetVectorIPKS2_Lj16EEERNS15537931'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TailDuplicator.h' l='84'>/// Tail duplicate a single basic block into its predecessors, and then clean
  /// up.
  /// If \p DuplicatePreds is not null, it will be updated to contain the list
  /// of predecessors that received a copy of \p MBB.
  /// If \p RemovalCallback is non-null. It will be called before MBB is
  /// deleted.
  /// If \p CandidatePtr is not null, duplicate into these blocks only.</doc>
<def f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='158' ll='264' type='bool llvm::TailDuplicator::tailDuplicateAndUpdate(bool IsSimple, llvm::MachineBasicBlock * MBB, llvm::MachineBasicBlock * ForcedLayoutPred, SmallVectorImpl&lt;llvm::MachineBasicBlock *&gt; * DuplicatedPreds = nullptr, function_ref&lt;void (llvm::MachineBasicBlock *)&gt; * RemovalCallback = nullptr, SmallVectorImpl&lt;llvm::MachineBasicBlock *&gt; * CandidatePtr = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='288' u='c' c='_ZN4llvm14TailDuplicator19tailDuplicateBlocksEv'/>
<doc f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='150'>/// Tail duplicate the block and cleanup.
/// \p IsSimple - return value of isSimpleBB
/// \p MBB - block to be duplicated
/// \p ForcedLayoutPred - If non-null, treat this block as the layout
///     predecessor, instead of using the ordering in MF
/// \p DuplicatedPreds - if non-null, \p DuplicatedPreds will contain a list of
///     all Preds that received a copy of \p MBB.
/// \p RemovalCallback - if non-null, called just before MBB is deleted.</doc>
