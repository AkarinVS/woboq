<def f='llvm/clang/include/clang/Basic/TargetInfo.h' l='1119' ll='1121' type='std::string clang::TargetInfo::isValidSectionSpecifier(llvm::StringRef SR) const'/>
<doc f='llvm/clang/include/clang/Basic/TargetInfo.h' l='1108'>/// An optional hook that targets can implement to perform semantic
  /// checking on attribute((section(&quot;foo&quot;))) specifiers.
  ///
  /// In this case, &quot;foo&quot; is passed in to be checked.  If the section
  /// specifier is invalid, the backend should return a non-empty string
  /// that indicates the problem.
  ///
  /// This hook is a simple quality of implementation feature to catch errors
  /// and give good diagnostics in cases when the assembler or code generator
  /// would otherwise reject the section specifier.
  ///</doc>
<use f='llvm/clang/lib/Sema/SemaDeclAttr.cpp' l='3055' u='c' c='_ZN5clang4Sema16checkSectionNameENS_14SourceLocationEN4llvm9StringRefE'/>
<use f='llvm/clang/lib/Sema/SemaDeclAttr.cpp' l='3076' u='c' c='_ZL17handleSectionAttrRN5clang4SemaEPNS_4DeclERKNS_10ParsedAttrE'/>
<use f='llvm/clang/lib/Sema/SemaDeclAttr.cpp' l='3099' u='c' c='_ZL16checkCodeSegNameRN5clang4SemaENS_14SourceLocationEN4llvm9StringRefE'/>
