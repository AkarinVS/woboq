<def f='llvm/llvm/utils/TableGen/SequenceToOffsetTable.h' l='171' ll='196' type='void llvm::SequenceToOffsetTable::emitStringLiteralDef(llvm::raw_ostream &amp; OS, const llvm::Twine &amp; Decl) const'/>
<use f='llvm/llvm/utils/TableGen/AsmWriterEmitter.cpp' l='404' u='c' c='_ZN12_GLOBAL__N_116AsmWriterEmitter15EmitGetMnemonicERN4llvm11raw_ostreamERSt6vectorIS4_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EESaISC_EERjSG_'/>
<use f='llvm/llvm/utils/TableGen/AsmWriterEmitter.cpp' l='589' u='c' c='_ZL22emitRegisterNameStringRN4llvm11raw_ostreamENS_9StringRefERKSt5dequeINS_15CodeGenRegisterESaIS4_EE'/>
<doc f='llvm/llvm/utils/TableGen/SequenceToOffsetTable.h' l='167'>/// `emitStringLiteralDef` - Print out the table as the body of an array
  /// initializer, where each element is a C string literal terminated by
  /// `\0`. Falls back to emitting a comma-separated integer list if
  /// `EmitLongStrLiterals` is false</doc>
<use f='llvm/llvm/utils/TableGen/InstrInfoEmitter.cpp' l='585' u='c' c='_ZN12_GLOBAL__N_116InstrInfoEmitter3runERN4llvm11raw_ostreamE'/>
<use f='llvm/llvm/utils/TableGen/RegisterInfoEmitter.cpp' l='1006' u='c' c='_ZN12_GLOBAL__N_119RegisterInfoEmitter9runMCDescERN4llvm11raw_ostreamERNS1_13CodeGenTargetERNS1_14CodeGenRegBankE'/>
<use f='llvm/llvm/utils/TableGen/RegisterInfoEmitter.cpp' l='1078' u='c' c='_ZN12_GLOBAL__N_119RegisterInfoEmitter9runMCDescERN4llvm11raw_ostreamERNS1_13CodeGenTargetERNS1_14CodeGenRegBankE'/>
