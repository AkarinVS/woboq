<dec f='llvm/lld/wasm/SyntheticSections.h' l='216' type='void lld::wasm::GlobalSection::addInternalGOTEntry(lld::wasm::Symbol * sym)'/>
<doc f='llvm/lld/wasm/SyntheticSections.h' l='204'>// Add an internal GOT entry global that corresponds to the given symbol.
  // Normally GOT entries are imported and assigned by the external dynamic
  // linker.  However, when linking PIC code statically or when linking with
  // -Bsymbolic we can internalize GOT entries by declaring globals the hold
  // symbol addresses.
  //
  // For the static linking case these internal globals can be completely
  // eliminated by a post-link optimizer such as wasm-opt.
  //
  // TODO(sbc): Another approach to optimizing these away could be to use
  // specific relocation types combined with linker relaxation which could
  // transform a `global.get` to an `i32.const`.</doc>
<use f='llvm/lld/wasm/Relocations.cpp' l='81' u='c' c='_ZN3lld4wasmL11addGOTEntryEPNS0_6SymbolE'/>
<def f='llvm/lld/wasm/SyntheticSections.cpp' l='276' ll='286' type='void lld::wasm::GlobalSection::addInternalGOTEntry(lld::wasm::Symbol * sym)'/>
