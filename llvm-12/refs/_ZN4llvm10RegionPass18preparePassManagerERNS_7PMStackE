<dec f='llvm/llvm/include/llvm/Analysis/RegionPass.h' l='69' type='void llvm::RegionPass::preparePassManager(llvm::PMStack &amp; PMS)'/>
<doc f='llvm/llvm/include/llvm/Analysis/RegionPass.h' l='63'>//@}

  //===--------------------------------------------------------------------===//
  /// @name PassManager API
  ///
  //@{</doc>
<inh f='llvm/llvm/include/llvm/Pass.h' l='143' c='_ZN4llvm4Pass18preparePassManagerERNS_7PMStackE'/>
<def f='llvm/llvm/lib/Analysis/RegionPass.cpp' l='216' ll='230' type='void llvm::RegionPass::preparePassManager(llvm::PMStack &amp; PMS)'/>
<doc f='llvm/llvm/lib/Analysis/RegionPass.cpp' l='207'>//===----------------------------------------------------------------------===//
// RegionPass

// Check if this pass is suitable for the current RGPassManager, if
// available. This pass P is not suitable for a RGPassManager if P
// is not preserving higher level analysis info used by other
// RGPassManager passes. In such case, pop RGPassManager from the
// stack. This will force assignPassManager() to create new
// LPPassManger as expected.</doc>
