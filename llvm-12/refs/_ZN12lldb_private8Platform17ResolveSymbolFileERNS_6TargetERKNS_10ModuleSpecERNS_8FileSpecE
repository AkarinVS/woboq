<dec f='llvm/lldb/include/lldb/Target/Platform.h' l='199' type='lldb_private::Status lldb_private::Platform::ResolveSymbolFile(lldb_private::Target &amp; target, const lldb_private::ModuleSpec &amp; sym_spec, lldb_private::FileSpec &amp; sym_file)'/>
<doc f='llvm/lldb/include/lldb/Target/Platform.h' l='154'>/// Find a symbol file given a symbol file module specification.
  ///
  /// Each platform might have tricks to find symbol files for an executable
  /// given information in a symbol file ModuleSpec. Some platforms might also
  /// support symbol files that are bundles and know how to extract the right
  /// symbol file given a bundle.
  ///
  /// \param[in] target
  ///     The target in which we are trying to resolve the symbol file.
  ///     The target has a list of modules that we might be able to
  ///     use in order to help find the right symbol file. If the
  ///     &quot;m_file&quot; or &quot;m_platform_file&quot; entries in the \a sym_spec
  ///     are filled in, then we might be able to locate a module in
  ///     the target, extract its UUID and locate a symbol file.
  ///     If just the &quot;m_uuid&quot; is specified, then we might be able
  ///     to find the module in the target that matches that UUID
  ///     and pair the symbol file along with it. If just &quot;m_symbol_file&quot;
  ///     is specified, we can use a variety of tricks to locate the
  ///     symbols in an SDK, PDK, or other development kit location.
  ///
  /// \param[in] sym_spec
  ///     A module spec that describes some information about the
  ///     symbol file we are trying to resolve. The ModuleSpec might
  ///     contain the following:
  ///     m_file - A full or partial path to an executable from the
  ///              target (might be empty).
  ///     m_platform_file - Another executable hint that contains
  ///                       the path to the file as known on the
  ///                       local/remote platform.
  ///     m_symbol_file - A full or partial path to a symbol file
  ///                     or symbol bundle that should be used when
  ///                     trying to resolve the symbol file.
  ///     m_arch - The architecture we are looking for when resolving
  ///              the symbol file.
  ///     m_uuid - The UUID of the executable and symbol file. This
  ///              can often be used to match up an executable with
  ///              a symbol file, or resolve an symbol file in a
  ///              symbol file bundle.
  ///
  /// \param[out] sym_file
  ///     The resolved symbol file spec if the returned error
  ///     indicates success.
  ///
  /// \return
  ///     Returns an error that describes success or failure.</doc>
<use f='llvm/lldb/source/Commands/CommandObjectTarget.cpp' l='4349' u='c' c='_ZN29CommandObjectTargetSymbolsAdd9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<ovr f='llvm/lldb/source/Plugins/Platform/MacOSX/PlatformDarwin.cpp' l='194' c='_ZN14PlatformDarwin17ResolveSymbolFileERN12lldb_private6TargetERKNS0_10ModuleSpecERNS0_8FileSpecE'/>
<def f='llvm/lldb/source/Target/Platform.cpp' l='887' ll='895' type='lldb_private::Status lldb_private::Platform::ResolveSymbolFile(lldb_private::Target &amp; target, const lldb_private::ModuleSpec &amp; sym_spec, lldb_private::FileSpec &amp; sym_file)'/>
