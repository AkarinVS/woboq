<dec f='llvm/compiler-rt/lib/gwp_asan/optional/segv_handler.h' l='24' type='void gwp_asan::segv_handler::installSignalHandlers(gwp_asan::GuardedPoolAllocator * GPA, gwp_asan::Printf_t Printf, gwp_asan::backtrace::PrintBacktrace_t PrintBacktrace, gwp_asan::backtrace::SegvBacktrace_t SegvBacktrace)'/>
<def f='llvm/compiler-rt/lib/gwp_asan/optional/segv_handler_posix.cpp' l='197' ll='216' type='void gwp_asan::segv_handler::installSignalHandlers(gwp_asan::GuardedPoolAllocator * GPA, gwp_asan::Printf_t Printf, gwp_asan::backtrace::PrintBacktrace_t PrintBacktrace, gwp_asan::backtrace::SegvBacktrace_t SegvBacktrace)'/>
<doc f='llvm/compiler-rt/lib/gwp_asan/optional/segv_handler.h' l='18'>// Install the SIGSEGV crash handler for printing use-after-free and heap-
// buffer-{under|over}flow exceptions if the user asked for it. This is platform
// specific as even though POSIX and Windows both support registering handlers
// through signal(), we have to use platform-specific signal handlers to obtain
// the address that caused the SIGSEGV exception. GPA-&gt;init() must be called
// before this function.</doc>
<use f='llvm/compiler-rt/lib/scudo/scudo_allocator.cpp' l='682' u='c' c='__scudo::initScudo'/>
