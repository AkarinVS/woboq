<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2968' type='clang::CodeGen::Address'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2989' u='w' c='_ZN5clang7CodeGen15CodeGenFunction15AutoVarEmissionC1ENS2_7InvalidE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2993' u='w' c='_ZN5clang7CodeGen15CodeGenFunction15AutoVarEmissionC1ERKNS_7VarDeclE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2997' u='m' c='_ZNK5clang7CodeGen15CodeGenFunction15AutoVarEmission18wasEmittedAsGlobalEv'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='3014' u='r' c='_ZNK5clang7CodeGen15CodeGenFunction15AutoVarEmission19getAllocatedAddressEv'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='3024' u='r' c='_ZNK5clang7CodeGen15CodeGenFunction15AutoVarEmission16getObjectAddressERS1_'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='3026' u='r' c='_ZNK5clang7CodeGen15CodeGenFunction15AutoVarEmission16getObjectAddressERS1_'/>
<offset>64</offset>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2964'>/// The address of the alloca for languages with explicit address space
    /// (e.g. OpenCL) or alloca casted to generic pointer for address space
    /// agnostic languages (e.g. C++). Invalid if the variable was emitted
    /// as a global constant.</doc>
<use f='llvm/clang/lib/CodeGen/CGBlocks.cpp' l='2747' u='r' c='_ZN5clang7CodeGen15CodeGenFunction22emitByrefStructureInitERKNS1_15AutoVarEmissionE'/>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1467' u='w' c='_ZN5clang7CodeGen15CodeGenFunction17EmitAutoVarAllocaERKNS_7VarDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1591' u='w' c='_ZN5clang7CodeGen15CodeGenFunction17EmitAutoVarAllocaERKNS_7VarDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1836' u='r' c='_ZN5clang7CodeGen15CodeGenFunction15EmitAutoVarInitERKNS1_15AutoVarEmissionE'/>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='2065' u='r' c='_ZN5clang7CodeGen15CodeGenFunction19EmitAutoVarCleanupsERKNS1_15AutoVarEmissionE'/>
