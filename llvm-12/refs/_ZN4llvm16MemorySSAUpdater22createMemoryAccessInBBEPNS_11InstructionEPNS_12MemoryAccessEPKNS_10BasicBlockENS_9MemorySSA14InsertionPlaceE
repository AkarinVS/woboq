<dec f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='192' type='llvm::MemoryAccess * llvm::MemorySSAUpdater::createMemoryAccessInBB(llvm::Instruction * I, llvm::MemoryAccess * Definition, const llvm::BasicBlock * BB, MemorySSA::InsertionPlace Point)'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='173'>// The below are utility functions. Other than creation of accesses to pass
  // to insertDef, and removeAccess to remove accesses, you should generally
  // not attempt to update memoryssa yourself. It is very non-trivial to get
  // the edge cases right, and the above calls already operate in near-optimal
  // time bounds.

  /// Create a MemoryAccess in MemorySSA at a specified point in a block,
  /// with a specified clobbering definition.
  ///
  /// Returns the new MemoryAccess.
  /// This should be called when a memory instruction is created that is being
  /// used to replace an existing memory instruction. It will *not* create PHI
  /// nodes, or verify the clobbering definition. The insertion place is used
  /// solely to determine where in the memoryssa access lists the instruction
  /// will be placed. The caller is expected to keep ordering the same as
  /// instructions.
  /// It will return the new MemoryAccess.
  /// Note: If a MemoryAccess already exists for I, this function will make it
  /// inaccessible and it *must* have removeMemoryAccess called on it.</doc>
<def f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1450' ll='1456' type='llvm::MemoryAccess * llvm::MemorySSAUpdater::createMemoryAccessInBB(llvm::Instruction * I, llvm::MemoryAccess * Definition, const llvm::BasicBlock * BB, MemorySSA::InsertionPlace Point)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='1378' u='c' c='_ZN4llvm3GVN14PerformLoadPREEPNS_8LoadInstERNS_11SmallVectorINS_3gvn21AvailableValueInBlockELj64EEERNS3_IPNS_10BasicBlockELj64EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='1631' u='c' c='_ZN4llvm3GVN22processAssumeIntrinsicEPNS_13IntrinsicInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1457' u='c' c='_ZL27cloneInstructionInExitBlockRN4llvm11InstructionERNS_10BasicBlockERNS_7PHINodeEPKNS_8LoopInfoEPKNS_14LoopSafetyInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1887' u='c' c='_ZN12_GLOBAL__N_112LoopPromoter34doExtraRewritesBeforeFinalDeletionEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='2200' u='c' c='_ZN4llvm28promoteLoopAccessesToScalarsERKNS_14SmallSetVectorIPNS_5ValueELj8EEERNS_15SmallVectorImplIPNS_10BasicBlockEEERNS6_IPNS_11InstructionEEERNS6_2137798'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp' l='1030' u='c' c='_ZN12_GLOBAL__N_118LoopIdiomRecognize23processLoopStridedStoreEPN4llvm5ValueEjNS1_10MaybeAlignES3_PNS1_11InstructionERNS1_15SmallPtrSetImplIS6_EEPKNS113717187'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp' l='1185' u='c' c='_ZN12_GLOBAL__N_118LoopIdiomRecognize26processLoopStoreOfLoopLoadEPN4llvm9StoreInstEPKNS1_4SCEVE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopSink.cpp' l='245' u='c' c='_ZL15sinkInstructionRN4llvm4LoopERNS_11InstructionERKNS_15SmallVectorImplIPNS_10BasicBlockEEERKNS_13SmallDenseMapIS6_iLj16ENS_12DenseMapInfoIS6_EENS_6937833'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnswitch.cpp' l='1129' u='c' c='_ZN12_GLOBAL__N_112LoopUnswitch30emitPreheaderBranchOnConditionEPN4llvm5ValueEPNS1_8ConstantEPNS1_10BasicBlockES7_PNS1_10BranchInstEPNS1_11InstructionENS1_8ArrayRefISB_EE'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='104' u='c' c='_ZN30MemorySSATest_CreateALoad_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='137' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='150' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='161' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='174' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='186' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='228' u='c' c='_ZN37MemorySSATest_CreateALoadUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='240' u='c' c='_ZN37MemorySSATest_CreateALoadUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='285' u='c' c='_ZN27MemorySSATest_SinkLoad_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='819' u='c' c='_ZN30MemorySSATest_WalkerReopt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='908' u='c' c='_ZN30MemorySSATest_Irreducible_Test8TestBodyEv'/>
