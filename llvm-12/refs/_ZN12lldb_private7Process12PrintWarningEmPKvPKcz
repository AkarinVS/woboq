<dec f='llvm/lldb/include/lldb/Target/Process.h' l='2604' type='void lldb_private::Process::PrintWarning(uint64_t warning_type, const void * repeat_key, const char * fmt)'/>
<doc f='llvm/lldb/include/lldb/Target/Process.h' l='2578'>/// Print a user-visible warning one time per Process
  ///
  /// A facility for printing a warning to the user once per repeat_key.
  ///
  /// warning_type is from the Process::Warnings enums. repeat_key is a
  /// pointer value that will be used to ensure that the warning message is
  /// not printed multiple times.  For instance, with a warning about a
  /// function being optimized, you can pass the CompileUnit pointer to have
  /// the warning issued for only the first function in a CU, or the Function
  /// pointer to have it issued once for every function, or a Module pointer
  /// to have it issued once per Module.
  ///
  /// Classes outside Process should call a specific PrintWarning method so
  /// that the warning strings are all centralized in Process, instead of
  /// calling PrintWarning() directly.
  ///
  /// \param [in] warning_type
  ///     One of the types defined in Process::Warnings.
  ///
  /// \param [in] repeat_key
  ///     A pointer value used to ensure that the warning is only printed once.
  ///     May be nullptr, indicating that the warning is printed unconditionally
  ///     every time.
  ///
  /// \param [in] fmt
  ///     printf style format string</doc>
<def f='llvm/lldb/source/Target/Process.cpp' l='5635' ll='5663' type='void lldb_private::Process::PrintWarning(uint64_t warning_type, const void * repeat_key, const char * fmt)'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='5672' u='c' c='_ZN12lldb_private7Process24PrintWarningOptimizationERKNS_13SymbolContextE'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='5690' u='c' c='_ZN12lldb_private7Process31PrintWarningUnsupportedLanguageERKNS_13SymbolContextE'/>
