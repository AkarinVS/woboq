<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/CxxModuleHandler.h' l='32' ll='61'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h' l='201'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h' l='213' c='_ZN12lldb_private16ClangASTImporter19ASTImporterDelegate14CxxModuleScopeC1ERS1_PN5clang10ASTContextE'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h' l='250'/>
<size>48</size>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/CxxModuleHandler.h' l='18'>/// Handles importing decls into an ASTContext with an attached C++ module.
///
/// This class searches a C++ module (which must be attached to the target
/// ASTContext) for an equivalent decl to the one that should be imported.
/// If the decl that is found in the module is a suitable replacement
/// for the decl that should be imported, the module decl will be treated as
/// the result of the import process.
///
/// If the Decl that should be imported is a template specialization
/// that doesn&apos;t exist yet in the target ASTContext (e.g. `std::vector&lt;int&gt;`),
/// then this class tries to create the template specialization in the target
/// ASTContext. This is only possible if the CxxModuleHandler can determine
/// that instantiating this template is safe to do, e.g. because the target
/// decl is a container class from the STL.</doc>
<mbr r='lldb_private::CxxModuleHandler::m_importer' o='0' t='clang::ASTImporter *'/>
<mbr r='lldb_private::CxxModuleHandler::m_sema' o='64' t='clang::Sema *'/>
<mbr r='lldb_private::CxxModuleHandler::m_supported_templates' o='128' t='llvm::StringSet&lt;&gt;'/>
<fun r='_ZN12lldb_private16CxxModuleHandler25tryInstantiateStdTemplateEPN5clang4DeclE'/>
<fun r='_ZN12lldb_private16CxxModuleHandlerC1Ev'/>
<fun r='_ZN12lldb_private16CxxModuleHandlerC1ERN5clang11ASTImporterEPNS1_10ASTContextE'/>
<fun r='_ZN12lldb_private16CxxModuleHandler6ImportEPN5clang4DeclE'/>
<fun r='_ZNK12lldb_private16CxxModuleHandler7isValidEv'/>
