<dec f='llvm/llvm/include/llvm/DWARFLinker/DWARFLinker.h' l='460' type='void llvm::DWARFLinker::lookForDIEsToKeep(llvm::AddressesMap &amp; RelocMgr, llvm::RangesTy &amp; Ranges, const llvm::UnitListTy &amp; Units, const llvm::DWARFDie &amp; DIE, const llvm::DWARFFile &amp; File, llvm::CompileUnit &amp; CU, unsigned int Flags)'/>
<def f='llvm/llvm/lib/DWARFLinker/DWARFLinker.cpp' l='726' ll='811' type='void llvm::DWARFLinker::lookForDIEsToKeep(llvm::AddressesMap &amp; AddressesMap, llvm::RangesTy &amp; Ranges, const llvm::UnitListTy &amp; Units, const llvm::DWARFDie &amp; Die, const llvm::DWARFFile &amp; File, llvm::CompileUnit &amp; Cu, unsigned int Flags)'/>
<use f='llvm/llvm/lib/DWARFLinker/DWARFLinker.cpp' l='2492' u='c' c='_ZN4llvm11DWARFLinker4linkEv'/>
<doc f='llvm/llvm/lib/DWARFLinker/DWARFLinker.cpp' l='701'>/// Recursively walk the \p DIE tree and look for DIEs to keep. Store that
/// information in \p CU&apos;s DIEInfo.
///
/// This function is the entry point of the DIE selection algorithm. It is
/// expected to walk the DIE tree in file order and (though the mediation of
/// its helper) call hasValidRelocation() on each DIE that might be a &apos;root
/// DIE&apos; (See DwarfLinker class comment).
///
/// While walking the dependencies of root DIEs, this function is also called,
/// but during these dependency walks the file order is not respected. The
/// TF_DependencyWalk flag tells us which kind of traversal we are currently
/// doing.
///
/// The recursive algorithm is implemented iteratively as a work list because
/// very deep recursion could exhaust the stack for large projects. The work
/// list acts as a scheduler for different types of work that need to be
/// performed.
///
/// The recursive nature of the algorithm is simulated by running the &quot;main&quot;
/// algorithm (LookForDIEsToKeep) followed by either looking at more DIEs
/// (LookForChildDIEsToKeep, LookForRefDIEsToKeep, LookForParentDIEsToKeep) or
/// fixing up a computed property (UpdateChildIncompleteness,
/// UpdateRefIncompleteness).
///
/// The return value indicates whether the DIE is incomplete.</doc>
<doc f='llvm/llvm/include/llvm/DWARFLinker/DWARFLinker.h' l='453'>/// \defgroup FindRootDIEs Find DIEs corresponding to Address map entries.
  ///
  /// @{
  /// Recursively walk the \p DIE tree and look for DIEs to
  /// keep. Store that information in \p CU&apos;s DIEInfo.
  ///
  /// The return value indicates whether the DIE is incomplete.</doc>
