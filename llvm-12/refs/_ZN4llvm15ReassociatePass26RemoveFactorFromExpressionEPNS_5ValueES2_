<dec f='llvm/llvm/include/llvm/Transforms/Scalar/Reassociate.h' l='121' type='llvm::Value * llvm::ReassociatePass::RemoveFactorFromExpression(llvm::Value * V, llvm::Value * Factor)'/>
<def f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='1139' ll='1207' type='llvm::Value * llvm::ReassociatePass::RemoveFactorFromExpression(llvm::Value * V, llvm::Value * Factor)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='1707' u='c' c='_ZN4llvm15ReassociatePass11OptimizeAddEPNS_11InstructionERNS_15SmallVectorImplINS_11reassociate10ValueEntryEEE'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='1136'>/// If V is an expression tree that is a multiplication sequence,
/// and if this sequence contains a multiply by Factor,
/// remove Factor from the tree and return the new tree.</doc>
