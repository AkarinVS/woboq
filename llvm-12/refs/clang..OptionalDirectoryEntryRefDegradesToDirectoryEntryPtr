<inh f='llvm/llvm/include/llvm/ADT/Optional.h' l='239' c='llvm::Optional'/>
<def f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='250' ll='289'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='255' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrC1EOS0_'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='257' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrC1ERKS0_'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='258' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSEOS0_'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='259' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSEOS0_'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='260' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSERKS0_'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='261' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSERKS0_'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='269' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSEN4llvm8NoneTypeE'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='273' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSENS_17DirectoryEntryRefE'/>
<use f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='277' c='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSEN4llvm8OptionalINS_17DirectoryEntryRefEEE'/>
<use f='llvm/clang/include/clang/Basic/Module.h' l='202'/>
<size>8</size>
<doc f='llvm/clang/include/clang/Basic/DirectoryEntry.h' l='228'>/// Wrapper around Optional&lt;DirectoryEntryRef&gt; that degrades to &apos;const
/// DirectoryEntry*&apos;, facilitating incremental patches to propagate
/// DirectoryEntryRef.
///
/// This class can be used as return value or field where it&apos;s convenient for
/// an Optional&lt;DirectoryEntryRef&gt; to degrade to a &apos;const DirectoryEntry*&apos;. The
/// purpose is to avoid code churn due to dances like the following:
/// \code
/// // Old code.
/// lvalue = rvalue;
///
/// // Temporary code from an incremental patch.
/// Optional&lt;DirectoryEntryRef&gt; MaybeF = rvalue;
/// lvalue = MaybeF ? &amp;MaybeF.getDirectoryEntry() : nullptr;
///
/// // Final code.
/// lvalue = rvalue;
/// \endcode
///
/// FIXME: Once DirectoryEntryRef is &quot;everywhere&quot; and DirectoryEntry::LastRef
/// and DirectoryEntry::getName have been deleted, delete this class and
/// replace instances with Optional&lt;DirectoryEntryRef&gt;.</doc>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrC1Ev'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrC1EOS0_'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrC1ERKS0_'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSEOS0_'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSERKS0_'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrC1EN4llvm8NoneTypeE'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrC1ENS_17DirectoryEntryRefE'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrC1EN4llvm8OptionalINS_17DirectoryEntryRefEEE'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSEN4llvm8NoneTypeE'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSENS_17DirectoryEntryRefE'/>
<fun r='_ZN5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtraSEN4llvm8OptionalINS_17DirectoryEntryRefEEE'/>
<fun r='_ZNK5clang52OptionalDirectoryEntryRefDegradesToDirectoryEntryPtrcvPKNS_14DirectoryEntryEEv'/>
