<dec f='llvm/llvm/include/llvm/Analysis/GuardUtils.h' l='28' type='bool llvm::isWidenableBranch(const llvm::User * U)'/>
<doc f='llvm/llvm/include/llvm/Analysis/GuardUtils.h' l='26'>/// Returns true iff \p U is a widenable branch (that is, parseWidenableBranch
/// returns true).</doc>
<def f='llvm/llvm/lib/Analysis/GuardUtils.cpp' l='22' ll='27' type='bool llvm::isWidenableBranch(const llvm::User * U)'/>
