<dec f='llvm/lldb/include/lldb/Symbol/UnwindTable.h' l='54' type='lldb::FuncUnwindersSP lldb_private::UnwindTable::GetUncachedFuncUnwindersContainingAddress(const lldb_private::Address &amp; addr, lldb_private::SymbolContext &amp; sc)'/>
<doc f='llvm/lldb/include/lldb/Symbol/UnwindTable.h' l='45'>// Normally when we create a new FuncUnwinders object we track it in this
  // UnwindTable so it can be reused later.  But for the target modules show-
  // unwind we want to create brand new UnwindPlans for the function of
  // interest - so ignore any existing FuncUnwinders for that function and
  // don&apos;t add this new one to our UnwindTable. This FuncUnwinders object does
  // have a reference to the UnwindTable but the lifetime of this uncached
  // FuncUnwinders is expected to be short so in practice this will not be a
  // problem.</doc>
<use f='llvm/lldb/source/Commands/CommandObjectTarget.cpp' l='3406' u='c' c='_ZN36CommandObjectTargetModulesShowUnwind9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<def f='llvm/lldb/source/Symbol/UnwindTable.cpp' l='152' ll='162' type='lldb::FuncUnwindersSP lldb_private::UnwindTable::GetUncachedFuncUnwindersContainingAddress(const lldb_private::Address &amp; addr, lldb_private::SymbolContext &amp; sc)'/>
<doc f='llvm/lldb/source/Symbol/UnwindTable.cpp' l='148'>// Ignore any existing FuncUnwinders for this function, create a new one and
// don&apos;t add it to the UnwindTable.  This is intended for use by target modules
// show-unwind where we want to create new UnwindPlans, not re-use existing
// ones.</doc>
