<dec f='llvm/polly/include/polly/Support/ISLTools.h' l='540' type='void polly::dumpPw(const isl::set &amp; Set)'/>
<doc f='llvm/polly/include/polly/Support/ISLTools.h' l='489'>/// Dump a description of the argument to llvm::errs().
///
/// In contrast to isl&apos;s dump function, there are a few differences:
/// - Each polyhedron (pieces) is written on its own line.
/// - Spaces are sorted by structure. E.g. maps with same domain space are
///   grouped. Isl sorts them according to the space&apos;s hash function.
/// - Pieces of the same space are sorted using their lower bound.
/// - A more compact to_str representation is used instead of Isl&apos;s dump
///   functions that try to show the internal representation.
///
/// The goal is to get a better understandable representation that is also
/// useful to compare two sets. As all dump() functions, its intended use is to
/// be called in a debugger only.
///
/// isl_map_dump example:
/// [p_0, p_1, p_2] -&gt; { Stmt0[i0] -&gt; [o0, o1] : (o0 = i0 and o1 = 0 and i0 &gt; 0
/// and i0 &lt;= 5 - p_2) or (i0 = 0 and o0 = 0 and o1 = 0); Stmt3[i0] -&gt; [o0, o1]
/// : (o0 = i0 and o1 = 3 and i0 &gt; 0 and i0 &lt;= 5 - p_2) or (i0 = 0 and o0 = 0
/// and o1 = 3); Stmt2[i0] -&gt; [o0, o1] : (o0 = i0 and o1 = 1 and i0 &gt;= 3 + p_0 -
/// p_1 and i0 &gt; 0 and i0 &lt;= 5 - p_2) or (o0 = i0 and o1 = 1 and i0 &gt; 0 and i0
/// &lt;= 5 - p_2 and i0 &lt; p_0 - p_1) or (i0 = 0 and o0 = 0 and o1 = 1 and p_1 &gt;= 3
/// + p_0) or (i0 = 0 and o0 = 0 and o1 = 1 and p_1 &lt; p_0) or (p_0 = 0 and i0 =
/// 2 - p_1 and o0 = 2 - p_1 and o1 = 1 and p_2 &lt;= 3 + p_1 and p_1 &lt;= 1) or (p_1
/// = 1 + p_0 and i0 = 0 and o0 = 0 and o1 = 1) or (p_0 = 0 and p_1 = 2 and i0 =
/// 0 and o0 = 0 and o1 = 1) or (p_0 = -1 and p_1 = -1 and i0 = 0 and o0 = 0 and
/// o1 = 1); Stmt1[i0] -&gt; [o0, o1] : (p_0 = -1 and i0 = 1 - p_1 and o0 = 1 - p_1
/// and o1 = 2 and p_2 &lt;= 4 + p_1 and p_1 &lt;= 0) or (p_0 = 0 and i0 = -p_1 and o0
/// = -p_1 and o1 = 2 and p_2 &lt;= 5 + p_1 and p_1 &lt; 0) or (p_0 = -1 and p_1 = 1
/// and i0 = 0 and o0 = 0 and o1 = 2) or (p_0 = 0 and p_1 = 0 and i0 = 0 and o0
/// = 0 and o1 = 2) }
///
/// dumpPw example (same set):
/// [p_0, p_1, p_2] -&gt; {
///   Stmt0[0] -&gt; [0, 0];
///   Stmt0[i0] -&gt; [i0, 0] : 0 &lt; i0 &lt;= 5 - p_2;
///   Stmt1[0] -&gt; [0, 2] : p_1 = 1 and p_0 = -1;
///   Stmt1[0] -&gt; [0, 2] : p_1 = 0 and p_0 = 0;
///   Stmt1[1 - p_1] -&gt; [1 - p_1, 2] : p_0 = -1 and p_1 &lt;= 0 and p_2 &lt;= 4 + p_1;
///   Stmt1[-p_1] -&gt; [-p_1, 2] : p_0 = 0 and p_1 &lt; 0 and p_2 &lt;= 5 + p_1;
///   Stmt2[0] -&gt; [0, 1] : p_1 &gt;= 3 + p_0;
///   Stmt2[0] -&gt; [0, 1] : p_1 &lt; p_0;
///   Stmt2[0] -&gt; [0, 1] : p_1 = 1 + p_0;
///   Stmt2[0] -&gt; [0, 1] : p_1 = 2 and p_0 = 0;
///   Stmt2[0] -&gt; [0, 1] : p_1 = -1 and p_0 = -1;
///   Stmt2[i0] -&gt; [i0, 1] : i0 &gt;= 3 + p_0 - p_1 and 0 &lt; i0 &lt;= 5 - p_2;
///   Stmt2[i0] -&gt; [i0, 1] : 0 &lt; i0 &lt;= 5 - p_2 and i0 &lt; p_0 - p_1;
///   Stmt2[2 - p_1] -&gt; [2 - p_1, 1] : p_0 = 0 and p_1 &lt;= 1 and p_2 &lt;= 3 + p_1;
///   Stmt3[0] -&gt; [0, 3];
///   Stmt3[i0] -&gt; [i0, 3] : 0 &lt; i0 &lt;= 5 - p_2
/// }
/// @{</doc>
