<use f='llvm/lldb/include/lldb/lldb-forward.h' l='416'/>
<use f='llvm/lldb/include/lldb/lldb-forward.h' l='418'/>
<inh f='llvm/lldb/include/lldb/Core/PluginInterface.h' l='16' c='lldb_private::PluginInterface'/>
<def f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='40' ll='167'/>
<use f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='42'/>
<use f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='165' c='_ZN12lldb_private20StructuredDataPluginC1ERKS0_'/>
<use f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='166' c='_ZN12lldb_private20StructuredDataPluginaSERKS0_'/>
<use f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='166' c='_ZN12lldb_private20StructuredDataPluginaSERKS0_'/>
<size>40</size>
<doc f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='19'>/// Plugin that supports process-related structured data sent asynchronously
/// from the debug monitor (e.g. debugserver, lldb-server, etc.)
///
/// This plugin type is activated by a Process-derived instance when that
/// instance detects that a given structured data feature is available.
///
/// StructuredDataPlugin instances are inherently tied to a process.  The
/// main functionality they support is the ability to consume asynchronously-
/// delivered structured data from the process monitor, and do something
/// reasonable with it.  Something reasonable can include broadcasting a
/// StructuredData event, which other parts of the system can then do with
/// as they please.  An IDE could use this facility to retrieve CPU usage,
/// memory usage, and other run-time aspects of the process.  That data
/// can then be displayed meaningfully to the user through the IDE.

/// For command-line LLDB, the Debugger instance listens for the structured
/// data events raised by the plugin, and give the plugin both the output
/// and error streams such that the plugin can display something about the
/// event, at a time when the debugger ensures it is safe to write to the
/// output or error streams.</doc>
<fun r='_ZN12lldb_private20StructuredDataPluginD1Ev'/>
<fun r='_ZNK12lldb_private20StructuredDataPlugin10GetProcessEv'/>
<fun r='_ZN12lldb_private20StructuredDataPlugin26SupportsStructuredDataTypeENS_11ConstStringE'/>
<fun r='_ZN12lldb_private20StructuredDataPlugin29HandleArrivalOfStructuredDataERNS_7ProcessENS_11ConstStringERKSt10shared_ptrINS_14StructuredData6ObjectEE'/>
<fun r='_ZN12lldb_private20StructuredDataPlugin14GetDescriptionERKSt10shared_ptrINS_14StructuredData6ObjectEERNS_6StreamE'/>
<fun r='_ZNK12lldb_private20StructuredDataPlugin10GetEnabledENS_11ConstStringE'/>
<fun r='_ZN12lldb_private20StructuredDataPlugin14ModulesDidLoadERNS_7ProcessERNS_10ModuleListE'/>
<fun r='_ZN12lldb_private20StructuredDataPluginC1ERKSt8weak_ptrINS_7ProcessEE'/>
<fun r='_ZN12lldb_private20StructuredDataPlugin31InitializeBasePluginForDebuggerERNS_8DebuggerE'/>
<mbr r='lldb_private::StructuredDataPlugin::m_process_wp' o='192' t='lldb::ProcessWP'/>
<fun r='_ZN12lldb_private20StructuredDataPluginC1ERKS0_'/>
<fun r='_ZN12lldb_private20StructuredDataPluginaSERKS0_'/>
<ovr f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.h' l='23' c='lldb_private::StructuredDataDarwinLog'/>
<use f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.h' l='23'/>
<use f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.cpp' l='1348' c='_ZN12lldb_private23StructuredDataDarwinLogC1ERKSt8weak_ptrINS_7ProcessEE'/>
<use f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.cpp' l='1534' c='_ZN12lldb_private23StructuredDataDarwinLog26InitCompletionHookCallbackEPvPNS_24StoppointCallbackContextEmm'/>
<size>40</size>
