<dec f='llvm/lldb/include/lldb/Core/Architecture.h' l='28' type='void lldb_private::Architecture::OverrideStopInfo(lldb_private::Thread &amp; thread) const'/>
<doc f='llvm/lldb/include/lldb/Core/Architecture.h' l='18'>/// This is currently intended to handle cases where a
  /// program stops at an instruction that won&apos;t get executed and it
  /// allows the stop reason, like &quot;breakpoint hit&quot;, to be replaced
  /// with a different stop reason like &quot;no stop reason&quot;.
  ///
  /// This is specifically used for ARM in Thumb code when we stop in
  /// an IT instruction (if/then/else) where the instruction won&apos;t get
  /// executed and therefore it wouldn&apos;t be correct to show the program
  /// stopped at the current PC. The code is generic and applies to all
  /// ARM CPUs.</doc>
<ovr f='llvm/lldb/source/Plugins/Architecture/Arm/ArchitectureArm.cpp' l='45' c='_ZNK12lldb_private15ArchitectureArm16OverrideStopInfoERNS_6ThreadE'/>
<ovr f='llvm/lldb/source/Plugins/Architecture/Mips/ArchitectureMips.h' l='26' c='_ZNK12lldb_private16ArchitectureMips16OverrideStopInfoERNS_6ThreadE'/>
<ovr f='llvm/lldb/source/Plugins/Architecture/PPC64/ArchitecturePPC64.h' l='25' c='_ZNK12lldb_private17ArchitecturePPC6416OverrideStopInfoERNS_6ThreadE'/>
<use f='llvm/lldb/source/Target/Thread.cpp' l='411' u='c' c='_ZN12lldb_private6Thread18GetPrivateStopInfoEv'/>
