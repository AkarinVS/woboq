<dec f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.h' l='83' type='Expected&lt;llvm::rc::RCInt&gt; llvm::rc::RCParser::readInt()'/>
<def f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='148' ll='151' type='Expected&lt;llvm::rc::RCInt&gt; llvm::rc::RCParser::readInt()'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='312' u='c' c='_ZN4llvm2rc8RCParser18readIntsWithCommasEmm'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='437' u='c' c='_ZN4llvm2rc8RCParser25parseAcceleratorsResourceEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='466' u='c' c='_ZN4llvm2rc8RCParser19parseDialogResourceEb'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='554' u='c' c='_ZN4llvm2rc8RCParser12parseControlEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='583' u='c' c='_ZN4llvm2rc8RCParser12parseControlEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='588' u='c' c='_ZN4llvm2rc8RCParser12parseControlEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='662' u='c' c='_ZN4llvm2rc8RCParser18parseMenuItemsListEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='699' u='c' c='_ZN4llvm2rc8RCParser24parseStringTableResourceEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='796' u='c' c='_ZN4llvm2rc8RCParser24parseCharacteristicsStmtEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='801' u='c' c='_ZN4llvm2rc8RCParser16parseVersionStmtEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='818' u='c' c='_ZN4llvm2rc8RCParser13parseFontStmtENS1_11OptStmtTypeE'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='842' u='c' c='_ZN4llvm2rc8RCParser14parseStyleStmtEv'/>
<use f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='847' u='c' c='_ZN4llvm2rc8RCParser16parseExStyleStmtEv'/>
<doc f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.cpp' l='114'>// An integer description might consist of a single integer or
// an arithmetic expression evaluating to the integer. The expressions
// can contain the following tokens: &lt;int&gt; ( ) + - | &amp; ~ not. Their meaning
// is the same as in C++ except for &apos;not&apos; expression.
// The operators in the original RC implementation have the following
// precedence:
//   1) Unary operators (- ~ not),
//   2) Binary operators (+ - &amp; |), with no precedence.
//
// &apos;not&apos; expression is mostly useful for style values. It evaluates to 0,
// but value given to the operator is stored separately from integer value.
// It&apos;s mostly useful for control style expressions and causes bits from
// default control style to be excluded from generated style. For binary
// operators the mask from the right operand is applied to the left operand
// and masks from both operands are combined in operator result.
//
// The following grammar is used to parse the expressions Exp1:
//   Exp1 ::= Exp2 || Exp1 + Exp2 || Exp1 - Exp2 || Exp1 | Exp2 || Exp1 &amp; Exp2
//   Exp2 ::= -Exp2 || ~Exp2 || not Expr2 || Int || (Exp1).
// (More conveniently, Exp1 is a non-empty sequence of Exp2 expressions,
// separated by binary operators.)
//
// Expressions of type Exp1 are read by parseIntExpr1(Inner) method, while Exp2
// is read by parseIntExpr2().
//
// The original Microsoft tool handles multiple unary operators incorrectly.
// For example, in 16-bit little-endian integers:
//    1 =&gt; 01 00, -1 =&gt; ff ff, --1 =&gt; ff ff, ---1 =&gt; 01 00;
//    1 =&gt; 01 00, ~1 =&gt; fe ff, ~~1 =&gt; fd ff, ~~~1 =&gt; fc ff.
// Our implementation differs from the original one and handles these
// operators correctly:
//    1 =&gt; 01 00, -1 =&gt; ff ff, --1 =&gt; 01 00, ---1 =&gt; ff ff;
//    1 =&gt; 01 00, ~1 =&gt; fe ff, ~~1 =&gt; 01 00, ~~~1 =&gt; fe ff.</doc>
<doc f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.h' l='79'>// The following methods try to read a single token, check if it has the
  // correct type and then parse it.
  // Each integer can be written as an arithmetic expression producing an
  // unsigned 32-bit integer.</doc>
<doc f='llvm/llvm/tools/llvm-rc/ResourceScriptParser.h' l='83'>// Parse an integer.</doc>
