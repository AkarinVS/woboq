<dec f='llvm/polly/lib/External/isl/isl_map_private.h' l='423' type='isl_int * isl_set_wrap_facet(isl_map * set, isl_int * facet, isl_int * ridge)'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='1299' u='c' c='add_wrap'/>
<def f='llvm/polly/lib/External/isl/isl_convex_hull.c' l='308' ll='374' type='isl_int * isl_set_wrap_facet(isl_map * set, isl_int * facet, isl_int * ridge)'/>
<use f='llvm/polly/lib/External/isl/isl_convex_hull.c' l='430' u='c' c='initial_facet_constraint'/>
<use f='llvm/polly/lib/External/isl/isl_convex_hull.c' l='580' u='c' c='extend'/>
<doc f='llvm/polly/lib/External/isl/isl_convex_hull.c' l='251'>/* Given a facet &quot;facet&quot; of the convex hull of &quot;set&quot; and a facet &quot;ridge&quot;
 * of that facet, compute the other facet of the convex hull that contains
 * the ridge.
 *
 * We first transform the set such that the facet constraint becomes
 *
 *			x_1 &gt;= 0
 *
 * I.e., the facet lies in
 *
 *			x_1 = 0
 *
 * and on that facet, the constraint that defines the ridge is
 *
 *			x_2 &gt;= 0
 *
 * (This transformation is not strictly needed, all that is needed is
 * that the ridge contains the origin.)
 *
 * Since the ridge contains the origin, the cone of the convex hull
 * will be of the form
 *
 *			x_1 &gt;= 0
 *			x_2 &gt;= a x_1
 *
 * with this second constraint defining the new facet.
 * The constant a is obtained by settting x_1 in the cone of the
 * convex hull to 1 and minimizing x_2.
 * Now, each element in the cone of the convex hull is the sum
 * of elements in the cones of the basic sets.
 * If a_i is the dilation factor of basic set i, then the problem
 * we need to solve is
 *
 *			min \sum_i x_{i,2}
 *			st
 *				\sum_i x_{i,1} = 1
 *				    a_i   &gt;= 0
 *				  [ a_i ]
 *				A [ x_i ] &gt;= 0
 *
 * with
 *				    [  1  ]
 *				A_i [ x_i ] &gt;= 0
 *
 * the constraints of each (transformed) basic set.
 * If a = n/d, then the constraint defining the new facet (in the transformed
 * space) is
 *
 *			-n x_1 + d x_2 &gt;= 0
 *
 * In the original space, we need to take the same combination of the
 * corresponding constraints &quot;facet&quot; and &quot;ridge&quot;.
 *
 * If a = -infty = &quot;-1/0&quot;, then we just return the original facet constraint.
 * This means that the facet is unbounded, but has a bounded intersection
 * with the union of sets.
 */</doc>
