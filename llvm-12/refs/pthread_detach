<dec f='include/pthread.h' l='247' type='int pthread_detach(pthread_t __th)'/>
<doc f='include/pthread.h' l='243'>/* Indicate that the thread TH is never to be joined with PTHREAD_JOIN.
   The resources of TH will therefore be freed immediately when it
   terminates, instead of waiting for another thread to perform PTHREAD_JOIN
   on it.  */</doc>
<use f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_x86_64/include/c++/v1/__threading_support' l='534' u='c' c='_ZNSt8__Fuzzer22__libcpp_thread_detachEPm'/>
<use f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_i386/include/c++/v1/__threading_support' l='534' u='c' c='_ZNSt8__Fuzzer22__libcpp_thread_detachEPm'/>
<def f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='482' macro='1' type='int pthread_detach(void * th)'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='523' u='a' c='__lsan::InitializeInterceptors'/>
<def f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='1034' macro='1' type='int pthread_detach(void * th)'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='2716' u='a' c='__tsan::InitializeInterceptors'/>
<use f='llvm/build/include/c++/v1/__threading_support' l='534' u='c' c='_ZNSt3__122__libcpp_thread_detachEPm'/>
<use f='llvm/libcxx/include/__threading_support' l='534' u='c' c='_ZNSt3__122__libcpp_thread_detachEPm'/>
<use f='llvm/lldb/source/Host/posix/HostThreadPosix.cpp' l='56' u='c' c='_ZN12lldb_private15HostThreadPosix6DetachEv'/>
<use f='llvm/llvm/lib/Support/Unix/Threading.inc' l='99' u='c' c='_ZL27llvm_execute_on_thread_implPFPvS_ES_N4llvm8OptionalIjEEN12_GLOBAL__N_113JoiningPolicyE'/>
