<def f='llvm/lldb/include/lldb/Utility/Broadcaster.h' l='388' ll='391' type='bool lldb_private::Broadcaster::HijackBroadcaster(const lldb::ListenerSP &amp; listener_sp, uint32_t event_mask = (4294967295U))'/>
<doc f='llvm/lldb/include/lldb/Utility/Broadcaster.h' l='370'>/// Provides a simple mechanism to temporarily redirect events from
  /// broadcaster.  When you call this function passing in a listener and
  /// event type mask, all events from the broadcaster matching the mask will
  /// now go to the hijacking listener. Only one hijack can occur at a time.
  /// If we need more than this we will have to implement a Listener stack.
  ///
  /// \param[in] listener_sp
  ///     A Listener object.  You do not need to call StartListeningForEvents
  ///     for this broadcaster (that would fail anyway since the event bits
  ///     would most likely be taken by the listener(s) you are usurping.
  ///
  /// \param[in] event_mask
  ///     The event bits \a listener wishes to hijack.
  ///
  /// \return
  ///     \b True if the event mask could be hijacked, \b false otherwise.
  ///
  /// \see uint32_t Broadcaster::AddListener (Listener*, uint32_t)</doc>
<use f='llvm/lldb/source/Target/Process.cpp' l='896' u='c' c='_ZN12lldb_private7Process19HijackProcessEventsESt10shared_ptrINS_8ListenerEE'/>
