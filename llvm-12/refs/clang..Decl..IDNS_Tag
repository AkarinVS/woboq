<dec f='llvm/clang/include/clang/AST/DeclBase.h' l='128' type='2'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='830' u='r' c='_ZN5clang4Decl24isTagIdentifierNamespaceEj'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='1115' u='r' c='_ZN5clang4Decl21setObjectOfFriendDeclEb'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='1117' u='r' c='_ZN5clang4Decl21setObjectOfFriendDeclEb'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='1120' u='r' c='_ZN5clang4Decl21setObjectOfFriendDeclEb'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='1121' u='r' c='_ZN5clang4Decl21setObjectOfFriendDeclEb'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='1147' u='r' c='_ZNK5clang4Decl19getFriendObjectKindEv'/>
<use f='llvm/clang/include/clang/AST/Decl.h' l='4564' u='r' c='_ZN5clang12Redeclarable15setPreviousDeclEPT_'/>
<doc f='llvm/clang/include/clang/AST/DeclBase.h' l='122'>/// Tags, declared with &apos;struct foo;&apos; and referenced with
    /// &apos;struct foo&apos;.  All tags are also types.  This is what
    /// elaborated-type-specifiers look for in C.
    /// This also contains names that conflict with tags in the
    /// same scope but that are otherwise ordinary names (non-type
    /// template parameters and indirect field declarations).</doc>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2643' u='r' c='_ZN5clang15ASTNodeImporter13VisitEnumDeclEPNS_8EnumDeclE'/>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='2744' u='r' c='_ZN5clang15ASTNodeImporter15VisitRecordDeclEPNS_10RecordDeclE'/>
<use f='llvm/clang/lib/AST/CXXInheritance.cpp' l='383' u='r' c='_ZL16isOrdinaryMemberPKN5clang9NamedDeclE'/>
<use f='llvm/clang/lib/AST/Decl.cpp' l='4895' u='r' c='_ZN5clang17IndirectFieldDeclC1ERNS_10ASTContextEPNS_11DeclContextENS_14SourceLocationENS_15DeclarationNameENS_8QualTypeEN4llvm15MutableArrayRefIPNS_9NamedDeclEEE'/>
<use f='llvm/clang/lib/AST/DeclBase.cpp' l='764' u='r' c='_ZN5clang4Decl29getIdentifierNamespaceForKindENS0_4KindE'/>
<use f='llvm/clang/lib/AST/DeclBase.cpp' l='800' u='r' c='_ZN5clang4Decl29getIdentifierNamespaceForKindENS0_4KindE'/>
<use f='llvm/clang/lib/AST/DeclBase.cpp' l='812' u='r' c='_ZN5clang4Decl29getIdentifierNamespaceForKindENS0_4KindE'/>
<use f='llvm/clang/lib/Frontend/ASTUnit.cpp' l='2023' u='r' c='_ZL20CalculateHiddenNamesRKN5clang21CodeCompletionContextEPNS_20CodeCompletionResultEjRNS_10ASTContextERN4llvm9StringSetINS7_20BumpPtrAllocatorImplINS361447'/>
<use f='llvm/clang/lib/Frontend/ASTUnit.cpp' l='2029' u='r' c='_ZL20CalculateHiddenNamesRKN5clang21CodeCompletionContextEPNS_20CodeCompletionResultEjRNS_10ASTContextERN4llvm9StringSetINS7_20BumpPtrAllocatorImplINS361447'/>
<use f='llvm/clang/lib/Sema/SemaCodeComplete.cpp' l='1376' u='r' c='_ZNK12_GLOBAL__N_113ResultBuilder14IsOrdinaryNameEPKN5clang9NamedDeclE'/>
<use f='llvm/clang/lib/Sema/SemaCodeComplete.cpp' l='1401' u='r' c='_ZNK12_GLOBAL__N_113ResultBuilder21IsOrdinaryNonTypeNameEPKN5clang9NamedDeclE'/>
<use f='llvm/clang/lib/Sema/SemaCodeComplete.cpp' l='1428' u='r' c='_ZNK12_GLOBAL__N_113ResultBuilder22IsOrdinaryNonValueNameEPKN5clang9NamedDeclE'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='221' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='246' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='248' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='259' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='272' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='290' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Serialization/ASTReaderDecl.cpp' l='3701' u='r' c='_ZN5clang13ASTDeclReader18attachPreviousDeclERNS_9ASTReaderEPNS_4DeclES4_S4_'/>
