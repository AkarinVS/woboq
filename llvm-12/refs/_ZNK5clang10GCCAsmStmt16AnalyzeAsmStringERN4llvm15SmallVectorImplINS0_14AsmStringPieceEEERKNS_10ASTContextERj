<dec f='llvm/clang/include/clang/AST/Stmt.h' l='3051' type='unsigned int clang::GCCAsmStmt::AnalyzeAsmString(SmallVectorImpl&lt;clang::GCCAsmStmt::AsmStringPiece&gt; &amp; Pieces, const clang::ASTContext &amp; C, unsigned int &amp; DiagOffs) const'/>
<doc f='llvm/clang/include/clang/AST/Stmt.h' l='3046'>/// AnalyzeAsmString - Analyze the asm string of the current asm, decomposing
  /// it into pieces.  If the asm string is erroneous, emit errors and return
  /// true, otherwise return false.  This handles canonicalization and
  /// translation of strings from GCC syntax to LLVM IR syntax, and handles
  //// flattening of named references like %[foo] to Operand AsmStringPiece&apos;s.</doc>
<def f='llvm/clang/lib/AST/Stmt.cpp' l='594' ll='768' type='unsigned int clang::GCCAsmStmt::AnalyzeAsmString(SmallVectorImpl&lt;clang::GCCAsmStmt::AsmStringPiece&gt; &amp; Pieces, const clang::ASTContext &amp; C, unsigned int &amp; DiagOffs) const'/>
<use f='llvm/clang/lib/AST/Stmt.cpp' l='776' u='c' c='_ZNK5clang10GCCAsmStmt17generateAsmStringB5cxx11ERKNS_10ASTContextE'/>
<doc f='llvm/clang/lib/AST/Stmt.cpp' l='591'>/// AnalyzeAsmString - Analyze the asm string of the current asm, decomposing
/// it into pieces.  If the asm string is erroneous, emit errors and return
/// true, otherwise return false.</doc>
<use f='llvm/clang/lib/Sema/SemaStmtAsm.cpp' l='482' u='c' c='_ZN5clang4Sema15ActOnGCCAsmStmtENS_14SourceLocationEbbjjPPNS_14IdentifierInfoEN4llvm15MutableArrayRefIPNS_4ExprEEES9_S8_S9_jS1_'/>
