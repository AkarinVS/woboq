<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='154' type='bool llvm::JumpThreadingPass::processBranchOnPHI(llvm::PHINode * PN)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1235' u='c' c='_ZN4llvm17JumpThreadingPass12processBlockEPNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1797' ll='1824' type='bool llvm::JumpThreadingPass::processBranchOnPHI(llvm::PHINode * PN)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1794'>/// processBranchOnPHI - We have an otherwise unthreadable conditional branch on
/// a PHI node (or freeze PHI) in the current block.  See if there are any
/// simplifications we can do based on inputs to the phi node.</doc>
