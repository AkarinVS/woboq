<dec f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='213' type='lldb::ExpressionResults lldb_private::FunctionCaller::ExecuteFunction(lldb_private::ExecutionContext &amp; exe_ctx, lldb::addr_t * args_addr_ptr, const lldb_private::EvaluateExpressionOptions &amp; options, lldb_private::DiagnosticManager &amp; diagnostic_manager, lldb_private::Value &amp; results)'/>
<def f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='313' ll='393' type='lldb::ExpressionResults lldb_private::FunctionCaller::ExecuteFunction(lldb_private::ExecutionContext &amp; exe_ctx, lldb::addr_t * args_addr_ptr, const lldb_private::EvaluateExpressionOptions &amp; options, lldb_private::DiagnosticManager &amp; diagnostic_manager, lldb_private::Value &amp; results)'/>
<doc f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='181'>/// Run the function this FunctionCaller was created with.
  ///
  /// This is the full version.
  ///
  /// \param[in] exe_ctx
  ///     The thread &amp; process in which this function will run.
  ///
  /// \param[in] args_addr_ptr
  ///     If nullptr, the function will take care of allocating &amp; deallocating
  ///     the wrapper
  ///     args structure.  Otherwise, if set to LLDB_INVALID_ADDRESS, a new
  ///     structure
  ///     will be allocated, filled and the address returned to you.  You are
  ///     responsible
  ///     for deallocating it.  And if passed in with a value other than
  ///     LLDB_INVALID_ADDRESS,
  ///     this should point to an already allocated structure with the values
  ///     already written.
  ///
  /// \param[in] diagnostic_manager
  ///     The diagnostic manager to report errors to.
  ///
  /// \param[in] options
  ///     The options for this expression execution.
  ///
  /// \param[out] results
  ///     The result value will be put here after running the function.
  ///
  /// \return
  ///     Returns one of the ExpressionResults enum indicating function call
  ///     status.</doc>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI/ItaniumABILanguageRuntime.cpp' l='576' u='c' c='_ZN12lldb_private25ItaniumABILanguageRuntime27GetExceptionObjectForThreadESt10shared_ptrINS_6ThreadEE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntime.cpp' l='194' u='c' c='_ZN12lldb_private16AppleObjCRuntime20GetObjectDescriptionERNS_6StreamERNS_5ValueEPNS_21ExecutionContextScopeE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntimeV2.cpp' l='1430' u='c' c='_ZN12lldb_private18AppleObjCRuntimeV231UpdateISAToDescriptorMapDynamicER16RemoteNXMapTable'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntimeV2.cpp' l='1709' u='c' c='_ZN12lldb_private18AppleObjCRuntimeV235UpdateISAToDescriptorMapSharedCacheEv'/>
<use f='llvm/lldb/source/Plugins/Platform/POSIX/PlatformPOSIX.cpp' l='906' u='c' c='_ZN13PlatformPOSIX11DoLoadImageEPN12lldb_private7ProcessERKNS0_8FileSpecEPKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EERNS0_6StatusEPS3_'/>
<use f='llvm/lldb/source/Plugins/SystemRuntime/MacOSX/AppleGetItemInfoHandler.cpp' l='350' u='c' c='_ZN12lldb_private23AppleGetItemInfoHandler11GetItemInfoERNS_6ThreadEmmmRNS_6StatusE'/>
<use f='llvm/lldb/source/Plugins/SystemRuntime/MacOSX/AppleGetPendingItemsHandler.cpp' l='346' u='c' c='_ZN12lldb_private27AppleGetPendingItemsHandler15GetPendingItemsERNS_6ThreadEmmmRNS_6StatusE'/>
<use f='llvm/lldb/source/Plugins/SystemRuntime/MacOSX/AppleGetQueuesHandler.cpp' l='348' u='c' c='_ZN12lldb_private21AppleGetQueuesHandler16GetCurrentQueuesERNS_6ThreadEmmRNS_6StatusE'/>
<use f='llvm/lldb/source/Plugins/SystemRuntime/MacOSX/AppleGetThreadItemInfoHandler.cpp' l='356' u='c' c='_ZN12lldb_private29AppleGetThreadItemInfoHandler17GetThreadItemInfoERNS_6ThreadEmmmRNS_6StatusE'/>
