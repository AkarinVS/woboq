<dec f='llvm/lldb/include/lldb/Host/Host.h' l='103' type='static llvm::Expected&lt;HostThread&gt; lldb_private::Host::StartMonitoringChildProcess(const lldb_private::Host::MonitorChildProcessCallback &amp; callback, lldb::pid_t pid, bool monitor_signals)'/>
<doc f='llvm/lldb/include/lldb/Host/Host.h' l='70'>/// Start monitoring a child process.
  ///
  /// Allows easy monitoring of child processes. \a callback will be called
  /// when the child process exits or if it gets a signal. The callback will
  /// only be called with signals if \a monitor_signals is \b true. \a
  /// callback will usually be called from another thread so the callback
  /// function must be thread safe.
  ///
  /// When the callback gets called, the return value indicates if monitoring
  /// should stop. If \b true is returned from \a callback the information
  /// will be removed. If \b false is returned then monitoring will continue.
  /// If the child process exits, the monitoring will automatically stop after
  /// the callback returned regardless of the callback return value.
  ///
  /// \param[in] callback
  ///     A function callback to call when a child receives a signal
  ///     (if \a monitor_signals is true) or a child exits.
  ///
  /// \param[in] pid
  ///     The process ID of a child process to monitor, -1 for all
  ///     processes.
  ///
  /// \param[in] monitor_signals
  ///     If \b true the callback will get called when the child
  ///     process gets a signal. If \b false, the callback will only
  ///     get called if the child process exits.
  ///
  /// \return
  ///     A thread handle that can be used to cancel the thread that
  ///     was spawned to monitor \a pid.
  ///
  /// \see static void Host::StopMonitoringChildProcess (uint32_t)</doc>
<def f='llvm/lldb/source/Host/common/Host.cpp' l='103' ll='117' type='static llvm::Expected&lt;HostThread&gt; lldb_private::Host::StartMonitoringChildProcess(const Host::MonitorChildProcessCallback &amp; callback, lldb::pid_t pid, bool monitor_signals)'/>
<use f='llvm/lldb/source/Host/common/ProcessLaunchInfo.cpp' l='192' u='c' c='_ZNK12lldb_private17ProcessLaunchInfo14MonitorProcessEv'/>
<use f='llvm/lldb/source/Host/posix/HostProcessPosix.cpp' l='92' u='c' c='_ZN12lldb_private16HostProcessPosix15StartMonitoringERKSt8functionIFbmbiiEEb'/>
