<dec f='llvm/llvm/include/llvm/IR/Constants.h' l='1088' type='static llvm::Constant * llvm::ConstantExpr::getBinOpIdentity(unsigned int Opcode, llvm::Type * Ty, bool AllowRHSConstant = false)'/>
<doc f='llvm/llvm/include/llvm/IR/Constants.h' l='1081'>/// Return the identity constant for a binary opcode.
  /// The identity constant C is defined as X op C = X and C op X = X for every
  /// X when the binary operation is commutative. If the binop is not
  /// commutative, callers can acquire the operand 1 identity constant by
  /// setting AllowRHSConstant to true. For example, any shift has a zero
  /// identity constant for operand 1: X shift 0 = X.
  /// Return nullptr if the operator does not have an identity constant.</doc>
<use f='llvm/llvm/lib/IR/ConstantFold.cpp' l='1099' u='c' c='_ZN4llvm29ConstantFoldBinaryInstructionEjPNS_8ConstantES1_'/>
<def f='llvm/llvm/lib/IR/Constants.cpp' l='2752' ll='2796' type='static llvm::Constant * llvm::ConstantExpr::getBinOpIdentity(unsigned int Opcode, llvm::Type * Ty, bool AllowRHSConstant = false)'/>
<use f='llvm/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h' l='310' u='c' c='_ZN4llvm12InstCombiner29getSafeVectorConstantForBinopENS_11Instruction9BinaryOpsEPNS_8ConstantEb'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='92' u='c' c='_ZL23foldSelectBinOpIdentityRN4llvm10SelectInstERKNS_17TargetLibraryInfoERNS_16InstCombinerImplE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='421' u='c' c='_ZN4llvm16InstCombinerImpl16foldSelectIntoOpERNS_10SelectInstEPNS_5ValueES4_'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='453' u='c' c='_ZN4llvm16InstCombinerImpl16foldSelectIntoOpERNS_10SelectInstEPNS_5ValueES4_'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='1811' u='c' c='_ZL27foldSelectShuffleWith1BinopRN4llvm17ShuffleVectorInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='569' u='c' c='_ZL16getIdentityValueN4llvm11Instruction9BinaryOpsEPNS_5ValueE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='761' u='c' c='_ZN4llvm16InstCombinerImpl29SimplifyUsingDistributiveLawsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='770' u='c' c='_ZN4llvm16InstCombinerImpl29SimplifyUsingDistributiveLawsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='800' u='c' c='_ZN4llvm16InstCombinerImpl29SimplifyUsingDistributiveLawsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='809' u='c' c='_ZN4llvm16InstCombinerImpl29SimplifyUsingDistributiveLawsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='626' u='c' c='_ZL17LinearizeExprTreePN4llvm11InstructionERNS_15SmallVectorImplISt4pairIPNS_5ValueENS_5APIntEEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='1948' u='c' c='_ZN4llvm15ReassociatePass18OptimizeExpressionEPNS_14BinaryOperatorERNS_15SmallVectorImplINS_11reassociate10ValueEntryEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='577' u='c' c='_ZN12_GLOBAL__N_123TailRecursionEliminator17insertAccumulatorEPN4llvm11InstructionE'/>
