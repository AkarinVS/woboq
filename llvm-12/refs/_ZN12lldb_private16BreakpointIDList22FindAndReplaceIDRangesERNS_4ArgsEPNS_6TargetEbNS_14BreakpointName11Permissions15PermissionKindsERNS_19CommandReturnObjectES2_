<dec f='llvm/lldb/include/lldb/Breakpoint/BreakpointIDList.h' l='60' type='static void lldb_private::BreakpointIDList::FindAndReplaceIDRanges(lldb_private::Args &amp; old_args, lldb_private::Target * target, bool allow_locations, BreakpointName::Permissions::PermissionKinds purpose, lldb_private::CommandReturnObject &amp; result, lldb_private::Args &amp; new_args)'/>
<def f='llvm/lldb/source/Breakpoint/BreakpointIDList.cpp' l='111' ll='328' type='static void lldb_private::BreakpointIDList::FindAndReplaceIDRanges(lldb_private::Args &amp; old_args, lldb_private::Target * target, bool allow_locations, BreakpointName::Permissions::PermissionKinds purpose, lldb_private::CommandReturnObject &amp; result, lldb_private::Args &amp; new_args)'/>
<doc f='llvm/lldb/source/Breakpoint/BreakpointIDList.cpp' l='98'>//  This function takes OLD_ARGS, which is usually the result of breaking the
//  command string arguments into
//  an array of space-separated strings, and searches through the arguments for
//  any breakpoint ID range specifiers.
//  Any string in the array that is not part of an ID range specifier is copied
//  directly into NEW_ARGS.  If any
//  ID range specifiers are found, the range is interpreted and a list of
//  canonical breakpoint IDs corresponding to
//  all the current breakpoints and locations in the range are added to
//  NEW_ARGS.  When this function is done,
//  NEW_ARGS should be a copy of OLD_ARGS, with and ID range specifiers replaced
//  by the members of the range.</doc>
<use f='llvm/lldb/source/Commands/CommandObjectBreakpoint.cpp' l='2458' u='c' c='_ZN12lldb_private32CommandObjectMultiwordBreakpoint9VerifyIDsERNS_4ArgsEPNS_6TargetEbRNS_19CommandReturnObjectEPNS_16BreakpointIDListENS_14BreakpointN16009551'/>
