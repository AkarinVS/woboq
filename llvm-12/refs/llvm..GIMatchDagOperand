<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagEdge.h' l='39'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagEdge.h' l='41'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagEdge.h' l='44' c='_ZN4llvm14GIMatchDagEdgeC1ENS_9StringRefEPKNS_15GIMatchDagInstrEPKNS_17GIMatchDagOperandES4_S7_'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagEdge.h' l='45' c='_ZN4llvm14GIMatchDagEdgeC1ENS_9StringRefEPKNS_15GIMatchDagInstrEPKNS_17GIMatchDagOperandES4_S7_'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagEdge.h' l='50' c='_ZNK4llvm14GIMatchDagEdge9getFromMOEv'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagEdge.h' l='52' c='_ZNK4llvm14GIMatchDagEdge7getToMOEv'/>
<def f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagOperands.h' l='45' ll='67'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagOperands.h' l='81'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagOperands.h' l='84'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagPredicateDependencyEdge.h' l='29'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagPredicateDependencyEdge.h' l='34'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagPredicateDependencyEdge.h' l='38' c='_ZN4llvm33GIMatchDagPredicateDependencyEdgeC1EPKNS_15GIMatchDagInstrEPKNS_17GIMatchDagOperandEPKNS_19GIMatchDagPredicateES6_'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagPredicateDependencyEdge.h' l='40' c='_ZN4llvm33GIMatchDagPredicateDependencyEdgeC1EPKNS_15GIMatchDagInstrEPKNS_17GIMatchDagOperandEPKNS_19GIMatchDagPredicateES6_'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagPredicateDependencyEdge.h' l='45' c='_ZNK4llvm33GIMatchDagPredicateDependencyEdge13getRequiredMOEv'/>
<use f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagPredicateDependencyEdge.h' l='47' c='_ZNK4llvm33GIMatchDagPredicateDependencyEdge14getPredicateOpEv'/>
<use f='llvm/llvm/utils/TableGen/GICombinerEmitter.cpp' l='120'/>
<use f='llvm/llvm/utils/TableGen/GICombinerEmitter.cpp' l='124' c='_ZN12_GLOBAL__N_111CombineRule7VarInfoC1EPKN4llvm15GIMatchDagInstrEPKNS2_17GIMatchDagOperandEPKNS2_7DagInitE'/>
<size>32</size>
<doc f='llvm/llvm/utils/TableGen/GlobalISel/GIMatchDagOperands.h' l='24'>/// Describes an operand of a MachineInstr w.r.t the DAG Matching. This
/// information is derived from CodeGenInstruction::Operands but is more
/// readily available for context-less access as we don&apos;t need to know which
/// instruction it&apos;s used with or know how many defs that instruction had.
///
/// There may be multiple GIMatchDagOperand&apos;s with the same contents. However,
/// they are uniqued within the set of instructions that have the same overall
/// operand list. For example, given:
///     Inst1 operands ($dst:&lt;def&gt;, $src1, $src2)
///     Inst2 operands ($dst:&lt;def&gt;, $src1, $src2)
///     Inst3 operands ($dst:&lt;def&gt;, $src)
/// $src1 will have a single instance of GIMatchDagOperand shared by Inst1 and
/// Inst2, as will $src2. $dst however, will have two instances one shared
/// between Inst1 and Inst2 and one unique to Inst3. We could potentially
/// fully de-dupe the GIMatchDagOperand instances but the saving is not expected
/// to be worth the overhead.
///
/// The result of this is that the address of the object can be relied upon to
/// trivially identify commonality between two instructions which will be useful
/// when generating the matcher. When the pointers differ, the contents can be
/// inspected instead.</doc>
<mbr r='llvm::GIMatchDagOperand::Idx' o='0' t='unsigned int'/>
<mbr r='llvm::GIMatchDagOperand::Name' o='64' t='llvm::StringRef'/>
<mbr r='llvm::GIMatchDagOperand::IsDef' o='192' t='bool'/>
<fun r='_ZN4llvm17GIMatchDagOperandC1EjNS_9StringRefEb'/>
<fun r='_ZNK4llvm17GIMatchDagOperand6getIdxEv'/>
<fun r='_ZNK4llvm17GIMatchDagOperand7getNameEv'/>
<fun r='_ZNK4llvm17GIMatchDagOperand5isDefEv'/>
<fun r='_ZNK4llvm17GIMatchDagOperand7ProfileERNS_16FoldingSetNodeIDE'/>
<fun r='_ZN4llvm17GIMatchDagOperand7ProfileERNS_16FoldingSetNodeIDEmNS_9StringRefEb'/>
