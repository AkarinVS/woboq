<dec f='include/python3.8/cpython/initconfig.h' l='189' type='wchar_t *'/>
<offset>512</offset>
<doc f='include/python3.8/cpython/initconfig.h' l='156'>/* Python filesystem encoding and error handler:
       sys.getfilesystemencoding() and sys.getfilesystemencodeerrors().

       Default encoding and error handler:

       * if Py_SetStandardStreamEncoding() has been called: they have the
         highest priority;
       * PYTHONIOENCODING environment variable;
       * The UTF-8 Mode uses UTF-8/surrogateescape;
       * If Python forces the usage of the ASCII encoding (ex: C locale
         or POSIX locale on FreeBSD or HP-UX), use ASCII/surrogateescape;
       * locale encoding: ANSI code page on Windows, UTF-8 on Android and
         VxWorks, LC_CTYPE locale encoding on other platforms;
       * On Windows, &quot;surrogateescape&quot; error handler;
       * &quot;surrogateescape&quot; error handler if the LC_CTYPE locale is &quot;C&quot; or &quot;POSIX&quot;;
       * &quot;surrogateescape&quot; error handler if the LC_CTYPE locale has been coerced
         (PEP 538);
       * &quot;strict&quot; error handler.

       Supported error handlers: &quot;strict&quot;, &quot;surrogateescape&quot; and
       &quot;surrogatepass&quot;. The surrogatepass error handler is only supported
       if Py_DecodeLocale() and Py_EncodeLocale() use directly the UTF-8 codec;
       it&apos;s only used on Windows.

       initfsencoding() updates the encoding to the Python codec name.
       For example, &quot;ANSI_X3.4-1968&quot; is replaced with &quot;ascii&quot;.

       On Windows, sys._enablelegacywindowsfsencoding() sets the
       encoding/errors to mbcs/replace at runtime.


       See Py_FileSystemDefaultEncoding and Py_FileSystemDefaultEncodeErrors.
       */</doc>
