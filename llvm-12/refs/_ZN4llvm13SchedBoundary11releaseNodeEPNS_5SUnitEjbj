<dec f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='771' type='void llvm::SchedBoundary::releaseNode(llvm::SUnit * SU, unsigned int ReadyCycle, bool InPQueue, unsigned int Idx = 0)'/>
<use f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='970' u='c' c='_ZN4llvm16GenericScheduler14releaseTopNodeEPNS_5SUnitE'/>
<use f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='978' u='c' c='_ZN4llvm16GenericScheduler17releaseBottomNodeEPNS_5SUnitE'/>
<use f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='1058' u='c' c='_ZN4llvm20PostGenericScheduler14releaseTopNodeEPNS_5SUnitE'/>
<def f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='2222' ll='2253' type='void llvm::SchedBoundary::releaseNode(llvm::SUnit * SU, unsigned int ReadyCycle, bool InPQueue, unsigned int Idx = 0)'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='2502' u='c' c='_ZN4llvm13SchedBoundary14releasePendingEv'/>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='763'>/// Release SU to make it ready. If it&apos;s not in hazard, remove it from
  /// pending queue (if already in) and push into available queue.
  /// Otherwise, push the SU into pending queue.
  ///
  /// @param SU The unit to be released.
  /// @param ReadyCycle Until which cycle the unit is ready.
  /// @param InPQueue Whether SU is already in pending queue.
  /// @param Idx Position offset in pending queue (if in it).</doc>
