<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1173' type='Optional&lt;llvm::APInt&gt; llvm::ScalarEvolution::computeConstantDifference(const llvm::SCEV * LHS, const llvm::SCEV * RHS)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1166'>/// Compute \p LHS - \p RHS and returns the result as an APInt if it is a
  /// constant, and None if it isn&apos;t.
  ///
  /// This is intended to be a cheaper version of getMinusSCEV.  We can be
  /// frugal here since we just bail out of actually constructing and
  /// canonicalizing an expression in the cases where the result isn&apos;t going
  /// to be a constant.</doc>
<def f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='10341' ll='10398' type='Optional&lt;llvm::APInt&gt; llvm::ScalarEvolution::computeConstantDifference(const llvm::SCEV * More, const llvm::SCEV * Less)'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='10499' u='c' c='_ZN4llvm15ScalarEvolution34isImpliedCondOperandsViaNoOverflowENS_7CmpInst9PredicateEPKNS_4SCEVES5_S5_S5_'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='10500' u='c' c='_ZN4llvm15ScalarEvolution34isImpliedCondOperandsViaNoOverflowENS_7CmpInst9PredicateEPKNS_4SCEVES5_S5_S5_'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='10996' u='c' c='_ZN4llvm15ScalarEvolution30isImpliedCondOperandsViaRangesENS_7CmpInst9PredicateEPKNS_4SCEVES5_S5_S5_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp' l='5797' u='c' c='_ZL20DbgGatherEqualValuesPN4llvm4LoopERNS_15ScalarEvolutionERNS_8DenseMapIPNS_12DbgValueInstENS_11SmallVectorISt5tupleIJNS_6WeakVHElPNS_12DIExpression1915283'/>
<use f='llvm/llvm/unittests/Analysis/ScalarEvolutionTest.cpp' l='64' u='c' c='_ZN4llvm20ScalarEvolutionsTest25computeConstantDifferenceERNS_15ScalarEvolutionEPKNS_4SCEVES5_'/>
