<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='683' ll='687' type='bool llvm::TargetLoweringBase::hasAndNot(llvm::SDValue X) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='680'>/// Return true if the target has a bitwise and-not operation:
  /// X = ~A &amp; B
  /// This can be used to simplify select or other instructions.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='7524' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner17unfoldMaskedMergeEPN4llvm6SDNodeE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='7530' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner17unfoldMaskedMergeEPN4llvm6SDNodeE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='21729' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner22foldSelectCCToShiftAndERKN4llvm5SDLocENS1_7SDValueES5_S5_S5_NS1_3ISD8CondCodeE'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.h' l='700' c='_ZNK4llvm21AArch64TargetLowering9hasAndNotENS_7SDValueE'/>
<ovr f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='5398' c='_ZNK4llvm17X86TargetLowering9hasAndNotENS_7SDValueE'/>
