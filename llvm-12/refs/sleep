<dec f='include/unistd.h' l='444' type='unsigned int sleep(unsigned int __seconds)'/>
<doc f='include/unistd.h' l='434'>/* Make the process sleep for SECONDS seconds, or until a signal arrives
   and is not ignored.  The function returns the number of seconds less
   than SECONDS which it actually slept (thus zero if it slept the full time).
   If a signal handler does a `longjmp&apos; or modifies the handling of the
   SIGALRM signal while inside `sleep&apos; call, the handling of the SIGALRM
   signal afterwards is undefined.  There is no return value to indicate
   error, but if `sleep&apos; returns SECONDS, it probably didn&apos;t work.

   This function is a cancellation point and therefore not marked with
   __THROW.  */</doc>
<use f='llvm/compiler-rt/lib/fuzzer/FuzzerUtilPosix.cpp' l='141' u='c' c='_ZN6fuzzer12SleepSecondsEi'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp' l='132' u='c' c='__sanitizer::SleepForSeconds'/>
<def f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='347' macro='1' type='unsigned int sleep(unsigned int sec)'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp' l='2800' u='a' c='__tsan::InitializeInterceptors'/>
<use f='llvm/lldb/unittests/Host/MainLoopTest.cpp' l='146' u='c' c='_ZN35MainLoopTest_UnmonitoredSignal_Test8TestBodyEv'/>
<use f='llvm/lldb/unittests/Host/MainLoopTest.cpp' l='148' u='c' c='_ZN35MainLoopTest_UnmonitoredSignal_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/ProgramTest.cpp' l='28' u='c' c='_Z9sleep_forj'/>
