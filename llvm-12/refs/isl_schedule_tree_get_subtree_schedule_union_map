<dec f='llvm/polly/lib/External/isl/isl_schedule_tree.h' l='178' type='isl_union_map * isl_schedule_tree_get_subtree_schedule_union_map(isl_schedule_tree * tree)'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='953' u='c' c='isl_schedule_node_get_subtree_schedule_union_map'/>
<def f='llvm/polly/lib/External/isl/isl_schedule_tree.c' l='2018' ll='2027' type='isl_union_map * isl_schedule_tree_get_subtree_schedule_union_map(isl_schedule_tree * tree)'/>
<doc f='llvm/polly/lib/External/isl/isl_schedule_tree.c' l='2006'>/* Return the subtree schedule of a node that contains some schedule
 * information, i.e., a node that would not be skipped by
 * isl_schedule_tree_first_schedule_descendant and that is not a leaf.
 *
 * If the tree contains any expansions, then the returned subtree
 * schedule is formulated in terms of the expanded domains.
 * The tree is not allowed to contain any extension nodes.
 *
 * We start with an initial zero-dimensional subtree schedule based
 * on the domain information in the root node and then extend it
 * based on the schedule information in the root node and its descendants.
 */</doc>
