<dec f='llvm/polly/include/polly/ScopBuilder.h' l='576' type='void polly::ScopBuilder::addArrayAccess(polly::ScopStmt * Stmt, polly::MemAccInst MemAccInst, MemoryAccess::AccessType AccType, llvm::Value * BaseAddress, llvm::Type * ElemType, bool IsAffine, ArrayRef&lt;const llvm::SCEV *&gt; Subscripts, ArrayRef&lt;const llvm::SCEV *&gt; Sizes, llvm::Value * AccessValue)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1671' u='c' c='_ZN5polly11ScopBuilder24buildAccessMultiDimFixedENS_10MemAccInstEPNS_8ScopStmtE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1722' u='c' c='_ZN5polly11ScopBuilder24buildAccessMultiDimParamENS_10MemAccInstEPNS_8ScopStmtE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1766' u='c' c='_ZN5polly11ScopBuilder23buildAccessMemIntrinsicENS_10MemAccInstEPNS_8ScopStmtE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1788' u='c' c='_ZN5polly11ScopBuilder23buildAccessMemIntrinsicENS_10MemAccInstEPNS_8ScopStmtE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1840' u='c' c='_ZN5polly11ScopBuilder19buildAccessCallInstENS_10MemAccInstEPNS_8ScopStmtE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1890' u='c' c='_ZN5polly11ScopBuilder20buildAccessSingleDimENS_10MemAccInstEPNS_8ScopStmtE'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2308' ll='2327' type='void polly::ScopBuilder::addArrayAccess(polly::ScopStmt * Stmt, polly::MemAccInst MemAccInst, MemoryAccess::AccessType AccType, llvm::Value * BaseAddress, llvm::Type * ElementType, bool IsAffine, ArrayRef&lt;const llvm::SCEV *&gt; Subscripts, ArrayRef&lt;const llvm::SCEV *&gt; Sizes, llvm::Value * AccessValue)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3690' u='c' c='_ZN5polly11ScopBuilder9buildScopERN4llvm6RegionERNS1_15AssumptionCacheE'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='562'>/// Create a MemoryAccess that represents either a LoadInst or
  /// StoreInst.
  ///
  /// @param Stmt        The statement to add the MemoryAccess to.
  /// @param MemAccInst  The LoadInst or StoreInst.
  /// @param AccType     The kind of access.
  /// @param BaseAddress The accessed array&apos;s base address.
  /// @param ElemType    The type of the accessed array elements.
  /// @param IsAffine    Whether all subscripts are affine expressions.
  /// @param Subscripts  Access subscripts per dimension.
  /// @param Sizes       The array dimension&apos;s sizes.
  /// @param AccessValue Value read or written.
  ///
  /// @see MemoryKind</doc>
