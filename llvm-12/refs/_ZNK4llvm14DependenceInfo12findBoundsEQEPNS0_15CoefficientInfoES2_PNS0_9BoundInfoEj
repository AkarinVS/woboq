<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='850' type='void llvm::DependenceInfo::findBoundsEQ(llvm::DependenceInfo::CoefficientInfo * A, llvm::DependenceInfo::CoefficientInfo * B, llvm::DependenceInfo::BoundInfo * Bound, unsigned int K) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='848'>/// findBoundsEQ - Computes the upper and lower bounds for level K
    /// using the = direction. Records them in Bound.</doc>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2638' u='c' c='_ZNK4llvm14DependenceInfo17exploreDirectionsEjPNS0_15CoefficientInfoES2_PNS0_9BoundInfoERKNS_14SmallBitVectorERjPKNS_4SCEVE'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2770' ll='2794' type='void llvm::DependenceInfo::findBoundsEQ(llvm::DependenceInfo::CoefficientInfo * A, llvm::DependenceInfo::CoefficientInfo * B, llvm::DependenceInfo::BoundInfo * Bound, unsigned int K) const'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2755'>// Computes the upper and lower bounds for level K
// using the = direction. Records them in Bound.
// Wolfe gives the equations
//
//    LB^=_k = (A_k - B_k)^- (U_k - L_k) + (A_k - B_k)L_k
//    UB^=_k = (A_k - B_k)^+ (U_k - L_k) + (A_k - B_k)L_k
//
// Since we normalize loops, we can simplify these equations to
//
//    LB^=_k = (A_k - B_k)^- U_k
//    UB^=_k = (A_k - B_k)^+ U_k
//
// We must be careful to handle the case where the upper bound is unknown.
// Note that the lower bound is always &lt;= 0
// and the upper bound is always &gt;= 0.</doc>
