<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h' l='81' type='llvm::LegalizerHelper::LegalizeResult llvm::LegalizerHelper::legalizeInstrStep(llvm::MachineInstr &amp; MI)'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/Legalizer.cpp' l='233' u='c' c='_ZN4llvm9Legalizer23legalizeMachineFunctionERNS_15MachineFunctionERKNS_13LegalizerInfoENS_8ArrayRefIPNS_19GISelChangeObserverEEERNS_20LostDebugLocObse9905316'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h' l='74'>/// Replace \p MI by a sequence of legal instructions that can implement the
  /// same operation. Note that this means \p MI may be deleted, so any iterator
  /// steps should be performed before calling this function. \p Helper should
  /// be initialized to the MachineFunction containing \p MI.
  ///
  /// Considered as an opaque blob, the legal code will use and define the same
  /// registers as \p MI.</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='102' ll='144' type='LegalizerHelper::LegalizeResult llvm::LegalizerHelper::legalizeInstrStep(llvm::MachineInstr &amp; MI)'/>
