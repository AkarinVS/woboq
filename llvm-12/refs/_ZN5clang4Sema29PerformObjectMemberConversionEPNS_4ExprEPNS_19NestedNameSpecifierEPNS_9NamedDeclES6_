<dec f='llvm/clang/include/clang/Sema/Sema.h' l='3568' type='clang::ExprResult clang::Sema::PerformObjectMemberConversion(clang::Expr * From, clang::NestedNameSpecifier * Qualifier, clang::NamedDecl * FoundDecl, clang::NamedDecl * Member)'/>
<def f='llvm/clang/lib/Sema/SemaExpr.cpp' l='2933' ll='3064' type='clang::ExprResult clang::Sema::PerformObjectMemberConversion(clang::Expr * From, clang::NestedNameSpecifier * Qualifier, clang::NamedDecl * FoundDecl, clang::NamedDecl * Member)'/>
<doc f='llvm/clang/lib/Sema/SemaExpr.cpp' l='2913'>/// Cast a base object to a member&apos;s actual type.
///
/// There are two relevant checks:
///
/// C++ [class.access.base]p7:
///
///   If a class member access operator [...] is used to access a non-static
///   data member or non-static member function, the reference is ill-formed if
///   the left operand [...] cannot be implicitly converted to a pointer to the
///   naming class of the right operand.
///
/// C++ [expr.ref]p7:
///
///   If E2 is a non-static data member or a non-static member function, the
///   program is ill-formed if the class of which E2 is directly a member is an
///   ambiguous base (11.8) of the naming class (11.9.3) of E2.
///
/// Note that the latter check does not consider access; the access of the
/// &quot;real&quot; base class is checked as appropriate when checking the access of the
/// member name.</doc>
<use f='llvm/clang/lib/Sema/SemaExprMember.cpp' l='1827' u='c' c='_ZN5clang4Sema23BuildFieldReferenceExprEPNS_4ExprEbNS_14SourceLocationERKNS_12CXXScopeSpecEPNS_9FieldDeclENS_14DeclAccessPairERKNS_19DeclarationNameInfoE'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='5488' u='c' c='_ZN5clang4Sema35PerformObjectArgumentInitializationEPNS_4ExprEPNS_19NestedNameSpecifierEPNS_9NamedDeclEPNS_13CXXMethodDeclE'/>
