<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2679' type='clang::CodeGen::Address clang::CodeGen::CodeGenFunction::EmitVAArg(clang::VAArgExpr * VE, clang::CodeGen::Address &amp; VAListAddr)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2671'>/// Generate code to get an argument from the passed in pointer
  /// and update it accordingly.
  /// \param VE The \c VAArgExpr for which to generate code.
  /// \param VAListAddr Receives a reference to the \c va_list as emitted by
  /// either \c EmitVAListRef or \c EmitMSVAListRef.
  /// \returns A pointer to the argument.
  // FIXME: We should be able to get rid of this method and use the va_arg
  // instruction in LLVM instead once it works well enough.</doc>
<def f='llvm/clang/lib/CodeGen/CGCall.cpp' l='5349' ll='5357' type='clang::CodeGen::Address clang::CodeGen::CodeGenFunction::EmitVAArg(clang::VAArgExpr * VE, clang::CodeGen::Address &amp; VAListAddr)'/>
<doc f='llvm/clang/lib/CodeGen/CGCall.cpp' l='5347'>/* VarArg handling */</doc>
<use f='llvm/clang/lib/CodeGen/CGExprAgg.cpp' l='1280' u='c' c='_ZN12_GLOBAL__N_114AggExprEmitter14VisitVAArgExprEPN5clang9VAArgExprE'/>
<use f='llvm/clang/lib/CodeGen/CGExprComplex.cpp' l='1099' u='c' c='_ZN12_GLOBAL__N_118ComplexExprEmitter14VisitVAArgExprEPN5clang9VAArgExprE'/>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='4598' u='c' c='_ZN12_GLOBAL__N_117ScalarExprEmitter14VisitVAArgExprEPN5clang9VAArgExprE'/>
