<dec f='llvm/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h' l='154' type='llvm::VPBasicBlock * llvm::VPRecipeBuilder::handleReplication(llvm::Instruction * I, llvm::VFRange &amp; Range, llvm::VPBasicBlock * VPBB, DenseMap&lt;llvm::Instruction *, llvm::VPReplicateRecipe *&gt; &amp; PredInst2Recipe, llvm::VPlanPtr &amp; Plan)'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='8470' ll='8511' type='llvm::VPBasicBlock * llvm::VPRecipeBuilder::handleReplication(llvm::Instruction * I, llvm::VFRange &amp; Range, llvm::VPBasicBlock * VPBB, DenseMap&lt;llvm::Instruction *, llvm::VPReplicateRecipe *&gt; &amp; PredInst2Recipe, llvm::VPlanPtr &amp; Plan)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='8730' u='c' c='_ZN4llvm24LoopVectorizationPlanner23buildVPlanWithVPRecipesERNS_7VFRangeERNS_15SmallPtrSetImplIPNS_11InstructionEEERKNS_8DenseMapIS5_S5_NS_12DenseMapI16584774'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h' l='148'>/// Build a VPReplicationRecipe for \p I and enclose it within a Region if it
  /// is predicated. \return \p VPBB augmented with this new recipe if \p I is
  /// not predicated, otherwise \return a new VPBasicBlock that succeeds the new
  /// Region. Update the packing decision of predicated instructions if they
  /// feed \p I. Range.End may be decreased to ensure same recipe behavior from
  /// \p Range.Start to \p Range.End.</doc>
