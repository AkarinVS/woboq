<dec f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='703' type='llvm::Value * polly::VectorBlockGenerator::generateStrideZeroLoad(polly::ScopStmt &amp; Stmt, llvm::LoadInst * Load, polly::ValueMapT &amp; BBMap, isl_id_to_ast_expr * NewAccesses)'/>
<def f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1080' ll='1101' type='llvm::Value * polly::VectorBlockGenerator::generateStrideZeroLoad(polly::ScopStmt &amp; Stmt, llvm::LoadInst * Load, polly::ValueMapT &amp; BBMap, isl_id_to_ast_expr * NewAccesses)'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1149' u='c' c='_ZN5polly20VectorBlockGenerator12generateLoadERNS_8ScopStmtEPN4llvm8LoadInstERNS3_8DenseMapINS3_11AssertingVHINS3_5ValueEEES9_NS3_12DenseMapInfoIS9_EE10253938'/>
<doc f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='690'>/// Load a vector initialized from a single scalar in memory
  ///
  /// In case all elements of a vector are initialized to the same
  /// scalar value, this value is loaded and shuffled into all elements
  /// of the vector.
  ///
  /// %splat_one = load &lt;1 x double&gt;* %p
  /// %splat = shufflevector &lt;1 x double&gt; %splat_one, &lt;1 x
  ///       double&gt; %splat_one, &lt;4 x i32&gt; zeroinitializer
  ///
  /// @param NewAccesses A map from memory access ids to new ast expressions,
  ///                    which may contain new access expressions for certain
  ///                    memory accesses.</doc>
