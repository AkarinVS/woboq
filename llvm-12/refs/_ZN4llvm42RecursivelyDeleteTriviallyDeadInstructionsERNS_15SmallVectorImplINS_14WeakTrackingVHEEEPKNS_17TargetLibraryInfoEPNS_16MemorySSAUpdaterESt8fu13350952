<dec f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='109' type='void llvm::RecursivelyDeleteTriviallyDeadInstructions(SmallVectorImpl&lt;llvm::WeakTrackingVH&gt; &amp; DeadInsts, const llvm::TargetLibraryInfo * TLI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, std::function&lt;void (Value *)&gt; AboutToDeleteCallback = std::function&lt;void (Value *)&gt;())'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='101'>/// Delete all of the instructions in `DeadInsts`, and all other instructions
/// that deleting these in turn causes to be trivially dead.
///
/// The initial instructions in the provided vector must all have empty use
/// lists and satisfy `isInstructionTriviallyDead`.
///
/// `DeadInsts` will be used as scratch storage for this routine and will be
/// empty afterward.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/Attributor.cpp' l='1315' u='c' c='_ZN4llvm10Attributor9cleanupIREv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InstSimplifyPass.cpp' l='71' u='c' c='_ZL7runImplRN4llvm8FunctionERKNS_13SimplifyQueryEPNS_25OptimizationRemarkEmitterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopInstSimplify.cpp' l='155' u='c' c='_ZL16simplifyLoopInstRN4llvm4LoopERNS_13DominatorTreeERNS_8LoopInfoERNS_15AssumptionCacheERKNS_17TargetLibraryInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='495' u='c' c='_ZN4llvm42RecursivelyDeleteTriviallyDeadInstructionsEPNS_5ValueEPKNS_17TargetLibraryInfoEPNS_16MemorySSAUpdaterESt8functionIFvS1_EE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='515' u='c' c='_ZN4llvm52RecursivelyDeleteTriviallyDeadInstructionsPermissiveERNS_15SmallVectorImplINS_14WeakTrackingVHEEEPKNS_17TargetLibraryInfoEPNS_16MemorySSAUpd11484144'/>
<def f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='520' ll='561' type='void llvm::RecursivelyDeleteTriviallyDeadInstructions(SmallVectorImpl&lt;llvm::WeakTrackingVH&gt; &amp; DeadInsts, const llvm::TargetLibraryInfo * TLI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, std::function&lt;void (Value *)&gt; AboutToDeleteCallback = std::function&lt;void (Value *)&gt;())'/>
