<dec f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='144' type='typename std::aligned_storage&lt;sizeof(NodeAllocatorType), alignof(NodeAllocatorType)&gt;::type'/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='172' u='a' c='__xray::FunctionCallTrie::Allocators::Allocators'/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='175' u='a' c='__xray::FunctionCallTrie::Allocators::Allocators'/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='194' u='a' c='__xray::FunctionCallTrie::Allocators::Allocators'/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='196' u='a' c='__xray::FunctionCallTrie::Allocators::Allocators'/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='214' u='a' c='__xray::FunctionCallTrie::Allocators::Allocators'/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='214' u='a' c='__xray::FunctionCallTrie::Allocators::Allocators'/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='226' u='a' c='__xray::FunctionCallTrie::Allocators::Allocators'/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='246' u='a' c='__xray::FunctionCallTrie::Allocators::operator='/>
<use f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='249' u='a' c='__xray::FunctionCallTrie::Allocators::operator='/>
<offset>0</offset>
<doc f='llvm/compiler-rt/lib/xray/xray_function_call_trie.h' l='140'>// Use hosted aligned storage members to allow for trivial move and init.
    // This also allows us to sidestep the potential-failing allocation issue.</doc>
