<def f='llvm/lldb/include/lldb/Core/Architecture.h' l='70' ll='73' type='lldb::addr_t lldb_private::Architecture::GetCallableLoadAddress(lldb::addr_t addr, lldb_private::AddressClass addr_class = AddressClass::eInvalid) const'/>
<doc f='llvm/lldb/include/lldb/Core/Architecture.h' l='61'>/// Get \a load_addr as a callable code load address for this target
  ///
  /// Take \a load_addr and potentially add any address bits that are
  /// needed to make the address callable. For ARM this can set bit
  /// zero (if it already isn&apos;t) if \a load_addr is a thumb function.
  /// If \a addr_class is set to AddressClass::eInvalid, then the address
  /// adjustment will always happen. If it is set to an address class
  /// that doesn&apos;t have code in it, LLDB_INVALID_ADDRESS will be
  /// returned.</doc>
<ovr f='llvm/lldb/source/Plugins/Architecture/Arm/ArchitectureArm.cpp' l='131' c='_ZNK12lldb_private15ArchitectureArm22GetCallableLoadAddressEmNS_12AddressClassE'/>
<ovr f='llvm/lldb/source/Plugins/Architecture/Mips/ArchitectureMips.cpp' l='48' c='_ZNK12lldb_private16ArchitectureMips22GetCallableLoadAddressEmNS_12AddressClassE'/>
<use f='llvm/lldb/source/Target/Target.cpp' l='2502' u='c' c='_ZNK12lldb_private6Target22GetCallableLoadAddressEmNS_12AddressClassE'/>
