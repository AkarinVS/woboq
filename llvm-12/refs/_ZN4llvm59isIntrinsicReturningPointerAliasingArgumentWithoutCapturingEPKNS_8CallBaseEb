<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='365' type='bool llvm::isIntrinsicReturningPointerAliasingArgumentWithoutCapturing(const llvm::CallBase * Call, bool MustPreserveNullness)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='359'>/// {launder,strip}.invariant.group returns pointer that aliases its argument,
  /// and it only captures pointer by returning it.
  /// These intrinsics are not marked as nocapture, because returning is
  /// considered as capture. The arguments are not marked as returned neither,
  /// because it would make it useless. If \p MustPreserveNullness is true,
  /// the intrinsic must preserve the nullness of the pointer.</doc>
<use f='llvm/llvm/lib/Analysis/CaptureTracking.cpp' l='294' u='c' c='_ZN4llvm20PointerMayBeCapturedEPKNS_5ValueEPNS_14CaptureTrackerEj'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4085' u='c' c='_ZN4llvm36getArgumentAliasingToReturnedPointerEPKNS_8CallBaseEb'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4091' ll='4104' type='bool llvm::isIntrinsicReturningPointerAliasingArgumentWithoutCapturing(const llvm::CallBase * Call, bool MustPreserveNullness)'/>
