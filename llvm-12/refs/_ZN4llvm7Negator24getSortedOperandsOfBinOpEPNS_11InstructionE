<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='761' type='std::array&lt;Value *, 2&gt; llvm::Negator::getSortedOperandsOfBinOp(llvm::Instruction * I)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='122' ll='129' type='std::array&lt;Value *, 2&gt; llvm::Negator::getSortedOperandsOfBinOp(llvm::Instruction * I)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='176' u='c' c='_ZN4llvm7Negator9visitImplEPNS_5ValueEj'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='368' u='c' c='_ZN4llvm7Negator9visitImplEPNS_5ValueEj'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='406' u='c' c='_ZN4llvm7Negator9visitImplEPNS_5ValueEj'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='417' u='c' c='_ZN4llvm7Negator9visitImplEPNS_5ValueEj'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp' l='118'>// Due to the InstCombine&apos;s worklist management, there are no guarantees that
// each instruction we&apos;ll encounter has been visited by InstCombine already.
// In particular, most importantly for us, that means we have to canonicalize
// constants to RHS ourselves, since that is helpful sometimes.</doc>
