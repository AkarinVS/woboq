<dec f='llvm/lld/MachO/SyntheticSections.h' l='204' type='void lld::macho::BindingSection::finalizeContents()'/>
<def f='llvm/lld/MachO/SyntheticSections.cpp' l='301' ll='324' type='void lld::macho::BindingSection::finalizeContents()'/>
<doc f='llvm/lld/MachO/SyntheticSections.cpp' l='288'>// Emit bind opcodes, which are a stream of byte-sized opcodes that dyld
// interprets to update a record with the following fields:
//  * segment index (of the segment to write the symbol addresses to, typically
//    the __DATA_CONST segment which contains the GOT)
//  * offset within the segment, indicating the next location to write a binding
//  * symbol type
//  * symbol library ordinal (the index of its library&apos;s LC_LOAD_DYLIB command)
//  * symbol name
//  * addend
// When dyld sees BIND_OPCODE_DO_BIND, it uses the current record state to bind
// a symbol in the GOT, and increments the segment offset to point to the next
// entry. It does *not* clear the record state after doing the bind, so
// subsequent opcodes only need to encode the differences between bindings.</doc>
<use f='llvm/lld/MachO/Writer.cpp' l='765' u='c' c='_ZN12_GLOBAL__N_16Writer3runEv'/>
