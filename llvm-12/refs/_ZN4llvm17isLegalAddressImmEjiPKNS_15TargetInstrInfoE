<def f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='878' ll='896' type='bool llvm::isLegalAddressImm(unsigned int Opcode, int Imm, const llvm::TargetInstrInfo * TII)'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='876'>// Given a memory access Opcode, check that the give Imm would be a valid Offset
// for this instruction using its addressing mode.</doc>
<use f='llvm/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp' l='2688' u='c' c='_ZL30isLegalOrConvertableAddressImmjiPKN4llvm15TargetInstrInfoERi'/>
<use f='llvm/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp' l='2710' u='c' c='_ZL19AdjustBaseAndOffsetPN4llvm12MachineInstrENS_8RegisterEiPKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp' l='2881' u='c' c='_ZN12_GLOBAL__N_123ARMPreAllocLoadStoreOpt20DistributeIncrementsEN4llvm8RegisterE'/>
