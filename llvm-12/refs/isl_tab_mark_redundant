<dec f='llvm/polly/lib/External/isl/isl_tab.h' l='294' type='int isl_tab_mark_redundant(struct isl_tab * tab, int row)'/>
<def f='llvm/polly/lib/External/isl/isl_tab.c' l='956' ll='978' type='int isl_tab_mark_redundant(struct isl_tab * tab, int row)'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='1188' u='c' c='isl_tab_pivot'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='1664' u='c' c='close_row'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='1934' u='c' c='isl_tab_add_ineq'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='1945' u='c' c='isl_tab_add_ineq'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='2059' u='c' c='isl_tab_add_valid_eq'/>
<use f='llvm/polly/lib/External/isl/isl_tab.c' l='3299' u='c' c='isl_tab_detect_redundant'/>
<doc f='llvm/polly/lib/External/isl/isl_tab.c' l='944'>/* Mark row with index &quot;row&quot; as being redundant.
 * If we may need to undo the operation or if the row represents
 * a variable of the original problem, the row is kept,
 * but no longer considered when looking for a pivot row.
 * Otherwise, the row is simply removed.
 *
 * The row may be interchanged with some other row.  If it
 * is interchanged with a later row, return 1.  Otherwise return 0.
 * If the rows are checked in order in the calling function,
 * then a return value of 1 means that the row with the given
 * row number may now contain a different row that hasn&apos;t been checked yet.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_tab_pip.c' l='1677' u='c' c='add_lexmin_ineq'/>
<use f='llvm/polly/lib/External/isl/isl_tab_pip.c' l='1686' u='c' c='add_lexmin_ineq'/>
<use f='llvm/polly/lib/External/isl/isl_tab_pip.c' l='4285' u='c' c='find_solutions_main'/>
