<dec f='llvm/clang/include/clang/AST/ExprConcepts.h' l='291' type='void clang::concepts::ExprRequirement::ReturnTypeRequirement::ReturnTypeRequirement(clang::TemplateParameterList * TPL)'/>
<doc f='llvm/clang/include/clang/AST/ExprConcepts.h' l='285'>/// \brief A &apos;type constraint&apos; style return type requirement.
      /// \param TPL an invented template parameter list containing a single
      /// type parameter with a type-constraint.
      // TODO: Can we maybe not save the whole template parameter list and just
      //  the type constraint? Saving the whole TPL makes it easier to handle in
      //  serialization but is less elegant.</doc>
<def f='llvm/clang/lib/Sema/SemaConcept.cpp' l='1045' ll='1061' type='void clang::concepts::ExprRequirement::ReturnTypeRequirement::ReturnTypeRequirement(clang::TemplateParameterList * TPL)'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='8601' u='c' c='_ZN5clang4Sema24ActOnCompoundRequirementEPNS_4ExprENS_14SourceLocationERNS_12CXXScopeSpecEPNS_20TemplateIdAnnotationEj'/>
