<dec f='llvm/lldb/include/lldb/Breakpoint/BreakpointList.h' l='106' type='void lldb_private::BreakpointList::RemoveInvalidLocations(const lldb_private::ArchSpec &amp; arch)'/>
<doc f='llvm/lldb/include/lldb/Breakpoint/BreakpointList.h' l='93'>/// Removes all invalid breakpoint locations.
  ///
  /// Removes all breakpoint locations in the list with architectures that
  /// aren&apos;t compatible with \a arch. Also remove any breakpoint locations
  /// with whose locations have address where the section has been deleted
  /// (module and object files no longer exist).
  ///
  /// This is typically used after the process calls exec, or anytime the
  /// architecture of the target changes.
  ///
  /// \param[in] arch
  ///     If valid, check the module in each breakpoint to make sure
  ///     they are compatible, otherwise, ignore architecture.</doc>
<def f='llvm/lldb/source/Breakpoint/BreakpointList.cpp' l='63' ll='67' type='void lldb_private::BreakpointList::RemoveInvalidLocations(const lldb_private::ArchSpec &amp; arch)'/>
<use f='llvm/lldb/source/Target/Target.cpp' l='1393' u='c' c='_ZN12lldb_private6Target7DidExecEv'/>
<use f='llvm/lldb/source/Target/Target.cpp' l='1394' u='c' c='_ZN12lldb_private6Target7DidExecEv'/>
