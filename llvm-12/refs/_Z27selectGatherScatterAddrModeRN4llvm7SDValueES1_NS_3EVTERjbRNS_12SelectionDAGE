<def f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='3936' ll='3978' type='void selectGatherScatterAddrMode(llvm::SDValue &amp; BasePtr, llvm::SDValue &amp; Index, llvm::EVT MemVT, unsigned int &amp; Opcode, bool IsGather, llvm::SelectionDAG &amp; DAG)'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='4024' u='c' c='_ZNK4llvm21AArch64TargetLowering12LowerMGATHERENS_7SDValueERNS_12SelectionDAGE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='4082' u='c' c='_ZNK4llvm21AArch64TargetLowering13LowerMSCATTERENS_7SDValueERNS_12SelectionDAGE'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='3927'>// If the base pointer of a masked gather or scatter is null, we
// may be able to swap BasePtr &amp; Index and use the vector + register
// or vector + immediate addressing mode, e.g.
// VECTOR + REGISTER:
//    getelementptr nullptr, &lt;vscale x N x T&gt; (splat(%offset)) + %indices)
// -&gt; getelementptr %offset, &lt;vscale x N x T&gt; %indices
// VECTOR + IMMEDIATE:
//    getelementptr nullptr, &lt;vscale x N x T&gt; (splat(#x)) + %indices)
// -&gt; getelementptr #x, &lt;vscale x N x T&gt; %indices</doc>
