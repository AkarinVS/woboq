<dec f='llvm/lldb/include/lldb/Breakpoint/Watchpoint.h' l='116' type='void lldb_private::Watchpoint::SetCallback(lldb_private::WatchpointHitCallback callback, void * callback_baton, bool is_synchronous = false)'/>
<doc f='llvm/lldb/include/lldb/Breakpoint/Watchpoint.h' l='106'>/// Set the callback action invoked when the watchpoint is hit.
  ///
  /// \param[in] callback
  ///    The method that will get called when the watchpoint is hit.
  /// \param[in] callback_baton
  ///    A void * pointer that will get passed back to the callback function.
  /// \param[in] is_synchronous
  ///    If \b true the callback will be run on the private event thread
  ///    before the stop event gets reported.  If false, the callback will get
  ///    handled on the public event thread after the stop has been posted.</doc>
<def f='llvm/lldb/source/Breakpoint/Watchpoint.cpp' l='64' ll='72' type='void lldb_private::Watchpoint::SetCallback(lldb_private::WatchpointHitCallback callback, void * baton, bool is_synchronous = false)'/>
<doc f='llvm/lldb/source/Breakpoint/Watchpoint.cpp' l='63'>// This function is used when &quot;baton&quot; doesn&apos;t need to be freed</doc>
