<dec f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='271' type='const llvm::BasicBlock * llvm::BasicBlock::getSingleSuccessor() const'/>
<use f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='274' u='c' c='_ZN4llvm10BasicBlock18getSingleSuccessorEv'/>
<doc f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='267'>/// Return the successor of this block if it has a single successor.
  /// Otherwise return a null pointer.
  ///
  /// This method is analogous to getSinglePredecessor above.</doc>
<use f='llvm/llvm/lib/Analysis/LoopNestAnalysis.cpp' l='213' u='c' c='_ZN4llvm8LoopNest19skipEmptyBlockUntilEPKNS_10BasicBlockES3_'/>
<use f='llvm/llvm/lib/Analysis/LoopNestAnalysis.cpp' l='222' u='c' c='_ZN4llvm8LoopNest19skipEmptyBlockUntilEPKNS_10BasicBlockES3_'/>
<use f='llvm/llvm/lib/Analysis/LoopNestAnalysis.cpp' l='227' u='c' c='_ZN4llvm8LoopNest19skipEmptyBlockUntilEPKNS_10BasicBlockES3_'/>
<use f='llvm/llvm/lib/Analysis/LoopNestAnalysis.cpp' l='317' u='c' c='_ZL19checkLoopsStructureRKN4llvm4LoopES2_RNS_15ScalarEvolutionE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5202' u='c' c='_ZL31programUndefinedIfUndefOrPoisonPKN4llvm5ValueEb'/>
<use f='llvm/llvm/lib/ExecutionEngine/Orc/SpeculateAnalyses.cpp' l='71' u='c' c='_ZN4llvm3orc14SpeculateQuery14isStraightLineERKNS_8FunctionE'/>
<def f='llvm/llvm/lib/IR/BasicBlock.cpp' l='294' ll='300' type='const llvm::BasicBlock * llvm::BasicBlock::getSingleSuccessor() const'/>
