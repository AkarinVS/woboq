<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='222' type='bool llvm::CannotBeNegativeZero(const llvm::Value * V, const llvm::TargetLibraryInfo * TLI, unsigned int Depth = 0)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='220'>/// Return true if we can prove that the specified FP value is never equal to
  /// -0.0.</doc>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='4885' u='c' c='_ZL16SimplifyFAddInstPN4llvm5ValueES1_NS_13FastMathFlagsERKNS_13SimplifyQueryEj'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='4932' u='c' c='_ZL16SimplifyFSubInstPN4llvm5ValueES1_NS_13FastMathFlagsERKNS_13SimplifyQueryEj'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='3217' ll='3253' type='bool llvm::CannotBeNegativeZero(const llvm::Value * V, const llvm::TargetLibraryInfo * TLI, unsigned int Depth = 0)'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='3245' u='c' c='_ZN4llvm20CannotBeNegativeZeroEPKNS_5ValueEPKNS_17TargetLibraryInfoEj'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='3384' u='c' c='_ZL31cannotBeOrderedLessThanZeroImplPKN4llvm5ValueEPKNS_17TargetLibraryInfoEbj'/>
<doc f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='3209'>/// Return true if we can prove that the specified FP value is never equal to
/// -0.0.
/// NOTE: Do not check &apos;nsz&apos; here because that fast-math-flag does not guarantee
///       that a value is not -0.0. It only guarantees that -0.0 may be treated
///       the same as +0.0 in floating-point ops.
///
/// NOTE: this function will need to be revisited when we support non-default
/// rounding modes!</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='2195' u='c' c='_ZN4llvm16InstCombinerImpl9visitFSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='110' u='c' c='_ZL23foldSelectBinOpIdentityRN4llvm10SelectInstERKNS_17TargetLibraryInfoERNS_16InstCombinerImplE'/>
