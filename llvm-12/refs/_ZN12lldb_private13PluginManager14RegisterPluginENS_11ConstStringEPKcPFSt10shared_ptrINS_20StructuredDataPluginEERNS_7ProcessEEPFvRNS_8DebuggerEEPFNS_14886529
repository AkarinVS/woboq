<dec f='llvm/lldb/include/lldb/Core/PluginManager.h' l='298' type='static bool lldb_private::PluginManager::RegisterPlugin(lldb_private::ConstString name, const char * description, lldb_private::StructuredDataPluginCreateInstance create_callback, lldb_private::DebuggerInitializeCallback debugger_init_callback = nullptr, lldb_private::StructuredDataFilterLaunchInfo filter_callback = nullptr)'/>
<doc f='llvm/lldb/include/lldb/Core/PluginManager.h' l='263'>// StructuredDataPlugin

  /// Register a StructuredDataPlugin class along with optional
  /// callbacks for debugger initialization and Process launch info
  /// filtering and manipulation.
  ///
  /// \param[in] name
  ///    The name of the plugin.
  ///
  /// \param[in] description
  ///    A description string for the plugin.
  ///
  /// \param[in] create_callback
  ///    The callback that will be invoked to create an instance of
  ///    the callback.  This may not be nullptr.
  ///
  /// \param[in] debugger_init_callback
  ///    An optional callback that will be made when a Debugger
  ///    instance is initialized.
  ///
  /// \param[in] filter_callback
  ///    An optional callback that will be invoked before LLDB
  ///    launches a process for debugging.  The callback must
  ///    do the following:
  ///    1. Only do something if the plugin&apos;s behavior is enabled.
  ///    2. Only make changes for processes that are relevant to the
  ///       plugin.  The callback gets a pointer to the Target, which
  ///       can be inspected as needed.  The ProcessLaunchInfo is
  ///       provided in read-write mode, and may be modified by the
  ///       plugin if, for instance, additional environment variables
  ///       are needed to support the feature when enabled.
  ///
  /// \return
  ///    Returns true upon success; otherwise, false.</doc>
<def f='llvm/lldb/source/Core/PluginManager.cpp' l='923' ll='931' type='static bool lldb_private::PluginManager::RegisterPlugin(lldb_private::ConstString name, const char * description, lldb_private::StructuredDataPluginCreateInstance create_callback, lldb_private::DebuggerInitializeCallback debugger_init_callback = nullptr, lldb_private::StructuredDataFilterLaunchInfo filter_callback = nullptr)'/>
<use f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.cpp' l='1054' u='c' c='_ZN12lldb_private23StructuredDataDarwinLog10InitializeEv'/>
