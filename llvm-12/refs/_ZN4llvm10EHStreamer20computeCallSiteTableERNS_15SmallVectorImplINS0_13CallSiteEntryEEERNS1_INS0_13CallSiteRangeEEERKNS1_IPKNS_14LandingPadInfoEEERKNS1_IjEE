<dec f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.h' l='111' type='void llvm::EHStreamer::computeCallSiteTable(SmallVectorImpl&lt;llvm::EHStreamer::CallSiteEntry&gt; &amp; CallSites, SmallVectorImpl&lt;llvm::EHStreamer::CallSiteRange&gt; &amp; CallSiteRanges, const SmallVectorImpl&lt;const llvm::LandingPadInfo *&gt; &amp; LandingPads, const SmallVectorImpl&lt;unsigned int&gt; &amp; FirstActions)'/>
<doc f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.h' l='103'>/// Compute the call-site table and the call-site ranges. The entry for an
  /// invoke has a try-range containing the call, a non-zero landing pad and an
  /// appropriate action. The entry for an ordinary call has a try-range
  /// containing the call and zero for the landing pad and the action.  Calls
  /// marked &apos;nounwind&apos; have no entry and must not be contained in the try-range
  /// of any entry - they form gaps in the table.  Entries must be ordered by
  /// try-range address. CallSiteRanges vector is only populated for Itanium
  /// exception handling.</doc>
<def f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp' l='231' ll='357' type='void llvm::EHStreamer::computeCallSiteTable(SmallVectorImpl&lt;llvm::EHStreamer::CallSiteEntry&gt; &amp; CallSites, SmallVectorImpl&lt;llvm::EHStreamer::CallSiteRange&gt; &amp; CallSiteRanges, const SmallVectorImpl&lt;const llvm::LandingPadInfo *&gt; &amp; LandingPads, const SmallVectorImpl&lt;unsigned int&gt; &amp; FirstActions)'/>
<use f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp' l='412' u='c' c='_ZN4llvm10EHStreamer18emitExceptionTableEv'/>
<doc f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp' l='211'>/// Compute the call-site table.  The entry for an invoke has a try-range
/// containing the call, a non-zero landing pad, and an appropriate action.  The
/// entry for an ordinary call has a try-range containing the call and zero for
/// the landing pad and the action.  Calls marked &apos;nounwind&apos; have no entry and
/// must not be contained in the try-range of any entry - they form gaps in the
/// table.  Entries must be ordered by try-range address.
///
/// Call-sites are split into one or more call-site ranges associated with
/// different sections of the function.
///
///   - Without -basic-block-sections, all call-sites are grouped into one
///     call-site-range corresponding to the function section.
///
///   - With -basic-block-sections, one call-site range is created for each
///     section, with its FragmentBeginLabel and FragmentEndLabel respectively
//      set to the beginning and ending of the corresponding section and its
//      ExceptionLabel set to the exception symbol dedicated for this section.
//      Later, one LSDA header will be emitted for each call-site range with its
//      call-sites following. The action table and type info table will be
//      shared across all ranges.</doc>
<ovr f='llvm/llvm/lib/CodeGen/AsmPrinter/WasmException.cpp' l='77' c='_ZN4llvm13WasmException20computeCallSiteTableERNS_15SmallVectorImplINS_10EHStreamer13CallSiteEntryEEERNS1_INS2_13CallSiteRangeEEERKNS1_IPKNS_14LandingPadInfoEEERKNS1_IjEE'/>
