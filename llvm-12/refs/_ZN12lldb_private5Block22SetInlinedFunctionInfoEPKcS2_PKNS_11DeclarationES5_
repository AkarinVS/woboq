<dec f='llvm/lldb/include/lldb/Symbol/Block.h' l='316' type='void lldb_private::Block::SetInlinedFunctionInfo(const char * name, const char * mangled, const lldb_private::Declaration * decl_ptr, const lldb_private::Declaration * call_decl_ptr)'/>
<doc f='llvm/lldb/include/lldb/Symbol/Block.h' l='297'>/// Set accessor for any inlined function information.
  ///
  /// \param[in] name
  ///     The method name for the inlined function. This value should
  ///     not be nullptr.
  ///
  /// \param[in] mangled
  ///     The mangled method name for the inlined function. This can
  ///     be nullptr if there is no mangled name for an inlined function
  ///     or if the name is the same as \a name.
  ///
  /// \param[in] decl_ptr
  ///     A optional pointer to declaration information for the
  ///     inlined function information. This value can be nullptr to
  ///     indicate that no declaration information is available.
  ///
  /// \param[in] call_decl_ptr
  ///     Optional calling location declaration information that
  ///     describes from where this inlined function was called.</doc>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp' l='1205' u='c' c='_ZN15SymbolFileDWARF20ParseBlocksRecursiveERN12lldb_private11CompileUnitEPNS0_5BlockERK8DWARFDIEmj'/>
<def f='llvm/lldb/source/Symbol/Block.cpp' l='381' ll='386' type='void lldb_private::Block::SetInlinedFunctionInfo(const char * name, const char * mangled, const lldb_private::Declaration * decl_ptr, const lldb_private::Declaration * call_decl_ptr)'/>
