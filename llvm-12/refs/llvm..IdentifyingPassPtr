<def f='llvm/llvm/include/llvm/CodeGen/TargetPassConfig.h' l='53' ll='77'/>
<use f='llvm/llvm/include/llvm/CodeGen/TargetPassConfig.h' l='187' c='_ZN4llvm16TargetPassConfig14substitutePassEPKvNS_18IdentifyingPassPtrE'/>
<use f='llvm/llvm/include/llvm/CodeGen/TargetPassConfig.h' l='190' c='_ZN4llvm16TargetPassConfig10insertPassEPKvNS_18IdentifyingPassPtrEb'/>
<use f='llvm/llvm/include/llvm/CodeGen/TargetPassConfig.h' l='198' c='_ZN4llvm16TargetPassConfig11disablePassEPKv'/>
<use f='llvm/llvm/include/llvm/CodeGen/TargetPassConfig.h' l='203' c='_ZNK4llvm16TargetPassConfig19getPassSubstitutionEPKv'/>
<size>16</size>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetPassConfig.h' l='39'>/// Discriminated union of Pass ID types.
///
/// The PassConfig API prefers dealing with IDs because they are safer and more
/// efficient. IDs decouple configuration from instantiation. This way, when a
/// pass is overriden, it isn&apos;t unnecessarily instantiated. It is also unsafe to
/// refer to a Pass pointer after adding it to a pass manager, which deletes
/// redundant pass instances.
///
/// However, it is convient to directly instantiate target passes with
/// non-default ctors. These often don&apos;t have a registered PassInfo. Rather than
/// force all target passes to implement the pass registry boilerplate, allow
/// the PassConfig API to handle either type.
///
/// AnalysisID is sadly char*, so PointerIntPair won&apos;t work.</doc>
<mbr r='llvm::IdentifyingPassPtr::IsInstance' o='64' t='bool'/>
<fun r='_ZN4llvm18IdentifyingPassPtrC1Ev'/>
<fun r='_ZN4llvm18IdentifyingPassPtrC1EPKv'/>
<fun r='_ZN4llvm18IdentifyingPassPtrC1EPNS_4PassE'/>
<fun r='_ZNK4llvm18IdentifyingPassPtr7isValidEv'/>
<fun r='_ZNK4llvm18IdentifyingPassPtr10isInstanceEv'/>
<fun r='_ZNK4llvm18IdentifyingPassPtr5getIDEv'/>
<fun r='_ZNK4llvm18IdentifyingPassPtr11getInstanceEv'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='237' c='_ZL12applyDisableN4llvm18IdentifyingPassPtrEb'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='237' c='_ZL12applyDisableN4llvm18IdentifyingPassPtrEb'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='240' c='_ZL12applyDisableN4llvm18IdentifyingPassPtrEb'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='256' c='_ZL12overridePassPKvN4llvm18IdentifyingPassPtrE'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='257' c='_ZL12overridePassPKvN4llvm18IdentifyingPassPtrE'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='315'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='318' c='_ZN12_GLOBAL__N_112InsertedPassC1EPKvN4llvm18IdentifyingPassPtrEb'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='346'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='594' c='_ZN4llvm16TargetPassConfig10insertPassEPKvNS_18IdentifyingPassPtrEb'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='655' c='_ZN4llvm16TargetPassConfig14substitutePassEPKvNS_18IdentifyingPassPtrE'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='659' c='_ZNK4llvm16TargetPassConfig19getPassSubstitutionEPKv'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='668' c='_ZNK4llvm16TargetPassConfig29isPassSubstitutedOrOverriddenEPKv'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='669' c='_ZNK4llvm16TargetPassConfig29isPassSubstitutedOrOverriddenEPKv'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='727' c='_ZN4llvm16TargetPassConfig7addPassEPKvb'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='728' c='_ZN4llvm16TargetPassConfig7addPassEPKvb'/>
<size>16</size>
