<inh f='llvm/llvm/include/llvm/Pass.h' l='238' c='llvm::ModulePass'/>
<def f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptExpressionOpts.h' l='31' ll='41'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptExpressionOpts.cpp' l='185' c='_ZN12lldb_private17lldb_renderscript10RSIRPassesC1EPNS_7ProcessE'/>
<size>40</size>
<doc f='llvm/lldb/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/RenderScriptExpressionOpts.h' l='24'>// RenderScriptRuntimeModulePass is a simple llvm::ModulesPass that is used
// during expression evaluation to apply RenderScript-specific fixes for
// expression evaluation. In particular this is used to make expression IR
// conformant with the ABI generated by the slang frontend. This ModulePass is
// executed in ClangExpressionParser::PrepareForExecution whenever an
// expression&apos;s DWARF language is eLanguageTypeExtRenderscript</doc>
<smbr r='RenderScriptRuntimeModulePass::ID' t='char'/>
<fun r='_ZN29RenderScriptRuntimeModulePassC1EPKN12lldb_private7ProcessE'/>
<fun r='_ZN29RenderScriptRuntimeModulePass11runOnModuleERN4llvm6ModuleE'/>
<mbr r='RenderScriptRuntimeModulePass::m_process_ptr' o='256' t='const lldb_private::Process *'/>
<fun r='_ZN29RenderScriptRuntimeModulePass11runOnModuleERN4llvm6ModuleE'/>
<smbr r='RenderScriptRuntimeModulePass::ID' t='char'/>
