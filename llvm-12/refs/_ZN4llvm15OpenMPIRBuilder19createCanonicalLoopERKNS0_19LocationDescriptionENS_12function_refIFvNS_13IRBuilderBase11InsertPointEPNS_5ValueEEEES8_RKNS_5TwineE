<dec f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='216' type='llvm::CanonicalLoopInfo * llvm::OpenMPIRBuilder::createCanonicalLoop(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::OpenMPIRBuilder::LoopBodyGenCallbackTy BodyGenCB, llvm::Value * TripCount, const llvm::Twine &amp; Name = &quot;loop&quot;)'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='197'>/// Generator for the control flow structure of an OpenMP canonical loop.
  ///
  /// This generator operates on the logical iteration space of the loop, i.e.
  /// the caller only has to provide a loop trip count of the loop as defined by
  /// base language semantics. The trip count is interpreted as an unsigned
  /// integer. The induction variable passed to \p BodyGenCB will be of the same
  /// type and run from 0 to \p TripCount - 1. It is up to the callback to
  /// convert the logical iteration variable to the loop counter variable in the
  /// loop body.
  ///
  /// \param Loc       The insert and source location description. The insert
  ///                  location can be between two instructions or the end of a
  ///                  degenerate block (e.g. a BB under construction).
  /// \param BodyGenCB Callback that will generate the loop body code.
  /// \param TripCount Number of iterations the loop body is executed.
  /// \param Name      Base name used to derive BB and instruction names.
  ///
  /// \returns An object representing the created control flow structure which
  ///          can be used for loop-associated directives.</doc>
<def f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='950' ll='980' type='llvm::CanonicalLoopInfo * llvm::OpenMPIRBuilder::createCanonicalLoop(const llvm::OpenMPIRBuilder::LocationDescription &amp; Loc, llvm::OpenMPIRBuilder::LoopBodyGenCallbackTy BodyGenCB, llvm::Value * TripCount, const llvm::Twine &amp; Name = &quot;loop&quot;)'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='1051' u='c' c='_ZN4llvm15OpenMPIRBuilder19createCanonicalLoopERKNS0_19LocationDescriptionENS_12function_refIFvNS_13IRBuilderBase11InsertPointEPNS_5ValueEEEES8_S8_S8_bbS6_RKNS_5TwineE'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1054' u='c' c='_ZN12_GLOBAL__N_144OpenMPIRBuilderTest_CanonicalLoopSimple_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1183' u='c' c='_ZN12_GLOBAL__N_139OpenMPIRBuilderTest_TileSingleLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1248' u='c' c='_ZN12_GLOBAL__N_140OpenMPIRBuilderTest_TileNestedLoops_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1251' u='c' c='_ZN12_GLOBAL__N_140OpenMPIRBuilderTest_TileNestedLoops_Test8TestBodyEv'/>
