<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h' l='42'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h' l='46' c='_ZN11FunctionASTC1ESt10unique_ptrI12PrototypeASTSt14default_deleteIS1_EES0_I7ExprASTS2_IS5_EE'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h' l='50' c='_ZNK11FunctionAST8getProtoEv'/>
<def f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='248' ll='272'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='306' c='_Z9LogErrorPPKc'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='587' c='_ZL14ParsePrototypev'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='645' c='_ZL14ParsePrototypev'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='665' c='_ZL17ParseTopLevelExprv'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='673' c='_ZL11ParseExternv'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='687'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='1035' c='_ZNK11FunctionAST8getProtoEv'/>
<use f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='1120' c='_ZL16HandleDefinitionv'/>
<size>64</size>
<doc f='llvm/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp' l='245'>/// PrototypeAST - This class represents the &quot;prototype&quot; for a function,
/// which captures its name, and its argument names (thus implicitly the number
/// of arguments the function takes), as well as if it is an operator.</doc>
<mbr r='PrototypeAST::Name' o='0' t='std::string'/>
<mbr r='PrototypeAST::Args' o='256' t='std::vector&lt;std::string&gt;'/>
<mbr r='PrototypeAST::IsOperator' o='448' t='bool'/>
<mbr r='PrototypeAST::Precedence' o='480' t='unsigned int'/>
<fun r='_ZN12PrototypeASTC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EEbj'/>
<fun r='_ZN12PrototypeAST7codegenEv'/>
<fun r='_ZNK12PrototypeAST7getNameB5cxx11Ev'/>
<fun r='_ZNK12PrototypeAST9isUnaryOpEv'/>
<fun r='_ZNK12PrototypeAST10isBinaryOpEv'/>
<fun r='_ZNK12PrototypeAST15getOperatorNameEv'/>
<fun r='_ZNK12PrototypeAST19getBinaryPrecedenceEv'/>
<fun r='_ZN12PrototypeAST7codegenEv'/>
