<dec f='llvm/llvm/include/llvm/Transforms/Scalar/LowerExpectIntrinsic.h' l='35' type='cl::opt&lt;uint32_t&gt;'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.cpp' l='2650' u='a' c='_ZL20getLikelihoodWeightsN5clang4Stmt10LikelihoodE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.cpp' l='2654' u='a' c='_ZL20getLikelihoodWeightsN5clang4Stmt10LikelihoodE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/LowerExpectIntrinsic.cpp' l='49' ll='51' type='cl::opt&lt;uint32_t&gt;'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LowerExpectIntrinsic.cpp' l='60' u='m' c='_ZL15getBranchWeightjPN4llvm8CallInstEi'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/LowerExpectIntrinsic.cpp' l='37'>// These default values are chosen to represent an extremely skewed outcome for
// a condition, but they leave some room for interpretation by later passes.
//
// If the documentation for __builtin_expect() was made explicit that it should
// only be used in extreme cases, we could make this ratio higher. As it stands,
// programmers may be using __builtin_expect() / llvm.expect to annotate that a
// branch is likely or unlikely to be taken.
//
// There is a known dependency on this ratio in CodeGenPrepare when transforming
// &apos;select&apos; instructions. It may be worthwhile to hoist these values to some
// shared space, so they can be used directly by other passes.</doc>
