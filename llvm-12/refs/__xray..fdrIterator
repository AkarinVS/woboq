<def f='llvm/compiler-rt/lib/xray/xray_fdr_logging.cpp' l='192' ll='276' type='XRayBuffer __xray::fdrIterator(const XRayBuffer B)'/>
<use f='llvm/compiler-rt/lib/xray/xray_fdr_logging.cpp' l='717' u='r' c='__xray::fdrLoggingInit'/>
<doc f='llvm/compiler-rt/lib/xray/xray_fdr_logging.cpp' l='175'>// This is the iterator implementation, which knows how to handle FDR-mode
// specific buffers. This is used as an implementation of the iterator function
// needed by __xray_set_buffer_iterator(...). It maintains a global state of the
// buffer iteration for the currently installed FDR mode buffers. In particular:
//
//   - If the argument represents the initial state of XRayBuffer ({nullptr, 0})
//     then the iterator returns the header information.
//   - If the argument represents the header information ({address of header
//     info, size of the header info}) then it returns the first FDR buffer&apos;s
//     address and extents.
//   - It will keep returning the next buffer and extents as there are more
//     buffers to process. When the input represents the last buffer, it will
//     return the initial state to signal completion ({nullptr, 0}).
//
// See xray/xray_log_interface.h for more details on the requirements for the
// implementations of __xray_set_buffer_iterator(...) and
// __xray_log_process_buffers(...).</doc>
