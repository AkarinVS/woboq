<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1278' type='void llvm::LoopVectorizationCostModel::setCostBasedWideningDecision(llvm::ElementCount VF)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1467' u='c' c='_ZN4llvm26LoopVectorizationCostModel25collectUniformsAndScalarsENS_12ElementCountE'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='7018' ll='7167' type='void llvm::LoopVectorizationCostModel::setCostBasedWideningDecision(llvm::ElementCount VF)'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1271'>/// Memory access instruction may be vectorized in more than one way.
  /// Form of instruction after vectorization depends on cost.
  /// This function takes cost-based decisions for Load/Store instructions
  /// and collects them in a map. This decisions map is used for building
  /// the lists of loop-uniform and loop-scalar instructions.
  /// The calculated cost is saved with widening decision in order to
  /// avoid redundant calculations.</doc>
