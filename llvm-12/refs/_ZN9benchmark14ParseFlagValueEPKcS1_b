<def f='llvm/llvm/utils/benchmark/src/commandlineflags.cc' l='136' ll='159' type='const char * benchmark::ParseFlagValue(const char * str, const char * flag, bool def_optional)'/>
<use f='llvm/llvm/utils/benchmark/src/commandlineflags.cc' l='163' u='c' c='_ZN9benchmark13ParseBoolFlagEPKcS1_Pb'/>
<use f='llvm/llvm/utils/benchmark/src/commandlineflags.cc' l='175' u='c' c='_ZN9benchmark14ParseInt32FlagEPKcS1_Pi'/>
<use f='llvm/llvm/utils/benchmark/src/commandlineflags.cc' l='187' u='c' c='_ZN9benchmark15ParseDoubleFlagEPKcS1_Pd'/>
<use f='llvm/llvm/utils/benchmark/src/commandlineflags.cc' l='199' u='c' c='_ZN9benchmark15ParseStringFlagEPKcS1_PNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='llvm/llvm/utils/benchmark/src/commandlineflags.cc' l='209' u='c' c='_ZN9benchmark6IsFlagEPKcS1_'/>
<doc f='llvm/llvm/utils/benchmark/src/commandlineflags.cc' l='131'>// Parses a string as a command line flag.  The string should have
// the format &quot;--flag=value&quot;.  When def_optional is true, the &quot;=value&quot;
// part can be omitted.
//
// Returns the value of the flag, or nullptr if the parsing failed.</doc>
