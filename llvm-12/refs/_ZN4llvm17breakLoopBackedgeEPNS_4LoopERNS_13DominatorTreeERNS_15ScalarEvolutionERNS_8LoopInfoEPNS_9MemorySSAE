<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='186' type='void llvm::breakLoopBackedge(llvm::Loop * L, llvm::DominatorTree &amp; DT, llvm::ScalarEvolution &amp; SE, llvm::LoopInfo &amp; LI, llvm::MemorySSA * MSSA)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='183'>/// Remove the backedge of the specified loop.  Handles loop nests and general
/// loop structures subject to the precondition that the loop has no parent
/// loop and has a single latch block.  Preserves all listed analyses.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopDeletion.cpp' l='154' u='c' c='_ZL23breakBackedgeIfNotTakenPN4llvm4LoopERNS_13DominatorTreeERNS_15ScalarEvolutionERNS_8LoopInfoEPNS_9MemorySSAERNS_25OptimizationRemarkEmitterE'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='770' ll='806' type='void llvm::breakLoopBackedge(llvm::Loop * L, llvm::DominatorTree &amp; DT, llvm::ScalarEvolution &amp; SE, llvm::LoopInfo &amp; LI, llvm::MemorySSA * MSSA)'/>
