<dec f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='685' type='llvm::Value * polly::VectorBlockGenerator::generateStrideOneLoad(polly::ScopStmt &amp; Stmt, llvm::LoadInst * Load, polly::BlockGenerator::VectorValueMapT &amp; ScalarMaps, isl_id_to_ast_expr * NewAccesses, bool NegativeStride)'/>
<def f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1050' ll='1078' type='llvm::Value * polly::VectorBlockGenerator::generateStrideOneLoad(polly::ScopStmt &amp; Stmt, llvm::LoadInst * Load, polly::BlockGenerator::VectorValueMapT &amp; ScalarMaps, isl_id_to_ast_expr * NewAccesses, bool NegativeStride = false)'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1151' u='c' c='_ZN5polly20VectorBlockGenerator12generateLoadERNS_8ScopStmtEPN4llvm8LoadInstERNS3_8DenseMapINS3_11AssertingVHINS3_5ValueEEES9_NS3_12DenseMapInfoIS9_EE10253938'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1153' u='c' c='_ZN5polly20VectorBlockGenerator12generateLoadERNS_8ScopStmtEPN4llvm8LoadInstERNS3_8DenseMapINS3_11AssertingVHINS3_5ValueEEES9_NS3_12DenseMapInfoIS9_EE10253938'/>
<doc f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='667'>/// Load a vector from a set of adjacent scalars
  ///
  /// In case a set of scalars is known to be next to each other in memory,
  /// create a vector load that loads those scalars
  ///
  /// %vector_ptr= bitcast double* %p to &lt;4 x double&gt;*
  /// %vec_full = load &lt;4 x double&gt;* %vector_ptr
  ///
  /// @param Stmt           The statement to code generate.
  /// @param NegativeStride This is used to indicate a -1 stride. In such
  ///                       a case we load the end of a base address and
  ///                       shuffle the accesses in reverse order into the
  ///                       vector. By default we would do only positive
  ///                       strides.
  ///
  /// @param NewAccesses    A map from memory access ids to new ast
  ///                       expressions, which may contain new access
  ///                       expressions for certain memory accesses.</doc>
