<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='87' type='llvm::Instruction * llvm::InstCombinerImpl::visitFNeg(llvm::UnaryOperator &amp; I)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='2136' ll='2157' type='llvm::Instruction * llvm::InstCombinerImpl::visitFNeg(llvm::UnaryOperator &amp; I)'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='80'>// Visitation implementation - Implement instruction combining for different
  // instruction types.  The semantics are as follows:
  // Return Value:
  //    null        - No change was made
  //     I          - Change was made, I is still valid, I may be dead though
  //   otherwise    - Change was made, replace I with returned instruction
  //</doc>
