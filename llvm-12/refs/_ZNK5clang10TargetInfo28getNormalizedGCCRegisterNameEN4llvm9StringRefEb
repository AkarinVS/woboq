<dec f='llvm/clang/include/clang/Basic/TargetInfo.h' l='887' type='llvm::StringRef clang::TargetInfo::getNormalizedGCCRegisterName(llvm::StringRef Name, bool ReturnCanonical = false) const'/>
<doc f='llvm/clang/include/clang/Basic/TargetInfo.h' l='882'>/// Returns the &quot;normalized&quot; GCC register name.
  ///
  /// ReturnCannonical true will return the register name without any additions
  /// such as &quot;{}&quot; or &quot;%&quot; in it&apos;s canonical form, for example:
  /// ReturnCanonical = true and Name = &quot;rax&quot;, will return &quot;ax&quot;.</doc>
<def f='llvm/clang/lib/Basic/TargetInfo.cpp' l='527' ll='566' type='llvm::StringRef clang::TargetInfo::getNormalizedGCCRegisterName(llvm::StringRef Name, bool ReturnCanonical = false) const'/>
<use f='llvm/clang/lib/CodeGen/CGStmt.cpp' l='2016' u='c' c='_ZL22AddVariableConstraintsRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN5clang4ExprERKNS7_10TargetInfoERNS7_7CodeGen13CodeGenModuleERKNS7_7AsmStmtEbPS4_'/>
<use f='llvm/clang/lib/CodeGen/CGStmt.cpp' l='2478' u='c' c='_ZN5clang7CodeGen15CodeGenFunction11EmitAsmStmtERKNS_7AsmStmtE'/>
<use f='llvm/clang/lib/Sema/SemaStmtAsm.cpp' l='201' u='c' c='_ZL19extractRegisterNamePKN5clang4ExprERKNS_10TargetInfoE'/>
<use f='llvm/clang/lib/Sema/SemaStmtAsm.cpp' l='233' u='c' c='_ZL26getClobberConflictLocationN4llvm15MutableArrayRefIPN5clang4ExprEEEPPNS1_13StringLiteralES7_ijRKNS1_10TargetInfoERNS1_10ASTContextE'/>
