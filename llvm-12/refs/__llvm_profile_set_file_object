<dec f='llvm/compiler-rt/lib/profile/InstrProfiling.h' l='222' type='void __llvm_profile_set_file_object(FILE * File, int EnableMerge)'/>
<doc f='llvm/compiler-rt/lib/profile/InstrProfiling.h' l='196'>/*!
 * \brief Set the FILE object for writing instrumentation data.
 *
 * Sets the FILE object to be used for subsequent calls to
 * \a __llvm_profile_write_file(). The profile file name set by environment
 * variable, command-line option, or calls to \a  __llvm_profile_set_filename
 * will be ignored.
 *
 * \c File will not be closed after a call to \a __llvm_profile_write_file() but
 * it may be flushed. Passing NULL restores default behavior.
 *
 * If \c EnableMerge is nonzero, the runtime will always merge profiling data
 * with the contents of the profiling file. If EnableMerge is zero, the runtime
 * may still merge the data if it would have merged for another reason (for
 * example, because of a %m specifier in the file name).
 *
 * Note: There may be multiple copies of the profile runtime (one for each
 * instrumented image/DSO). This API only modifies the file object within the
 * copy of the runtime available to the calling image.
 *
 * Warning: This is a no-op if continuous mode (\ref
 * __llvm_profile_is_continuous_mode_enabled) is on. The reason for this is
 * that in continuous mode, profile counters are mmap()&apos;d to the profile at
 * program initialization time. Support for transferring the mmap&apos;d profile
 * counts to a new file has not been implemented.
 */</doc>
<def f='llvm/compiler-rt/lib/profile/InstrProfilingFile.c' l='103' ll='113' macro='1' type='void __llvm_profile_set_file_object(FILE * File, int EnableMerge)'/>
