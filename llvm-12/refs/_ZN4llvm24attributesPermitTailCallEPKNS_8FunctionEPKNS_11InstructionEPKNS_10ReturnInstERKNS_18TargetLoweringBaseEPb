<dec f='llvm/llvm/include/llvm/CodeGen/Analysis.h' l='124' type='bool llvm::attributesPermitTailCall(const llvm::Function * F, const llvm::Instruction * I, const llvm::ReturnInst * Ret, const llvm::TargetLoweringBase &amp; TLI, bool * AllowDifferingSizes = nullptr)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/Analysis.h' l='118'>/// Test if given that the input instruction is in the tail call position, if
/// there is an attribute mismatch between the caller and the callee that will
/// inhibit tail call optimizations.
/// \p AllowDifferingSizes is an output parameter which, if forming a tail call
/// is permitted, determines whether it&apos;s permitted only if the size of the
/// caller&apos;s and callee&apos;s return types match exactly.</doc>
<def f='llvm/llvm/lib/CodeGen/Analysis.cpp' l='550' ll='609' type='bool llvm::attributesPermitTailCall(const llvm::Function * F, const llvm::Instruction * I, const llvm::ReturnInst * Ret, const llvm::TargetLoweringBase &amp; TLI, bool * AllowDifferingSizes = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/Analysis.cpp' l='641' u='c' c='_ZN4llvm31returnTypeIsEligibleForTailCallEPKNS_8FunctionEPKNS_11InstructionEPKNS_10ReturnInstERKNS_18TargetLoweringBaseE'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='2274' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare26dupRetToEnableTailCallOptsEPN4llvm10BasicBlockERb'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='2285' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare26dupRetToEnableTailCallOptsEPN4llvm10BasicBlockERb'/>
