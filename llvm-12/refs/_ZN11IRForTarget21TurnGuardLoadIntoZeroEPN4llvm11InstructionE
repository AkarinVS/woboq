<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='397' type='void IRForTarget::TurnGuardLoadIntoZero(llvm::Instruction * guard_load)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='388'>/// A basic block-level pass to excise guard variables from the code.
  /// The result for the function is passed through Clang as a static
  /// variable.  Static variables normally have guard variables to ensure that
  /// they are only initialized once.

  /// Rewrite a load to a guard variable to return constant 0.
  ///
  /// \param[in] guard_load
  ///     The load instruction to zero out.</doc>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1495' ll='1499' type='void IRForTarget::TurnGuardLoadIntoZero(llvm::Instruction * guard_load)'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1523' u='c' c='_ZN11IRForTarget12RemoveGuardsERN4llvm10BasicBlockE'/>
