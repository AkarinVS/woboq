<dec f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='417' type='llvm::BasicBlock * llvm::BasicBlock::splitBasicBlock(llvm::BasicBlock::iterator I, const llvm::Twine &amp; BBName = &quot;&quot;, bool Before = false)'/>
<use f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='421' u='c' c='_ZN4llvm10BasicBlock15splitBasicBlockEPNS_11InstructionERKNS_5TwineEb'/>
<doc f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='399'>/// Split the basic block into two basic blocks at the specified instruction.
  ///
  /// If \p Before is true, splitBasicBlockBefore handles the
  /// block splitting. Otherwise, execution proceeds as described below.
  ///
  /// Note that all instructions BEFORE the specified iterator
  /// stay as part of the original basic block, an unconditional branch is added
  /// to the original BB, and the rest of the instructions in the BB are moved
  /// to the new BB, including the old terminator.  The newly formed basic block
  /// is returned. This function invalidates the specified iterator.
  ///
  /// Note that this only works on well formed basic blocks (must have a
  /// terminator), and \p &apos;I&apos; must not be the end of instruction list (which
  /// would cause a degenerate basic block to be formed, having a terminator
  /// inside of the basic block).
  ///
  /// Also note that this doesn&apos;t preserve any passes. To split blocks while
  /// keeping loop information consistent, use the SplitBlock utility function.</doc>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='877' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand21expandPartwordCmpXchgEPN4llvm17AtomicCmpXchgInstE'/>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='1040' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand17insertRMWLLSCLoopERN4llvm9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEEPNS1_4TypeEPNS1_5ValueENS1_7857536'/>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='1189' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand19expandAtomicCmpXchgEPN4llvm17AtomicCmpXchgInstE'/>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='1406' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand20insertRMWCmpXchgLoopERN4llvm9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEEPNS1_4TypeEPNS1_5ValueEN6117739'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='1947' u='c' c='_ZL21despeculateCountZerosPN4llvm13IntrinsicInstEPKNS_14TargetLoweringEPKNS_10DataLayoutERb'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6599' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare18optimizeSelectInstEPN4llvm10SelectInstE'/>
<use f='llvm/llvm/lib/CodeGen/StackProtector.cpp' l='517' u='c' c='_ZN4llvm14StackProtector21InsertStackProtectorsEv'/>
<def f='llvm/llvm/lib/IR/BasicBlock.cpp' l='375' ll='404' type='llvm::BasicBlock * llvm::BasicBlock::splitBasicBlock(llvm::BasicBlock::iterator I, const llvm::Twine &amp; BBName = &quot;&quot;, bool Before = false)'/>
<use f='llvm/llvm/lib/Transforms/IPO/GlobalOpt.cpp' l='1377' u='c' c='_ZL20PerformHeapAllocSRoAPN4llvm14GlobalVariableEPNS_8CallInstEPNS_5ValueERKNS_10DataLayoutEPKNS_17TargetLibraryInfoE'/>
<use f='llvm/llvm/lib/Transforms/IPO/LowerTypeTests.cpp' l='793' u='c' c='_ZN12_GLOBAL__N_120LowerTypeTestsModule17lowerTypeTestCallEPN4llvm8MetadataEPNS1_8CallInstERKNS0_14TypeIdLoweringE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PartialInlining.cpp' l='1089' u='c' c='_ZNK12_GLOBAL__N_118PartialInlinerImpl14FunctionCloner20normalizeReturnBlockEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/PruneEH.cpp' l='208' u='c' c='_ZL16SimplifyFunctionPN4llvm8FunctionERNS_16CallGraphUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp' l='128' u='c' c='_ZL17insertBoundsCheckPN4llvm5ValueERNS_9IRBuilderINS_12TargetFolderENS_24IRBuilderDefaultInserterEEET_'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp' l='1615' u='c' c='_ZN12_GLOBAL__N_113DFSanFunction10loadShadowEPN4llvm5ValueEmmPNS1_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp' l='720' u='c' c='_ZN12_GLOBAL__N_112GCOVProfiler25AddFlushBeforeForkAndExecEv'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp' l='748' u='c' c='_ZN12_GLOBAL__N_112GCOVProfiler25AddFlushBeforeForkAndExecEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp' l='216' u='c' c='_ZL19scalarizeMaskedLoadPN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp' l='226' u='c' c='_ZL19scalarizeMaskedLoadPN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp' l='349' u='c' c='_ZL20scalarizeMaskedStorePN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp' l='358' u='c' c='_ZL20scalarizeMaskedStorePN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp' l='690' u='c' c='_ZL25scalarizeMaskedExpandLoadPN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp' l='704' u='c' c='_ZL25scalarizeMaskedExpandLoadPN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp' l='797' u='c' c='_ZL28scalarizeMaskedCompressStorePN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp' l='810' u='c' c='_ZL28scalarizeMaskedCompressStorePN4llvm8CallInstERb'/>
<use f='llvm/llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp' l='112' u='c' c='_ZL17getStrlenWithNullRN4llvm9IRBuilderINS_14ConstantFolderENS_24IRBuilderDefaultInserterEEEPNS_5ValueE'/>
<use f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='559' u='c' c='_ZL14SplitBlockImplPN4llvm10BasicBlockEPNS_11InstructionEPNS_14DomTreeUpdaterEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_16MemorySSAUpdaterERKNS_5TwineEb'/>
<use f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='623' u='c' c='_ZN4llvm16splitBlockBeforeEPNS_10BasicBlockEPNS_11InstructionEPNS_14DomTreeUpdaterEPNS_8LoopInfoEPNS_16MemorySSAUpdaterERKNS_5TwineE'/>
<use f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='1142' u='c' c='_ZL29SplitBlockAndInsertIfThenImplPN4llvm5ValueEPNS_11InstructionEbPNS_6MDNodeEPNS_14DomTreeUpdaterEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='1230' u='c' c='_ZN4llvm29SplitBlockAndInsertIfThenElseEPNS_5ValueEPNS_11InstructionEPS3_S4_PNS_6MDNodeE'/>
<use f='llvm/llvm/lib/Transforms/Utils/CodeExtractor.cpp' l='426' u='c' c='_ZN4llvm13CodeExtractor28findOrCreateBlockForHoistingEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Utils/CodeExtractor.cpp' l='796' u='c' c='_ZN4llvm13CodeExtractor17splitReturnBlocksEv'/>
<use f='llvm/llvm/lib/Transforms/Utils/InlineFunction.cpp' l='183' u='c' c='_ZN12_GLOBAL__N_122LandingPadInliningInfo18getInnerResumeDestEv'/>
<use f='llvm/llvm/lib/Transforms/Utils/InlineFunction.cpp' l='2395' u='c' c='_ZN4llvm14InlineFunctionERNS_8CallBaseERNS_18InlineFunctionInfoEPNS_9AAResultsEbPNS_8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/InlineFunction.cpp' l='2402' u='c' c='_ZN4llvm14InlineFunctionERNS_8CallBaseERNS_18InlineFunctionInfoEPNS_9AAResultsEbPNS_8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/IntegerDivision.cpp' l='219' u='c' c='_ZL28generateUnsignedDivisionCodePN4llvm5ValueES1_RNS_9IRBuilderINS_14ConstantFolderENS_24IRBuilderDefaultInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2148' u='c' c='_ZN4llvm32changeToInvokeAndSplitBasicBlockEPNS_8CallInstEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VPlan.cpp' l='590' u='c' c='_ZN4llvm5VPlan7executeEPNS_16VPTransformStateE'/>
<use f='llvm/llvm/tools/llvm-stress/llvm-stress.cpp' l='726' u='c' c='_ZN4llvmL20IntroduceControlFlowEPNS_8FunctionERNS_12_GLOBAL__N_16RandomE'/>
