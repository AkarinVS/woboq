<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2507' type='clang::CodeGen::Address clang::CodeGen::CodeGenFunction::CreateIRTemp(clang::QualType T, const llvm::Twine &amp; Name = &quot;tmp&quot;)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2499'>/// CreateIRTemp - Create a temporary IR object of the given type, with
  /// appropriate alignment. This routine should only be used when an temporary
  /// value needs to be stored into an alloca (for example, to avoid explicit
  /// PHI construction), but the type is the IR type, not the type appropriate
  /// for storing in memory.
  ///
  /// That is, this is exactly equivalent to CreateMemTemp, but calling
  /// ConvertType instead of ConvertTypeForMem.</doc>
<use f='llvm/clang/lib/CodeGen/CGClass.cpp' l='2288' u='c' c='_ZN5clang7CodeGen15CodeGenFunction39EmitInlinedInheritingCXXConstructorCallEPKNS_18CXXConstructorDeclENS_11CXXCtorTypeEbbRNS0_11CallArgListE'/>
<def f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='140' ll='143' type='clang::CodeGen::Address clang::CodeGen::CodeGenFunction::CreateIRTemp(clang::QualType Ty, const llvm::Twine &amp; Name = &quot;tmp&quot;)'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.cpp' l='1068' u='c' c='_ZN5clang7CodeGen15CodeGenFunction13StartFunctionENS_10GlobalDeclENS_8QualTypeEPN4llvm8FunctionERKNS0_14CGFunctionInfoERKNS0_15FunctionArgListENS_14SourceLocationESD_'/>
