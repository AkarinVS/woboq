<dec f='include/python3.8/cpython/objimpl.h' l='23' type='void *(*)(void *, size_t)'/>
<offset>64</offset>
<doc f='include/python3.8/cpython/objimpl.h' l='22'>/* allocate an arena of size bytes */</doc>
<dec f='include/lzma/base.h' l='407' type='void *(*)(void *, size_t, size_t)'/>
<offset>0</offset>
<doc f='include/lzma/base.h' l='373'>/**
	 * \brief       Pointer to a custom memory allocation function
	 *
	 * If you don&apos;t want a custom allocator, but still want
	 * custom free(), set this to NULL and liblzma will use
	 * the standard malloc().
	 *
	 * \param       opaque  lzma_allocator.opaque (see below)
	 * \param       nmemb   Number of elements like in calloc(). liblzma
	 *                      will always set nmemb to 1, so it is safe to
	 *                      ignore nmemb in a custom allocator if you like.
	 *                      The nmemb argument exists only for
	 *                      compatibility with zlib and libbzip2.
	 * \param       size    Size of an element in bytes.
	 *                      liblzma never sets this to zero.
	 *
	 * \return      Pointer to the beginning of a memory block of
	 *              `size&apos; bytes, or NULL if allocation fails
	 *              for some reason. When allocation fails, functions
	 *              of liblzma return LZMA_MEM_ERROR.
	 *
	 * The allocator should not waste time zeroing the allocated buffers.
	 * This is not only about speed, but also memory usage, since the
	 * operating system kernel doesn&apos;t necessarily allocate the requested
	 * memory in physical memory until it is actually used. With small
	 * input files, liblzma may actually need only a fraction of the
	 * memory that it requested for allocation.
	 *
	 * \note        LZMA_MEM_ERROR is also used when the size of the
	 *              allocation would be greater than SIZE_MAX. Thus,
	 *              don&apos;t assume that the custom allocator must have
	 *              returned NULL if some function from liblzma
	 *              returns LZMA_MEM_ERROR.
	 */</doc>
<dec f='llvm/polly/lib/External/isl/imath/imath.h' l='61' type='mp_size'/>
<use f='llvm/polly/lib/External/isl/imath/imath.h' l='67' u='r' c='MP_ALLOC'/>
<use f='llvm/polly/lib/External/isl/isl_int_sioimath.h' l='259' u='w' c='isl_sioimath_bigarg_src'/>
<use f='llvm/polly/lib/External/isl/isl_int_sioimath.h' l='280' u='w' c='isl_sioimath_siarg_src'/>
<use f='llvm/polly/lib/External/isl/isl_int_sioimath.h' l='301' u='w' c='isl_sioimath_si64arg_src'/>
<use f='llvm/polly/lib/External/isl/isl_int_sioimath.h' l='320' u='w' c='isl_sioimath_uiarg_src'/>
<offset>128</offset>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='371' u='w' c='mp_int_init'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='402' u='w' c='mp_int_init_size'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='705' u='w' c='mp_int_mul'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='764' u='w' c='mp_int_sqr'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='1730' u='w' c='s_pad'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='1747' u='w' c='s_ufake'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='2423' u='r' c='s_embar'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='2424' u='r' c='s_embar'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='2425' u='r' c='s_embar'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='2577' u='w' c='s_udiv_knuth'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='2578' u='r' c='s_udiv_knuth'/>
<use f='llvm/polly/lib/External/isl/imath/imath.c' l='2655' u='r' c='s_udiv_knuth'/>
