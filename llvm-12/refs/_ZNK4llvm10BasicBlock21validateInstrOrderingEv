<use f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='492' u='c' c='_ZN4llvm10BasicBlock16invalidateOrdersEv'/>
<dec f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='509' type='void llvm::BasicBlock::validateInstrOrdering() const'/>
<def f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='579' type='void llvm::BasicBlock::validateInstrOrdering() const'/>
<doc f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='501'>/// Asserts that instruction order numbers are marked invalid, or that they
  /// are in ascending order. This is constant time if the ordering is invalid,
  /// and linear in the number of instructions if the ordering is valid. Callers
  /// should be careful not to call this in ways that make common operations
  /// O(n^2). For example, it takes O(n) time to assign order numbers to
  /// instructions, so the order should be validated no more than once after
  /// each ordering to ensure that transforms have the same algorithmic
  /// complexity when asserts are enabled as when they are disabled.</doc>
<doc f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='577'>/// In release builds, this is a no-op. For !NDEBUG builds, the checks are
/// implemented in the .cpp file to avoid circular header deps.</doc>
<use f='llvm/llvm/lib/IR/BasicBlock.cpp' l='68' u='c' c='_ZN4llvm10BasicBlockD1Ev'/>
