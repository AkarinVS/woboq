<dec f='llvm/clang/include/clang/Sema/Sema.h' l='3737' type='clang::FunctionDecl * clang::Sema::ResolveAddressOfOverloadedFunction(clang::Expr * AddressOfExpr, clang::QualType TargetType, bool Complain, clang::DeclAccessPair &amp; Found, bool * pHadMultipleCandidates = nullptr)'/>
<use f='llvm/clang/lib/Sema/SemaCast.cpp' l='1616' u='c' c='_ZL28TryStaticMemberPointerUpcastRN5clang4SemaERNS_12ActionResultIPNS_4ExprELb1EEENS_8QualTypeES7_bNS_11SourceRangeERjRNS_8CastKindERN4llvm11SmallVect13425350'/>
<use f='llvm/clang/lib/Sema/SemaCast.cpp' l='1694' u='c' c='_ZL28TryStaticMemberPointerUpcastRN5clang4SemaERNS_12ActionResultIPNS_4ExprELb1EEENS_8QualTypeES7_bNS_11SourceRangeERjRNS_8CastKindERN4llvm11SmallVect13425350'/>
<use f='llvm/clang/lib/Sema/SemaCast.cpp' l='2625' u='c' c='_ZN12_GLOBAL__N_113CastOperation18CheckCXXCStyleCastEbb'/>
<use f='llvm/clang/lib/Sema/SemaCast.cpp' l='2730' u='c' c='_ZN12_GLOBAL__N_113CastOperation15CheckCStyleCastEv'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='9465' u='c' c='_ZN5clang4Sema32CheckSingleAssignmentConstraintsENS_8QualTypeERNS_12ActionResultIPNS_4ExprELb1EEEbbb'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='4122' u='c' c='_ZN5clang4Sema25PerformImplicitConversionEPNS_4ExprENS_8QualTypeERKNS_26StandardConversionSequenceENS0_16AssignmentActionENS0_21CheckedConversionKindE'/>
<use f='llvm/clang/lib/Sema/SemaInit.cpp' l='4204' u='c' c='_ZL44ResolveOverloadedFunctionForReferenceBindingRN5clang4SemaEPNS_4ExprERNS_8QualTypeES5_S4_RNS_22InitializationSequenceE'/>
<use f='llvm/clang/lib/Sema/SemaInit.cpp' l='5983' u='c' c='_ZN5clang22InitializationSequence14InitializeFromERNS_4SemaERKNS_17InitializedEntityERKNS_18InitializationKindEN4llvm15MutableArrayRefIPNS_4ExprEEEbb'/>
<use f='llvm/clang/lib/Sema/SemaInit.cpp' l='9008' u='c' c='_ZN5clang22InitializationSequence8DiagnoseERNS_4SemaERKNS_17InitializedEntityERKNS_18InitializationKindEN4llvm8ArrayRefIPNS_4ExprEEE'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='1712' u='c' c='_ZL20IsStandardConversionRN5clang4SemaEPNS_4ExprENS_8QualTypeEbRNS_26StandardConversionSequenceEbb'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='4743' u='c' c='_ZL16TryReferenceInitRN5clang4SemaEPNS_4ExprENS_8QualTypeENS_14SourceLocationEbb'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='5170' u='c' c='_ZL17TryListConversionRN5clang4SemaEPNS_12InitListExprENS_8QualTypeEbbb'/>
<def f='llvm/clang/lib/Sema/SemaOverload.cpp' l='12273' ll='12311' type='clang::FunctionDecl * clang::Sema::ResolveAddressOfOverloadedFunction(clang::Expr * AddressOfExpr, clang::QualType TargetType, bool Complain, clang::DeclAccessPair &amp; FoundResult, bool * pHadMultipleCandidates = nullptr)'/>
<doc f='llvm/clang/lib/Sema/SemaOverload.cpp' l='12258'>/// ResolveAddressOfOverloadedFunction - Try to resolve the address of
/// an overloaded function (C++ [over.over]), where @p From is an
/// expression with overloaded function type and @p ToType is the type
/// we&apos;re trying to resolve to. For example:
///
/// @code
/// int f(double);
/// int f(int);
///
/// int (*pfd)(double) = f; // selects f(double)
/// @endcode
///
/// This routine returns the resulting FunctionDecl if it could be
/// resolved, and NULL otherwise. When @p Complain is true, this
/// routine will emit diagnostics if there is an error.</doc>
<use f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='7234' u='c' c='_ZN5clang4Sema21CheckTemplateArgumentEPNS_23NonTypeTemplateParmDeclENS_8QualTypeEPNS_4ExprERNS_16TemplateArgumentENS0_25CheckTemplateArgumentKindE'/>
<use f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='7286' u='c' c='_ZN5clang4Sema21CheckTemplateArgumentEPNS_23NonTypeTemplateParmDeclENS_8QualTypeEPNS_4ExprERNS_16TemplateArgumentENS0_25CheckTemplateArgumentKindE'/>
