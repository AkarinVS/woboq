<def f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='1625' ll='1627' type='bool llvm::CallBase::doesNotCapture(unsigned int OpNo) const'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='1622'>/// Determine whether this data operand is not captured.
  // FIXME: Once this API is no longer duplicated in `CallSite`, rename this to
  // better indicate that this may return a conservative answer.</doc>
<use f='llvm/llvm/lib/Analysis/AliasAnalysis.cpp' l='724' u='c' c='_ZN4llvm9AAResults18callCapturesBeforeEPKNS_11InstructionERKNS_14MemoryLocationEPNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='853' u='c' c='_ZN4llvm13BasicAAResult13getModRefInfoEPKNS_8CallBaseERKNS_14MemoryLocationERNS_11AAQueryInfoE'/>
<use f='llvm/llvm/lib/Analysis/CaptureTracking.cpp' l='316' u='c' c='_ZN4llvm20PointerMayBeCapturedEPKNS_5ValueEPNS_14CaptureTrackerEj'/>
<use f='llvm/llvm/lib/CodeGen/SafeStack.cpp' l='352' u='c' c='_ZN12_GLOBAL__N_19SafeStack17IsSafeStackAllocaEPKN4llvm5ValueEm'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroFrame.cpp' l='971' u='c' c='_ZN12_GLOBAL__N_116AllocaUseVisitor13visitCallBaseERN4llvm8CallBaseE'/>
<use f='llvm/llvm/lib/Transforms/IPO/FunctionAttrs.cpp' l='538' u='c' c='_ZL25determinePointerReadAttrsPN4llvm8ArgumentERKNS_11SmallPtrSetIS1_Lj8EEE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='95' u='c' c='_ZL30isOnlyCopiedFromConstantMemoryPN4llvm9AAResultsEPNS_5ValueERPNS_15MemTransferInstERNS_15SmallVectorImplIPNS_11InstructionEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='953' u='c' c='_ZN4llvm13MemCpyOptPass20performCallSlotOptznEPNS_11InstructionES2_PNS_5ValueES4_mNS_5AlignEPNS_8CallInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='139' u='c' c='_ZN12_GLOBAL__N_125AllocaDerivedValueTracker4walkEPN4llvm5ValueE'/>
