<def f='llvm/lldb/include/lldb/Target/Memory.h' l='112' ll='141'/>
<use f='llvm/lldb/include/lldb/Target/Memory.h' l='139' c='_ZN12lldb_private20AllocatedMemoryCacheC1ERKS0_'/>
<use f='llvm/lldb/include/lldb/Target/Memory.h' l='140' c='_ZN12lldb_private20AllocatedMemoryCacheaSERKS0_'/>
<use f='llvm/lldb/include/lldb/Target/Memory.h' l='140' c='_ZN12lldb_private20AllocatedMemoryCacheaSERKS0_'/>
<use f='llvm/lldb/include/lldb/Target/Process.h' l='2810'/>
<size>96</size>
<doc f='llvm/lldb/include/lldb/Target/Memory.h' l='109'>// A class that can track allocated memory and give out allocated memory
// without us having to make an allocate/deallocate call every time we need
// some memory in a process that is being debugged.</doc>
<fun r='_ZN12lldb_private20AllocatedMemoryCacheC1ERNS_7ProcessE'/>
<fun r='_ZN12lldb_private20AllocatedMemoryCacheD1Ev'/>
<fun r='_ZN12lldb_private20AllocatedMemoryCache5ClearEv'/>
<fun r='_ZN12lldb_private20AllocatedMemoryCache14AllocateMemoryEmjRNS_6StatusE'/>
<fun r='_ZN12lldb_private20AllocatedMemoryCache16DeallocateMemoryEm'/>
<fun r='_ZN12lldb_private20AllocatedMemoryCache12AllocatePageEjjjRNS_6StatusE'/>
<mbr r='lldb_private::AllocatedMemoryCache::m_process' o='0' t='lldb_private::Process &amp;'/>
<mbr r='lldb_private::AllocatedMemoryCache::m_mutex' o='64' t='std::recursive_mutex'/>
<mbr r='lldb_private::AllocatedMemoryCache::m_memory_map' o='384' t='lldb_private::AllocatedMemoryCache::PermissionsToBlockMap'/>
<fun r='_ZN12lldb_private20AllocatedMemoryCacheC1ERKS0_'/>
<fun r='_ZN12lldb_private20AllocatedMemoryCacheaSERKS0_'/>
