<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='642' ll='644' type='bool llvm::TargetLoweringBase::isMaskAndCmp0FoldingBeneficial(const llvm::Instruction &amp; AndI) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='632'>/// Return if the target supports combining a
  /// chain like:
  /// \code
  ///   %andResult = and %val1, #mask
  ///   %icmpResult = icmp %andResult, 0
  /// \endcode
  /// into a single machine instruction of a form like:
  /// \code
  ///   cc = test %register, #mask
  /// \endcode</doc>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='1669' u='c' c='_ZL21sinkAndCmp0ExpressionPN4llvm11InstructionERKNS_14TargetLoweringERNS_11SmallPtrSetIS1_Lj16EEE'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='16548' c='_ZNK4llvm21AArch64TargetLowering30isMaskAndCmp0FoldingBeneficialERKNS_11InstructionE'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='16297' c='_ZNK4llvm17PPCTargetLowering30isMaskAndCmp0FoldingBeneficialERKNS_11InstructionE'/>
<ovr f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='5377' c='_ZNK4llvm17X86TargetLowering30isMaskAndCmp0FoldingBeneficialERKNS_11InstructionE'/>
