<def f='llvm/llvm/include/llvm/Support/OnDiskHashTable.h' l='59' ll='234'/>
<doc f='llvm/llvm/include/llvm/Support/OnDiskHashTable.h' l='28'>/// Generates an on disk hash table.
///
/// This needs an \c Info that handles storing values into the hash table&apos;s
/// payload and computes the hash for a given key. This should provide the
/// following interface:
///
/// \code
/// class ExampleInfo {
/// public:
///   typedef ExampleKey key_type;   // Must be copy constructible
///   typedef ExampleKey &amp;key_type_ref;
///   typedef ExampleData data_type; // Must be copy constructible
///   typedef ExampleData &amp;data_type_ref;
///   typedef uint32_t hash_value_type; // The type the hash function returns.
///   typedef uint32_t offset_type; // The type for offsets into the table.
///
///   /// Calculate the hash for Key
///   static hash_value_type ComputeHash(key_type_ref Key);
///   /// Return the lengths, in bytes, of the given Key/Data pair.
///   static std::pair&lt;offset_type, offset_type&gt;
///   EmitKeyDataLength(raw_ostream &amp;Out, key_type_ref Key, data_type_ref Data);
///   /// Write Key to Out.  KeyLen is the length from EmitKeyDataLength.
///   static void EmitKey(raw_ostream &amp;Out, key_type_ref Key,
///                       offset_type KeyLen);
///   /// Write Data to Out.  DataLen is the length from EmitKeyDataLength.
///   static void EmitData(raw_ostream &amp;Out, key_type_ref Key,
///                        data_type_ref Data, offset_type DataLen);
///   /// Determine if two keys are equal. Optional, only needed by contains.
///   static bool EqualKey(key_type_ref Key1, key_type_ref Key2);
/// };
/// \endcode</doc>
<mbr r='llvm::OnDiskChainedHashTableGenerator::NumBuckets' t='llvm::OnDiskChainedHashTableGenerator::offset_type'/>
<mbr r='llvm::OnDiskChainedHashTableGenerator::NumEntries' t='llvm::OnDiskChainedHashTableGenerator::offset_type'/>
<mbr r='llvm::OnDiskChainedHashTableGenerator::BA' t='llvm::SpecificBumpPtrAllocator&lt;Item&gt;'/>
<mbr r='llvm::OnDiskChainedHashTableGenerator::Buckets' t='llvm::OnDiskChainedHashTableGenerator::Bucket *'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGenerator6insertEPNS0_6BucketEmPNS0_4ItemE'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGenerator6resizeEm'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGenerator6insertENT_12key_type_refENS1_13data_type_refE'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGenerator6insertENT_12key_type_refENS1_13data_type_refERS1_'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGenerator8containsENT_12key_type_refERS1_'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGenerator4EmitERNS_11raw_ostreamE'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGenerator4EmitERNS_11raw_ostreamERT_'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGeneratorC1Ev'/>
<fun r='_ZN4llvm31OnDiskChainedHashTableGeneratorD1Ev'/>
<use f='llvm/clang/lib/Serialization/MultiOnDiskHashTable.h' l='294'/>
<use f='llvm/clang/lib/Serialization/ASTWriter.cpp' l='1750' c='_ZN5clang9ASTWriter17WriteHeaderSearchERKNS_12HeaderSearchE'/>
<use f='llvm/clang/lib/Serialization/ASTWriter.cpp' l='3109' c='_ZN5clang9ASTWriter14WriteSelectorsERNS_4SemaE'/>
<use f='llvm/clang/lib/Serialization/ASTWriter.cpp' l='3430' c='_ZN5clang9ASTWriter20WriteIdentifierTableERNS_12PreprocessorERNS_18IdentifierResolverEb'/>
<use f='llvm/clang/lib/Serialization/GlobalModuleIndex.cpp' l='814' c='_ZN12_GLOBAL__N_124GlobalModuleIndexBuilder10writeIndexERN4llvm15BitstreamWriterE'/>
<use f='llvm/llvm/lib/ProfileData/InstrProfWriter.cpp' l='291' c='_ZN4llvm15InstrProfWriter9writeImplERNS_11ProfOStreamE'/>
