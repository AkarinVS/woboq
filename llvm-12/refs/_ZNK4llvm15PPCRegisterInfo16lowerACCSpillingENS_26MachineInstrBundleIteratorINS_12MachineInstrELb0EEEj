<dec f='llvm/llvm/lib/Target/PowerPC/PPCRegisterInfo.h' l='123' type='void llvm::PPCRegisterInfo::lowerACCSpilling(MachineBasicBlock::iterator II, unsigned int FrameIndex) const'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp' l='995' ll='1030' type='void llvm::PPCRegisterInfo::lowerACCSpilling(MachineBasicBlock::iterator II, unsigned int FrameIndex) const'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp' l='1198' u='c' c='_ZNK4llvm15PPCRegisterInfo19eliminateFrameIndexENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEEijPNS_12RegScavengerE'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp' l='990'>/// lowerACCSpilling - Generate the code for spilling the accumulator register.
/// Similarly to other spills/reloads that use pseudo-ops, we do not actually
/// eliminate the FrameIndex here nor compute the stack offset. We simply
/// create a real instruction with an FI and rely on eliminateFrameIndex to
/// handle the FI elimination.</doc>
