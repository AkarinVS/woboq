<use f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='824' u='c' c='_ZN4llvm9MemorySSA10renamePassEPNS_10BasicBlockEPNS_12MemoryAccessERNS_15SmallPtrSetImplIS2_EE'/>
<dec f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='860' type='void llvm::MemorySSA::renamePass(llvm::DomTreeNode * , llvm::MemoryAccess * IncomingVal, SmallPtrSetImpl&lt;llvm::BasicBlock *&gt; &amp; Visited, bool SkipVisited = false, bool RenameAllUses = false)'/>
<def f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1148' ll='1193' type='void llvm::MemorySSA::renamePass(llvm::DomTreeNode * Root, llvm::MemoryAccess * IncomingVal, SmallPtrSetImpl&lt;llvm::BasicBlock *&gt; &amp; Visited, bool SkipVisited = false, bool RenameAllUses = false)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1551' u='c' c='_ZN4llvm9MemorySSA14buildMemorySSAERNS_14BatchAAResultsE'/>
<doc f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1144'>/// This is the standard SSA renaming algorithm.
///
/// We walk the dominator tree in preorder, renaming accesses, and then filling
/// in phi nodes in our successors.</doc>
