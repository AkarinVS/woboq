<dec f='llvm/llvm/include/llvm/IRReader/IRReader.h' l='38' type='std::unique_ptr&lt;Module&gt; llvm::getLazyIRModule(std::unique_ptr&lt;MemoryBuffer&gt; Buffer, llvm::SMDiagnostic &amp; Err, llvm::LLVMContext &amp; Context, bool ShouldLazyLoadMetadata = false)'/>
<doc f='llvm/llvm/include/llvm/IRReader/IRReader.h' l='32'>/// If the given MemoryBuffer holds a bitcode image, return a Module
/// for it which does lazy deserialization of function bodies.  Otherwise,
/// attempt to parse it as LLVM Assembly and return a fully populated
/// Module. The ShouldLazyLoadMetadata flag is passed down to the bitcode
/// reader to optionally enable lazy metadata loading. This takes ownership
/// of \p Buffer.</doc>
<def f='llvm/llvm/lib/IRReader/IRReader.cpp' l='32' ll='50' type='std::unique_ptr&lt;Module&gt; llvm::getLazyIRModule(std::unique_ptr&lt;MemoryBuffer&gt; Buffer, llvm::SMDiagnostic &amp; Err, llvm::LLVMContext &amp; Context, bool ShouldLazyLoadMetadata = false)'/>
<use f='llvm/llvm/lib/IRReader/IRReader.cpp' l='64' u='c' c='_ZN4llvm19getLazyIRFileModuleENS_9StringRefERNS_12SMDiagnosticERNS_11LLVMContextEb'/>
<use f='llvm/llvm/tools/llvm-link/llvm-link.cpp' l='130' u='c' c='_ZL8loadFilePKcSt10unique_ptrIN4llvm12MemoryBufferESt14default_deleteIS3_EERNS2_11LLVMContextEb'/>
<use f='llvm/llvm/tools/llvm-link/llvm-link.cpp' l='194' u='c' c='_ZL10loadArFilePKcSt10unique_ptrIN4llvm12MemoryBufferESt14default_deleteIS3_EERNS2_11LLVMContextE'/>
