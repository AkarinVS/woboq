<def f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='215' ll='221' type='bool llvm::LoopBase::isInvalid() const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='209'>/// Return true if this loop is no longer valid.  The only valid use of this
  /// helper is &quot;assert(L.isInvalid())&quot; or equivalent, since IsInvalid is set to
  /// true by the destructor.  In other words, if this accessor returns true,
  /// the caller has already triggered UB by calling this accessor; and so it
  /// can only be called in a context where a return value of true indicates a
  /// programmer error.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopFuse.cpp' l='235' u='c' c='_ZNK12_GLOBAL__N_115FusionCandidate7isValidEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopFuse.cpp' l='330' u='c' c='_ZNK12_GLOBAL__N_115FusionCandidate19isEligibleForFusionERN4llvm15ScalarEvolutionE'/>
