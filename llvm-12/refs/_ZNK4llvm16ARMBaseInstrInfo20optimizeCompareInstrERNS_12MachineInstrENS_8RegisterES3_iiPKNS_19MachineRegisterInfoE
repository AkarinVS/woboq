<dec f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='299' type='bool llvm::ARMBaseInstrInfo::optimizeCompareInstr(llvm::MachineInstr &amp; CmpInstr, llvm::Register SrcReg, llvm::Register SrcReg2, int CmpMask, int CmpValue, const llvm::MachineRegisterInfo * MRI) const'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='295'>/// optimizeCompareInstr - Convert the instruction to set the zero flag so
  /// that we can remove a &quot;comparison with zero&quot;; Remove a redundant CMP
  /// instruction if the flags can be updated in the same way by an earlier
  /// instruction such as SUB.</doc>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1511' c='_ZNK4llvm15TargetInstrInfo20optimizeCompareInstrERNS_12MachineInstrENS_8RegisterES3_iiPKNS_19MachineRegisterInfoE'/>
<def f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp' l='2979' ll='3257' type='bool llvm::ARMBaseInstrInfo::optimizeCompareInstr(llvm::MachineInstr &amp; CmpInstr, llvm::Register SrcReg, llvm::Register SrcReg2, int CmpMask, int CmpValue, const llvm::MachineRegisterInfo * MRI) const'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp' l='2972'>/// optimizeCompareInstr - Convert the instruction supplying the argument to the
/// comparison into one that sets the zero bit in the flags register;
/// Remove a redundant Compare instruction if an earlier instruction can set the
/// flags in the same way as Compare.
/// E.g. SUBrr(r1,r2) and CMPrr(r1,r2). We also handle the case where two
/// operands are swapped: SUBrr(r1,r2) and CMPrr(r2,r1), by updating the
/// condition code of instructions which use the flags.</doc>
