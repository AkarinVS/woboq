<dec f='llvm/llvm/lib/AsmParser/LLParser.h' l='406' type='bool llvm::LLParser::parseStructBody(SmallVectorImpl&lt;llvm::Type *&gt; &amp; Body)'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2845' u='c' c='_ZN4llvm8LLParser19parseAnonStructTypeERPNS_4TypeEb'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2899' u='c' c='_ZN4llvm8LLParser21parseStructDefinitionENS_5SMLocENS_9StringRefERSt4pairIPNS_4TypeES1_ERS5_'/>
<def f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2914' ll='2943' type='bool llvm::LLParser::parseStructBody(SmallVectorImpl&lt;llvm::Type *&gt; &amp; Body)'/>
<doc f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2908'>/// parseStructType: Handles packed and unpacked types.  &lt;/&gt; parsed elsewhere.
///   StructType
///     ::= &apos;{&apos; &apos;}&apos;
///     ::= &apos;{&apos; Type (&apos;,&apos; Type)* &apos;}&apos;
///     ::= &apos;&lt;&apos; &apos;{&apos; &apos;}&apos; &apos;&gt;&apos;
///     ::= &apos;&lt;&apos; &apos;{&apos; Type (&apos;,&apos; Type)* &apos;}&apos; &apos;&gt;&apos;</doc>
