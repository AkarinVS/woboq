<use f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='70' c='_ZN5polly14BlockGeneratorC1ERN4llvm9IRBuilderINS1_14ConstantFolderENS_10IRInserterEEERNS1_8LoopInfoERNS1_15ScalarEvolutionERNS1_13DominatorTreeERNS1_83226427'/>
<use f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='135'/>
<def f='llvm/polly/include/polly/CodeGen/IslExprBuilder.h' l='81' ll='264'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='59' c='_ZN5polly14BlockGeneratorC1ERN4llvm9IRBuilderINS1_14ConstantFolderENS_10IRInserterEEERNS1_8LoopInfoERNS1_15ScalarEvolutionERNS1_13DominatorTreeERNS1_83226427'/>
<size>88</size>
<doc f='llvm/polly/include/polly/CodeGen/IslExprBuilder.h' l='34'>/// LLVM-IR generator for isl_ast_expr[essions]
///
/// This generator generates LLVM-IR that performs the computation described by
/// an isl_ast_expr[ession].
///
/// Example:
///
///   An isl_ast_expr[ession] can look like this:
///
///     (N + M) + 10
///
///   The IslExprBuilder could create the following LLVM-IR:
///
///     %tmp1 = add nsw i64 %N
///     %tmp2 = add nsw i64 %tmp1, %M
///     %tmp3 = add nsw i64 %tmp2, 10
///
/// The implementation of this class is mostly a mapping from isl_ast_expr
/// constructs to the corresponding LLVM-IR constructs.
///
/// The following decisions may need some explanation:
///
/// 1) Which data-type to choose
///
/// isl_ast_expr[essions] are untyped expressions that assume arbitrary
/// precision integer computations. LLVM-IR instead has fixed size integers.
/// When lowering to LLVM-IR we need to chose both the size of the data type and
/// the sign of the operations we use.
///
/// At the moment, we hardcode i64 bit signed computations. Our experience has
/// shown that 64 bit are generally large enough for the loop bounds that appear
/// in the wild. Signed computations are needed, as loop bounds may become
/// negative.
///
/// It is possible to track overflows that occurred in the generated IR. See the
/// description of @see OverflowState for more information.
///
/// FIXME: Hardcoding sizes can cause issues:
///
///   -  On embedded systems and especially for high-level-synthesis 64 bit
///      computations are very costly.
///
///   The right approach is to compute the minimal necessary bitwidth and
///   signedness for each subexpression during in the isl AST generation and
///   to use this information in our IslAstGenerator. Preliminary patches are
///   available, but have not been committed yet.
///</doc>
<mbr r='polly::IslExprBuilder::IDToSAI' o='0' t='polly::IslExprBuilder::IDToScopArrayInfoTy *'/>
<fun r='_ZN5polly14IslExprBuilder10setIDToSAIEPN4llvm9MapVectorIP6isl_idPKNS_13ScopArrayInfoENS1_8DenseMapIS4_jNS1_12DenseMapInfoIS4_EENS1_6detail12DenseMapPa10368588'/>
<fun r='_ZN5polly14IslExprBuilderC1ERNS_4ScopERN4llvm9IRBuilderINS3_14ConstantFolderENS_10IRInserterEEERNS3_9MapVectorIP6isl_idNS3_11AssertingVHINS3_5ValueEEE5325692'/>
<fun r='_ZN5polly14IslExprBuilder6createEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder13getWidestTypeEPN4llvm4TypeES3_'/>
<fun r='_ZN5polly14IslExprBuilder7getTypeEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder16setTrackOverflowEb'/>
<fun r='_ZNK5polly14IslExprBuilder16getOverflowStateEv'/>
<fun r='_ZN5polly14IslExprBuilder19createAccessAddressEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder12hasLargeIntsEN3isl12noexceptions8ast_exprE'/>
<mbr r='polly::IslExprBuilder::S' o='64' t='polly::Scop &amp;'/>
<mbr r='polly::IslExprBuilder::OverflowState' o='128' t='llvm::Value *'/>
<mbr r='polly::IslExprBuilder::Builder' o='192' t='polly::PollyIRBuilder &amp;'/>
<mbr r='polly::IslExprBuilder::IDToValue' o='256' t='polly::IslExprBuilder::IDToValueTy &amp;'/>
<mbr r='polly::IslExprBuilder::GlobalMap' o='320' t='polly::ValueMapT &amp;'/>
<mbr r='polly::IslExprBuilder::DL' o='384' t='const llvm::DataLayout &amp;'/>
<mbr r='polly::IslExprBuilder::SE' o='448' t='llvm::ScalarEvolution &amp;'/>
<mbr r='polly::IslExprBuilder::DT' o='512' t='llvm::DominatorTree &amp;'/>
<mbr r='polly::IslExprBuilder::LI' o='576' t='llvm::LoopInfo &amp;'/>
<mbr r='polly::IslExprBuilder::StartBlock' o='640' t='llvm::BasicBlock *'/>
<fun r='_ZN5polly14IslExprBuilder8createOpEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder13createOpUnaryEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder14createOpAccessEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder11createOpBinEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder12createOpNAryEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder14createOpSelectEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder12createOpICmpEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder15createOpBooleanEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder26createOpBooleanConditionalEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder8createIdEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder9createIntEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder17createOpAddressOfEP12isl_ast_expr'/>
<fun r='_ZN5polly14IslExprBuilder11createBinOpEN4llvm11Instruction9BinaryOpsEPNS1_5ValueES5_RKNS1_5TwineE'/>
<fun r='_ZN5polly14IslExprBuilder9createAddEPN4llvm5ValueES3_RKNS1_5TwineE'/>
<fun r='_ZN5polly14IslExprBuilder9createSubEPN4llvm5ValueES3_RKNS1_5TwineE'/>
<fun r='_ZN5polly14IslExprBuilder9createMulEPN4llvm5ValueES3_RKNS1_5TwineE'/>
<use f='llvm/polly/include/polly/CodeGen/IslNodeBuilder.h' l='116' c='_ZN14IslNodeBuilder14getExprBuilderEv'/>
<use f='llvm/polly/include/polly/CodeGen/IslNodeBuilder.h' l='133'/>
<size>88</size>
