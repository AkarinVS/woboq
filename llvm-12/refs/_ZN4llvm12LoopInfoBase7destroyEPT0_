<def f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='1067' ll='1073' type='void llvm::LoopInfoBase::destroy(LoopT * L)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='1057'>/// Destroy a loop that has been removed from the `LoopInfo` nest.
  ///
  /// This runs the destructor of the loop object making it invalid to
  /// reference afterward. The memory is retained so that the *pointer* to the
  /// loop remains valid.
  ///
  /// The caller is responsible for removing this loop from the loop nest and
  /// otherwise disconnecting it from the broader `LoopInfo` data structures.
  /// Callers that don&apos;t naturally handle this themselves should probably call
  /// `erase&apos; instead.</doc>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='883' u='c' c='_ZN4llvm8LoopInfo5eraseEPNS_4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='1586' u='c' c='_ZL24deleteDeadBlocksFromLoopRN4llvm4LoopERNS_15SmallVectorImplIPNS_10BasicBlockEEERNS_13DominatorTreeERNS_8LoopInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='1926' u='c' c='_ZL24rebuildLoopAfterUnswitchRN4llvm4LoopENS_8ArrayRefIPNS_10BasicBlockEEERNS_8LoopInfoERNS_15SmallVectorImplIPS0_EE'/>
<use f='llvm/llvm/lib/Transforms/Utils/FixIrreducible.cpp' l='145' u='c' c='_ZL19reconnectChildLoopsRN4llvm8LoopInfoEPNS_4LoopES3_RNS_9SetVectorIPNS_10BasicBlockESt6vectorIS6_SaIS6_EENS_8DenseSetIS6_NS_12DenseMapInfoIS6_EEEEEESF_'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='760' u='c' c='_ZN4llvm14deleteDeadLoopEPNS_4LoopEPNS_13DominatorTreeEPNS_15ScalarEvolutionEPNS_8LoopInfoEPNS_9MemorySSAE'/>
