<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='587' type='bool llvm::propagatesPoison(const llvm::Operator * I)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='581'>/// Return true if I yields poison or raises UB if any of its operands is
  /// poison.
  /// Formally, given I = `r = op v1 v2 .. vN`, propagatesPoison returns true
  /// if, for all i, r is evaluated to poison or op raises UB if vi = poison.
  /// To filter out operands that raise UB on poison, you can use
  /// getGuaranteedNonPoisonOp.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6295' u='c' c='_ZN4llvm15ScalarEvolution19isAddRecNeverPoisonEPKNS_11InstructionEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4818' u='c' c='_ZL21directlyImpliesPoisonPKN4llvm5ValueES2_j'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4969' u='c' c='_ZL32isGuaranteedNotToBeUndefOrPoisonPKN4llvm5ValueEPNS_15AssumptionCacheEPKNS_11InstructionEPKNS_13DominatorTreeEjb'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5055' ll='5074' type='bool llvm::propagatesPoison(const llvm::Operator * I)'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5183' u='c' c='_ZL31programUndefinedIfUndefOrPoisonPKN4llvm5ValueEb'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp' l='298' u='c' c='_ZL7rewriteRN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp' l='788' u='c' c='_ZL29mustExecuteUBIfPoisonOnPathToPN4llvm11InstructionES1_PNS_13DominatorTreeE'/>
<use f='llvm/llvm/unittests/Analysis/ValueTrackingTest.cpp' l='850' u='c' c='_ZN35ValueTracking_propagatesPoison_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/ValueTrackingTest.cpp' l='850' u='c' c='_ZN35ValueTracking_propagatesPoison_Test8TestBodyEv'/>
