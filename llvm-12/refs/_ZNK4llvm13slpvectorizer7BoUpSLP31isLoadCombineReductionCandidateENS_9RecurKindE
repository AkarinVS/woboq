<dec f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='775' type='bool llvm::slpvectorizer::BoUpSLP::isLoadCombineReductionCandidate(llvm::RecurKind RdxKind) const'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3928' ll='3935' type='bool llvm::slpvectorizer::BoUpSLP::isLoadCombineReductionCandidate(llvm::RecurKind RdxKind) const'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='6905' u='c' c='_ZN12_GLOBAL__N_119HorizontalReduction11tryToReduceERN4llvm13slpvectorizer7BoUpSLPEPNS1_19TargetTransformInfoE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='768'>/// Assume that a legal-sized &apos;or&apos;-reduction of shifted/zexted loaded values
  /// can be load combined in the backend. Load combining may not be allowed in
  /// the IR optimizer, so we do not want to alter the pattern. For example,
  /// partially transforming a scalar bswap() pattern into vector code is
  /// effectively impossible for the backend to undo.
  /// TODO: If load combining is allowed in the IR optimizer, this analysis
  ///       may not be necessary.</doc>
