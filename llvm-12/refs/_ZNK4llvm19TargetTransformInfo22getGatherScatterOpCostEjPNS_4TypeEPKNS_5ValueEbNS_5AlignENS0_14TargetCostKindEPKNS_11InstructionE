<dec f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='1146' type='int llvm::TargetTransformInfo::getGatherScatterOpCost(unsigned int Opcode, llvm::Type * DataTy, const llvm::Value * Ptr, bool VariableMask, llvm::Align Alignment, TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput, const llvm::Instruction * I = nullptr) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='1137'>/// \return The cost of Gather or Scatter operation
  /// \p Opcode - is a type of memory access Load or Store
  /// \p DataTy - a vector type of the data to be loaded or stored
  /// \p Ptr - pointer [or vector of pointers] - address[es] in memory
  /// \p VariableMask - true when the memory access is predicated with a mask
  ///                   that is not a compile-time constant
  /// \p Alignment - alignment of single element
  /// \p I - the optional original context instruction, if one exists, e.g. the
  ///        load/store to transform or the call to the gather/scatter intrinsic</doc>
<def f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='877' ll='884' type='int llvm::TargetTransformInfo::getGatherScatterOpCost(unsigned int Opcode, llvm::Type * DataTy, const llvm::Value * Ptr, bool VariableMask, llvm::Align Alignment, TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput, const llvm::Instruction * I = nullptr) const'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6780' u='c' c='_ZN4llvm26LoopVectorizationCostModel20getGatherScatterCostEPNS_11InstructionENS_12ElementCountE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3763' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
