<dec f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.h' l='49' type='void __sanitizer::RenderFrame(__sanitizer::InternalScopedString * buffer, const char * format, int frame_no, __sanitizer::uptr address, const __sanitizer::AddressInfo * info, bool vs_style, const char * strip_path_prefix = &quot;&quot;, const char * strip_func_prefix = &quot;&quot;)'/>
<use f='llvm/compiler-rt/lib/hwasan/hwasan_report.cpp' l='239' u='c' c='__hwasan::PrintStackAllocations'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.h' l='20'>// Render the contents of &quot;info&quot; structure, which represents the contents of
// stack frame &quot;frame_no&quot; and appends it to the &quot;buffer&quot;. &quot;format&quot; is a
// string with placeholders, which is copied to the output with
// placeholders substituted with the contents of &quot;info&quot;. For example,
// format string
//   &quot;  frame %n: function %F at %S&quot;
// will be turned into
//   &quot;  frame 10: function foo::bar() at my/file.cc:10&quot;
// You may additionally pass &quot;strip_path_prefix&quot; to strip prefixes of paths to
// source files and modules, and &quot;strip_func_prefix&quot; to strip prefixes of
// function names.
// Here&apos;s the full list of available placeholders:
//   %% - represents a &apos;%&apos; character;
//   %n - frame number (copy of frame_no);
//   %p - PC in hex format;
//   %m - path to module (binary or shared object);
//   %o - offset in the module in hex format;
//   %f - function name;
//   %q - offset in the function in hex format (*if available*);
//   %s - path to source file;
//   %l - line in the source file;
//   %c - column in the source file;
//   %F - if function is known to be &lt;foo&gt;, prints &quot;in &lt;foo&gt;&quot;, possibly
//        followed by the offset in this function, but only if source file
//        is unknown;
//   %S - prints file/line/column information;
//   %L - prints location information: file/line/column, if it is known, or
//        module+offset if it is known, or (&lt;unknown module&gt;) string.
//   %M - prints module basename and offset, if it is known, or PC.</doc>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_libcdep.cpp' l='43' u='c' c='__sanitizer::StackTrace::Print'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_libcdep.cpp' l='135' u='c' c='__sanitizer_symbolize_pc'/>
<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.cpp' l='109' ll='206' type='void __sanitizer::RenderFrame(__sanitizer::InternalScopedString * buffer, const char * format, int frame_no, __sanitizer::uptr address, const __sanitizer::AddressInfo * info, bool vs_style, const char * strip_path_prefix = &quot;&quot;, const char * strip_func_prefix = &quot;&quot;)'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_report.cpp' l='36' u='c' c='__sanitizer::ReportErrorSummary'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_report.cpp' l='131' u='c' c='__tsan::PrintStack'/>
