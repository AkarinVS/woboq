<dec f='llvm/llvm/include/llvm/Support/AArch64TargetParser.h' l='143' type='bool llvm::AArch64::parseBranchProtection(llvm::StringRef Spec, llvm::AArch64::ParsedBranchProtection &amp; PBP, llvm::StringRef &amp; Err)'/>
<use f='llvm/clang/lib/Basic/Targets/AArch64.cpp' l='124' u='c' c='_ZNK5clang7targets17AArch64TargetInfo24validateBranchProtectionEN4llvm9StringRefERNS_10TargetInfo20BranchProtectionInfoERS3_'/>
<use f='llvm/clang/lib/Driver/ToolChains/Clang.cpp' l='1741' u='c' c='_ZNK5clang6driver5tools5Clang20AddAArch64TargetArgsERKN4llvm3opt7ArgListERNS3_11SmallVectorIPKcLj16EEE'/>
<def f='llvm/llvm/lib/Support/AArch64TargetParser.cpp' l='234' ll='275' type='bool llvm::AArch64::parseBranchProtection(llvm::StringRef Spec, llvm::AArch64::ParsedBranchProtection &amp; PBP, llvm::StringRef &amp; Err)'/>
<doc f='llvm/llvm/lib/Support/AArch64TargetParser.cpp' l='229'>// Parse a branch protection specification, which has the form
//   standard | none | [bti,pac-ret[+b-key,+leaf]*]
// Returns true on success, with individual elements of the specification
// returned in `PBP`. Returns false in error, with `Err` containing
// an erroneous part of the spec.</doc>
