<dec f='llvm/compiler-rt/include/xray/xray_log_interface.h' l='352' type='XRayLogFlushStatus __xray_log_process_buffers(void (*)(const char *, XRayBuffer) Processor)'/>
<doc f='llvm/compiler-rt/include/xray/xray_log_interface.h' l='327'>/// Invokes the provided handler to process data maintained by the logging
/// handler. This API will be provided raw access to the data available in
/// memory from the logging implementation. The callback function must:
///
/// 1) Not modify the data, to avoid running into undefined behaviour.
///
/// 2) Either know the data layout, or treat the data as raw bytes for later
///    interpretation.
///
/// This API is best used in place of the `__xray_log_flushLog()` implementation
/// above to enable the caller to provide an alternative means of extracting the
/// data from the XRay implementation.
///
/// Implementations MUST then provide:
///
/// 1) A function that will return an XRayBuffer. Functions that return an
///    &quot;empty&quot; XRayBuffer signifies that there are no more buffers to be
///    processed. This function should be registered through the
///    `__xray_log_set_buffer_iterator(...)` function.
///
/// 2) Its own means of converting data it holds in memory into an XRayBuffer
///    structure.
///
/// See XRayLogFlushStatus for what the return values mean.
///</doc>
<def f='llvm/compiler-rt/lib/xray/xray_log_interface.cpp' l='194' ll='209' type='XRayLogFlushStatus __xray_log_process_buffers(void (*)(const char *, XRayBuffer) Processor)'/>
