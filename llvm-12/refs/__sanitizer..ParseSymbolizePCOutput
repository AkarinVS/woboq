<dec f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h' l='160' type='void __sanitizer::ParseSymbolizePCOutput(const char * str, __sanitizer::SymbolizedStack * res)'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h' l='154'>// Parses one or more two-line strings in the following format:
//   &lt;function_name&gt;
//   &lt;file_name&gt;:&lt;line_number&gt;[:&lt;column_number&gt;]
// Used by LLVMSymbolizer, Addr2LinePool and InternalSymbolizer, since all of
// them use the same output format.  Returns true if any useful debug
// information was found.</doc>
<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cpp' l='325' ll='364' type='void __sanitizer::ParseSymbolizePCOutput(const char * str, __sanitizer::SymbolizedStack * res)'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cpp' l='410' u='c' c='__sanitizer::LLVMSymbolizer::SymbolizePC'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cpp' l='320'>// Parses one or more two-line strings in the following format:
//   &lt;function_name&gt;
//   &lt;file_name&gt;:&lt;line_number&gt;[:&lt;column_number&gt;]
// Used by LLVMSymbolizer, Addr2LinePool and InternalSymbolizer, since all of
// them use the same output format.</doc>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cpp' l='275' u='c' c='__sanitizer::Addr2LinePool::SymbolizePC'/>
