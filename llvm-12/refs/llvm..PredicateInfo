<def f='llvm/llvm/include/llvm/Transforms/Utils/PredicateInfo.h' l='178' ll='210'/>
<use f='llvm/llvm/include/llvm/Transforms/Scalar/SCCP.h' l='43'/>
<size>272</size>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/PredicateInfo.h' l='176'>/// Encapsulates PredicateInfo, including all data associated with memory
/// accesses.</doc>
<fun r='_ZN4llvm13PredicateInfoC1ERNS_8FunctionERNS_13DominatorTreeERNS_15AssumptionCacheE'/>
<fun r='_ZN4llvm13PredicateInfoD1Ev'/>
<fun r='_ZNK4llvm13PredicateInfo19verifyPredicateInfoEv'/>
<fun r='_ZNK4llvm13PredicateInfo4dumpEv'/>
<fun r='_ZNK4llvm13PredicateInfo5printERNS_11raw_ostreamE'/>
<fun r='_ZNK4llvm13PredicateInfo19getPredicateInfoForEPKNS_5ValueE'/>
<mbr r='llvm::PredicateInfo::F' o='0' t='llvm::Function &amp;'/>
<mbr r='llvm::PredicateInfo::AllInfos' o='64' t='iplist&lt;llvm::PredicateBase&gt;'/>
<mbr r='llvm::PredicateInfo::PredicateMap' o='192' t='DenseMap&lt;const llvm::Value *, const llvm::PredicateBase *&gt;'/>
<mbr r='llvm::PredicateInfo::CreatedDeclarations' o='384' t='SmallSet&lt;AssertingVH&lt;llvm::Function&gt;, 20&gt;'/>
<use f='llvm/llvm/lib/Transforms/IPO/SCCP.cpp' l='20' c='_ZN4llvm10IPSCCPPass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/lib/Transforms/IPO/SCCP.cpp' l='60' c='_ZN12_GLOBAL__N_116IPSCCPLegacyPass11runOnModuleERN4llvm6ModuleE'/>
<size>272</size>
<use f='llvm/llvm/lib/Transforms/Scalar/NewGVN.cpp' l='501'/>
<use f='llvm/llvm/lib/Transforms/Scalar/NewGVN.cpp' l='664' c='_ZN12_GLOBAL__N_16NewGVNC1ERN4llvm8FunctionEPNS1_13DominatorTreeEPNS1_15AssumptionCacheEPNS1_17TargetLibraryInfoEPNS1_9AAResultsEPNS1_9MemorySSAERKNS1_10DataLayoutE'/>
<size>272</size>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='259'/>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='298' c='_ZN4llvm20PredicateInfoBuilderC1ERNS_13PredicateInfoERNS_8FunctionERNS_13DominatorTreeERNS_15AssumptionCacheE'/>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='869' c='_ZN4llvmL22replaceCreatedSSACopysERNS_13PredicateInfoERNS_8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='885' c='_ZN4llvm30PredicateInfoPrinterLegacyPass13runOnFunctionERNS_8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='899' c='_ZN4llvm24PredicateInfoPrinterPass3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='909'/>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='910'/>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='913' c='_ZN4llvm28PredicateInfoAnnotatedWriterC1EPKNS_13PredicateInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/PredicateInfo.cpp' l='961' c='_ZN4llvm25PredicateInfoVerifierPass3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<size>272</size>
<fun r='_ZN4llvm13PredicateInfoC1ERNS_8FunctionERNS_13DominatorTreeERNS_15AssumptionCacheE'/>
<fun r='_ZN4llvm13PredicateInfoD1Ev'/>
<fun r='_ZNK4llvm13PredicateInfo19verifyPredicateInfoEv'/>
<fun r='_ZNK4llvm13PredicateInfo5printERNS_11raw_ostreamE'/>
<fun r='_ZNK4llvm13PredicateInfo4dumpEv'/>
<def f='llvm/llvm/utils/TableGen/CodeGenSchedule.h' l='316' ll='327'/>
<use f='llvm/llvm/utils/TableGen/CodeGenSchedule.h' l='323' c='_ZNK4llvm13PredicateInfoeqERKS0_'/>
<use f='llvm/llvm/utils/TableGen/CodeGenSchedule.h' l='334'/>
<use f='llvm/llvm/utils/TableGen/CodeGenSchedule.h' l='344' c='_ZNK4llvm10OpcodeInfo13getPredicatesEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenSchedule.cpp' l='429' c='_ZN4llvm10OpcodeInfo24addPredicateForProcModelERKNS_5APIntES3_PKNS_6RecordE'/>
<size>40</size>
<doc f='llvm/llvm/utils/TableGen/CodeGenSchedule.h' l='283'>/// Used to correlate instructions to MCInstPredicates specified by
/// InstructionEquivalentClass tablegen definitions.
///
/// Example: a XOR of a register with self, is a known zero-idiom for most
/// X86 processors.
///
/// Each processor can use a (potentially different) InstructionEquivalenceClass
///  definition to classify zero-idioms. That means, XORrr is likely to appear
/// in more than one equivalence class (where each class definition is
/// contributed by a different processor).
///
/// There is no guarantee that the same MCInstPredicate will be used to describe
/// equivalence classes that identify XORrr as a zero-idiom.
///
/// To be more specific, the requirements for being a zero-idiom XORrr may be
/// different for different processors.
///
/// Class PredicateInfo identifies a subset of processors that specify the same
/// requirements (i.e. same MCInstPredicate and OperandMask) for an instruction
/// opcode.
///
/// Back to the example. Field `ProcModelMask` will have one bit set for every
/// processor model that sees XORrr as a zero-idiom, and that specifies the same
/// set of constraints.
///
/// By construction, there can be multiple instances of PredicateInfo associated
/// with a same instruction opcode. For example, different processors may define
/// different constraints on the same opcode.
///
/// Field OperandMask can be used as an extra constraint.
/// It may be used to describe conditions that appy only to a subset of the
/// operands of a machine instruction, and the operands subset may not be the
/// same for all processor models.</doc>
<mbr r='llvm::PredicateInfo::ProcModelMask' o='0' t='llvm::APInt'/>
<mbr r='llvm::PredicateInfo::OperandMask' o='128' t='llvm::APInt'/>
<mbr r='llvm::PredicateInfo::Predicate' o='256' t='const llvm::Record *'/>
<fun r='_ZN4llvm13PredicateInfoC1ENS_5APIntES1_PKNS_6RecordE'/>
<fun r='_ZNK4llvm13PredicateInfoeqERKS0_'/>
<use f='llvm/llvm/utils/TableGen/PredicateExpander.cpp' l='452' c='_ZN4llvm20STIPredicateExpander17expandOpcodeGroupERNS_11raw_ostreamERKNS_11OpcodeGroupEb'/>
<size>40</size>
