<dec f='llvm/clang/include/clang/Analysis/IssueHash.h' l='34' type='llvm::SmallString&lt;32&gt; clang::getIssueHash(const clang::FullSourceLoc &amp; IssueLoc, llvm::StringRef CheckerName, llvm::StringRef WarningMessage, const clang::Decl * IssueDecl, const clang::LangOptions &amp; LangOpts)'/>
<def f='llvm/clang/lib/Analysis/IssueHash.cpp' l='199' ll='207' type='SmallString&lt;32&gt; clang::getIssueHash(const clang::FullSourceLoc &amp; IssueLoc, llvm::StringRef CheckerName, llvm::StringRef WarningMessage, const clang::Decl * IssueDecl, const clang::LangOptions &amp; LangOpts)'/>
<doc f='llvm/clang/include/clang/Analysis/IssueHash.h' l='18'>/// Returns an opaque identifier for a diagnostic.
///
/// This opaque identifier is intended to be stable even when the source code
/// is changed. It allows to track diagnostics in the long term, for example,
/// find which diagnostics are &quot;new&quot;, maintain a database of suppressed
/// diagnostics etc.
///
/// We may introduce more variants of issue hashes in the future
/// but older variants will still be available for compatibility.
///
/// This hash is based on the following information:
///   - Name of the checker that emitted the diagnostic.
///   - Warning message.
///   - Name of the enclosing declaration.
///   - Contents of the line of code with the issue, excluding whitespace.
///   - Column number (but not the line number! - which makes it stable).</doc>
<use f='llvm/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp' l='586' u='c' c='_ZN12_GLOBAL__N_115HTMLDiagnostics12FinalizeHTMLERKN5clang4ento14PathDiagnosticERNS1_8RewriterERKNS1_13SourceManagerERKNS2_10PathPiecesENS1_6FileIDEPKNS1_9FileEntryEPKc'/>
<use f='llvm/clang/lib/StaticAnalyzer/Core/PlistDiagnostics.cpp' l='700' u='c' c='_ZN12_GLOBAL__N_116PlistDiagnostics20FlushDiagnosticsImplERSt6vectorIPKN5clang4ento14PathDiagnosticESaIS6_EEPNS3_22PathDiagnosticConsumer9FilesMadeE'/>
