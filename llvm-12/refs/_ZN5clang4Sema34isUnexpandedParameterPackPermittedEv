<dec f='llvm/clang/include/clang/Sema/Sema.h' l='7907' type='bool clang::Sema::isUnexpandedParameterPackPermitted()'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='7901'>//===--------------------------------------------------------------------===//
  // C++ Variadic Templates (C++0x [temp.variadic])
  //===--------------------------------------------------------------------===//

  /// Determine whether an unexpanded parameter pack might be permitted in this
  /// location. Useful for error recovery.</doc>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6827' u='c' c='_ZN5clang6Parser31ParseParameterDeclarationClauseENS_17DeclaratorContextERNS_16ParsedAttributesERN4llvm15SmallVectorImplINS_15DeclaratorChunk9ParamInf1929634'/>
<def f='llvm/clang/lib/Sema/SemaTemplateVariadic.cpp' l='280' ll='285' type='bool clang::Sema::isUnexpandedParameterPackPermitted()'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateVariadic.cpp' l='273'>/// Determine whether it&apos;s possible for an unexpanded parameter pack to
/// be valid in this location. This only happens when we&apos;re in a declaration
/// that is nested within an expression that could be expanded, such as a
/// lambda-expression within a function call.
///
/// This is conservatively correct, but may claim that some unexpanded packs are
/// permitted when they are not.</doc>
