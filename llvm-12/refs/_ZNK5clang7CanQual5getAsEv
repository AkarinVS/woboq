<dec f='llvm/clang/include/clang/AST/CanonicalType.h' l='120' type='CanProxy&lt;U&gt; clang::CanQual::getAs() const'/>
<def f='llvm/clang/include/clang/AST/CanonicalType.h' l='651' ll='664' type='CanProxy&lt;U&gt; clang::CanQual::getAs() const'/>
<doc f='llvm/clang/include/clang/AST/CanonicalType.h' l='103'>/// Retrieve a canonical type pointer with a different static type,
  /// upcasting or downcasting as needed.
  ///
  /// The getAs() function is typically used to try to downcast to a
  /// more specific (canonical) type in the type system. For example:
  ///
  /// @code
  /// void f(CanQual&lt;Type&gt; T) {
  ///   if (CanQual&lt;PointerType&gt; Ptr = T-&gt;getAs&lt;PointerType&gt;()) {
  ///     // look at Ptr&apos;s pointee type
  ///   }
  /// }
  /// @endcode
  ///
  /// \returns A proxy pointer to the same type, but with the specified
  /// static type (@p U). If the dynamic type is not the specified static type
  /// or a derived class thereof, a NULL canonical type.</doc>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='92' u='c' c='_ZL13GetFormalTypePKN5clang13CXXMethodDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='264' u='c' c='_ZN5clang7CodeGen12CodeGenTypes20arrangeCXXMethodTypeEPKNS_13CXXRecordDeclEPKNS_17FunctionProtoTypeEPKNS_13CXXMethodDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='286' u='c' c='_ZN5clang7CodeGen12CodeGenTypes27arrangeCXXMethodDeclarationEPKNS_13CXXMethodDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='288' u='c' c='_ZN5clang7CodeGen12CodeGenTypes27arrangeCXXMethodDeclarationEPKNS_13CXXMethodDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='449' u='c' c='_ZN5clang7CodeGen12CodeGenTypes26arrangeFunctionDeclarationEPKNS_12FunctionDeclE'/>
