<dec f='llvm/llvm/include/llvm/ADT/APInt.h' l='1377' type='llvm::APInt llvm::APInt::truncSSat(unsigned int width) const'/>
<doc f='llvm/llvm/include/llvm/ADT/APInt.h' l='1372'>/// Truncate to new width with signed saturation.
  ///
  /// If this APInt, treated as signed integer, can be losslessly truncated to
  /// the new bitwidth, then return truncated APInt. Else, return either
  /// signed min value if the APInt was negative, or signed max value.</doc>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1469' u='c' c='_ZNK4llvm13ConstantRange8smul_satERKS0_'/>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1470' u='c' c='_ZNK4llvm13ConstantRange8smul_satERKS0_'/>
<def f='llvm/llvm/lib/Support/APInt.cpp' l='893' ll='903' type='llvm::APInt llvm::APInt::truncSSat(unsigned int width) const'/>
<doc f='llvm/llvm/lib/Support/APInt.cpp' l='892'>// Truncate to new width with signed saturation.</doc>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1192' u='c' c='_ZN12_GLOBAL__N_129APIntTest_SaturatingMath_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1193' u='c' c='_ZN12_GLOBAL__N_129APIntTest_SaturatingMath_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1194' u='c' c='_ZN12_GLOBAL__N_129APIntTest_SaturatingMath_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1196' u='c' c='_ZN12_GLOBAL__N_129APIntTest_SaturatingMath_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1197' u='c' c='_ZN12_GLOBAL__N_129APIntTest_SaturatingMath_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='1198' u='c' c='_ZN12_GLOBAL__N_129APIntTest_SaturatingMath_Test8TestBodyEv'/>
