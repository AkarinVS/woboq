<dec f='llvm/llvm/include/llvm/Analysis/CFG.h' l='105' type='bool llvm::isPotentiallyReachableFromMany(SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; Worklist, llvm::BasicBlock * StopBB, const SmallPtrSetImpl&lt;llvm::BasicBlock *&gt; * ExclusionSet, const llvm::DominatorTree * DT = nullptr, const llvm::LoopInfo * LI = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/CFG.h' l='96'>/// Determine whether there is at least one path from a block in
/// &apos;Worklist&apos; to &apos;StopBB&apos; without passing through any blocks in
/// &apos;ExclusionSet&apos;, returning true if uncertain.
///
/// Determine whether there is a path from at least one block in Worklist to
/// StopBB within a single function without passing through any of the blocks
/// in &apos;ExclusionSet&apos;. Returns false only if we can prove that once any block
/// in &apos;Worklist&apos; has been reached then &apos;StopBB&apos; can not be executed.
/// Conservatively returns true.</doc>
<def f='llvm/llvm/lib/Analysis/CFG.cpp' l='137' ll='209' type='bool llvm::isPotentiallyReachableFromMany(SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; Worklist, llvm::BasicBlock * StopBB, const SmallPtrSetImpl&lt;llvm::BasicBlock *&gt; * ExclusionSet, const llvm::DominatorTree * DT = nullptr, const llvm::LoopInfo * LI = nullptr)'/>
<use f='llvm/llvm/lib/Analysis/CFG.cpp' l='219' u='c' c='_ZN4llvm22isPotentiallyReachableEPKNS_10BasicBlockES2_PKNS_13DominatorTreeEPKNS_8LoopInfoE'/>
<use f='llvm/llvm/lib/Analysis/CFG.cpp' l='282' u='c' c='_ZN4llvm22isPotentiallyReachableEPKNS_11InstructionES2_PKNS_15SmallPtrSetImplIPNS_10BasicBlockEEEPKNS_13DominatorTreeEPKNS_8LoopInfoE'/>
<use f='llvm/llvm/lib/Analysis/CaptureTracking.cpp' l='141' u='c' c='_ZN12_GLOBAL__N_114CapturesBefore13isSafeToPruneEPN4llvm11InstructionE'/>
