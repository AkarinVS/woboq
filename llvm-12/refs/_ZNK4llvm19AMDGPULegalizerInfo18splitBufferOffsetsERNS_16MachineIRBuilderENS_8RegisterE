<dec f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.h' l='152' type='std::tuple&lt;Register, unsigned int, unsigned int&gt; llvm::AMDGPULegalizerInfo::splitBufferOffsets(llvm::MachineIRBuilder &amp; B, llvm::Register OrigOffset) const'/>
<def f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='3514' ll='3554' type='std::tuple&lt;Register, unsigned int, unsigned int&gt; llvm::AMDGPULegalizerInfo::splitBufferOffsets(llvm::MachineIRBuilder &amp; B, llvm::Register OrigOffset) const'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='3679' u='c' c='_ZNK4llvm19AMDGPULegalizerInfo19legalizeBufferStoreERNS_12MachineInstrERNS_19MachineRegisterInfoERNS_16MachineIRBuilderEbb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='3769' u='c' c='_ZNK4llvm19AMDGPULegalizerInfo18legalizeBufferLoadERNS_12MachineInstrERNS_19MachineRegisterInfoERNS_16MachineIRBuilderEbb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='3953' u='c' c='_ZNK4llvm19AMDGPULegalizerInfo20legalizeBufferAtomicERNS_12MachineInstrERNS_16MachineIRBuilderEj'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='3508'>// The raw.(t)buffer and struct.(t)buffer intrinsics have two offset args:
// offset (the offset that is included in bounds checking and swizzling, to be
// split between the instruction&apos;s voffset and immoffset fields) and soffset
// (the offset that is excluded from bounds checking and swizzling, to go in
// the instruction&apos;s soffset field).  This function takes the first kind of
// offset and figures out how to split it between voffset and immoffset.</doc>
