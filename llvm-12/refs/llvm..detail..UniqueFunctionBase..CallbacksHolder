<def f='llvm/llvm/include/llvm/ADT/FunctionExtras.h' l='218' ll='220'/>
<def f='llvm/llvm/include/llvm/ADT/FunctionExtras.h' l='224' ll='227'/>
<use f='llvm/llvm/include/llvm/ADT/FunctionExtras.h' l='253' c='_ZN4llvm6detail18UniqueFunctionBaseC1ETL0__NS1_8CalledAsITL0_0_EE'/>
<use f='llvm/llvm/include/llvm/ADT/FunctionExtras.h' l='324'/>
<use f='llvm/llvm/include/llvm/ADT/FunctionExtras.h' l='330'/>
<doc f='llvm/llvm/include/llvm/ADT/FunctionExtras.h' l='221'>// See if we can create a trivial callback. We need the callable to be
  // trivially moved and trivially destroyed so that we don&apos;t have to store
  // type erased callbacks for those operations.</doc>
<smbr r='llvm::detail::UniqueFunctionBase::CallbacksHolder::Callbacks' t='llvm::detail::UniqueFunctionBase::NonTrivialCallbacks'/>
<smbr r='llvm::detail::UniqueFunctionBase::CallbacksHolder{type-parameter-1-0,type-parameter-1-1,typenameenable_if{llvm::is_trivially_move_constructible{type-p8252543' t='llvm::detail::UniqueFunctionBase::TrivialCallback'/>
<smbr r='llvm::detail::UniqueFunctionBase::CallbacksHolder::Callbacks' t='typename UniqueFunctionBase&lt;R, P...&gt;::NonTrivialCallbacks'/>
<smbr r='llvm::detail::UniqueFunctionBase::CallbacksHolder{type-parameter-1-0,type-parameter-1-1,typenameenable_if{llvm::is_trivially_move_constructible{type-p8252543' t='typename UniqueFunctionBase&lt;R, P...&gt;::TrivialCallback'/>
