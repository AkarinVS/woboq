<dec f='llvm/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h' l='270' type='void llvm::jitLinkForORC(object::OwningBinary&lt;object::ObjectFile&gt; O, RuntimeDyld::MemoryManager &amp; MemMgr, llvm::JITSymbolResolver &amp; Resolver, bool ProcessAllSections, unique_function&lt;llvm::Error (const object::ObjectFile &amp;, llvm::RuntimeDyld::LoadedObjectInfo &amp;, std::map&lt;StringRef, JITEvaluatedSymbol&gt;)&gt; OnLoaded, unique_function&lt;void (object::OwningBinary&lt;object::ObjectFile&gt;, std::unique_ptr&lt;LoadedObjectInfo&gt;, llvm::Error)&gt; OnEmitted)'/>
<dec f='llvm/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h' l='296' type='void llvm::jitLinkForORC(object::OwningBinary&lt;object::ObjectFile&gt; O, RuntimeDyld::MemoryManager &amp; MemMgr, llvm::JITSymbolResolver &amp; Resolver, bool ProcessAllSections, unique_function&lt;llvm::Error (const object::ObjectFile &amp;, RuntimeDyld::LoadedObjectInfo &amp;, std::map&lt;StringRef, JITEvaluatedSymbol&gt;)&gt; OnLoaded, unique_function&lt;void (object::OwningBinary&lt;object::ObjectFile&gt;, std::unique_ptr&lt;RuntimeDyld::LoadedObjectInfo&gt;, llvm::Error)&gt; OnEmitted)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/RuntimeDyld.h' l='290'>// Asynchronous JIT link for ORC.
//
// Warning: This API is experimental and probably should not be used by anyone
// but ORC&apos;s RTDyldObjectLinkingLayer2. Internally it constructs a RuntimeDyld
// instance and uses continuation passing to perform the fix-up and finalize
// steps asynchronously.</doc>
<use f='llvm/llvm/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp' l='149' u='c' c='_ZN4llvm3orc24RTDyldObjectLinkingLayer4emitESt10unique_ptrINS0_29MaterializationResponsibilityESt14default_deleteIS3_EES2_INS_12MemoryBufferES4_IS7_EE'/>
<def f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp' l='1427' ll='1456' type='void llvm::jitLinkForORC(object::OwningBinary&lt;object::ObjectFile&gt; O, RuntimeDyld::MemoryManager &amp; MemMgr, llvm::JITSymbolResolver &amp; Resolver, bool ProcessAllSections, unique_function&lt;llvm::Error (const object::ObjectFile &amp;, RuntimeDyld::LoadedObjectInfo &amp;, std::map&lt;StringRef, JITEvaluatedSymbol&gt;)&gt; OnLoaded, unique_function&lt;void (object::OwningBinary&lt;object::ObjectFile&gt;, std::unique_ptr&lt;RuntimeDyld::LoadedObjectInfo&gt;, llvm::Error)&gt; OnEmitted)'/>
<doc f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp' l='1424'>// FIXME: Kill this with fire once we have a new JIT linker: this is only here
// so that we can re-use RuntimeDyld&apos;s implementation without twisting the
// interface any further for ORC&apos;s purposes.</doc>
