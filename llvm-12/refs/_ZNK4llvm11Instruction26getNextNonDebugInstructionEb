<dec f='llvm/llvm/include/llvm/IR/Instruction.h' l='664' type='const llvm::Instruction * llvm::Instruction::getNextNonDebugInstruction(bool SkipPseudoOp = false) const'/>
<use f='llvm/llvm/include/llvm/IR/Instruction.h' l='667' u='c' c='_ZN4llvm11Instruction26getNextNonDebugInstructionEb'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='660'>/// Return a pointer to the next non-debug instruction in the same basic
  /// block as &apos;this&apos;, or nullptr if no such instruction exists. Skip any pseudo
  /// operations if \c SkipPseudoOp is true.</doc>
<def f='llvm/llvm/lib/IR/Instruction.cpp' l='658' ll='664' type='const llvm::Instruction * llvm::Instruction::getNextNonDebugInstruction(bool SkipPseudoOp = false) const'/>
