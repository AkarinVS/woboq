<def f='llvm/clang/include/clang/Sema/ScopeInfo.h' l='292' ll='294' type='bool clang::sema::FunctionScopeInfo::WeakObjectProfileTy::isExactProfile() const'/>
<use f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1399' u='c' c='_ZL25diagnoseRepeatedUseOfWeakRN5clang4SemaEPKNS_4sema17FunctionScopeInfoEPKNS_4DeclERKNS_9ParentMapE'/>
<use f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1460' u='c' c='_ZL25diagnoseRepeatedUseOfWeakRN5clang4SemaEPKNS_4sema17FunctionScopeInfoEPKNS_4DeclERKNS_9ParentMapE'/>
<doc f='llvm/clang/include/clang/Sema/ScopeInfo.h' l='281'>/// Returns true if the object base specifies a known object in memory,
    /// rather than, say, an instance variable or property of another object.
    ///
    /// Note that this ignores the effects of aliasing; that is, \c foo.bar is
    /// considered an exact profile if \c foo is a local variable, even if
    /// another variable \c foo2 refers to the same object as \c foo.
    ///
    /// For increased precision, accesses with base variables that are
    /// properties or ivars of &apos;self&apos; (e.g. self.prop1.prop2) are considered to
    /// be exact, though this is not true for arbitrary variables
    /// (foo.prop1.prop2).</doc>
