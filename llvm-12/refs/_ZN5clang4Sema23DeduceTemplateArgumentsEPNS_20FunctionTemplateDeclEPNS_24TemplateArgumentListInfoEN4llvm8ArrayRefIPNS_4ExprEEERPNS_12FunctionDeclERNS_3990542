<dec f='llvm/clang/include/clang/Sema/Sema.h' l='8378' type='clang::Sema::TemplateDeductionResult clang::Sema::DeduceTemplateArguments(clang::FunctionTemplateDecl * FunctionTemplate, clang::TemplateArgumentListInfo * ExplicitTemplateArgs, ArrayRef&lt;clang::Expr *&gt; Args, clang::FunctionDecl *&amp; Specialization, sema::TemplateDeductionInfo &amp; Info, bool PartialOverloading, llvm::function_ref&lt;bool (ArrayRef&lt;QualType&gt;)&gt; CheckNonDependent)'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='7027' u='c' c='_ZN5clang4Sema26AddMethodTemplateCandidateEPNS_20FunctionTemplateDeclENS_14DeclAccessPairEPNS_13CXXRecordDeclEPNS_24TemplateArgumentListInfoENS_8QualT725749'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='7110' u='c' c='_ZN5clang4Sema28AddTemplateOverloadCandidateEPNS_20FunctionTemplateDeclENS_14DeclAccessPairEPNS_24TemplateArgumentListInfoEN4llvm8ArrayRefIPNS_4ExprEE10996572'/>
<def f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4063' ll='4217' type='Sema::TemplateDeductionResult clang::Sema::DeduceTemplateArguments(clang::FunctionTemplateDecl * FunctionTemplate, clang::TemplateArgumentListInfo * ExplicitTemplateArgs, ArrayRef&lt;clang::Expr *&gt; Args, clang::FunctionDecl *&amp; Specialization, clang::sema::TemplateDeductionInfo &amp; Info, bool PartialOverloading, llvm::function_ref&lt;bool (ArrayRef&lt;QualType&gt;)&gt; CheckNonDependent)'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4038'>/// Perform template argument deduction from a function call
/// (C++ [temp.deduct.call]).
///
/// \param FunctionTemplate the function template for which we are performing
/// template argument deduction.
///
/// \param ExplicitTemplateArgs the explicit template arguments provided
/// for this call.
///
/// \param Args the function call arguments
///
/// \param Specialization if template argument deduction was successful,
/// this will be set to the function template specialization produced by
/// template argument deduction.
///
/// \param Info the argument will be updated to provide additional information
/// about template argument deduction.
///
/// \param CheckNonDependent A callback to invoke to check conversions for
/// non-dependent parameters, between deduction and substitution, per DR1391.
/// If this returns true, substitution will be skipped and we return
/// TDK_NonDependentConversionFailure. The callback is passed the parameter
/// types (after substituting explicit template arguments).
///
/// \returns the result of template argument deduction.</doc>
