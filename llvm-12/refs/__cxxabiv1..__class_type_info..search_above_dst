<dec f='llvm/libcxxabi/src/private_typeinfo.h' l='127' type='void __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info * , const void * , const void * , int , bool ) const'/>
<use f='llvm/libcxxabi/src/private_typeinfo.cpp' l='662' u='c' c='__cxxabiv1::__dynamic_cast'/>
<use f='llvm/libcxxabi/src/private_typeinfo.cpp' l='1071' u='c' c='__cxxabiv1::__si_class_type_info::search_below_dst'/>
<ovr f='llvm/libcxxabi/src/private_typeinfo.cpp' l='1182' c='__cxxabiv1::__vmi_class_type_info::search_above_dst'/>
<ovr f='llvm/libcxxabi/src/private_typeinfo.cpp' l='1256' c='__cxxabiv1::__si_class_type_info::search_above_dst'/>
<use f='llvm/libcxxabi/src/private_typeinfo.cpp' l='1265' u='c' c='__cxxabiv1::__si_class_type_info::search_above_dst'/>
<def f='llvm/libcxxabi/src/private_typeinfo.cpp' l='1270' ll='1279' type='void __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info * info, const void * dst_ptr, const void * current_ptr, int path_below, bool use_strcmp) const'/>
<use f='llvm/libcxxabi/src/private_typeinfo.cpp' l='1298' u='c' c='__cxxabiv1::__base_class_type_info::search_above_dst'/>
<doc f='llvm/libcxxabi/src/private_typeinfo.cpp' l='1268'>// This is the same algorithm as __vmi_class_type_info::search_above_dst but
//   simplified to the case that there is no base class.</doc>
