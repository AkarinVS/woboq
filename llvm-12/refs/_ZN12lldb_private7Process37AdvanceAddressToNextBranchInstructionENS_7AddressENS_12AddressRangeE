<dec f='llvm/lldb/include/lldb/Target/Process.h' l='2398' type='lldb_private::Address lldb_private::Process::AdvanceAddressToNextBranchInstruction(lldb_private::Address default_stop_addr, lldb_private::AddressRange range_bounds)'/>
<doc f='llvm/lldb/include/lldb/Target/Process.h' l='2377'>/// Find the next branch instruction to set a breakpoint on
  ///
  /// When instruction stepping through a source line, instead of stepping
  /// through each instruction, we can put a breakpoint on the next branch
  /// instruction (within the range of instructions we are stepping through)
  /// and continue the process to there, yielding significant performance
  /// benefits over instruction stepping.
  ///
  /// \param[in] default_stop_addr
  ///     The address of the instruction where lldb would put a
  ///     breakpoint normally.
  ///
  /// \param[in] range_bounds
  ///     The range which the breakpoint must be contained within.
  ///     Typically a source line.
  ///
  /// \return
  ///     The address of the next branch instruction, or the end of
  ///     the range provided in range_bounds.  If there are any
  ///     problems with the disassembly or getting the instructions,
  ///     the original default_stop_addr will be returned.</doc>
<def f='llvm/lldb/source/Target/Process.cpp' l='5756' ll='5805' type='lldb_private::Address lldb_private::Process::AdvanceAddressToNextBranchInstruction(lldb_private::Address default_stop_addr, lldb_private::AddressRange range_bounds)'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepOut.cpp' l='115' u='c' c='_ZN12lldb_private17ThreadPlanStepOutC1ERNS_6ThreadEPNS_13SymbolContextEbbNS_4VoteES5_jNS_8LazyBoolEbb'/>
