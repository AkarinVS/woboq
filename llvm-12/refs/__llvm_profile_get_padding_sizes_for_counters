<dec f='llvm/compiler-rt/lib/profile/InstrProfiling.h' l='279' type='void __llvm_profile_get_padding_sizes_for_counters(uint64_t DataSize, uint64_t CountersSize, uint64_t NamesSize, uint64_t * PaddingBytesBeforeCounters, uint64_t * PaddingBytesAfterCounters, uint64_t * PaddingBytesAfterNames)'/>
<doc f='llvm/compiler-rt/lib/profile/InstrProfiling.h' l='266'>/* ! \brief Given the sizes of the data and counter information, return the
 * number of padding bytes before and after the counters, and after the names,
 * in the raw profile.
 *
 * Note: In this context, &quot;size&quot; means &quot;number of entries&quot;, i.e. the first two
 * arguments must be the result of __llvm_profile_get_data_size() and of
 * (__llvm_profile_end_counters() - __llvm_profile_begin_counters()) resp.
 *
 * Note: When mmap() mode is disabled, no padding bytes before/after counters
 * are needed. However, in mmap() mode, the counter section in the raw profile
 * must be page-aligned: this API computes the number of padding bytes
 * needed to achieve that.
 */</doc>
<def f='llvm/compiler-rt/lib/profile/InstrProfilingBuffer.c' l='70' ll='92' macro='1' type='void __llvm_profile_get_padding_sizes_for_counters(uint64_t DataSize, uint64_t CountersSize, uint64_t NamesSize, uint64_t * PaddingBytesBeforeCounters, uint64_t * PaddingBytesAfterCounters, uint64_t * PaddingBytesAfterNames)'/>
<use f='llvm/compiler-rt/lib/profile/InstrProfilingBuffer.c' l='108' u='c' c='__llvm_profile_get_size_for_buffer_internal'/>
<use f='llvm/compiler-rt/lib/profile/InstrProfilingFile.c' l='645' u='c' c='initializeProfileForContinuousMode'/>
<use f='llvm/compiler-rt/lib/profile/InstrProfilingWriter.c' l='278' u='c' c='lprofWriteDataImpl'/>
