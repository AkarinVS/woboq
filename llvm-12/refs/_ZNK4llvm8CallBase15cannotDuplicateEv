<def f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='1815' type='bool llvm::CallBase::cannotDuplicate() const'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='1814'>/// Determine if the invoke cannot be duplicated.</doc>
<use f='llvm/llvm/lib/Analysis/CodeMetrics.cpp' l='168' u='c' c='_ZN4llvm11CodeMetrics17analyzeBasicBlockEPKNS_10BasicBlockERKNS_19TargetTransformInfoERKNS_15SmallPtrSetImplIPKNS_5ValueEEEb'/>
<use f='llvm/llvm/lib/Analysis/CodeMetrics.cpp' l='175' u='c' c='_ZN4llvm11CodeMetrics17analyzeBasicBlockEPKNS_10BasicBlockERKNS_19TargetTransformInfoERKNS_15SmallPtrSetImplIPKNS_5ValueEEEb'/>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='1824' u='c' c='_ZN12_GLOBAL__N_112CallAnalyzer13visitCallBaseERN4llvm8CallBaseE'/>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='490' u='c' c='_ZNK4llvm4Loop13isSafeToCloneEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CallSiteSplitting.cpp' l='187' u='c' c='_ZL16canSplitCallSiteRN4llvm8CallBaseERNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='581' u='c' c='_ZL28getJumpThreadDuplicationCostPN4llvm10BasicBlockEPNS_11InstructionEj'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp' l='347' u='c' c='_ZN12_GLOBAL__N_118LoopVersioningLICM28instructionSafeForVersioningEPN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='2723' u='c' c='_ZL21unswitchBestConditionRN4llvm4LoopERNS_13DominatorTreeERNS_8LoopInfoERNS_15AssumptionCacheERNS_19TargetTransformInfoENS_12function_refIFvbNS_8Arra2024261'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SpeculateAroundPHIs.cpp' l='71' u='c' c='_ZL25isSafeToSpeculatePHIUsersRN4llvm7PHINodeERNS_13DominatorTreeERNS_15SmallPtrSetImplIPNS_11InstructionEEES8_'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='2391' u='c' c='_ZL34BlockIsSimpleEnoughToThreadThroughPN4llvm10BasicBlockE'/>
