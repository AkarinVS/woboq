<use f='llvm/compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h' l='22' u='w' c='_ZN8gwp_asan26ThreadLocalPackedVariablesC1Ev'/>
<dec f='llvm/compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h' l='38' type='bool'/>
<use f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.h' l='216' u='w' c='_ZN8gwp_asan20GuardedPoolAllocator20ScopedRecursiveGuardC1Ev'/>
<use f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.h' l='217' u='w' c='_ZN8gwp_asan20GuardedPoolAllocator20ScopedRecursiveGuardD1Ev'/>
<use f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.cpp' l='152' u='r' c='_ZN8gwp_asan20GuardedPoolAllocator8allocateEm'/>
<use f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.cpp' l='203' u='w' c='_ZN8gwp_asan20GuardedPoolAllocator4stopEv'/>
<use f='llvm/compiler-rt/lib/gwp_asan/guarded_pool_allocator.cpp' l='234' u='r' c='_ZN8gwp_asan20GuardedPoolAllocator10deallocateEPv'/>
<offset>63</offset>
<doc f='llvm/compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h' l='33'>// Guard against recursivity. Unwinders often contain complex behaviour that
  // may not be safe for the allocator (i.e. the unwinder calls dlopen(),
  // which calls malloc()). When recursive behaviour is detected, we will
  // automatically fall back to the supporting allocator to supply the
  // allocation.</doc>
