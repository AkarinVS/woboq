<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='1604' type='static llvm::Instruction * llvm::CallInst::CreateMalloc(llvm::Instruction * InsertBefore, llvm::Type * IntPtrTy, llvm::Type * AllocTy, llvm::Value * AllocSize, llvm::Value * ArraySize = nullptr, llvm::Function * MallocF = nullptr, const llvm::Twine &amp; Name = &quot;&quot;)'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='1598'>/// Generate the IR for a call to malloc:
  /// 1. Compute the malloc call&apos;s argument as the specified type&apos;s size,
  ///    possibly multiplied by the array size if the array size is not
  ///    constant 1.
  /// 2. Call malloc with that argument.
  /// 3. Bitcast the result of the malloc call to the specified type.</doc>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='669' ll='676' type='static llvm::Instruction * llvm::CallInst::CreateMalloc(llvm::Instruction * InsertBefore, llvm::Type * IntPtrTy, llvm::Type * AllocTy, llvm::Value * AllocSize, llvm::Value * ArraySize = nullptr, llvm::Function * MallocF = nullptr, const llvm::Twine &amp; Name = &quot;&quot;)'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='663'>/// CreateMalloc - Generate the IR for a call to malloc:
/// 1. Compute the malloc call&apos;s argument as the specified type&apos;s size,
///    possibly multiplied by the array size if the array size is not
///    constant 1.
/// 2. Call malloc with that argument.
/// 3. Bitcast the result of the malloc call to the specified type.</doc>
<use f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp' l='964' u='c' c='_ZN12_GLOBAL__N_132WebAssemblyLowerEmscriptenEHSjLj17runSjLjOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='1480' u='c' c='_ZN14IslNodeBuilder17allocateNewArraysESt4pairIPN4llvm10BasicBlockES3_E'/>
