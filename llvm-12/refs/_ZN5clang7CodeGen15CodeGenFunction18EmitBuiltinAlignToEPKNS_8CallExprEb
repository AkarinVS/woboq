<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='4014' type='clang::CodeGen::RValue clang::CodeGen::CodeGenFunction::EmitBuiltinAlignTo(const clang::CallExpr * E, bool AlignUp)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='4013'>/// Emit IR for __builtin_align_up/__builtin_align_down.</doc>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='4228' u='c' c='_ZN5clang7CodeGen15CodeGenFunction15EmitBuiltinExprENS_10GlobalDeclEjPKNS_8CallExprENS0_15ReturnValueSlotE'/>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='4230' u='c' c='_ZN5clang7CodeGen15CodeGenFunction15EmitBuiltinExprENS_10GlobalDeclEjPKNS_8CallExprENS0_15ReturnValueSlotE'/>
<def f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='16627' ll='16668' type='clang::CodeGen::RValue clang::CodeGen::CodeGenFunction::EmitBuiltinAlignTo(const clang::CallExpr * E, bool AlignUp)'/>
<doc f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='16623'>/// Generate (x &amp; ~(y-1)) to align down or ((x+(y-1)) &amp; ~(y-1)) to align up.
/// Note: For pointer types we can avoid ptrtoint/inttoptr pairs by using the
/// llvm.ptrmask instrinsic (with a GEP before in the align_up case).
/// TODO: actually use ptrmask once most optimization passes know about it.</doc>
