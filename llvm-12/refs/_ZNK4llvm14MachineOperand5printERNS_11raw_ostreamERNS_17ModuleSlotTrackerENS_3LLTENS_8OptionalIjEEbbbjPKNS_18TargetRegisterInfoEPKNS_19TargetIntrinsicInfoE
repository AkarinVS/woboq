<dec f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='299' type='void llvm::MachineOperand::print(llvm::raw_ostream &amp; os, llvm::ModuleSlotTracker &amp; MST, llvm::LLT TypeToPrint, Optional&lt;unsigned int&gt; OpIdx, bool PrintDef, bool IsStandalone, bool ShouldPrintRegisterTies, unsigned int TiedOperandIdx, const llvm::TargetRegisterInfo * TRI, const llvm::TargetIntrinsicInfo * IntrinsicInfo) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='278'>/// More complex way of printing a MachineOperand.
  /// \param TypeToPrint specifies the generic type to be printed on uses and
  /// defs. It can be determined using MachineInstr::getTypeToPrint.
  /// \param OpIdx - specifies the index of the operand in machine instruction.
  /// This will be used by target dependent MIR formatter. Could be None if the
  /// index is unknown, e.g. called by dump().
  /// \param PrintDef - whether we want to print `def` on an operand which
  /// isDef. Sometimes, if the operand is printed before &apos;=&apos;, we don&apos;t print
  /// `def`.
  /// \param IsStandalone - whether we want a verbose output of the MO. This
  /// prints extra information that can be easily inferred when printing the
  /// whole function, but not when printing only a fragment of it.
  /// \param ShouldPrintRegisterTies - whether we want to print register ties.
  /// Sometimes they are easily determined by the instruction&apos;s descriptor
  /// (MachineInstr::hasComplexRegiterTies can determine if it&apos;s needed).
  /// \param TiedOperandIdx - if we need to print register ties this needs to
  /// provide the index of the tied register. If not, it will be ignored.
  /// \param TRI - provide more target-specific information to the printer.
  /// Unlike the previous function, this one will not try and get the
  /// information from it&apos;s parent.
  /// \param IntrinsicInfo - same as \p TRI.</doc>
<use f='llvm/llvm/lib/CodeGen/MIRPrinter.cpp' l='877' u='c' c='_ZN4llvm9MIPrinter5printERKNS_12MachineInstrEjPKNS_18TargetRegisterInfoEPKNS_15TargetInstrInfoEbNS_3LLTEb'/>
<use f='llvm/llvm/lib/CodeGen/MachineInstr.cpp' l='1626' u='c' c='_ZNK4llvm12MachineInstr5printERNS_11raw_ostreamERNS_17ModuleSlotTrackerEbbbbPKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineInstr.cpp' l='1683' u='c' c='_ZNK4llvm12MachineInstr5printERNS_11raw_ostreamERNS_17ModuleSlotTrackerEbbbbPKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineInstr.cpp' l='1722' u='c' c='_ZNK4llvm12MachineInstr5printERNS_11raw_ostreamERNS_17ModuleSlotTrackerEbbbbPKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineInstr.cpp' l='1733' u='c' c='_ZNK4llvm12MachineInstr5printERNS_11raw_ostreamERNS_17ModuleSlotTrackerEbbbbPKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineInstr.cpp' l='1771' u='c' c='_ZNK4llvm12MachineInstr5printERNS_11raw_ostreamERNS_17ModuleSlotTrackerEbbbbPKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineOperand.cpp' l='728' u='c' c='_ZNK4llvm14MachineOperand5printERNS_11raw_ostreamENS_3LLTEPKNS_18TargetRegisterInfoEPKNS_19TargetIntrinsicInfoE'/>
<def f='llvm/llvm/lib/CodeGen/MachineOperand.cpp' l='734' ll='958' type='void llvm::MachineOperand::print(llvm::raw_ostream &amp; OS, llvm::ModuleSlotTracker &amp; MST, llvm::LLT TypeToPrint, Optional&lt;unsigned int&gt; OpIdx, bool PrintDef, bool IsStandalone, bool ShouldPrintRegisterTies, unsigned int TiedOperandIdx, const llvm::TargetRegisterInfo * TRI, const llvm::TargetIntrinsicInfo * IntrinsicInfo) const'/>
<use f='llvm/llvm/unittests/CodeGen/MachineOperandTest.cpp' l='313' u='c' c='_ZN12_GLOBAL__N_137MachineOperandTest_PrintMetadata_Test8TestBodyEv'/>
