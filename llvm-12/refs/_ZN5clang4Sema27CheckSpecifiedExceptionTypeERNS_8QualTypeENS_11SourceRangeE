<dec f='llvm/clang/include/clang/Sema/Sema.h' l='1977' type='bool clang::Sema::CheckSpecifiedExceptionType(clang::QualType &amp; T, clang::SourceRange Range)'/>
<use f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='17668' u='c' c='_ZN5clang4Sema27checkExceptionSpecificationEbNS_26ExceptionSpecificationTypeEN4llvm8ArrayRefINS_9OpaquePtrINS_8QualTypeEEEEENS3_INS_11SourceRangeEEEPN5192620'/>
<def f='llvm/clang/lib/Sema/SemaExceptionSpec.cpp' l='114' ll='177' type='bool clang::Sema::CheckSpecifiedExceptionType(clang::QualType &amp; T, clang::SourceRange Range)'/>
<doc f='llvm/clang/lib/Sema/SemaExceptionSpec.cpp' l='108'>/// CheckSpecifiedExceptionType - Check if the given type is valid in an
/// exception specification. Incomplete types, or pointers to incomplete types
/// other than void are not allowed.
///
/// \param[in,out] T  The exception type. This will be decayed to a pointer type
///                   when the input is an array or a function type.</doc>
<use f='llvm/clang/lib/Sema/TreeTransform.h' l='5899' u='c' c='_ZN5clang13TreeTransform22TransformExceptionSpecENS_14SourceLocationERNS_17FunctionProtoType17ExceptionSpecInfoERN4llvm15SmallVectorImplINS_8QualTypeEEERb'/>
<use f='llvm/clang/lib/Sema/TreeTransform.h' l='5906' u='c' c='_ZN5clang13TreeTransform22TransformExceptionSpecENS_14SourceLocationERNS_17FunctionProtoType17ExceptionSpecInfoERN4llvm15SmallVectorImplINS_8QualTypeEEERb'/>
