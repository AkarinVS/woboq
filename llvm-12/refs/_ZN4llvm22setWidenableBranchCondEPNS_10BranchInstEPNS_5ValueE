<dec f='llvm/llvm/include/llvm/Transforms/Utils/GuardUtils.h' l='40' type='void llvm::setWidenableBranchCond(llvm::BranchInst * WidenableBR, llvm::Value * Cond)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/GuardUtils.h' l='37'>/// Given a branch we know is widenable (defined per Analysis/GuardUtils.h),
/// *set* it&apos;s condition such that (only) &apos;Cond&apos; is known to hold on the taken
/// path and that the branch remains widenable after transform.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/GuardWidening.cpp' l='265' u='c' c='_ZN12_GLOBAL__N_117GuardWideningImpl10widenGuardEPN4llvm11InstructionEPNS1_5ValueEb'/>
<def f='llvm/llvm/lib/Transforms/Utils/GuardUtils.cpp' l='108' ll='126' type='void llvm::setWidenableBranchCond(llvm::BranchInst * WidenableBR, llvm::Value * NewCond)'/>
