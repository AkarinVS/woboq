<def f='llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-internal.h' l='752' ll='767'/>
<use f='llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-internal.h' l='766' c='_ZN7testing8internal6RandomC1ERKS1_'/>
<use f='llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-internal.h' l='766' c='_ZN7testing8internal6RandomaSERKS1_'/>
<use f='llvm/llvm/utils/unittest/googletest/include/gtest/gtest.h' l='925' c='_ZN7testing8TestCase12ShuffleTestsEPNS_8internal6RandomE'/>
<size>4</size>
<doc f='llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-internal.h' l='747'>// A simple Linear Congruential Generator for generating random
// numbers with a uniform distribution.  Unlike rand() and srand(), it
// doesn&apos;t use global state (and therefore can&apos;t interfere with user
// code).  Unlike rand_r(), it&apos;s portable.  An LCG isn&apos;t very random,
// but it&apos;s good enough for our purposes.</doc>
<smbr r='testing::internal::Random::kMaxRange' t='const testing::internal::UInt32'/>
<fun r='_ZN7testing8internal6RandomC1Ej'/>
<fun r='_ZN7testing8internal6Random6ReseedEj'/>
<fun r='_ZN7testing8internal6Random8GenerateEj'/>
<mbr r='testing::internal::Random::state_' o='0' t='testing::internal::UInt32'/>
<fun r='_ZN7testing8internal6RandomC1ERKS1_'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest-internal-inl.h' l='312' c='_ZN7testing8internal12ShuffleRangeEPNS0_6RandomEiiPSt6vectorIT_SaIS4_EE'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest-internal-inl.h' l='333' c='_ZN7testing8internal7ShuffleEPNS0_6RandomEPSt6vectorIT_SaIS4_EE'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest-internal-inl.h' l='792' c='_ZN7testing8internal12UnitTestImpl6randomEv'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest-internal-inl.h' l='899'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='2793' c='_ZN7testing8TestCase12ShuffleTestsEPNS_8internal6RandomE'/>
<size>4</size>
<fun r='_ZN7testing8internal6Random8GenerateEj'/>
