<dec f='llvm/polly/include/polly/ScopBuilder.h' l='247' type='void polly::ScopBuilder::propagateDomainConstraintsToRegionExit(llvm::BasicBlock * BB, llvm::Loop * BBLoop, SmallPtrSetImpl&lt;llvm::BasicBlock *&gt; &amp; FinishedExitBlocks, DenseMap&lt;llvm::BasicBlock *, isl::set&gt; &amp; InvalidDomainMap)'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='630' ll='672' type='void polly::ScopBuilder::propagateDomainConstraintsToRegionExit(llvm::BasicBlock * BB, llvm::Loop * BBLoop, SmallPtrSetImpl&lt;llvm::BasicBlock *&gt; &amp; FinishedExitBlocks, DenseMap&lt;llvm::BasicBlock *, isl::set&gt; &amp; InvalidDomainMap)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='915' u='c' c='_ZN5polly11ScopBuilder33buildDomainsWithBranchConstraintsEPN4llvm6RegionERNS1_8DenseMapIPNS1_10BasicBlockEN3isl12noexceptions3setENS1_12DenseMapInfoIS1601647'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='224'>/// Propagate domains that are known due to graph properties.
  ///
  /// As a CFG is mostly structured we use the graph properties to propagate
  /// domains without the need to compute all path conditions. In particular,
  /// if a block A dominates a block B and B post-dominates A we know that the
  /// domain of B is a superset of the domain of A. As we do not have
  /// post-dominator information available here we use the less precise region
  /// information. Given a region R, we know that the exit is always executed
  /// if the entry was executed, thus the domain of the exit is a superset of
  /// the domain of the entry. In case the exit can only be reached from
  /// within the region the domains are in fact equal. This function will use
  /// this property to avoid the generation of condition constraints that
  /// determine when a branch is taken. If @p BB is a region entry block we
  /// will propagate its domain to the region exit block. Additionally, we put
  /// the region exit block in the @p FinishedExitBlocks set so we can later
  /// skip edges from within the region to that block.
  ///
  /// @param BB                 The block for which the domain is currently
  ///                           propagated.
  /// @param BBLoop             The innermost affine loop surrounding @p BB.
  /// @param FinishedExitBlocks Set of region exits the domain was set for.
  /// @param InvalidDomainMap   BB to InvalidDomain map for the BB of current
  ///                           region.</doc>
