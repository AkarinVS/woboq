<dec f='llvm/lldb/include/lldb/Expression/UserExpression.h' l='146' type='lldb::ExpressionResults lldb_private::UserExpression::Execute(lldb_private::DiagnosticManager &amp; diagnostic_manager, lldb_private::ExecutionContext &amp; exe_ctx, const lldb_private::EvaluateExpressionOptions &amp; options, lldb::UserExpressionSP &amp; shared_ptr_to_me, lldb::ExpressionVariableSP &amp; result)'/>
<doc f='llvm/lldb/include/lldb/Expression/UserExpression.h' l='120'>/// Execute the parsed expression by callinng the derived class&apos;s DoExecute
  /// method.
  ///
  /// \param[in] diagnostic_manager
  ///     A diagnostic manager to report errors to.
  ///
  /// \param[in] exe_ctx
  ///     The execution context to use when looking up entities that
  ///     are needed for parsing (locations of variables, etc.)
  ///
  /// \param[in] options
  ///     Expression evaluation options.
  ///
  /// \param[in] shared_ptr_to_me
  ///     This is a shared pointer to this UserExpression.  This is
  ///     needed because Execute can push a thread plan that will hold onto
  ///     the UserExpression for an unbounded period of time.  So you
  ///     need to give the thread plan a reference to this object that can
  ///     keep it alive.
  ///
  /// \param[in] result
  ///     A pointer to direct at the persistent variable in which the
  ///     expression&apos;s result is stored.
  ///
  /// \return
  ///     A Process::Execution results value.</doc>
<use f='llvm/lldb/source/Breakpoint/BreakpointLocation.cpp' l='296' u='c' c='_ZN12lldb_private18BreakpointLocation17ConditionSaysStopERNS_16ExecutionContextERNS_6StatusE'/>
<use f='llvm/lldb/source/Expression/UserExpression.cpp' l='345' u='c' c='_ZN12lldb_private14UserExpression8EvaluateERNS_16ExecutionContextERKNS_25EvaluateExpressionOptionsEN4llvm9StringRefES7_RSt10shared_ptrINS_11ValueObjec12557664'/>
<def f='llvm/lldb/source/Expression/UserExpression.cpp' l='392' ll='407' type='lldb::ExpressionResults lldb_private::UserExpression::Execute(lldb_private::DiagnosticManager &amp; diagnostic_manager, lldb_private::ExecutionContext &amp; exe_ctx, const lldb_private::EvaluateExpressionOptions &amp; options, lldb::UserExpressionSP &amp; shared_ptr_to_me, lldb::ExpressionVariableSP &amp; result_var)'/>
