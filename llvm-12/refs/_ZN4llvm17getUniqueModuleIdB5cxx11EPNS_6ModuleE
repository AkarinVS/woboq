<dec f='llvm/llvm/include/llvm/Transforms/Utils/ModuleUtils.h' l='112' type='std::string llvm::getUniqueModuleId(llvm::Module * M)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/ModuleUtils.h' l='102'>/// Produce a unique identifier for this module by taking the MD5 sum of
/// the names of the module&apos;s strong external symbols that are not comdat
/// members.
///
/// This identifier is normally guaranteed to be unique, or the program would
/// fail to link due to multiply defined symbols.
///
/// If the module has no strong external symbols (such a module may still have a
/// semantic effect if it performs global initialization), we cannot produce a
/// unique identifier for this module, so we return the empty string.</doc>
<use f='llvm/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp' l='2203' u='c' c='_ZN12_GLOBAL__N_116PPCAIXAsmPrinter16doInitializationERN4llvm6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/IPO/SampleProfileProbe.cpp' l='376' u='c' c='_ZN4llvm22SampleProfileProbePass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp' l='204' u='c' c='_ZN12_GLOBAL__N_127splitAndWriteThinLTOBitcodeERN4llvm11raw_ostreamEPS1_NS0_12function_refIFRNS0_9AAResultsERNS0_8FunctionEEEERNS0_6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp' l='458' u='c' c='_ZN12_GLOBAL__N_119writeThinLTOBitcodeERN4llvm11raw_ostreamEPS1_NS0_12function_refIFRNS0_9AAResultsERNS0_8FunctionEEEERNS0_6ModuleEPKNS0_18ModuleSummaryIndexE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='2431' u='c' c='_ZN12_GLOBAL__N_122ModuleAddressSanitizer17InstrumentGlobalsERN4llvm9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEERNS1_6ModuleEPb'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp' l='396' u='c' c='_ZN12_GLOBAL__N_123ModuleSanitizerCoverage16instrumentModuleERN4llvm6ModuleENS1_12function_refIFPKNS1_13DominatorTreeERNS1_8FunctionEEEENS4_IFPKNS1_1710555630'/>
<def f='llvm/llvm/lib/Transforms/Utils/ModuleUtils.cpp' l='261' ll='291' type='std::string llvm::getUniqueModuleId(llvm::Module * M)'/>
