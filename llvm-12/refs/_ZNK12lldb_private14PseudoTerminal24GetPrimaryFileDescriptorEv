<dec f='llvm/lldb/include/lldb/Host/PseudoTerminal.h' l='83' type='int lldb_private::PseudoTerminal::GetPrimaryFileDescriptor() const'/>
<doc f='llvm/lldb/include/lldb/Host/PseudoTerminal.h' l='71'>/// The primary file descriptor accessor.
  ///
  /// This object retains ownership of the primary file descriptor when this
  /// accessor is used. Users can call the member function
  /// PseudoTerminal::ReleasePrimaryFileDescriptor() if this object should
  /// release ownership of the secondary file descriptor.
  ///
  /// \return
  ///     The primary file descriptor, or PseudoTerminal::invalid_fd
  ///     if the primary file  descriptor is not currently valid.
  ///
  /// \see PseudoTerminal::ReleasePrimaryFileDescriptor()</doc>
<def f='llvm/lldb/source/Host/common/PseudoTerminal.cpp' l='171' type='int lldb_private::PseudoTerminal::GetPrimaryFileDescriptor() const'/>
<doc f='llvm/lldb/source/Host/common/PseudoTerminal.cpp' l='164'>// The primary file descriptor accessor. This object retains ownership of the
// primary file descriptor when this accessor is used. Use
// ReleasePrimaryFileDescriptor() if you wish this object to release ownership
// of the primary file descriptor.
//
// Returns the primary file descriptor, or -1 if the primary file descriptor is
// not currently valid.</doc>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp' l='922' u='c' c='_ZN12lldb_private18process_gdb_remote16ProcessGDBRemote8DoLaunchEPNS_6ModuleERNS_17ProcessLaunchInfoE'/>
<use f='llvm/lldb/unittests/Editline/EditlineTest.cpp' l='107' u='c' c='_ZN15EditlineAdapterC1Ev'/>
