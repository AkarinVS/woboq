<def f='llvm/compiler-rt/lib/xray/xray_allocator.h' l='164' ll='284'/>
<doc f='llvm/compiler-rt/lib/xray/xray_allocator.h' l='147'>/// The Allocator type hands out fixed-sized chunks of memory that are
/// cache-line aligned and sized. This is useful for placement of
/// performance-sensitive data in memory that&apos;s frequently accessed. The
/// allocator also self-limits the peak memory usage to a dynamically defined
/// maximum.
///
/// N is the lower-bound size of the block of memory to return from the
/// allocation function. N is used to compute the size of a block, which is
/// cache-line-size multiples worth of memory. We compute the size of a block by
/// determining how many cache lines worth of memory is required to subsume N.
///
/// The Allocator instance will manage its own memory acquired through mmap.
/// This severely constrains the platforms on which this can be used to POSIX
/// systems where mmap semantics are well-defined.
///
/// FIXME: Isolate the lower-level memory management to a different abstraction
/// that can be platform-specific.</doc>
<mbr r='__xray::Allocator::MaxMemory' t='size_t'/>
<mbr r='__xray::Allocator::BackingStore' t='unsigned char *'/>
<mbr r='__xray::Allocator::AlignedNextBlock' t='unsigned char *'/>
<mbr r='__xray::Allocator::AllocatedBlocks' t='size_t'/>
<mbr r='__xray::Allocator::Owned' t='bool'/>
<mbr r='__xray::Allocator::Mutex' t='__sanitizer::SpinMutex'/>
<fun r='__xray::Allocator::Alloc'/>
<fun r='__xray::Allocator::Allocator{N}'/>
<fun r='__xray::Allocator::Allocator{N}'/>
<fun r='__xray::Allocator::Allocator{N}'/>
<fun r='__xray::Allocator::operator='/>
<fun r='__xray::Allocator::Allocator{N}'/>
<fun r='__xray::Allocator::operator='/>
<fun r='__xray::Allocator::Allocate'/>
<fun r='__xray::Allocator::~Allocator{N}'/>
<use f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='67'/>
