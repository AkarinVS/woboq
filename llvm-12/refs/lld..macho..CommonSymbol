<inh f='llvm/lld/MachO/Symbols.h' l='35' c='lld::macho::Symbol'/>
<def f='llvm/lld/MachO/Symbols.h' l='166' ll='182'/>
<use f='llvm/lld/MachO/Symbols.h' l='258'/>
<use f='llvm/lld/MachO/Symbols.h' l='258'/>
<size>64</size>
<doc f='llvm/lld/MachO/Symbols.h' l='151'>// On Unix, it is traditionally allowed to write variable definitions without
// initialization expressions (such as &quot;int foo;&quot;) to header files. These are
// called tentative definitions.
//
// Using tentative definitions is usually considered a bad practice; you should
// write only declarations (such as &quot;extern int foo;&quot;) to header files.
// Nevertheless, the linker and the compiler have to do something to support
// bad code by allowing duplicate definitions for this particular case.
//
// The compiler creates common symbols when it sees tentative definitions.
// (You can suppress this behavior and let the compiler create a regular
// defined symbol by passing -fno-common. -fno-common is the default in clang
// as of LLVM 11.0.) When linking the final binary, if there are remaining
// common symbols after name resolution is complete, the linker converts them
// to regular defined symbols in a __common section.</doc>
<fun r='_ZN3lld5macho12CommonSymbolC1ENS0_10StringRefZEPNS0_9InputFileEmjb'/>
<fun r='_ZN3lld5macho12CommonSymbol7classofEPKNS0_6SymbolE'/>
<mbr r='lld::macho::CommonSymbol::file' o='320' t='lld::macho::InputFile *const'/>
<mbr r='lld::macho::CommonSymbol::size' o='384' t='const uint64_t'/>
<mbr r='lld::macho::CommonSymbol::align' o='448' t='const uint32_t'/>
<mbr r='lld::macho::CommonSymbol::privateExtern' o='480' t='const bool'/>
<use f='llvm/lld/MachO/Driver.cpp' l='509' c='_ZL20replaceCommonSymbolsv'/>
<size>64</size>
<use f='llvm/lld/MachO/SymbolTable.cpp' l='98' c='_ZN3lld5macho11SymbolTable9addCommonEN4llvm9StringRefEPNS0_9InputFileEmjb'/>
<use f='llvm/lld/MachO/SymbolTable.cpp' l='108' c='_ZN3lld5macho11SymbolTable9addCommonEN4llvm9StringRefEPNS0_9InputFileEmjb'/>
<size>64</size>
