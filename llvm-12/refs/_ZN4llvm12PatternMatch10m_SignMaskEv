<def f='llvm/llvm/include/llvm/IR/PatternMatch.h' l='536' ll='538' type='cst_pred_ty&lt;llvm::PatternMatch::is_sign_mask&gt; llvm::PatternMatch::m_SignMask()'/>
<doc f='llvm/llvm/include/llvm/IR/PatternMatch.h' l='534'>/// Match an integer or vector with only the sign bit(s) set.
/// For vectors, this includes constants with undefined elements.</doc>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='643' u='c' c='_ZL15SimplifyAddInstPN4llvm5ValueES1_bbRKNS_13SimplifyQueryEj'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='644' u='c' c='_ZL15SimplifyAddInstPN4llvm5ValueES1_bbRKNS_13SimplifyQueryEj'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='3115' u='c' c='_ZL21simplifyICmpWithBinOpN4llvm7CmpInst9PredicateEPNS_5ValueES3_RKNS_13SimplifyQueryEj'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='1924' u='c' c='_ZL22isKnownToBeAPowerOfTwoPKN4llvm5ValueEbjRKN12_GLOBAL__N_15QueryE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='1858' u='c' c='_ZN4llvm16InstCombinerImpl8visitAndERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1118' u='c' c='_ZN4llvm16InstCombinerImpl9visitSDivERNS_14BinaryOperatorE'/>
