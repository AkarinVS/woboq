<dec f='llvm/lldb/include/lldb/Target/Platform.h' l='150' type='lldb_private::Status lldb_private::Platform::ResolveExecutable(const lldb_private::ModuleSpec &amp; module_spec, lldb::ModuleSP &amp; module_sp, const lldb_private::FileSpecList * module_search_paths_ptr)'/>
<doc f='llvm/lldb/include/lldb/Target/Platform.h' l='120'>/// Find a platform plugin for a given process.
  ///
  /// Scans the installed Platform plug-ins and tries to find an instance that
  /// can be used for \a process
  ///
  /// \param[in] process
  ///     The process for which to try and locate a platform
  ///     plug-in instance.
  ///
  /// \param[in] plugin_name
  ///     An optional name of a specific platform plug-in that
  ///     should be used. If nullptr, pick the best plug-in.
  //        static lldb::PlatformSP
  //        FindPlugin (Process *process, ConstString plugin_name);

  /// Set the target&apos;s executable based off of the existing architecture
  /// information in \a target given a path to an executable \a exe_file.
  ///
  /// Each platform knows the architectures that it supports and can select
  /// the correct architecture slice within \a exe_file by inspecting the
  /// architecture in \a target. If the target had an architecture specified,
  /// then in can try and obey that request and optionally fail if the
  /// architecture doesn&apos;t match up. If no architecture is specified, the
  /// platform should select the default architecture from \a exe_file. Any
  /// application bundles or executable wrappers can also be inspected for the
  /// actual application binary within the bundle that should be used.
  ///
  /// \return
  ///     Returns \b true if this Platform plug-in was able to find
  ///     a suitable executable, \b false otherwise.</doc>
<use f='llvm/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.cpp' l='766' u='c' c='_ZN22DynamicLoaderPOSIXDYLD23ResolveExecutableModuleERSt10shared_ptrIN12lldb_private6ModuleEE'/>
<ovr f='llvm/lldb/source/Plugins/Platform/gdb-server/PlatformRemoteGDBServer.cpp' l='96' c='_ZN12lldb_private19platform_gdb_server23PlatformRemoteGDBServer17ResolveExecutableERKNS_10ModuleSpecERSt10shared_ptrINS_6ModuleEEPKNS_12FileSpecListE'/>
<def f='llvm/lldb/source/Target/Platform.cpp' l='854' ll='885' type='lldb_private::Status lldb_private::Platform::ResolveExecutable(const lldb_private::ModuleSpec &amp; module_spec, lldb::ModuleSP &amp; exe_module_sp, const lldb_private::FileSpecList * module_search_paths_ptr)'/>
<use f='llvm/lldb/source/Target/Platform.cpp' l='1539' u='c' c='_ZN12lldb_private8Platform20LoadCachedExecutableERKNS_10ModuleSpecERSt10shared_ptrINS_6ModuleEEPKNS_12FileSpecListERS0_'/>
<ovr f='llvm/lldb/source/Target/RemoteAwarePlatform.cpp' l='32' c='_ZN12lldb_private19RemoteAwarePlatform17ResolveExecutableERKNS_10ModuleSpecERSt10shared_ptrINS_6ModuleEEPKNS_12FileSpecListE'/>
<use f='llvm/lldb/source/Target/TargetList.cpp' l='345' u='c' c='_ZN12lldb_private10TargetList20CreateTargetInternalERNS_8DebuggerEN4llvm9StringRefERKNS_8ArchSpecENS_18LoadDependentFilesERSt10shared_ptrINS_8PlatformEERS9_INS_6TargetEE'/>
<ovr f='llvm/lldb/unittests/Target/RemoteAwarePlatformTest.cpp' l='57' c='_ZN20TargetPlatformTester17ResolveExecutableERKN12lldb_private10ModuleSpecERSt10shared_ptrINS0_6ModuleEEPKNS0_12FileSpecListE'/>
