<dec f='llvm/clang/include/clang/Basic/TemplateKinds.h' l='46' type='4'/>
<doc f='llvm/clang/include/clang/Basic/TemplateKinds.h' l='34'>/// The name refers to a dependent template name:
  /// \code
  /// template&lt;typename MetaFun, typename T1, typename T2&gt; struct apply2 {
  ///   typedef typename MetaFun::template apply&lt;T1, T2&gt;::type type;
  /// };
  /// \endcode
  ///
  /// Here, &quot;apply&quot; is a dependent template name within the typename
  /// specifier in the typedef. &quot;apply&quot; is a nested template, and
  /// whether the template name is assumed to refer to a type template or a
  /// function template depends on the context in which the template
  /// name occurs.</doc>
<use f='llvm/clang/include/clang/Sema/ParsedTemplate.h' l='227' u='r' c='_ZNK5clang20TemplateIdAnnotation11mightBeTypeEv'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='1491' u='r' c='_ZN5clang6Parser29ParseTemplateTemplateArgumentEv'/>
<use f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='366' u='r' c='_ZN5clang4Sema27DiagnoseUnknownTemplateNameERKNS_14IdentifierInfoENS_14SourceLocationEPNS_5ScopeEPKNS_12CXXScopeSpecERNS_9OpaquePtrINS_12TemplateNameE2138294'/>
<use f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='4899' u='r' c='_ZN5clang4Sema17ActOnTemplateNameEPNS_5ScopeERNS_12CXXScopeSpecENS_14SourceLocationERKNS_13UnqualifiedIdENS_9OpaquePtrINS_8QualTypeEEEbRNS9_INS_12TemplateNameEEEb'/>
