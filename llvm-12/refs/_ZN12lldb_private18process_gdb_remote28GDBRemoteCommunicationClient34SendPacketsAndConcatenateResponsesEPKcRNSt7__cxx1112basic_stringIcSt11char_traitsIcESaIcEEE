<dec f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunicationClient.h' l='80' type='lldb_private::process_gdb_remote::GDBRemoteCommunication::PacketResult lldb_private::process_gdb_remote::GDBRemoteCommunicationClient::SendPacketsAndConcatenateResponses(const char * send_payload_prefix, std::string &amp; response_string)'/>
<doc f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunicationClient.h' l='62'>// For packets which specify a range of output to be returned,
  // return all of the output via a series of request packets of the form
  // &lt;prefix&gt;0,&lt;size&gt;
  // &lt;prefix&gt;&lt;size&gt;,&lt;size&gt;
  // &lt;prefix&gt;&lt;size&gt;*2,&lt;size&gt;
  // &lt;prefix&gt;&lt;size&gt;*3,&lt;size&gt;
  // ...
  // until a &quot;$l...&quot; packet is received, indicating the end.
  // (size is in hex; this format is used by a standard gdbserver to
  // return the given portion of the output specified by &lt;prefix&gt;;
  // for example, &quot;qXfer:libraries-svr4:read::fff,1000&quot; means
  // &quot;return a chunk of the xml description file for shared
  // library load addresses, where the chunk starts at offset 0xfff
  // and continues for 0x1000 bytes&quot;).
  // Concatenate the resulting server response packets together and
  // return in response_string.  If any packet fails, the return value
  // indicates that failure and the returned string value is undefined.</doc>
<def f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunicationClient.cpp' l='664' ll='710' type='GDBRemoteCommunicationClient::PacketResult lldb_private::process_gdb_remote::GDBRemoteCommunicationClient::SendPacketsAndConcatenateResponses(const char * payload_prefix, std::string &amp; response_string)'/>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp' l='3989' u='c' c='_ZN12lldb_private18process_gdb_remote16ProcessGDBRemote11GetAuxvDataEv'/>
