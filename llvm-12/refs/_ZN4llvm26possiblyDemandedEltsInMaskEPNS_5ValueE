<dec f='llvm/llvm/include/llvm/Analysis/VectorUtils.h' l='559' type='llvm::APInt llvm::possiblyDemandedEltsInMask(llvm::Value * Mask)'/>
<doc f='llvm/llvm/include/llvm/Analysis/VectorUtils.h' l='557'>/// Given a mask vector of the form &lt;Y x i1&gt;, return an APInt (of bitwidth Y)
/// for each lane which may be active.</doc>
<def f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='923' ll='938' type='llvm::APInt llvm::possiblyDemandedEltsInMask(llvm::Value * Mask)'/>
<doc f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='921'>/// TODO: This is a lot like known bits, but for
/// vectors.  Is there something we can common this with?</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp' l='325' u='c' c='_ZN4llvm16InstCombinerImpl19simplifyMaskedStoreERNS_13IntrinsicInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp' l='364' u='c' c='_ZN4llvm16InstCombinerImpl21simplifyMaskedScatterERNS_13IntrinsicInstE'/>
