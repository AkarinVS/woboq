<dec f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='426' type='bool llvm::MachineOperand::isRenamable() const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineOperand.h' l='397'>/// isRenamable - Returns true if this register may be renamed, i.e. it does
  /// not generate a value that is somehow read in a way that is not represented
  /// by the Machine IR (e.g. to meet an ABI or ISA requirement).  This is only
  /// valid on physical register operands.  Virtual registers are assumed to
  /// always be renamable regardless of the value of this field.
  ///
  /// Operands that are renamable can freely be changed to any other register
  /// that is a member of the register class returned by
  /// MI-&gt;getRegClassConstraint().
  ///
  /// isRenamable can return false for several different reasons:
  ///
  /// - ABI constraints (since liveness is not always precisely modeled).  We
  ///   conservatively handle these cases by setting all physical register
  ///   operands that didnâ€™t start out as virtual regs to not be renamable.
  ///   Also any physical register operands created after register allocation or
  ///   whose register is changed after register allocation will not be
  ///   renamable.  This state is tracked in the MachineOperand::IsRenamable
  ///   bit.
  ///
  /// - Opcode/target constraints: for opcodes that have complex register class
  ///   requirements (e.g. that depend on other operands/instructions), we set
  ///   hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq in the machine opcode
  ///   description.  Operands belonging to instructions with opcodes that are
  ///   marked hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq return false from
  ///   isRenamable().  Additionally, the AllowRegisterRenaming target property
  ///   prevents any operands from being marked renamable for targets that don&apos;t
  ///   have detailed opcode hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq
  ///   values.</doc>
<use f='llvm/llvm/include/llvm/CodeGen/MachineInstrBuilder.h' l='517' u='c' c='_ZN4llvm11getRegStateERKNS_14MachineOperandE'/>
<use f='llvm/llvm/lib/CodeGen/BreakFalseDeps.cpp' l='118' u='c' c='_ZN4llvm14BreakFalseDeps24pickBestRegisterForUndefEPNS_12MachineInstrEjj'/>
<use f='llvm/llvm/lib/CodeGen/MachineCopyPropagation.cpp' l='505' u='c' c='_ZN12_GLOBAL__N_122MachineCopyPropagation11forwardUsesERN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/MachineCopyPropagation.cpp' l='555' u='c' c='_ZN12_GLOBAL__N_122MachineCopyPropagation11forwardUsesERN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/MachineCopyPropagation.cpp' l='762' u='c' c='_ZL26isBackwardPropagatableCopyRN4llvm12MachineInstrERKNS_19MachineRegisterInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineCopyPropagation.cpp' l='784' u='c' c='_ZN12_GLOBAL__N_122MachineCopyPropagation13propagateDefsERN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/MachineCopyPropagation.cpp' l='812' u='c' c='_ZN12_GLOBAL__N_122MachineCopyPropagation13propagateDefsERN4llvm12MachineInstrE'/>
<def f='llvm/llvm/lib/CodeGen/MachineOperand.cpp' l='118' ll='134' type='bool llvm::MachineOperand::isRenamable() const'/>
<use f='llvm/llvm/lib/CodeGen/MachineOperand.cpp' l='759' u='c' c='_ZNK4llvm14MachineOperand5printERNS_11raw_ostreamERNS_17ModuleSlotTrackerENS_3LLTENS_8OptionalIjEEbbbjPKNS_18TargetRegisterInfoEPKNS_19TargetIntrinsicInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineSink.cpp' l='1560' u='c' c='_ZN12_GLOBAL__N_120PostRAMachineSinking13tryToSinkCopyERN4llvm17MachineBasicBlockERNS1_15MachineFunctionEPKNS1_18TargetRegisterInfoEPKNS1_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineVerifier.cpp' l='1810' u='c' c='_ZN12_GLOBAL__N_115MachineVerifier19visitMachineOperandEPKN4llvm14MachineOperandEj'/>
<use f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='199' u='c' c='_ZNK4llvm15TargetInstrInfo22commuteInstructionImplERNS_12MachineInstrEbjj'/>
<use f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='202' u='c' c='_ZNK4llvm15TargetInstrInfo22commuteInstructionImplERNS_12MachineInstrEbjj'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp' l='121' u='c' c='_ZN12_GLOBAL__N_119AArch64ExpandPseudo12expandMOVImmERN4llvm17MachineBasicBlockENS1_26MachineInstrBundleIteratorINS1_12MachineInstrELb0EEEj'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp' l='731' u='c' c='_ZN12_GLOBAL__N_119AArch64ExpandPseudo8expandMIERN4llvm17MachineBasicBlockENS1_26MachineInstrBundleIteratorINS1_12MachineInstrELb0EEERS6_'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp' l='740' u='c' c='_ZN12_GLOBAL__N_119AArch64ExpandPseudo8expandMIERN4llvm17MachineBasicBlockENS1_26MachineInstrBundleIteratorINS1_12MachineInstrELb0EEERS6_'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp' l='1310' u='c' c='_ZL16canRenameUpToDefRN4llvm12MachineInstrERNS_12LiveRegUnitsERNS_15SmallPtrSetImplIPKNS_19TargetRegisterClassEEEPKNS_18TargetRegisterInfoE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIFormMemoryClauses.cpp' l='146' u='c' c='_ZL11getMopStateRKN4llvm14MachineOperandE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp' l='1914' u='c' c='_ZN12_GLOBAL__N_115ARMExpandPseudo8ExpandMIERN4llvm17MachineBasicBlockENS1_26MachineInstrBundleIteratorINS1_12MachineInstrELb0EEERS6_'/>
<use f='llvm/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp' l='1923' u='c' c='_ZN12_GLOBAL__N_115ARMExpandPseudo8ExpandMIERN4llvm17MachineBasicBlockENS1_26MachineInstrBundleIteratorINS1_12MachineInstrELb0EEERS6_'/>
