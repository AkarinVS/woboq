<use f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='7195' u='w' c='_ZN5clang12ast_matchers8internal36matcher_hasExplicitSpecifier0MatcherC1ERKNS1_7MatcherINS_4ExprEEE'/>
<dec f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='7195' type='const internal::Matcher&lt;Expr&gt;'/>
<use f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='7202' u='m' c='_ZNK5clang12ast_matchers8internal36matcher_hasExplicitSpecifier0Matcher7matchesERKNS_12FunctionDeclEPNS1_14ASTMatchFinderEPNS1_21BoundNodesTreeBuilderE'/>
<offset>128</offset>
<doc f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='7173'>/// Matches the expression in an explicit specifier if present in the given
/// declaration.
///
/// Given
/// \code
///   template&lt;bool b&gt;
///   struct S {
///     S(int); // #1
///     explicit S(double); // #2
///     operator int(); // #3
///     explicit operator bool(); // #4
///     explicit(false) S(bool) // # 7
///     explicit(true) S(char) // # 8
///     explicit(b) S(S) // # 9
///   };
///   S(int) -&gt; S&lt;true&gt; // #5
///   explicit S(double) -&gt; S&lt;false&gt; // #6
/// \endcode
/// cxxConstructorDecl(hasExplicitSpecifier(constantExpr())) will match #7, #8 and #9, but not #1 or #2.
/// cxxConversionDecl(hasExplicitSpecifier(constantExpr())) will not match #3 or #4.
/// cxxDeductionGuideDecl(hasExplicitSpecifier(constantExpr())) will not match #5 or #6.</doc>
