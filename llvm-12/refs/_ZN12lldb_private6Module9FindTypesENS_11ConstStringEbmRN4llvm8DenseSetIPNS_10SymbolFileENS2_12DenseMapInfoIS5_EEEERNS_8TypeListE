<dec f='llvm/lldb/include/lldb/Core/Module.h' l='418' type='void lldb_private::Module::FindTypes(lldb_private::ConstString type_name, bool exact_match, size_t max_matches, llvm::DenseSet&lt;lldb_private::SymbolFile *&gt; &amp; searched_symbol_files, lldb_private::TypeList &amp; types)'/>
<doc f='llvm/lldb/include/lldb/Core/Module.h' l='387'>/// Find types by name.
  ///
  /// Type lookups in modules go through the SymbolFile. The SymbolFile needs to
  /// be able to lookup types by basename and not the fully qualified typename.
  /// This allows the type accelerator tables to stay small, even with heavily
  /// templatized C++. The type search will then narrow down the search
  /// results. If &quot;exact_match&quot; is true, then the type search will only match
  /// exact type name matches. If &quot;exact_match&quot; is false, the type will match
  /// as long as the base typename matches and as long as any immediate
  /// containing namespaces/class scopes that are specified match. So to
  /// search for a type &quot;d&quot; in &quot;b::c&quot;, the name &quot;b::c::d&quot; can be specified and
  /// it will match any class/namespace &quot;b&quot; which contains a class/namespace
  /// &quot;c&quot; which contains type &quot;d&quot;. We do this to allow users to not always
  /// have to specify complete scoping on all expressions, but it also allows
  /// for exact matching when required.
  ///
  /// \param[in] type_name
  ///     The name of the type we are looking for that is a fully
  ///     or partially qualified type name.
  ///
  /// \param[in] exact_match
  ///     If \b true, \a type_name is fully qualified and must match
  ///     exactly. If \b false, \a type_name is a partially qualified
  ///     name where the leading namespaces or classes can be
  ///     omitted to make finding types that a user may type
  ///     easier.
  ///
  /// \param[out] types
  ///     A type list gets populated with any matches.
  ///</doc>
<use f='llvm/lldb/source/API/SBModule.cpp' l='500' u='c' c='_ZN4lldb8SBModule9FindTypesEPKc'/>
<use f='llvm/lldb/source/Commands/CommandObjectTarget.cpp' l='1645' u='c' c='_ZL18LookupTypeInModulePN12lldb_private6TargetERNS_18CommandInterpreterERNS_6StreamEPNS_6ModuleEPKcb'/>
<use f='llvm/lldb/source/Commands/CommandObjectTarget.cpp' l='1691' u='c' c='_ZL14LookupTypeHerePN12lldb_private6TargetERNS_18CommandInterpreterERNS_6StreamERNS_6ModuleEPKcb'/>
<use f='llvm/lldb/source/Core/Module.cpp' l='962' u='c' c='_ZN12lldb_private6Module13FindFirstTypeERKNS_13SymbolContextENS_11ConstStringEb'/>
<def f='llvm/lldb/source/Core/Module.cpp' l='968' ll='1019' type='void lldb_private::Module::FindTypes(lldb_private::ConstString name, bool exact_match, size_t max_matches, llvm::DenseSet&lt;lldb_private::SymbolFile *&gt; &amp; searched_symbol_files, lldb_private::TypeList &amp; types)'/>
<use f='llvm/lldb/source/Core/ModuleList.cpp' l='538' u='c' c='_ZNK12lldb_private10ModuleList9FindTypesEPNS_6ModuleENS_11ConstStringEbmRN4llvm8DenseSetIPNS_10SymbolFileENS4_12DenseMapInfoIS7_EEEERNS_8TypeListE'/>
<use f='llvm/lldb/source/Core/ModuleList.cpp' l='552' u='c' c='_ZNK12lldb_private10ModuleList9FindTypesEPNS_6ModuleENS_11ConstStringEbmRN4llvm8DenseSetIPNS_10SymbolFileENS4_12DenseMapInfoIS7_EEEERNS_8TypeListE'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI/ItaniumABILanguageRuntime.cpp' l='101' u='c' c='_ZN12lldb_private25ItaniumABILanguageRuntime28GetTypeInfoFromVTableAddressERNS_11ValueObjectEmm'/>
<use f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/ObjCLanguageRuntime.cpp' l='124' u='c' c='_ZN12lldb_private19ObjCLanguageRuntime26LookupInCompleteClassCacheERNS_11ConstStringE'/>
