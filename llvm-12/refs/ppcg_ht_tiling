<def f='llvm/polly/lib/External/ppcg/hybrid.c' l='239' ll='255'/>
<use f='llvm/polly/lib/External/ppcg/hybrid.c' l='256'/>
<use f='llvm/polly/lib/External/ppcg/hybrid.c' l='895' c='ppcg_ht_bounds_construct_tiling'/>
<use f='llvm/polly/lib/External/ppcg/hybrid.c' l='895' c='ppcg_ht_bounds_construct_tiling'/>
<size>88</size>
<doc f='llvm/polly/lib/External/ppcg/hybrid.c' l='200'>/* Structure that represents the basic hexagonal tiling,
 * along with information that is needed to perform the hybrid tiling.
 *
 * &quot;bounds&quot; are the bounds on the dependence distances that
 * define the hexagonal shape and the required skewing in the remaining
 * space dimensions.
 *
 * &quot;input_node&quot; points to the input pair of band nodes.
 * &quot;input_schedule&quot; is the partial schedule of this input pair of band nodes.
 * The space of this schedule is [P -&gt; C], where P is the space
 * of the parent node and C is the space of the child node.
 *
 * &quot;space_sizes&quot; represent the total size of a tile for the space
 * dimensions, i.e., those corresponding to the child node.
 * The space of &quot;space_sizes&quot; is C.
 * If S_0 is the original tile size in the first space dimension,
 * then the first entry of &quot;space_sizes&quot; is equal to
 * W = 2*S_0 + floor(d_l h) + floor(d_u h).
 * The remaining entries are the same as in the original tile sizes.
 *
 * The basic hexagonal tiling &quot;hex&quot; is defined
 * in a &quot;ts&quot; (time-space) space and corresponds to the phase-1 tiles.
 * &quot;time_tile&quot; maps the &quot;ts&quot; space to outer time tile.
 * Is is equal to ts[t, s] -&gt; floor(t/(2 * S_t)), with S_t the original tile
 * size corresponding to the parent node.
 * &quot;local_time&quot; maps the &quot;ts&quot; space to the time dimension inside each tile.
 * It is equal to ts[t, s] -&gt; t mod (2 S_t), with S_t the original tile
 * size corresponding to the parent node.
 * &quot;shift_space&quot; shifts the tiles at time tile T = floor(t/(2 S_t))
 * in the space dimension such that they align to a multiple of W.
 * It is equal to ts[t, s] -&gt; s + (-(2 * shift_s)*T) % W,
 * with shift_s = S_0 + floor(d_u h).
 * &quot;shift_phase&quot; is the shift taken to go from phase 0 to phase 1
 * It is equal to ts[t, s] -&gt; ts[t + S_t, s + shift_s],
 * with shift_s = S_0 + floor(d_u h).
 *
 * &quot;project_ts&quot; projects the space of the input schedule to the ts-space.
 * It is equal to [P[t] -&gt; C[s_0, ...]] -&gt; ts[t, s_0].
 */</doc>
