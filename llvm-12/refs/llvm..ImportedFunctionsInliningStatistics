<def f='llvm/llvm/include/llvm/Analysis/Utils/ImportedFunctionsInliningStatistics.h' l='44' ll='102'/>
<use f='llvm/llvm/include/llvm/Analysis/Utils/ImportedFunctionsInliningStatistics.h' l='66' c='_ZN4llvm35ImportedFunctionsInliningStatisticsC1ERKS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/InlineAdvisor.h' l='172'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Inliner.h' l='81'/>
<size>80</size>
<doc f='llvm/llvm/include/llvm/Analysis/Utils/ImportedFunctionsInliningStatistics.h' l='24'>/// Calculate and dump ThinLTO specific inliner stats.
/// The main statistics are:
/// (1) Number of inlined imported functions,
/// (2) Number of imported functions inlined into importing module (indirect),
/// (3) Number of non imported functions inlined into importing module
/// (indirect).
/// The difference between first and the second is that first stat counts
/// all performed inlines on imported functions, but the second one only the
/// functions that have been eventually inlined to a function in the importing
/// module (by a chain of inlines). Because llvm uses bottom-up inliner, it is
/// possible to e.g. import function `A`, `B` and then inline `B` to `A`,
/// and after this `A` might be too big to be inlined into some other function
/// that calls it. It calculates this statistic by building graph, where
/// the nodes are functions, and edges are performed inlines and then by marking
/// the edges starting from not imported function.
///
/// If `Verbose` is set to true, then it also dumps statistics
/// per each inlined function, sorted by the greatest inlines count like
/// - number of performed inlines
/// - number of performed inlines to importing module</doc>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatisticsC1Ev'/>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatisticsC1ERKS0_'/>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatistics13setModuleInfoERKNS_6ModuleE'/>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatistics12recordInlineERKNS_8FunctionES3_'/>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatistics4dumpEb'/>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatistics21createInlineGraphNodeERKNS_8FunctionE'/>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatistics20calculateRealInlinesEv'/>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatistics3dfsERNS0_15InlineGraphNodeE'/>
<fun r='_ZN4llvm35ImportedFunctionsInliningStatistics14getSortedNodesEv'/>
<mbr r='llvm::ImportedFunctionsInliningStatistics::NodesMap' o='0' t='llvm::ImportedFunctionsInliningStatistics::NodesMapTy'/>
<mbr r='llvm::ImportedFunctionsInliningStatistics::NonImportedCallers' o='256' t='std::vector&lt;StringRef&gt;'/>
<mbr r='llvm::ImportedFunctionsInliningStatistics::AllFunctions' o='448' t='int'/>
<mbr r='llvm::ImportedFunctionsInliningStatistics::ImportedFunctions' o='480' t='int'/>
<mbr r='llvm::ImportedFunctionsInliningStatistics::ModuleName' o='512' t='llvm::StringRef'/>
<use f='llvm/llvm/lib/Analysis/InlineAdvisor.cpp' l='459' c='_ZN4llvm13InlineAdvisorC1ERNS_6ModuleERNS_15AnalysisManagerINS_8FunctionEJEEE'/>
<size>80</size>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='247' c='_ZL20inlineCallIfPossibleRN4llvm8CallBaseERNS_18InlineFunctionInfoERNS_8DenseMapIPNS_9ArrayTypeESt6vectorIPNS_10AllocaInstESaIS9_EENS_12DenseMapInfoIS6931155'/>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='305' c='_ZL15inlineCallsImplRN4llvm12CallGraphSCCERNS_9CallGraphESt8functionIFRNS_15AssumptionCacheERNS_8FunctionEEEPNS_18ProfileSummaryInfoES4_IFRKNS_17Targe9706474'/>
<size>80</size>
