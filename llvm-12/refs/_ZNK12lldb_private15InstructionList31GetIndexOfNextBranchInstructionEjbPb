<dec f='llvm/lldb/include/lldb/Core/Disassembler.h' l='305' type='uint32_t lldb_private::InstructionList::GetIndexOfNextBranchInstruction(uint32_t start, bool ignore_calls, bool * found_calls) const'/>
<doc f='llvm/lldb/include/lldb/Core/Disassembler.h' l='281'>//------------------------------------------------------------------
  /// Get the index of the next branch instruction.
  ///
  /// Given a list of instructions, find the next branch instruction
  /// in the list by returning an index.
  ///
  /// @param[in] start
  ///     The instruction index of the first instruction to check.
  ///
  /// @param[in] ignore_calls
  ///     It true, then fine the first branch instruction that isn&apos;t
  ///     a function call (a branch that calls and returns to the next
  ///     instruction). If false, find the instruction index of any 
  ///     branch in the list.
  ///     
  /// @param[out] found_calls
  ///     If non-null, this will be set to true if any calls were found in 
  ///     extending the range.
  ///    
  /// @return
  ///     The instruction index of the first branch that is at or past
  ///     \a start. Returns UINT32_MAX if no matching branches are 
  ///     found.
  //------------------------------------------------------------------</doc>
<def f='llvm/lldb/source/Core/Disassembler.cpp' l='991' ll='1014' type='uint32_t lldb_private::InstructionList::GetIndexOfNextBranchInstruction(uint32_t start, bool ignore_calls, bool * found_calls) const'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='5789' u='c' c='_ZN12lldb_private7Process37AdvanceAddressToNextBranchInstructionENS_7AddressENS_12AddressRangeE'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepRange.cpp' l='331' u='c' c='_ZN12lldb_private19ThreadPlanStepRange23SetNextBranchBreakpointEv'/>
