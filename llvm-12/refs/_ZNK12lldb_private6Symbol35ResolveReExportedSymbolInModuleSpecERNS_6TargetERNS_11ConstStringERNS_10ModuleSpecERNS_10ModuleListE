<dec f='llvm/lldb/include/lldb/Symbol/Symbol.h' l='231' type='lldb_private::Symbol * lldb_private::Symbol::ResolveReExportedSymbolInModuleSpec(lldb_private::Target &amp; target, lldb_private::ConstString &amp; reexport_name, lldb_private::ModuleSpec &amp; module_spec, lldb_private::ModuleList &amp; seen_modules) const'/>
<doc f='llvm/lldb/include/lldb/Symbol/Symbol.h' l='227'>// This is the internal guts of ResolveReExportedSymbol, it assumes
  // reexport_name is not null, and that module_spec is valid.  We track the
  // modules we&apos;ve already seen to make sure we don&apos;t get caught in a cycle.</doc>
<def f='llvm/lldb/source/Symbol/Symbol.cpp' l='415' ll='469' type='lldb_private::Symbol * lldb_private::Symbol::ResolveReExportedSymbolInModuleSpec(lldb_private::Target &amp; target, lldb_private::ConstString &amp; reexport_name, lldb_private::ModuleSpec &amp; module_spec, lldb_private::ModuleList &amp; seen_modules) const'/>
<use f='llvm/lldb/source/Symbol/Symbol.cpp' l='462' u='c' c='_ZNK12lldb_private6Symbol35ResolveReExportedSymbolInModuleSpecERNS_6TargetERNS_11ConstStringERNS_10ModuleSpecERNS_10ModuleListE'/>
<use f='llvm/lldb/source/Symbol/Symbol.cpp' l='478' u='c' c='_ZNK12lldb_private6Symbol23ResolveReExportedSymbolERNS_6TargetE'/>
