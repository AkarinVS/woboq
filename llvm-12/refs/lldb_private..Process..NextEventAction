<def f='llvm/lldb/include/lldb/Target/Process.h' l='2615' ll='2635'/>
<use f='llvm/lldb/include/lldb/Target/Process.h' l='2637' c='_ZN12lldb_private7Process18SetNextEventActionEPNS0_15NextEventActionE'/>
<ovr f='llvm/lldb/include/lldb/Target/Process.h' l='2645' c='lldb_private::Process::AttachCompletionHandler'/>
<use f='llvm/lldb/include/lldb/Target/Process.h' l='2645'/>
<use f='llvm/lldb/include/lldb/Target/Process.h' l='2816'/>
<size>16</size>
<doc f='llvm/lldb/include/lldb/Target/Process.h' l='2607'>// NextEventAction provides a way to register an action on the next event
  // that is delivered to this process.  There is currently only one next event
  // action allowed in the process at one time.  If a new &quot;NextEventAction&quot; is
  // added while one is already present, the old action will be discarded (with
  // HandleBeingUnshipped called after it is discarded.)
  //
  // If you want to resume the process as a result of a resume action, call
  // RequestResume, don&apos;t call Resume directly.</doc>
<fun r='_ZN12lldb_private7Process15NextEventActionC1EPS0_'/>
<fun r='_ZN12lldb_private7Process15NextEventActionD1Ev'/>
<fun r='_ZN12lldb_private7Process15NextEventAction13PerformActionERSt10shared_ptrINS_5EventEE'/>
<fun r='_ZN12lldb_private7Process15NextEventAction20HandleBeingUnshippedEv'/>
<fun r='_ZN12lldb_private7Process15NextEventAction22HandleBeingInterruptedEv'/>
<fun r='_ZN12lldb_private7Process15NextEventAction13GetExitStringEv'/>
<fun r='_ZN12lldb_private7Process15NextEventAction13RequestResumeEv'/>
<mbr r='lldb_private::Process::NextEventAction::m_process' o='64' t='lldb_private::Process *'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='2611' c='_ZN12lldb_private7Process23AttachCompletionHandlerC1EPS0_j'/>
<size>16</size>
