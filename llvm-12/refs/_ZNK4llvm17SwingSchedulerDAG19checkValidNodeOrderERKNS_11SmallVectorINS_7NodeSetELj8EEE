<dec f='llvm/llvm/include/llvm/CodeGen/MachinePipeliner.h' l='295' type='void llvm::SwingSchedulerDAG::checkValidNodeOrder(const llvm::SwingSchedulerDAG::NodeSetType &amp; Circuits) const'/>
<use f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='560' u='c' c='_ZN4llvm17SwingSchedulerDAG8scheduleEv'/>
<def f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='2770' ll='2854' type='void llvm::SwingSchedulerDAG::checkValidNodeOrder(const llvm::SwingSchedulerDAG::NodeSetType &amp; Circuits) const'/>
<doc f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='2760'>/// A property of the node order in swing-modulo-scheduling is
/// that for nodes outside circuits the following holds:
/// none of them is scheduled after both a successor and a
/// predecessor.
/// The method below checks whether the property is met.
/// If not, debug information is printed and statistics information updated.
/// Note that we do not use an assert statement.
/// The reason is that although an invalid node oder may prevent
/// the pipeliner from finding a pipelined schedule for arbitrary II,
/// it does not lead to the generation of incorrect code.</doc>
