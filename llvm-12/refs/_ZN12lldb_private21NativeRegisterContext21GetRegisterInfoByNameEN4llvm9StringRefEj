<dec f='llvm/lldb/include/lldb/Host/common/NativeRegisterContext.h' l='126' type='const lldb_private::RegisterInfo * lldb_private::NativeRegisterContext::GetRegisterInfoByName(llvm::StringRef reg_name, uint32_t start_idx = 0)'/>
<def f='llvm/lldb/source/Host/common/NativeRegisterContext.cpp' l='53' ll='68' type='const lldb_private::RegisterInfo * lldb_private::NativeRegisterContext::GetRegisterInfoByName(llvm::StringRef reg_name, uint32_t start_idx = 0)'/>
<doc f='llvm/lldb/source/Host/common/NativeRegisterContext.cpp' l='27'>// FIXME revisit invalidation, process stop ids, etc.  Right now we don&apos;t
// support caching in NativeRegisterContext.  We can do this later by utilizing
// NativeProcessProtocol::GetStopID () and adding a stop id to
// NativeRegisterContext.

// void
// NativeRegisterContext::InvalidateIfNeeded (bool force) {
//     ProcessSP process_sp (m_thread.GetProcess());
//     bool invalidate = force;
//     uint32_t process_stop_id = UINT32_MAX;

//     if (process_sp)
//         process_stop_id = process_sp-&gt;GetStopID();
//     else
//         invalidate = true;

//     if (!invalidate)
//         invalidate = process_stop_id != GetStopID();

//     if (invalidate)
//     {
//         InvalidateAllRegisters ();
//         SetStopID (process_stop_id);
//     }
// }</doc>
<use f='llvm/lldb/source/Plugins/Process/Linux/NativeRegisterContextLinux_x86_64.cpp' l='363' u='c' c='_ZN12lldb_private13process_linux33NativeRegisterContextLinux_x86_64C1ERKNS_8ArchSpecERNS_20NativeThreadProtocolE'/>
