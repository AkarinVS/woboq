<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='191' type='bool llvm::InstCombinerImpl::shouldChangeType(llvm::Type * From, llvm::Type * To) const'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='1678' u='c' c='_ZN4llvm16InstCombinerImpl17narrowMaskedBinOpERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='304' u='c' c='_ZN4llvm16InstCombinerImpl20commonCastTransformsERNS_8CastInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='317' u='c' c='_ZN4llvm16InstCombinerImpl20commonCastTransformsERNS_8CastInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='620' u='c' c='_ZN4llvm16InstCombinerImpl11narrowBinOpERNS_9TruncInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='735' u='c' c='_ZN4llvm16InstCombinerImpl10visitTruncERNS_9TruncInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='756' u='c' c='_ZN4llvm16InstCombinerImpl10visitTruncERNS_9TruncInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='880' u='c' c='_ZN4llvm16InstCombinerImpl10visitTruncERNS_9TruncInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='1190' u='c' c='_ZN4llvm16InstCombinerImpl9visitZExtERNS_8ZExtInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='1470' u='c' c='_ZN4llvm16InstCombinerImpl9visitSExtERNS_8SExtInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='854' u='c' c='_ZN4llvm16InstCombinerImpl19foldPHIArgOpIntoPHIERNS_7PHINodeE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='1101' u='c' c='_ZN4llvm16InstCombinerImpl9visitLShrERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='1110' u='c' c='_ZN4llvm16InstCombinerImpl9visitLShrERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='1294' u='c' c='_ZN4llvm16InstCombinerImpl9visitAShrERNS_14BinaryOperatorE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='242' ll='251' type='bool llvm::InstCombinerImpl::shouldChangeType(llvm::Type * From, llvm::Type * To) const'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='237'>/// Return true if it is desirable to convert a computation from &apos;From&apos; to &apos;To&apos;.
/// We don&apos;t want to convert from a legal to an illegal type or from a smaller
/// to a larger illegal type. i1 is always treated as a legal type because it is
/// a fundamental type in IR, and there are many specialized optimizations for
/// i1 types.</doc>
