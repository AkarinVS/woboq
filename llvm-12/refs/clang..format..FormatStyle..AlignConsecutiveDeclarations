<dec f='llvm/clang/include/clang/Format/Format.h' l='375' type='clang::format::FormatStyle::AlignConsecutiveStyle'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='3033' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='3033' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<offset>160</offset>
<doc f='llvm/clang/include/clang/Format/Format.h' l='308'>/// Style of aligning consecutive declarations.
  ///
  /// ``Consecutive`` will align the declaration names of consecutive lines.
  /// This will result in formattings like:
  /// \code
  ///   int         aaaa = 12;
  ///   float       b = 23;
  ///   std::string ccc;
  /// \endcode
  ///
  /// Possible values:
  ///
  /// * ``ACS_None`` (in configuration: ``None``)
  ///    Do not align bit declarations on consecutive lines.
  ///
  /// * ``ACS_Consecutive`` (in configuration: ``Consecutive``)
  ///    Align declarations on consecutive lines. This will result in
  ///    formattings like:
  ///    \code
  ///      int         aaaa = 12;
  ///      float       b = 23;
  ///      std::string ccc;
  ///
  ///      int a = 42;
  ///      /* A comment. */
  ///      bool c = false;
  ///    \endcode
  ///
  /// * ``ACS_AcrossEmptyLines`` (in configuration: ``AcrossEmptyLines``)
  ///    Same as ACS_Consecutive, but also spans over empty lines, e.g.
  ///    \code
  ///      int         aaaa = 12;
  ///      float       b = 23;
  ///      std::string ccc;
  ///
  ///      int         a = 42;
  ///      /* A comment. */
  ///      bool c = false;
  ///    \endcode
  ///
  /// * ``ACS_AcrossComments`` (in configuration: ``AcrossComments``)
  ///    Same as ACS_Consecutive, but also spans over lines only containing
  ///    comments, e.g.
  ///    \code
  ///      int         aaaa = 12;
  ///      float       b = 23;
  ///      std::string ccc;
  ///
  ///      int  a = 42;
  ///      /* A comment. */
  ///      bool c = false;
  ///    \endcode
  ///
  /// * ``ACS_AcrossEmptyLinesAndComments``
  ///   (in configuration: ``AcrossEmptyLinesAndComments``)
  ///
  ///    Same as ACS_Consecutive, but also spans over lines only containing
  ///    comments and empty lines, e.g.
  ///    \code
  ///      int         aaaa = 12;
  ///      float       b = 23;
  ///      std::string ccc;
  ///
  ///      int         a = 42;
  ///      /* A comment. */
  ///      bool        c = false;
  ///    \endcode</doc>
<use f='llvm/clang/lib/Format/Format.cpp' l='479' u='a' c='_ZN4llvm4yaml13MappingTraitsIN5clang6format11FormatStyleEE7mappingERNS0_2IOERS4_'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='891' u='w' c='_ZN5clang6format12getLLVMStyleENS0_11FormatStyle12LanguageKindE'/>
<use f='llvm/clang/lib/Format/WhitespaceManager.cpp' l='687' u='r' c='_ZN5clang6format17WhitespaceManager28alignConsecutiveDeclarationsEv'/>
<use f='llvm/clang/lib/Format/WhitespaceManager.cpp' l='720' u='r' c='_ZN5clang6format17WhitespaceManager28alignConsecutiveDeclarationsEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='11706' u='w' c='_ZN5clang6format12_GLOBAL__N_136FormatTest_ConfigurableUseOfTab_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='11945' u='w' c='_ZN5clang6format12_GLOBAL__N_136FormatTest_ConfigurableUseOfTab_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='12781' u='w' c='_ZN5clang6format12_GLOBAL__N_138FormatTest_AlignConsecutiveMacros_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='13096' u='w' c='_ZN5clang6format12_GLOBAL__N_171FormatTest_AlignConsecutiveDeclarationsAcrossEmptyLinesAndComments_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='13864' u='w' c='_ZN5clang6format12_GLOBAL__N_141FormatTest_AlignConsecutiveBitFields_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='13912' u='w' c='_ZN5clang6format12_GLOBAL__N_144FormatTest_AlignConsecutiveDeclarations_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='13920' u='w' c='_ZN5clang6format12_GLOBAL__N_144FormatTest_AlignConsecutiveDeclarations_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='14239' u='w' c='_ZN5clang6format12_GLOBAL__N_144FormatTest_AlignConsecutiveDeclarations_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='14248' u='w' c='_ZN5clang6format12_GLOBAL__N_144FormatTest_AlignConsecutiveDeclarations_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15580' u='w' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15582' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15582' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15584' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15584' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15586' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15586' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15588' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15588' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15592' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15592' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15594' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15594' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='19005' u='w' c='_ZN5clang6format12_GLOBAL__N_144FormatTest_StatementAttributeLikeMacros_Test8TestBodyEv'/>
