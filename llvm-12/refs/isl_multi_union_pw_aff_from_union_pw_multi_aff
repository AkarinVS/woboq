<dec f='llvm/polly/lib/External/isl/include/isl/aff.h' l='1340' type='isl_multi_union_pw_aff * isl_multi_union_pw_aff_from_union_pw_multi_aff(isl_union_pw_multi_aff * upma)'/>
<use f='llvm/polly/lib/External/isl/include/isl/isl-noexceptions.h' l='10470' u='c' c='_ZN3isl12noexceptions18multi_union_pw_affC1ENS0_18union_pw_multi_affE'/>
<def f='llvm/polly/lib/External/isl/isl_aff.c' l='8664' ll='8713' type='isl_multi_union_pw_aff * isl_multi_union_pw_aff_from_union_pw_multi_aff(isl_union_pw_multi_aff * upma)'/>
<use f='llvm/polly/lib/External/isl/isl_aff.c' l='8727' u='c' c='isl_multi_union_pw_aff_from_union_map'/>
<doc f='llvm/polly/lib/External/isl/isl_aff.c' l='8654'>/* Construct and return a multi union piecewise affine expression
 * that is equal to the given union piecewise multi affine expression.
 *
 * In order to be able to perform the conversion, the input
 * needs to be non-empty and may only involve a single range space.
 *
 * If the resulting multi union piecewise affine expression has
 * an explicit domain, then assign it the domain of the input.
 * In other cases, the domain is stored in the individual elements.
 */</doc>
