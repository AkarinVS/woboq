<dec f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='717' type='llvm::ModRefInfo llvm::AAResults::callCapturesBefore(const llvm::Instruction * I, const llvm::MemoryLocation &amp; MemLoc, llvm::DominatorTree * DT)'/>
<use f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='723' u='c' c='_ZN4llvm9AAResults18callCapturesBeforeEPKNS_11InstructionEPKNS_5ValueENS_12LocationSizeEPNS_13DominatorTreeE'/>
<doc f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='712'>/// Return information about whether a particular call site modifies
  /// or reads the specified memory location \p MemLoc before instruction \p I
  /// in a BasicBlock.
  /// Early exits in callCapturesBefore may lead to ModRefInfo::Must not being
  /// set.</doc>
<def f='llvm/llvm/lib/Analysis/AliasAnalysis.cpp' l='694' ll='747' type='llvm::ModRefInfo llvm::AAResults::callCapturesBefore(const llvm::Instruction * I, const llvm::MemoryLocation &amp; MemLoc, llvm::DominatorTree * DT)'/>
<doc f='llvm/llvm/lib/Analysis/AliasAnalysis.cpp' l='687'>/// Return information about whether a particular call site modifies
/// or reads the specified memory location \p MemLoc before instruction \p I
/// in a BasicBlock.
/// FIXME: this is really just shoring-up a deficiency in alias analysis.
/// BasicAA isn&apos;t willing to spend linear time determining whether an alloca
/// was captured before or after this particular call, while we are. However,
/// with a smarter AA in place, this test is just wasting compile time.</doc>
<use f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='624' u='c' c='_ZN4llvm23MemoryDependenceResults30getSimplePointerDependencyFromERKNS_14MemoryLocationEbNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11Inst8138037'/>
