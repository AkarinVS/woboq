<dec f='llvm/llvm/include/llvm/Analysis/GuardUtils.h' l='32' type='bool llvm::isGuardAsWidenableBranch(const llvm::User * U)'/>
<doc f='llvm/llvm/include/llvm/Analysis/GuardUtils.h' l='30'>/// Returns true iff \p U has semantics of a guard expressed in a form of a
/// widenable conditional branch to deopt block.</doc>
<def f='llvm/llvm/lib/Analysis/GuardUtils.cpp' l='29' ll='42' type='bool llvm::isGuardAsWidenableBranch(const llvm::User * U)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GuardWidening.cpp' l='264' u='c' c='_ZN12_GLOBAL__N_117GuardWideningImpl10widenGuardEPN4llvm11InstructionEPNS1_5ValueEb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GuardWidening.cpp' l='287' u='c' c='_ZL27isSupportedGuardInstructionPKN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GuardWidening.cpp' l='444' u='c' c='_ZN12_GLOBAL__N_117GuardWideningImpl20computeWideningScoreEPN4llvm11InstructionES3_b'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopPredication.cpp' l='1233' u='c' c='_ZN12_GLOBAL__N_115LoopPredication9runOnLoopEPN4llvm4LoopE'/>
