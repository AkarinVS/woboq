<dec f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='87' type='void llvm::MemorySSAUpdater::insertDef(llvm::MemoryDef * Def, bool RenameUses = false)'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='70'>/// Insert a definition into the MemorySSA IR.  RenameUses will rename any use
  /// below the new def block (and any inserted phis).  RenameUses should be set
  /// to true if the definition may cause new aliases for loads below it.  This
  /// is not the case for hoisting or sinking or other forms of code *movement*.
  /// It *is* the case for straight code insertion.
  /// For example:
  /// store a
  /// if (foo) { }
  /// load a
  ///
  /// Moving the store into the if block, and calling insertDef, does not
  /// require RenameUses.
  /// However, changing it to:
  /// store a
  /// if (foo) { store b }
  /// load a
  /// Where a mayalias b, *does* require RenameUses be set to true.</doc>
<def f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='314' ll='463' type='void llvm::MemorySSAUpdater::insertDef(llvm::MemoryDef * MD, bool RenameUses = false)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1184' u='c' c='_ZN4llvm16MemorySSAUpdater6moveToEPNS_14MemoryUseOrDefEPNS_10BasicBlockET_'/>
<doc f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='308'>// A brief description of the algorithm:
// First, we compute what should define the new def, using the SSA
// construction algorithm.
// Then, we update the defs below us (and any new phi nodes) in the graph to
// point to the correct new defs, to ensure we only have one variable, and no
// disconnected stores.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='1382' u='c' c='_ZN4llvm3GVN14PerformLoadPREEPNS_8LoadInstERNS_11SmallVectorINS_3gvn21AvailableValueInBlockELj64EEERNS3_IPNS_10BasicBlockELj64EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='1635' u='c' c='_ZN4llvm3GVN22processAssumeIntrinsicEPNS_13IntrinsicInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1461' u='c' c='_ZL27cloneInstructionInExitBlockRN4llvm11InstructionERNS_10BasicBlockERNS_7PHINodeEPKNS_8LoopInfoEPKNS_14LoopSafetyInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1894' u='c' c='_ZN12_GLOBAL__N_112LoopPromoter34doExtraRewritesBeforeFinalDeletionEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp' l='1032' u='c' c='_ZN12_GLOBAL__N_118LoopIdiomRecognize23processLoopStridedStoreEPN4llvm5ValueEjNS1_10MaybeAlignES3_PNS1_11InstructionERNS1_15SmallPtrSetImplIS6_EEPKNS113717187'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp' l='1187' u='c' c='_ZN12_GLOBAL__N_118LoopIdiomRecognize26processLoopStoreOfLoopLoadEPN4llvm9StoreInstEPKNS1_4SCEVE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopSink.cpp' l='248' u='c' c='_ZL15sinkInstructionRN4llvm4LoopERNS_11InstructionERKNS_15SmallVectorImplIPNS_10BasicBlockEEERKNS_13SmallDenseMapIS6_iLj16ENS_12DenseMapInfoIS6_EENS_6937833'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='498' u='c' c='_ZN4llvm13MemCpyOptPass20tryMergingIntoMemsetEPNS_11InstructionEPNS_5ValueES4_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='724' u='c' c='_ZN4llvm13MemCpyOptPass12processStoreEPNS_9StoreInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='822' u='c' c='_ZN4llvm13MemCpyOptPass12processStoreEPNS_9StoreInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1111' u='c' c='_ZN4llvm13MemCpyOptPass29processMemCpyMemCpyDependenceEPNS_10MemCpyInstES2_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1215' u='c' c='_ZN4llvm13MemCpyOptPass29processMemSetMemCpyDependenceEPNS_10MemCpyInstEPNS_10MemSetInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1318' u='c' c='_ZN4llvm13MemCpyOptPass26performMemCpyToMemSetOptznEPNS_10MemCpyInstEPNS_10MemSetInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1354' u='c' c='_ZN4llvm13MemCpyOptPass13processMemCpyEPNS_10MemCpyInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEE'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='139' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='163' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='189' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='191' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='229' u='c' c='_ZN37MemorySSATest_CreateALoadUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='369' u='c' c='_ZN36MemorySSATest_MoveAStoreUpdater_Test8TestBodyEv'/>
