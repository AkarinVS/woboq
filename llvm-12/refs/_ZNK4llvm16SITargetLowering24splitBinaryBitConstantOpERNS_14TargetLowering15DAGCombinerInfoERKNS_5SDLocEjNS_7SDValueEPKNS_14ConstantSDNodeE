<dec f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.h' l='161' type='llvm::SDValue llvm::SITargetLowering::splitBinaryBitConstantOp(llvm::TargetLowering::DAGCombinerInfo &amp; DCI, const llvm::SDLoc &amp; SL, unsigned int Opc, llvm::SDValue LHS, const llvm::ConstantSDNode * CRHS) const'/>
<def f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='8774' ll='8794' type='llvm::SDValue llvm::SITargetLowering::splitBinaryBitConstantOp(llvm::TargetLowering::DAGCombinerInfo &amp; DCI, const llvm::SDLoc &amp; SL, unsigned int Opc, llvm::SDValue LHS, const llvm::ConstantSDNode * CRHS) const'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='8892' u='c' c='_ZNK4llvm16SITargetLowering17performAndCombineEPNS_6SDNodeERNS_14TargetLowering15DAGCombinerInfoE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='9183' u='c' c='_ZNK4llvm16SITargetLowering16performOrCombineEPNS_6SDNodeERNS_14TargetLowering15DAGCombinerInfoE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='9202' u='c' c='_ZNK4llvm16SITargetLowering17performXorCombineEPNS_6SDNodeERNS_14TargetLowering15DAGCombinerInfoE'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='8769'>// Break up 64-bit bit operation of a constant into two 32-bit and/or/xor. This
// will typically happen anyway for a VALU 64-bit and. This exposes other 32-bit
// integer combine opportunities since most 64-bit operations are decomposed
// this way.  TODO: We won&apos;t want this for SALU especially if it is an inline
// immediate.</doc>
