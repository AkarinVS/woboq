<dec f='llvm/lldb/include/lldb/API/SBLaunchInfo.h' l='70' type='void lldb::SBLaunchInfo::SetExecutableFile(lldb::SBFileSpec exe_file, bool add_as_first_arg)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='35019' u='c' c='_ZL36_wrap_SBLaunchInfo_SetExecutableFileP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBLaunchInfo.h' l='49'>/// Set the executable file that will be used to launch the process and
  /// optionally set it as the first argument in the argument vector.
  ///
  /// This only needs to be specified if clients wish to carefully control
  /// the exact path will be used to launch a binary. If you create a
  /// target with a symlink, that symlink will get resolved in the target
  /// and the resolved path will get used to launch the process. Calling
  /// this function can help you still launch your process using the
  /// path of your choice.
  ///
  /// If this function is not called prior to launching with
  /// SBTarget::Launch(...), the target will use the resolved executable
  /// path that was used to create the target.
  ///
  /// \param[in] exe_file
  ///     The override path to use when launching the executable.
  ///
  /// \param[in] add_as_first_arg
  ///     If true, then the path will be inserted into the argument vector
  ///     prior to launching. Otherwise the argument vector will be left
  ///     alone.</doc>
<def f='llvm/lldb/source/API/SBLaunchInfo.cpp' l='119' ll='125' type='void lldb::SBLaunchInfo::SetExecutableFile(lldb::SBFileSpec exe_file, bool add_as_first_arg)'/>
<use f='llvm/lldb/source/API/SBLaunchInfo.cpp' l='121' u='a' c='_ZN4lldb12SBLaunchInfo17SetExecutableFileENS_10SBFileSpecEb'/>
<use f='llvm/lldb/source/API/SBLaunchInfo.cpp' l='121' u='a' c='_ZN4lldb12SBLaunchInfo17SetExecutableFileENS_10SBFileSpecEb'/>
<use f='llvm/lldb/source/API/SBLaunchInfo.cpp' l='363' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='297' u='c' c='_ZN4lldb8SBTarget12LaunchSimpleEPPKcS3_S2_'/>
