<def f='llvm/llvm/tools/llvm-profgen/ProfiledBinary.h' l='69' ll='95'/>
<use f='llvm/llvm/tools/llvm-profgen/ProfiledBinary.h' l='129'/>
<size>64</size>
<doc f='llvm/llvm/tools/llvm-profgen/ProfiledBinary.h' l='65'>// PrologEpilog offset tracker, used to filter out broken stack samples
// Currently we use a heuristic size (two) to infer prolog and epilog
// based on the start address and return address. In the future,
// we will switch to Dwarf CFI based tracker</doc>
<mbr r='llvm::sampleprof::PrologEpilogTracker::PrologEpilogSet' o='0' t='std::unordered_set&lt;uint64_t&gt;'/>
<mbr r='llvm::sampleprof::PrologEpilogTracker::Binary' o='448' t='llvm::sampleprof::ProfiledBinary *'/>
<fun r='_ZN4llvm10sampleprof19PrologEpilogTrackerC1EPNS0_14ProfiledBinaryE'/>
<fun r='_ZN4llvm10sampleprof19PrologEpilogTracker18inferPrologOffsetsERSt13unordered_mapImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4hashImESt8equ10280920'/>
<fun r='_ZN4llvm10sampleprof19PrologEpilogTracker18inferEpilogOffsetsERSt13unordered_setImSt4hashImESt8equal_toImESaImEE'/>
