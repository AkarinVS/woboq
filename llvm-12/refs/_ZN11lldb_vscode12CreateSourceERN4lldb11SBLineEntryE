<dec f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='305' type='llvm::json::Value lldb_vscode::CreateSource(lldb::SBLineEntry &amp; line_entry)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='295'>/// Create a &quot;Source&quot; JSON object as described in the Visual Studio Code
/// debug adaptor definition.
///
/// \param[in] line_entry
///     The LLDB line table to use when populating out the &quot;Source&quot;
///     object
///
/// \return
///     A &quot;Source&quot; JSON object with that follows the formal JSON
///     definition outlined by Microsoft.</doc>
<use f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='324' u='c' c='_ZN11lldb_vscode16CreateBreakpointERN4lldb12SBBreakpointEN4llvm8OptionalINS3_9StringRefEEENS4_IjEE'/>
<def f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='565' ll='579' type='llvm::json::Value lldb_vscode::CreateSource(lldb::SBLineEntry &amp; line_entry)'/>
<use f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='593' u='c' c='_ZN11lldb_vscode12CreateSourceERN4lldb7SBFrameERl'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='500'>// &quot;Source&quot;: {
//   &quot;type&quot;: &quot;object&quot;,
//   &quot;description&quot;: &quot;A Source is a descriptor for source code. It is returned
//                   from the debug adapter as part of a StackFrame and it is
//                   used by clients when specifying breakpoints.&quot;,
//   &quot;properties&quot;: {
//     &quot;name&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;description&quot;: &quot;The short name of the source. Every source returned
//                       from the debug adapter has a name. When sending a
//                       source to the debug adapter this name is optional.&quot;
//     },
//     &quot;path&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;description&quot;: &quot;The path of the source to be shown in the UI. It is
//                       only used to locate and load the content of the
//                       source if no sourceReference is specified (or its
//                       value is 0).&quot;
//     },
//     &quot;sourceReference&quot;: {
//       &quot;type&quot;: &quot;number&quot;,
//       &quot;description&quot;: &quot;If sourceReference &gt; 0 the contents of the source must
//                       be retrieved through the SourceRequest (even if a path
//                       is specified). A sourceReference is only valid for a
//                       session, so it must not be used to persist a source.&quot;
//     },
//     &quot;presentationHint&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;description&quot;: &quot;An optional hint for how to present the source in the
//                       UI. A value of &apos;deemphasize&apos; can be used to indicate
//                       that the source is not available or that it is
//                       skipped on stepping.&quot;,
//       &quot;enum&quot;: [ &quot;normal&quot;, &quot;emphasize&quot;, &quot;deemphasize&quot; ]
//     },
//     &quot;origin&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;description&quot;: &quot;The (optional) origin of this source: possible values
//                       &apos;internal module&apos;, &apos;inlined content from source map&apos;,
//                       etc.&quot;
//     },
//     &quot;sources&quot;: {
//       &quot;type&quot;: &quot;array&quot;,
//       &quot;items&quot;: {
//         &quot;$ref&quot;: &quot;#/definitions/Source&quot;
//       },
//       &quot;description&quot;: &quot;An optional list of sources that are related to this
//                       source. These may be the source that generated this
//                       source.&quot;
//     },
//     &quot;adapterData&quot;: {
//       &quot;type&quot;:[&quot;array&quot;,&quot;boolean&quot;,&quot;integer&quot;,&quot;null&quot;,&quot;number&quot;,&quot;object&quot;,&quot;string&quot;],
//       &quot;description&quot;: &quot;Optional data that a debug adapter might want to loop
//                       through the client. The client should leave the data
//                       intact and persist it across sessions. The client
//                       should not interpret the data.&quot;
//     },
//     &quot;checksums&quot;: {
//       &quot;type&quot;: &quot;array&quot;,
//       &quot;items&quot;: {
//         &quot;$ref&quot;: &quot;#/definitions/Checksum&quot;
//       },
//       &quot;description&quot;: &quot;The checksums associated with this file.&quot;
//     }
//   }
// }</doc>
