<dec f='llvm/lldb/include/lldb/Breakpoint/BreakpointOptions.h' l='227' type='bool lldb_private::BreakpointOptions::InvokeCallback(lldb_private::StoppointCallbackContext * context, lldb::user_id_t break_id, lldb::user_id_t break_loc_id)'/>
<doc f='llvm/lldb/include/lldb/Breakpoint/BreakpointOptions.h' l='206'>// The rest of these functions are meant to be used only within the
  // breakpoint handling mechanism.

  /// Use this function to invoke the callback for a specific stop.
  ///
  /// \param[in] context
  ///    The context in which the callback is to be invoked.  This includes the
  ///    stop event, the
  ///    execution context of the stop (since you might hit the same breakpoint
  ///    on multiple threads) and
  ///    whether we are currently executing synchronous or asynchronous
  ///    callbacks.
  ///
  /// \param[in] break_id
  ///    The breakpoint ID that owns this option set.
  ///
  /// \param[in] break_loc_id
  ///    The breakpoint location ID that owns this option set.
  ///
  /// \return
  ///     The callback return value.</doc>
<use f='llvm/lldb/source/Breakpoint/Breakpoint.cpp' l='451' u='c' c='_ZN12lldb_private10Breakpoint14InvokeCallbackEPNS_24StoppointCallbackContextEi'/>
<use f='llvm/lldb/source/Breakpoint/BreakpointLocation.cpp' l='193' u='c' c='_ZN12lldb_private18BreakpointLocation14InvokeCallbackEPNS_24StoppointCallbackContextE'/>
<def f='llvm/lldb/source/Breakpoint/BreakpointOptions.cpp' l='447' ll='462' type='bool lldb_private::BreakpointOptions::InvokeCallback(lldb_private::StoppointCallbackContext * context, lldb::user_id_t break_id, lldb::user_id_t break_loc_id)'/>
