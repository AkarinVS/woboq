<dec f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h' l='427' type='bool SymbolFileDWARF::DIEDeclContextsMatch(const DWARFDIE &amp; die1, const DWARFDIE &amp; die2)'/>
<def f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp' l='2728' ll='2806' type='bool SymbolFileDWARF::DIEDeclContextsMatch(const DWARFDIE &amp; die1, const DWARFDIE &amp; die2)'/>
<doc f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp' l='2719'>// This function helps to ensure that the declaration contexts match for two
// different DIEs. Often times debug information will refer to a forward
// declaration of a type (the equivalent of &quot;struct my_struct;&quot;. There will
// often be a declaration of that type elsewhere that has the full definition.
// When we go looking for the full type &quot;my_struct&quot;, we will find one or more
// matches in the accelerator tables and we will then need to make sure the
// type was in the same declaration context as the original DIE. This function
// can efficiently compare two DIEs and will return true when the declaration
// context matches, and false when they don&apos;t.</doc>
