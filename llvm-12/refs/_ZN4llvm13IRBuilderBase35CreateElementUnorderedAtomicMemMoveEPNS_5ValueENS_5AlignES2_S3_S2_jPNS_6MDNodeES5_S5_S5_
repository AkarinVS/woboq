<dec f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='717' type='llvm::CallInst * llvm::IRBuilderBase::CreateElementUnorderedAtomicMemMove(llvm::Value * Dst, llvm::Align DstAlign, llvm::Value * Src, llvm::Align SrcAlign, llvm::Value * Size, uint32_t ElementSize, llvm::MDNode * TBAATag = nullptr, llvm::MDNode * TBAAStructTag = nullptr, llvm::MDNode * ScopeTag = nullptr, llvm::MDNode * NoAliasTag = nullptr)'/>
<use f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='731' u='c' c='_ZN4llvm13IRBuilderBase35CreateElementUnorderedAtomicMemMoveEPNS_5ValueEjS2_jmjPNS_6MDNodeES4_S4_S4_'/>
<use f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='744' u='c' c='_ZN4llvm13IRBuilderBase35CreateElementUnorderedAtomicMemMoveEPNS_5ValueEjS2_jS2_jPNS_6MDNodeES4_S4_S4_'/>
<doc f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='708'>/// \brief Create and insert an element unordered-atomic memmove between the
  /// specified pointers.
  ///
  /// DstAlign/SrcAlign are the alignments of the Dst/Src pointers,
  /// respectively.
  ///
  /// If the pointers aren&apos;t i8*, they will be converted.  If a TBAA tag is
  /// specified, it will be added to the instruction. Likewise with alias.scope
  /// and noalias tags.</doc>
<def f='llvm/llvm/lib/IR/IRBuilder.cpp' l='286' ll='324' type='llvm::CallInst * llvm::IRBuilderBase::CreateElementUnorderedAtomicMemMove(llvm::Value * Dst, llvm::Align DstAlign, llvm::Value * Src, llvm::Align SrcAlign, llvm::Value * Size, uint32_t ElementSize, llvm::MDNode * TBAATag = nullptr, llvm::MDNode * TBAAStructTag = nullptr, llvm::MDNode * ScopeTag = nullptr, llvm::MDNode * NoAliasTag = nullptr)'/>
