<def f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='135' ll='174'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='191'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='192'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='261' c='_ZN4llvm13LazyCallGraph12EdgeSequenceixERNS0_4NodeE'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='268' c='_ZN4llvm13LazyCallGraph12EdgeSequence6lookupERNS0_4NodeE'/>
<size>8</size>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='121'>/// A class used to represent edges in the call graph.
  ///
  /// The lazy call graph models both *call* edges and *reference* edges. Call
  /// edges are much what you would expect, and exist when there is a &apos;call&apos; or
  /// &apos;invoke&apos; instruction of some function. Reference edges are also tracked
  /// along side these, and exist whenever any instruction (transitively
  /// through its operands) references a function. All call edges are
  /// inherently reference edges, and so the reference graph forms a superset
  /// of the formal call graph.
  ///
  /// All of these forms of edges are fundamentally represented as outgoing
  /// edges. The edges are stored in the source node and point at the target
  /// node. This allows the edge structure itself to be a very compact data
  /// structure: essentially a tagged pointer.</doc>
<fun r='_ZN4llvm13LazyCallGraph4EdgeC1Ev'/>
<fun r='_ZN4llvm13LazyCallGraph4EdgeC1ERNS0_4NodeENS1_4KindE'/>
<fun r='_ZNK4llvm13LazyCallGraph4EdgecvbEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge7getKindEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge6isCallEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge7getNodeEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge11getFunctionEv'/>
<mbr r='llvm::LazyCallGraph::Edge::Value' o='0' t='PointerIntPair&lt;llvm::LazyCallGraph::Node *, 1, llvm::LazyCallGraph::Edge::Kind&gt;'/>
<fun r='_ZN4llvm13LazyCallGraph4Edge7setKindENS1_4KindE'/>
<fun r='_ZN4llvm13LazyCallGraph4EdgeC1Ev'/>
<fun r='_ZN4llvm13LazyCallGraph4EdgeC1ERNS0_4NodeENS1_4KindE'/>
<fun r='_ZNK4llvm13LazyCallGraph4EdgecvbEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge7getKindEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge6isCallEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge7getNodeEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge11getFunctionEv'/>
<use f='llvm/llvm/lib/Analysis/CGSCCPassManager.cpp' l='898' c='_ZL33updateCGAndAnalysisManagerForPassRN4llvm13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultERNS6_INS_8FunctionEJEEEb'/>
<size>8</size>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='58' c='_ZN4llvm13LazyCallGraph12EdgeSequence18removeEdgeInternalERNS0_4NodeE'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='63' c='_ZL7addEdgeRN4llvm15SmallVectorImplINS_13LazyCallGraph4EdgeEEERNS_8DenseMapIPNS1_4NodeEiNS_12DenseMapInfoIS7_EENS_6detail12DenseMapPairIS7_iEEEERS6_NS2_4KindE'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='70' c='_ZL7addEdgeRN4llvm15SmallVectorImplINS_13LazyCallGraph4EdgeEEERNS_8DenseMapIPNS1_4NodeEiNS_12DenseMapInfoIS7_EENS_6detail12DenseMapPairIS7_iEEEERS6_NS2_4KindE'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='286' c='_ZNK4llvm13LazyCallGraph3SCC10isParentOfERKS1_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='308' c='_ZNK4llvm13LazyCallGraph3SCC12isAncestorOfERKS1_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='414' c='_ZNK4llvm13LazyCallGraph6RefSCC10isParentOfERKS1_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='436' c='_ZNK4llvm13LazyCallGraph6RefSCC12isAncestorOfERKS1_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='631' c='_ZN4llvm13LazyCallGraph6RefSCC24switchInternalEdgeToCallERNS0_4NodeES3_NS_12function_refIFvNS_8ArrayRefIPNS0_3SCCEEEEEE'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='660' c='_ZN4llvm13LazyCallGraph6RefSCC24switchInternalEdgeToCallERNS0_4NodeES3_NS_12function_refIFvNS_8ArrayRefIPNS0_3SCCEEEEEE'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1056' c='_ZN4llvm13LazyCallGraph6RefSCC21insertIncomingRefEdgeERNS0_4NodeES3_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1081' c='_ZN4llvm13LazyCallGraph6RefSCC21insertIncomingRefEdgeERNS0_4NodeES3_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1442' c='_ZN4llvm13LazyCallGraph6RefSCC21insertTrivialCallEdgeERNS0_4NodeES3_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1653' c='_ZN4llvm13LazyCallGraph16addSplitFunctionERNS_8FunctionES2_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1666' c='_ZN4llvm13LazyCallGraph16addSplitFunctionERNS_8FunctionES2_'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1740' c='_ZN4llvm13LazyCallGraph29addSplitRefRecursiveFunctionsERNS_8FunctionENS_8ArrayRefIPS1_EE'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1958' c='_ZN4llvm13LazyCallGraph12buildRefSCCsEv'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1994' c='_ZL9printNodeRN4llvm11raw_ostreamERNS_13LazyCallGraph4NodeE'/>
<use f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='2041' c='_ZL12printNodeDOTRN4llvm11raw_ostreamERNS_13LazyCallGraph4NodeE'/>
<size>8</size>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='268' c='_ZN12_GLOBAL__N_142LazyCallGraphTest_BasicGraphFormation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='283' c='_ZN12_GLOBAL__N_142LazyCallGraphTest_BasicGraphFormation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='297' c='_ZN12_GLOBAL__N_142LazyCallGraphTest_BasicGraphFormation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='645' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_OutgoingEdgeMutation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='800' c='_ZN12_GLOBAL__N_144LazyCallGraphTest_IncomingEdgeInsertion_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='892' c='_ZN12_GLOBAL__N_152LazyCallGraphTest_IncomingEdgeInsertionRefGraph_Test8TestBodyEv'/>
<size>8</size>
