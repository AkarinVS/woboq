<dec f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='2652' type='llvm::CallInst * llvm::IRBuilderBase::CreateAlignmentAssumption(const llvm::DataLayout &amp; DL, llvm::Value * PtrValue, llvm::Value * Alignment, llvm::Value * OffsetValue = nullptr)'/>
<doc f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='2643'>/// Create an assume intrinsic call that represents an alignment
  /// assumption on the provided pointer.
  ///
  /// An optional offset can be provided, and if it is provided, the offset
  /// must be subtracted from the provided pointer to get the pointer with the
  /// specified alignment.
  ///
  /// This overload handles the condition where the Alignment is dependent
  /// on an existing value rather than a static value.</doc>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.cpp' l='2321' u='c' c='_ZN5clang7CodeGen15CodeGenFunction23emitAlignmentAssumptionEPN4llvm5ValueENS_8QualTypeENS_14SourceLocationES6_S4_S4_'/>
<def f='llvm/llvm/lib/IR/IRBuilder.cpp' l='1137' ll='1144' type='llvm::CallInst * llvm::IRBuilderBase::CreateAlignmentAssumption(const llvm::DataLayout &amp; DL, llvm::Value * PtrValue, llvm::Value * Alignment, llvm::Value * OffsetValue = nullptr)'/>
