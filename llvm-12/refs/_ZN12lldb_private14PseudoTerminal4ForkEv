<dec f='llvm/lldb/include/lldb/Host/PseudoTerminal.h' l='69' type='llvm::Expected&lt;lldb::pid_t&gt; lldb_private::PseudoTerminal::Fork()'/>
<doc f='llvm/lldb/include/lldb/Host/PseudoTerminal.h' l='50'>/// Fork a child process that uses pseudo terminals for its stdio.
  ///
  /// In the parent process, a call to this function results in a pid being
  /// returned. If the pid is valid, the primary file descriptor can be used
  /// for read/write access to stdio of the child process.
  ///
  /// In the child process the stdin/stdout/stderr will already be routed to
  /// the secondary pseudo terminal and the primary file descriptor will be
  /// closed as it is no longer needed by the child process.
  ///
  /// This class will close the file descriptors for the primary/secondary when
  /// the destructor is called. The file handles can be released using either:
  /// @li PseudoTerminal::ReleasePrimaryFileDescriptor() @li
  /// PseudoTerminal::ReleaseSaveFileDescriptor()
  ///
  /// \return
  ///     \b Parent process: a child process ID that is greater
  ///         than zero, or an error if the fork fails.
  ///     \b Child process: zero.</doc>
<def f='llvm/lldb/source/Host/common/PseudoTerminal.cpp' l='121' ll='162' type='llvm::Expected&lt;lldb::pid_t&gt; lldb_private::PseudoTerminal::Fork()'/>
