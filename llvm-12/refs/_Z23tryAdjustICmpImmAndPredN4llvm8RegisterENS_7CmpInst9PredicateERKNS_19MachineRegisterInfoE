<def f='llvm/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp' l='427' ll='514' type='Optional&lt;std::pair&lt;uint64_t, CmpInst::Predicate&gt; &gt; tryAdjustICmpImmAndPred(llvm::Register RHS, CmpInst::Predicate P, const llvm::MachineRegisterInfo &amp; MRI)'/>
<use f='llvm/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp' l='530' u='c' c='_Z25matchAdjustICmpImmAndPredRN4llvm12MachineInstrERKNS_19MachineRegisterInfoERSt4pairImNS_7CmpInst9PredicateEE'/>
<doc f='llvm/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp' l='420'>/// Determine if it is possible to modify the \p RHS and predicate \p P of a
/// G_ICMP instruction such that the right-hand side is an arithmetic immediate.
///
/// \returns A pair containing the updated immediate and predicate which may
/// be used to optimize the instruction.
///
/// \note This assumes that the comparison has been legalized.</doc>
