<use f='llvm/clang/include/clang/AST/ComputeDependence.h' l='131' c='_ZN5clang17computeDependenceEPNS_12RecoveryExprE'/>
<inh f='llvm/clang/include/clang/AST/Expr.h' l='109' c='clang::Expr'/>
<inh f='llvm/llvm/include/llvm/Support/TrailingObjects.h' l='229' c='llvm::TrailingObjects'/>
<def f='llvm/clang/include/clang/AST/Expr.h' l='6336' ll='6378'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='6337'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='6339' c='_ZN5clang12RecoveryExpr6CreateERNS_10ASTContextENS_8QualTypeENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_4ExprEEE'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='6342' c='_ZN5clang12RecoveryExpr11CreateEmptyERNS_10ASTContextEj'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='6350' c='_ZNK5clang12RecoveryExpr14subExpressionsEv'/>
<size>32</size>
<doc f='llvm/clang/include/clang/AST/Expr.h' l='6310'>/// Frontend produces RecoveryExprs on semantic errors that prevent creating
/// other well-formed expressions. E.g. when type-checking of a binary operator
/// fails, we cannot produce a BinaryOperator expression. Instead, we can choose
/// to produce a recovery expression storing left and right operands.
///
/// RecoveryExpr does not have any semantic meaning in C++, it is only useful to
/// preserve expressions in AST that would otherwise be dropped. It captures
/// subexpressions of some expression that we could not construct and source
/// range covered by the expression.
///
/// By default, RecoveryExpr uses dependence-bits to take advantage of existing
/// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved
/// in `decltype(&lt;broken-expr&gt;)` as part of the `DependentDecltypeType`. In
/// addition to that, clang does not report most errors on dependent
/// expressions, so we get rid of bogus errors for free. However, note that
/// unlike other dependent expressions, RecoveryExpr can be produced in
/// non-template contexts.
///
/// We will preserve the type in RecoveryExpr when the type is known, e.g.
/// preserving the return type for a broken non-overloaded function call, a
/// overloaded call where all candidates have the same return type. In this
/// case, the expression is not type-dependent (unless the known type is itself
/// dependent)
///
/// One can also reliably suppress all bogus errors on expressions containing
/// recovery expressions by examining results of Expr::containsErrors().</doc>
<fun r='_ZN5clang12RecoveryExpr6CreateERNS_10ASTContextENS_8QualTypeENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_4ExprEEE'/>
<fun r='_ZN5clang12RecoveryExpr11CreateEmptyERNS_10ASTContextEj'/>
<fun r='_ZN5clang12RecoveryExpr14subExpressionsEv'/>
<fun r='_ZNK5clang12RecoveryExpr14subExpressionsEv'/>
<fun r='_ZN5clang12RecoveryExpr8childrenEv'/>
<fun r='_ZNK5clang12RecoveryExpr11getBeginLocEv'/>
<fun r='_ZNK5clang12RecoveryExpr9getEndLocEv'/>
<fun r='_ZN5clang12RecoveryExpr7classofEPKNS_4StmtE'/>
<fun r='_ZN5clang12RecoveryExprC1ERNS_10ASTContextENS_8QualTypeENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_4ExprEEE'/>
<fun r='_ZN5clang12RecoveryExprC1ENS_4Stmt10EmptyShellEj'/>
<fun r='_ZNK5clang12RecoveryExpr18numTrailingObjectsEN4llvm25trailing_objects_internal19TrailingObjectsBase13OverloadTokenIPNS_4StmtEEE'/>
<mbr r='clang::RecoveryExpr::BeginLoc' o='128' t='clang::SourceLocation'/>
<mbr r='clang::RecoveryExpr::EndLoc' o='160' t='clang::SourceLocation'/>
<mbr r='clang::RecoveryExpr::NumExprs' o='192' t='unsigned int'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='2679' c='_ZN5clang19RecursiveASTVisitor20TraverseRecoveryExprEPNS_12RecoveryExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLike2632607'/>
<size>32</size>
<use f='llvm/clang/lib/AST/ComputeDependence.cpp' l='543' c='_ZN5clang17computeDependenceEPNS_12RecoveryExprE'/>
<size>32</size>
<use f='llvm/clang/lib/AST/Expr.cpp' l='4651' c='_ZN5clang12RecoveryExpr6CreateERNS_10ASTContextENS_8QualTypeENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_4ExprEEE'/>
<use f='llvm/clang/lib/AST/Expr.cpp' l='4656' c='_ZN5clang12RecoveryExpr6CreateERNS_10ASTContextENS_8QualTypeENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_4ExprEEE'/>
<use f='llvm/clang/lib/AST/Expr.cpp' l='4657' c='_ZN5clang12RecoveryExpr6CreateERNS_10ASTContextENS_8QualTypeENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_4ExprEEE'/>
<use f='llvm/clang/lib/AST/Expr.cpp' l='4660' c='_ZN5clang12RecoveryExpr11CreateEmptyERNS_10ASTContextEj'/>
<use f='llvm/clang/lib/AST/Expr.cpp' l='4662' c='_ZN5clang12RecoveryExpr11CreateEmptyERNS_10ASTContextEj'/>
<use f='llvm/clang/lib/AST/Expr.cpp' l='4663' c='_ZN5clang12RecoveryExpr11CreateEmptyERNS_10ASTContextEj'/>
<size>32</size>
<fun r='_ZN5clang12RecoveryExprC1ERNS_10ASTContextENS_8QualTypeENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_4ExprEEE'/>
<fun r='_ZN5clang12RecoveryExpr6CreateERNS_10ASTContextENS_8QualTypeENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_4ExprEEE'/>
<fun r='_ZN5clang12RecoveryExpr11CreateEmptyERNS_10ASTContextEj'/>
<use f='llvm/clang/lib/AST/StmtPrinter.cpp' l='2540' c='_ZN12_GLOBAL__N_111StmtPrinter17VisitRecoveryExprEPN5clang12RecoveryExprE'/>
<size>32</size>
<use f='llvm/clang/lib/AST/StmtProfile.cpp' l='2081' c='_ZN12_GLOBAL__N_112StmtProfiler17VisitRecoveryExprEPKN5clang12RecoveryExprE'/>
<size>32</size>
<use f='llvm/clang/lib/Sema/TreeTransform.h' l='10214' c='_ZN5clang13TreeTransform21TransformRecoveryExprEPNS_12RecoveryExprE'/>
<size>32</size>
<use f='llvm/clang/lib/Serialization/ASTReaderStmt.cpp' l='2185' c='_ZN5clang13ASTStmtReader17VisitRecoveryExprEPNS_12RecoveryExprE'/>
<size>32</size>
<use f='llvm/clang/lib/Serialization/ASTWriterStmt.cpp' l='867' c='_ZN5clang13ASTStmtWriter17VisitRecoveryExprEPNS_12RecoveryExprE'/>
<size>32</size>
