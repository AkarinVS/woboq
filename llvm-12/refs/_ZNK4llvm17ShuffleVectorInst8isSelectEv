<def f='llvm/llvm/include/llvm/IR/Instructions.h' l='2169' ll='2171' type='bool llvm::ShuffleVectorInst::isSelect() const'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='2161'>/// Return true if this shuffle chooses elements from its source vectors
  /// without lane crossings and all operands have the same number of elements.
  /// In other words, this shuffle is equivalent to a vector select with a
  /// constant condition operand.
  /// Example: shufflevector &lt;4 x n&gt; A, &lt;4 x n&gt; B, &lt;undef,1,6,3&gt;
  /// This returns false if the mask does not choose from both input vectors.
  /// In that case, the shuffle is better classified as an identity shuffle.
  /// TODO: Optionally allow length-changing shuffles.</doc>
<use f='llvm/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h' l='1030' u='c' c='_ZN4llvm31TargetTransformInfoImplCRTPBase11getUserCostEPKNS_4UserENS_8ArrayRefIPKNS_5ValueEEENS_19TargetTransformInfo14TargetCostKindE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='2424' u='c' c='_ZN4llvm16InstCombinerImpl16foldVectorSelectERNS_10SelectInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='2438' u='c' c='_ZN4llvm16InstCombinerImpl16foldVectorSelectERNS_10SelectInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='1883' u='c' c='_ZL17foldSelectShuffleRN4llvm17ShuffleVectorInstERNS_9IRBuilderINS_12TargetFolderENS_25IRBuilderCallbackInserterEEERKNS_10DataLayoutE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1611' u='c' c='_ZN4llvm16InstCombinerImpl15foldVectorBinopERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1613' u='c' c='_ZN4llvm16InstCombinerImpl15foldVectorBinopERNS_14BinaryOperatorE'/>
