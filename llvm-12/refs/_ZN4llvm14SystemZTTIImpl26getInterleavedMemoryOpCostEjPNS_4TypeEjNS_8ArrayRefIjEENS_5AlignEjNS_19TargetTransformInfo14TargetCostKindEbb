<dec f='llvm/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.h' l='109' type='int llvm::SystemZTTIImpl::getInterleavedMemoryOpCost(unsigned int Opcode, llvm::Type * VecTy, unsigned int Factor, ArrayRef&lt;unsigned int&gt; Indices, llvm::Align Alignment, unsigned int AddressSpace, TTI::TargetCostKind CostKind = TTI::TCK_SizeAndLatency, bool UseMaskForCond = false, bool UseMaskForGaps = false)'/>
<def f='llvm/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp' l='1112' ll='1168' type='int llvm::SystemZTTIImpl::getInterleavedMemoryOpCost(unsigned int Opcode, llvm::Type * VecTy, unsigned int Factor, ArrayRef&lt;unsigned int&gt; Indices, llvm::Align Alignment, unsigned int AddressSpace, TTI::TargetCostKind CostKind = TTI::TCK_SizeAndLatency, bool UseMaskForCond = false, bool UseMaskForGaps = false)'/>
<doc f='llvm/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp' l='1107'>// The generic implementation of getInterleavedMemoryOpCost() is based on
// adding costs of the memory operations plus all the extracts and inserts
// needed for using / defining the vector operands. The SystemZ version does
// roughly the same but bases the computations on vector permutations
// instead.</doc>
