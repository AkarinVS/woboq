<def f='llvm/llvm/lib/Transforms/Vectorize/VPlan.h' l='1929' ll='1938' type='static void llvm::VPBlockUtils::insertBlockAfter(llvm::VPBlockBase * NewBlock, llvm::VPBlockBase * BlockPtr)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='8507' u='c' c='_ZN4llvm15VPRecipeBuilder17handleReplicationEPNS_11InstructionERNS_7VFRangeEPNS_12VPBasicBlockERNS_8DenseMapIS2_PNS_17VPReplicateRecipeENS_12DenseMapI4676306'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='8509' u='c' c='_ZN4llvm15VPRecipeBuilder17handleReplicationEPNS_11InstructionERNS_7VFRangeEPNS_12VPBasicBlockERNS_8DenseMapIS2_PNS_17VPReplicateRecipeENS_12DenseMapI4676306'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='8702' u='c' c='_ZN4llvm24LoopVectorizationPlanner23buildVPlanWithVPRecipesERNS_7VFRangeERNS_15SmallPtrSetImplIPNS_11InstructionEEERKNS_8DenseMapIS5_S5_NS_12DenseMapI16584774'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/VPlan.h' l='1924'>/// Insert disconnected VPBlockBase \p NewBlock after \p BlockPtr. Add \p
  /// NewBlock as successor of \p BlockPtr and \p BlockPtr as predecessor of \p
  /// NewBlock, and propagate \p BlockPtr parent to \p NewBlock. If \p BlockPtr
  /// has more than one successor, its conditional bit is propagated to \p
  /// NewBlock. \p NewBlock must have neither successors nor predecessors.</doc>
