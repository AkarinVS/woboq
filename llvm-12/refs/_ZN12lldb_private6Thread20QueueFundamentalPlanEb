<dec f='llvm/lldb/include/lldb/Target/Thread.h' l='618' type='lldb::ThreadPlanSP lldb_private::Thread::QueueFundamentalPlan(bool abort_other_plans)'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='581'>// Thread Plan Providers:
  // This section provides the basic thread plans that the Process control
  // machinery uses to run the target.  ThreadPlan.h provides more details on
  // how this mechanism works. The thread provides accessors to a set of plans
  // that perform basic operations. The idea is that particular Platform
  // plugins can override these methods to provide the implementation of these
  // basic operations appropriate to their environment.
  //
  // NB: All the QueueThreadPlanXXX providers return Shared Pointers to
  // Thread plans.  This is useful so that you can modify the plans after
  // creation in ways specific to that plan type.  Also, it is often necessary
  // for ThreadPlans that utilize other ThreadPlans to implement their task to
  // keep a shared pointer to the sub-plan. But besides that, the shared
  // pointers should only be held onto by entities who live no longer than the
  // thread containing the ThreadPlan.
  // FIXME: If this becomes a problem, we can make a version that just returns a
  // pointer,
  // which it is clearly unsafe to hold onto, and a shared pointer version, and
  // only allow ThreadPlan and Co. to use the latter.  That is made more
  // annoying to do because there&apos;s no elegant way to friend a method to all
  // sub-classes of a given class.
  //

  /// Queues the base plan for a thread.
  /// The version returned by Process does some things that are useful,
  /// like handle breakpoints and signals, so if you return a plugin specific
  /// one you probably want to call through to the Process one for anything
  /// your plugin doesn&apos;t explicitly handle.
  ///
  /// \param[in] abort_other_plans
  ///    \b true if we discard the currently queued plans and replace them with
  ///    this one.
  ///    Otherwise this plan will go on the end of the plan stack.
  ///
  /// \return
  ///     A shared pointer to the newly queued thread plan, or nullptr if the
  ///     plan could not be queued.</doc>
<dec f='llvm/lldb/include/lldb/Target/ThreadPlanBase.h' l='48' type='lldb::ThreadPlanSP lldb_private::Thread::QueueFundamentalPlan(bool abort_other_plans)'/>
<def f='llvm/lldb/source/Target/Thread.cpp' l='1244' ll='1248' type='lldb::ThreadPlanSP lldb_private::Thread::QueueFundamentalPlan(bool abort_other_plans)'/>
<use f='llvm/lldb/source/Target/ThreadPlanStack.cpp' l='392' u='c' c='_ZN12lldb_private18ThreadPlanStackMap6UpdateERNS_10ThreadListEbb'/>
