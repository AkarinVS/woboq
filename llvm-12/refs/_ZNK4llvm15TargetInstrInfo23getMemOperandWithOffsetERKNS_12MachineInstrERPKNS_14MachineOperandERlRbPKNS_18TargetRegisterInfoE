<dec f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1296' type='bool llvm::TargetInstrInfo::getMemOperandWithOffset(const llvm::MachineInstr &amp; MI, const llvm::MachineOperand *&amp; BaseOp, int64_t &amp; Offset, bool &amp; OffsetIsScalable, const llvm::TargetRegisterInfo * TRI) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1293'>/// Get the base operand and byte offset of an instruction that reads/writes
  /// memory. This is a convenience function for callers that are only prepared
  /// to handle a single base operand.</doc>
<use f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='776' u='c' c='_ZN4llvm17SwingSchedulerDAG25addLoopCarriedDependencesEPNS_9AAResultsE'/>
<use f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='778' u='c' c='_ZN4llvm17SwingSchedulerDAG25addLoopCarriedDependencesEPNS_9AAResultsE'/>
<use f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='2152' u='c' c='_ZN4llvm17SwingSchedulerDAG12computeDeltaERNS_12MachineInstrERj'/>
<use f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='2336' u='c' c='_ZN4llvm17SwingSchedulerDAG16isLoopCarriedDepEPNS_5SUnitERKNS_4SDepEb'/>
<use f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='2338' u='c' c='_ZN4llvm17SwingSchedulerDAG16isLoopCarriedDepEPNS_5SUnitERKNS_4SDepEb'/>
<use f='llvm/llvm/lib/CodeGen/MachineSink.cpp' l='906' u='c' c='_ZL32SinkingPreventsImplicitNullCheckRN4llvm12MachineInstrEPKNS_15TargetInstrInfoEPKNS_18TargetRegisterInfoE'/>
<use f='llvm/llvm/lib/CodeGen/ModuloSchedule.cpp' l='916' u='c' c='_ZN4llvm22ModuloScheduleExpander12computeDeltaERNS_12MachineInstrERj'/>
<def f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='1074' ll='1085' type='bool llvm::TargetInstrInfo::getMemOperandWithOffset(const llvm::MachineInstr &amp; MI, const llvm::MachineOperand *&amp; BaseOp, int64_t &amp; Offset, bool &amp; OffsetIsScalable, const llvm::TargetRegisterInfo * TRI) const'/>
<use f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='1228' u='c' c='_ZNK4llvm15TargetInstrInfo19describeLoadedValueERKNS_12MachineInstrENS_8RegisterE'/>
<doc f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='1073'>// Default implementation of getMemOperandWithOffset.</doc>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='2283' u='c' c='_ZNK4llvm16AArch64InstrInfo23getAddrModeFromMemoryOpERKNS_12MachineInstrEPKNS_18TargetRegisterInfoE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='6288' u='c' c='_ZNK4llvm16AArch64InstrInfo25getOutliningCandidateInfoERSt6vectorINS_8outliner9CandidateESaIS3_EE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64StorePairSuppress.cpp' l='153' u='c' c='_ZN12_GLOBAL__N_124AArch64StorePairSuppress20runOnMachineFunctionERN4llvm15MachineFunctionE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp' l='1935' u='c' c='_ZN4llvm15SIScheduleDAGMI8scheduleEv'/>
