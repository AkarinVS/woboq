<def f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='520' ll='523' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildUAddo(const llvm::DstOp &amp; Res, const llvm::DstOp &amp; CarryOut, const llvm::SrcOp &amp; Op0, const llvm::SrcOp &amp; Op1)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='508'>/// Build and insert \p Res, \p CarryOut = G_UADDO \p Op0, \p Op1
  ///
  /// G_UADDO sets \p Res to \p Op0 + \p Op1 (truncated to the bit width) and
  /// sets \p CarryOut to 1 if the result overflowed in unsigned arithmetic.
  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p Res, \p Op0 and \p Op1 must be generic virtual registers with the
  /// same scalar type.
  ////\pre \p CarryOut must be generic virtual register with scalar type
  ///(typically s1)
  ///
  /// \return The newly created instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='881' u='c' c='_ZN4llvm15LegalizerHelper12narrowScalarERNS_12MachineInstrEjNS_3LLTE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='4441' u='c' c='_ZN4llvm15LegalizerHelper17multiplyRegistersERNS_15SmallVectorImplINS_8RegisterEEENS_8ArrayRefIS2_EES6_NS_3LLTE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='4446' u='c' c='_ZN4llvm15LegalizerHelper17multiplyRegistersERNS_15SmallVectorImplINS_8RegisterEEENS_8ArrayRefIS2_EES6_NS_3LLTE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='2886' u='c' c='_ZNK4llvm19AMDGPULegalizerInfo23legalizeUDIV_UREM64ImplERNS_16MachineIRBuilderENS_8RegisterES3_S3_b'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='2898' u='c' c='_ZNK4llvm19AMDGPULegalizerInfo23legalizeUDIV_UREM64ImplERNS_16MachineIRBuilderENS_8RegisterES3_S3_b'/>
<use f='llvm/llvm/unittests/CodeGen/GlobalISel/MachineIRBuilderTest.cpp' l='376' u='c' c='_ZN37AArch64GISelMITest_BuildAddoSubo_Test8TestBodyEv'/>
