<dec f='llvm/clang/include/clang/Sema/Sema.h' l='2670' type='bool clang::Sema::canFullyTypeCheckRedeclaration(clang::ValueDecl * NewD, clang::ValueDecl * OldD, clang::QualType NewT, clang::QualType OldT)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='3492' u='c' c='_ZN5clang4Sema17MergeFunctionDeclEPNS_12FunctionDeclERPNS_9NamedDeclEPNS_5ScopeEb'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='3670' u='c' c='_ZN5clang4Sema17MergeFunctionDeclEPNS_12FunctionDeclERPNS_9NamedDeclEPNS_5ScopeEb'/>
<def f='llvm/clang/lib/Sema/SemaDecl.cpp' l='9998' ll='10020' type='bool clang::Sema::canFullyTypeCheckRedeclaration(clang::ValueDecl * NewD, clang::ValueDecl * OldD, clang::QualType NewT, clang::QualType OldT)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='10054' u='c' c='_ZN5clang4Sema35shouldLinkDependentDeclWithPreviousEPNS_4DeclES2_'/>
<doc f='llvm/clang/lib/Sema/SemaDecl.cpp' l='9990'>/// Determines if we can perform a correct type check for \p D as a
/// redeclaration of \p PrevDecl. If not, we can generally still perform a
/// best-effort check.
///
/// \param NewD The new declaration.
/// \param OldD The old declaration.
/// \param NewT The portion of the type of the new declaration to check.
/// \param OldT The portion of the type of the old declaration to check.</doc>
