<dec f='llvm/llvm/include/llvm/IR/Value.h' l='701' type='const llvm::Value * llvm::Value::stripAndAccumulateConstantOffsets(const llvm::DataLayout &amp; DL, llvm::APInt &amp; Offset, bool AllowNonInbounds, function_ref&lt;bool (llvm::Value &amp;, llvm::APInt &amp;)&gt; ExternalAnalysis = nullptr) const'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='708' u='c' c='_ZN4llvm5Value33stripAndAccumulateConstantOffsetsERKNS_10DataLayoutERNS_5APIntEb'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='716' u='c' c='_ZNK4llvm5Value41stripAndAccumulateInBoundsConstantOffsetsERKNS_10DataLayoutERNS_5APIntE'/>
<doc f='llvm/llvm/include/llvm/IR/Value.h' l='675'>/// Accumulate the constant offset this value has compared to a base pointer.
  /// Only &apos;getelementptr&apos; instructions (GEPs) are accumulated but other
  /// instructions, e.g., casts, are stripped away as well.
  /// The accumulated constant offset is added to \p Offset and the base
  /// pointer is returned.
  ///
  /// The APInt \p Offset has to have a bit-width equal to the IntPtr type for
  /// the address space of &apos;this&apos; pointer value, e.g., use
  /// DataLayout::getIndexTypeSizeInBits(Ty).
  ///
  /// If \p AllowNonInbounds is true, offsets in GEPs are stripped and
  /// accumulated even if the GEP is not &quot;inbounds&quot;.
  ///
  /// If \p ExternalAnalysis is provided it will be used to calculate a offset
  /// when a operand of GEP is not constant.
  /// For example, for a value \p ExternalAnalysis might try to calculate a
  /// lower bound. If \p ExternalAnalysis is successful, it should return true.
  ///
  /// If this is called on a non-pointer value, it returns &apos;this&apos; and the
  /// \p Offset is not modified.
  ///
  /// Note that this function will never return a nullptr. It will also never
  /// manipulate the \p Offset in a way that would not match the difference
  /// between the underlying value and the returned one. Thus, if no constant
  /// offset was found, the returned value is the underlying one and \p Offset
  /// is unchanged.</doc>
<def f='llvm/llvm/lib/IR/Value.cpp' l='650' ll='716' type='const llvm::Value * llvm::Value::stripAndAccumulateConstantOffsets(const llvm::DataLayout &amp; DL, llvm::APInt &amp; Offset, bool AllowNonInbounds, function_ref&lt;bool (llvm::Value &amp;, llvm::APInt &amp;)&gt; ExternalAnalysis = nullptr) const'/>
<use f='llvm/llvm/lib/Transforms/IPO/AttributorAttributes.cpp' l='389' u='c' c='_ZN12_GLOBAL__N_132stripAndAccumulateMinimalOffsetsERN4llvm10AttributorERKNS0_17AbstractAttributeEPKNS0_5ValueERKNS0_10DataLayoutERNS0_5APIntEbb'/>
