<dec f='llvm/polly/include/polly/Support/ISLTools.h' l='301' type='isl::union_map polly::computeReachingWrite(isl::union_map Schedule, isl::union_map Writes, bool Reverse, bool InclPrevDef, bool InclNextDef)'/>
<doc f='llvm/polly/include/polly/Support/ISLTools.h' l='248'>/// Compute the reaching definition statement or the next overwrite for each
/// definition of an array element.
///
/// The reaching definition of an array element at a specific timepoint is the
/// statement instance that has written the current element&apos;s content.
/// Alternatively, this function determines for each timepoint and element which
/// write is going to overwrite an element at a future timepoint. This can be
/// seen as &quot;reaching definition in reverse&quot; where definitions are found in the
/// past.
///
/// For example:
///
/// Schedule := { Write[] -&gt; [0]; Overwrite[] -&gt; [10] }
/// Defs := { Write[] -&gt; A[5]; Overwrite[] -&gt; A[5] }
///
/// If index 5 of array A is written at timepoint 0 and 10, the resulting
/// reaching definitions are:
///
/// { [A[5] -&gt; [i]] -&gt; Write[] : 0 &lt; i &lt; 10;
///   [A[5] -&gt; [i]] -&gt; Overwrite[] : 10 &lt; i }
///
/// Between timepoint 0 (Write[]) and timepoint 10 (Overwrite[]), the
/// content of A[5] is written by statement instance Write[] and after
/// timepoint 10 by Overwrite[]. Values not defined in the map have no known
/// definition. This includes the statement instance timepoints themselves,
/// because reads at those timepoints could either read the old or the new
/// value, defined only by the statement itself. But this can be changed by @p
/// InclPrevDef and @p InclNextDef. InclPrevDef=false and InclNextDef=true
/// returns a zone. Unless @p InclPrevDef and @p InclNextDef are both true,
/// there is only one unique definition per element and timepoint.
///
/// @param Schedule    { DomainWrite[] -&gt; Scatter[] }
///                    Schedule of (at least) all array writes. Instances not in
///                    @p Writes are ignored.
/// @param Writes      { DomainWrite[] -&gt; Element[] }
///                    Elements written to by the statement instances.
/// @param Reverse     If true, look for definitions in the future. That is,
///                    find the write that is overwrites the current value.
/// @param InclPrevDef Include the definition&apos;s timepoint to the set of
///                    well-defined elements (any load at that timepoint happen
///                    at the writes). In the example, enabling this option adds
///                    {[A[5] -&gt; [0]] -&gt; Write[]; [A[5] -&gt; [10]] -&gt; Overwrite[]}
///                    to the result.
/// @param InclNextDef Whether to assume that at the timepoint where an element
///                    is overwritten, it still contains the old value (any load
///                    at that timepoint would happen before the overwrite). In
///                    this example, enabling this adds
///                    { [A[] -&gt; [10]] -&gt; Write[] } to the result.
///
/// @return { [Element[] -&gt; Scatter[]] -&gt; DomainWrite[] }
///         The reaching definitions or future overwrite as described above, or
///         nullptr if either @p Schedule or @p Writes is nullptr, or the isl
///         max operations count has exceeded.</doc>
<def f='llvm/polly/lib/Support/ISLTools.cpp' l='294' ll='344' type='isl::union_map polly::computeReachingWrite(isl::union_map Schedule, isl::union_map Writes, bool Reverse, bool InclPrevDef, bool InclNextDef)'/>
<use f='llvm/polly/lib/Support/ISLTools.cpp' l='359' u='c' c='_ZN5polly18computeArrayUnusedEN3isl12noexceptions9union_mapES2_S2_bbb'/>
<use f='llvm/polly/lib/Support/ISLTools.cpp' l='376' u='c' c='_ZN5polly18computeArrayUnusedEN3isl12noexceptions9union_mapES2_S2_bbb'/>
<use f='llvm/polly/lib/Transform/DeLICM.cpp' l='80' u='c' c='_ZN12_GLOBAL__N_124computeReachingOverwriteEN3isl12noexceptions9union_mapES2_bb'/>
<use f='llvm/polly/lib/Transform/ZoneAlgo.cpp' l='173' u='c' c='_ZL25computeReachingDefinitionN3isl12noexceptions9union_mapES1_bb'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='754' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='758' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='762' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='766' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='771' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='775' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='779' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='783' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='789' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='794' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='799' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='804' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='810' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='815' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='820' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='825' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='832' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='838' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
<use f='llvm/polly/unittests/Isl/IslTest.cpp' l='847' u='c' c='_ZN12_GLOBAL__N_132DeLICM_computeReachingWrite_Test8TestBodyEv'/>
