<def f='llvm/polly/lib/Support/RegisterPasses.cpp' l='318' ll='418' type='void polly::registerPollyPasses(llvm::legacy::PassManagerBase &amp; PM)'/>
<use f='llvm/polly/lib/Support/RegisterPasses.cpp' l='441' u='c' c='_ZN5pollyL34registerPollyEarlyAsPossiblePassesERKN4llvm18PassManagerBuilderERNS0_6legacy15PassManagerBaseE'/>
<use f='llvm/polly/lib/Support/RegisterPasses.cpp' l='454' u='c' c='_ZN5pollyL35registerPollyLoopOptimizerEndPassesERKN4llvm18PassManagerBuilderERNS0_6legacy15PassManagerBaseE'/>
<use f='llvm/polly/lib/Support/RegisterPasses.cpp' l='468' u='c' c='_ZN5pollyL38registerPollyScalarOptimizerLatePassesERKN4llvm18PassManagerBuilderERNS0_6legacy15PassManagerBaseE'/>
<doc f='llvm/polly/lib/Support/RegisterPasses.cpp' l='292'>/// Register Polly passes such that they form a polyhedral optimizer.
///
/// The individual Polly passes are registered in the pass manager such that
/// they form a full polyhedral optimizer. The flow of the optimizer starts with
/// a set of preparing transformations that canonicalize the LLVM-IR such that
/// the LLVM-IR is easier for us to understand and to optimizes. On the
/// canonicalized LLVM-IR we first run the ScopDetection pass, which detects
/// static control flow regions. Those regions are then translated by the
/// ScopInfo pass into a polyhedral representation. As a next step, a scheduling
/// optimizer is run on the polyhedral representation and finally the optimized
/// polyhedral representation is code generated back to LLVM-IR.
///
/// Besides this core functionality, we optionally schedule passes that provide
/// a graphical view of the scops (Polly[Only]Viewer, Polly[Only]Printer), that
/// allow the export/import of the polyhedral representation
/// (JSCON[Exporter|Importer]) or that show the cfg after code generation.
///
/// For certain parts of the Polly optimizer, several alternatives are provided:
///
/// As scheduling optimizer we support the isl scheduling optimizer
/// (http://freecode.com/projects/isl).
/// It is also possible to run Polly with no optimizer. This mode is mainly
/// provided to analyze the run and compile time changes caused by the
/// scheduling optimizer.
///
/// Polly supports the isl internal code generator.</doc>
