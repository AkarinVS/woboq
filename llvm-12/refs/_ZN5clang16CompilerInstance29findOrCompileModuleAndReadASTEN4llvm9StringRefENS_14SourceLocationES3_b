<dec f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='785' type='clang::ModuleLoadResult clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef ModuleName, clang::SourceLocation ImportLoc, clang::SourceLocation ModuleNameLoc, bool IsInclusionDirective)'/>
<doc f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='774'>/// Find a module, potentially compiling it, before reading its AST.  This is
  /// the guts of loadModule.
  ///
  /// For prebuilt modules, the Module is not expected to exist in
  /// HeaderSearch&apos;s ModuleMap.  If a ModuleFile by that name is in the
  /// ModuleManager, then it will be loaded and looked up.
  ///
  /// For implicit modules, the Module is expected to already be in the
  /// ModuleMap.  First attempt to load it from the given path on disk.  If that
  /// fails, defer to compileModuleAndReadAST, which will first build and then
  /// load it.</doc>
<def f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='1652' ll='1821' type='clang::ModuleLoadResult clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef ModuleName, clang::SourceLocation ImportLoc, clang::SourceLocation ModuleNameLoc, bool IsInclusionDirective)'/>
<use f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='1864' u='c' c='_ZN5clang16CompilerInstance10loadModuleENS_14SourceLocationEN4llvm8ArrayRefISt4pairIPNS_14IdentifierInfoES1_EEENS_6Module18NameVisibilityKindEb'/>
