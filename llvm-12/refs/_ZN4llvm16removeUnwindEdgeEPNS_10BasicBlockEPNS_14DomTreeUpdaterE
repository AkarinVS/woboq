<dec f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='363' type='void llvm::removeUnwindEdge(llvm::BasicBlock * BB, llvm::DomTreeUpdater * DTU = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='357'>/// Replace &apos;BB&apos;s terminator with one that does not have an unwind successor
/// block. Rewrites `invoke` to `call`, etc. Updates any PHIs in unwind
/// successor.
///
/// \param BB  Block whose terminator will be replaced.  Its terminator must
///            have an unwind successor.</doc>
<use f='llvm/llvm/lib/CodeGen/WinEHPrepare.cpp' l='984' u='c' c='_ZN12_GLOBAL__N_112WinEHPrepare29removeImplausibleInstructionsERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/CodeGen/WinEHPrepare.cpp' l='1018' u='c' c='_ZN12_GLOBAL__N_112WinEHPrepare29removeImplausibleInstructionsERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PruneEH.cpp' l='190' u='c' c='_ZL16SimplifyFunctionPN4llvm8FunctionERNS_16CallGraphUpdaterE'/>
<def f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2350' ll='2384' type='void llvm::removeUnwindEdge(llvm::BasicBlock * BB, llvm::DomTreeUpdater * DTU = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4168' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt20simplifyCommonResumeEPN4llvm10ResumeInstE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4209' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt20simplifySingleResumeEPN4llvm10ResumeInstE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4337' u='c' c='_ZL18removeEmptyCleanupPN4llvm17CleanupReturnInstEPNS_14DomTreeUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4572' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt19simplifyUnreachableEPN4llvm15UnreachableInstE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4580' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt19simplifyUnreachableEPN4llvm15UnreachableInstE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4614' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt19simplifyUnreachableEPN4llvm15UnreachableInstE'/>
