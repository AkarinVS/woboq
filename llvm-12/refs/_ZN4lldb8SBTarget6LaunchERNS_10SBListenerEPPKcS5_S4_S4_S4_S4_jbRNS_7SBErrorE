<dec f='llvm/lldb/include/lldb/API/SBTarget.h' l='173' type='lldb::SBProcess lldb::SBTarget::Launch(lldb::SBListener &amp; listener, const char ** argv, const char ** envp, const char * stdin_path, const char * stdout_path, const char * stderr_path, const char * working_directory, uint32_t launch_flags, bool stop_at_entry, lldb::SBError &amp; error)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='53279' u='c' c='_ZL29_wrap_SBTarget_Launch__SWIG_0P7_objectlPS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBTarget.h' l='120'>/// Launch a new process.
  ///
  /// Launch a new process by spawning a new process using the
  /// target object&apos;s executable module&apos;s file as the file to launch.
  /// Arguments are given in \a argv, and the environment variables
  /// are in \a envp. Standard input and output files can be
  /// optionally re-directed to \a stdin_path, \a stdout_path, and
  /// \a stderr_path.
  ///
  /// \param[in] listener
  ///     An optional listener that will receive all process events.
  ///     If \a listener is valid then \a listener will listen to all
  ///     process events. If not valid, then this target&apos;s debugger
  ///     (SBTarget::GetDebugger()) will listen to all process events.
  ///
  /// \param[in] argv
  ///     The argument array.
  ///
  /// \param[in] envp
  ///     The environment array. If this is null, the default
  ///     environment values (provided through `settings set
  ///     target.env-vars`) will be used.
  ///
  /// \param[in] stdin_path
  ///     The path to use when re-directing the STDIN of the new
  ///     process. If all stdXX_path arguments are nullptr, a pseudo
  ///     terminal will be used.
  ///
  /// \param[in] stdout_path
  ///     The path to use when re-directing the STDOUT of the new
  ///     process. If all stdXX_path arguments are nullptr, a pseudo
  ///     terminal will be used.
  ///
  /// \param[in] stderr_path
  ///     The path to use when re-directing the STDERR of the new
  ///     process. If all stdXX_path arguments are nullptr, a pseudo
  ///     terminal will be used.
  ///
  /// \param[in] working_directory
  ///     The working directory to have the child process run in
  ///
  /// \param[in] launch_flags
  ///     Some launch options specified by logical OR&apos;ing
  ///     lldb::LaunchFlags enumeration values together.
  ///
  /// \param[in] stop_at_entry
  ///     If false do not stop the inferior at the entry point.
  ///
  /// \param[out] error
  ///     An error object. Contains the reason if there is some failure.
  ///
  /// \return
  ///      A process object for the newly created process.</doc>
<def f='llvm/lldb/source/API/SBTarget.cpp' l='322' ll='408' type='lldb::SBProcess lldb::SBTarget::Launch(lldb::SBListener &amp; listener, const char ** argv, const char ** envp, const char * stdin_path, const char * stdout_path, const char * stderr_path, const char * working_directory, uint32_t launch_flags, bool stop_at_entry, lldb::SBError &amp; error)'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='328' u='a' c='_ZN4lldb8SBTarget6LaunchERNS_10SBListenerEPPKcS5_S4_S4_S4_S4_jbRNS_7SBErrorE'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='328' u='a' c='_ZN4lldb8SBTarget6LaunchERNS_10SBListenerEPPKcS5_S4_S4_S4_S4_jbRNS_7SBErrorE'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='2478' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
