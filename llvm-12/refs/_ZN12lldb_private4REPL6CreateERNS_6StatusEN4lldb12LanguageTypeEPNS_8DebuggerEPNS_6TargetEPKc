<dec f='llvm/lldb/include/lldb/Expression/REPL.h' l='55' type='static lldb::REPLSP lldb_private::REPL::Create(lldb_private::Status &amp; Status, lldb::LanguageType language, lldb_private::Debugger * debugger, lldb_private::Target * target, const char * repl_options)'/>
<doc f='llvm/lldb/include/lldb/Expression/REPL.h' l='32'>/// Get a REPL with an existing target (or, failing that, a debugger to use),
  /// and (optional) extra arguments for the compiler.
  ///
  /// \param[out] Status
  ///     If this language is supported but the REPL couldn&apos;t be created, this
  ///     error is populated with the reason.
  ///
  /// \param[in] language
  ///     The language to create a REPL for.
  ///
  /// \param[in] debugger
  ///     If provided, and target is nullptr, the debugger to use when setting
  ///     up a top-level REPL.
  ///
  /// \param[in] target
  ///     If provided, the target to put the REPL inside.
  ///
  /// \param[in] repl_options
  ///     If provided, additional options for the compiler when parsing REPL
  ///     expressions.
  ///
  /// \return
  ///     The range of the containing object in the target process.</doc>
<use f='llvm/lldb/source/Core/Debugger.cpp' l='1612' u='c' c='_ZN12lldb_private8Debugger7RunREPLEN4lldb12LanguageTypeEPKc'/>
<def f='llvm/lldb/source/Expression/REPL.cpp' l='35' ll='50' type='static lldb::REPLSP lldb_private::REPL::Create(lldb_private::Status &amp; err, lldb::LanguageType language, lldb_private::Debugger * debugger, lldb_private::Target * target, const char * repl_options)'/>
<use f='llvm/lldb/source/Target/Target.cpp' l='246' u='c' c='_ZN12lldb_private6Target7GetREPLERNS_6StatusEN4lldb12LanguageTypeEPKcb'/>
