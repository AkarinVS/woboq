<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='429' type='llvm::ModulePassManager llvm::PassBuilder::buildLTOPreLinkDefaultPipeline(llvm::PassBuilder::OptimizationLevel Level)'/>
<use f='llvm/clang/lib/CodeGen/BackendUtil.cpp' l='1347' u='c' c='_ZN12_GLOBAL__N_118EmitAssemblyHelper30EmitAssemblyWithNewPassManagerEN5clang13BackendActionESt10unique_ptrIN4llvm17raw_pwrite_streamESt14default_deleteIS5_EE'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='417'>/// Build a pre-link, LTO-targeting default optimization pipeline to a pass
  /// manager.
  ///
  /// This adds the pre-link optimizations tuned to work well with a later LTO
  /// run. It works to minimize the IR which needs to be analyzed without
  /// making irreversible decisions which could be made better during the LTO
  /// run.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.</doc>
<def f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1540' ll='1547' type='llvm::ModulePassManager llvm::PassBuilder::buildLTOPreLinkDefaultPipeline(llvm::PassBuilder::OptimizationLevel Level)'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='2483' u='c' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementE'/>
