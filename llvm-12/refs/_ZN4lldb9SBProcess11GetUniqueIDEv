<dec f='llvm/lldb/include/lldb/API/SBProcess.h' l='149' type='uint32_t lldb::SBProcess::GetUniqueID()'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='44901' u='c' c='_ZL27_wrap_SBProcess_GetUniqueIDP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBProcess.h' l='138'>/// Gets the unique ID associated with this process object
  ///
  /// Unique IDs start at 1 and increment up with each new process
  /// instance. Since starting a process on a system might always
  /// create a process with the same process ID, there needs to be a
  /// way to tell two process instances apart.
  ///
  /// \return
  ///     Returns a non-zero integer ID if this object contains a
  ///     valid process object, zero if this object does not contain
  ///     a valid process object.</doc>
<def f='llvm/lldb/source/API/SBProcess.cpp' l='570' ll='578' type='uint32_t lldb::SBProcess::GetUniqueID()'/>
<use f='llvm/lldb/source/API/SBProcess.cpp' l='571' u='a' c='_ZN4lldb9SBProcess11GetUniqueIDEv'/>
<use f='llvm/lldb/source/API/SBProcess.cpp' l='571' u='a' c='_ZN4lldb9SBProcess11GetUniqueIDEv'/>
<use f='llvm/lldb/source/API/SBProcess.cpp' l='1367' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
