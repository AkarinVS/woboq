<dec f='llvm/polly/lib/External/isl/include/isl/schedule_node.h' l='114' type='isl_schedule_node * isl_schedule_node_group(isl_schedule_node * node, isl_id * group_id)'/>
<use f='llvm/polly/lib/External/isl/include/isl/isl-noexceptions.h' l='14300' u='c' c='_ZNK3isl12noexceptions13schedule_node5groupENS0_2idE'/>
<def f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='3192' ll='3286' type='isl_schedule_node * isl_schedule_node_group(isl_schedule_node * node, isl_id * group_id)'/>
<doc f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='3173'>/* Group the domain elements that reach &quot;node&quot; into instances
 * of a single statement with identifier &quot;group_id&quot;.
 * In particular, group the domain elements according to their
 * prefix schedule.
 *
 * That is, introduce an expansion node with as contraction
 * the prefix schedule (with the target space replaced by &quot;group_id&quot;)
 * and as expansion the inverse of this contraction (with its range
 * intersected with the domain elements that reach &quot;node&quot;).
 * The outer nodes are then modified to refer to the group instances
 * instead of the original domain elements.
 *
 * No instance of &quot;group_id&quot; is allowed to reach &quot;node&quot; prior
 * to the grouping.
 * No ancestor of &quot;node&quot; is allowed to be an extension node.
 *
 * Return a pointer to original node in tree, i.e., the child
 * of the newly introduced expansion node.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='10337' u='c' c='test_schedule_tree_group_1'/>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='10421' u='c' c='test_schedule_tree_group_2'/>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='10425' u='c' c='test_schedule_tree_group_2'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3770' u='c' c='group_statements'/>
