<dec f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='244' type='bool llvm::AArch64InstrInfo::isAssociativeAndCommutative(const llvm::MachineInstr &amp; Inst) const'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='242'>/// Return true when Inst is associative and commutative so that it can be
  /// reassociated.</doc>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1111' c='_ZNK4llvm15TargetInstrInfo27isAssociativeAndCommutativeERKNS_12MachineInstrE'/>
<def f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='4219' ll='4241' type='bool llvm::AArch64InstrInfo::isAssociativeAndCommutative(const llvm::MachineInstr &amp; Inst) const'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='4215'>// TODO: There are many more machine instruction opcodes to match:
//       1. Other data types (integer, vectors)
//       2. Other math / logic operations (xor, or)
//       3. Other forms of the same operation (intrinsics and other variants)</doc>
