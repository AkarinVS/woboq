<dec f='llvm/polly/include/polly/ScopBuilder.h' l='616' type='void polly::ScopBuilder::ensurePHIWrite(llvm::PHINode * PHI, polly::ScopStmt * IncomintStmt, llvm::BasicBlock * IncomingBlock, llvm::Value * IncomingValue, bool IsExitBlock)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1112' u='c' c='_ZN5polly11ScopBuilder16buildPHIAccessesEPNS_8ScopStmtEPN4llvm7PHINodeEPNS3_6RegionEb'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2597' ll='2632' type='void polly::ScopBuilder::ensurePHIWrite(llvm::PHINode * PHI, polly::ScopStmt * IncomingStmt, llvm::BasicBlock * IncomingBlock, llvm::Value * IncomingValue, bool IsExitBlock)'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='602'>/// Create a write MemoryAccess for the incoming block of a phi node.
  ///
  /// Each of the incoming blocks write their incoming value to be picked in the
  /// phi&apos;s block.
  ///
  /// @param PHI           PHINode under consideration.
  /// @param IncomingStmt  The statement to add the MemoryAccess to.
  /// @param IncomingBlock Some predecessor block.
  /// @param IncomingValue @p PHI&apos;s value when coming from @p IncomingBlock.
  /// @param IsExitBlock   When true, uses the .s2a alloca instead of the
  ///                      .phiops one. Required for values escaping through a
  ///                      PHINode in the SCoP region&apos;s exit block.
  /// @see addPHIReadAccess()
  /// @see MemoryKind</doc>
