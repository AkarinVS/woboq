<dec f='llvm/clang/include/clang/AST/Type.h' l='1158' type='1'/>
<doc f='llvm/clang/include/clang/AST/Type.h' l='1155'>/// The type would be trivial except that it is volatile-qualified. Types
    /// that fall into one of the other non-trivial cases may additionally be
    /// volatile-qualified.</doc>
<use f='llvm/clang/include/clang/AST/NonTrivialTypeVisitor.h' l='100' c='_ZN5clang17CopiedTypeVisitor13visitWithKindENS_8QualType17PrimitiveCopyKindES1_DpOTL0__'/>
<use f='llvm/clang/lib/AST/Type.cpp' l='2525' u='r' c='_ZNK5clang8QualType27isNonTrivialToPrimitiveCopyEv'/>
<use f='llvm/clang/lib/CodeGen/CGBlocks.cpp' l='1649' c='_ZL30computeCopyInfoForBlockCaptureRKN5clang9BlockDecl7CaptureENS_8QualTypeERKNS_11LangOptionsE'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='17288' u='r' c='_ZN5clang4Sema11ActOnFieldsEPNS_5ScopeENS_14SourceLocationEPNS_4DeclEN4llvm8ArrayRefIS5_EES3_S3_RKNS_20ParsedAttributesViewE'/>
