<dec f='llvm/polly/lib/External/isl/isl_tab.h' l='203' type='int isl_tab_detect_redundant(struct isl_tab * tab)'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='572' u='c' c='fuse'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='1551' u='c' c='add_selected_wraps_around_facet'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='1841' u='c' c='wrap_in_facet'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='4222' u='c' c='isl_map_coalesce'/>
<use f='llvm/polly/lib/External/isl/isl_convex_hull.c' l='77' u='c' c='isl_basic_map_remove_redundancies'/>
<use f='llvm/polly/lib/External/isl/isl_map_simplify.c' l='2586' u='c' c='uset_gist_full'/>
<use f='llvm/polly/lib/External/isl/isl_map_subtract.c' l='247' u='c' c='n_non_redundant'/>
<def f='llvm/polly/lib/External/isl/isl_tab.c' l='3261' ll='3313' type='int isl_tab_detect_redundant(struct isl_tab * tab)'/>
<doc f='llvm/polly/lib/External/isl/isl_tab.c' l='3248'>/* Check for (near) redundant constraints.
 * A constraint is redundant if it is non-negative and if
 * its minimal value (temporarily ignoring the non-negativity) is either
 *	- zero (in case of rational tableaus), or
 *	- strictly larger than -1 (in case of integer tableaus)
 *
 * We first mark all non-redundant and non-dead variables that
 * are not frozen and not obviously negatively unbounded.
 * Then we iterate over all marked variables if they can attain
 * any values smaller than zero or at most negative one.
 * If not, we mark the row as being redundant (assuming it hasn&apos;t
 * been detected as being obviously redundant in the mean time).
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_vertices.c' l='625' u='c' c='add_chamber'/>
<use f='llvm/polly/lib/External/isl/isl_vertices.c' l='700' u='c' c='create_todo'/>
<use f='llvm/polly/lib/External/isl/isl_vertices.c' l='906' u='c' c='compute_chambers'/>
<use f='llvm/polly/lib/External/isl/isl_vertices.c' l='939' u='c' c='compute_chambers'/>
