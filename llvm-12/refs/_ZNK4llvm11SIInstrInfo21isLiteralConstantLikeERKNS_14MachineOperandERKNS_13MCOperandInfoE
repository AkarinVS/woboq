<dec f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.h' l='791' type='bool llvm::SIInstrInfo::isLiteralConstantLike(const llvm::MachineOperand &amp; MO, const llvm::MCOperandInfo &amp; OpInfo) const'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.h' l='787'>// Returns true if this operand could potentially require a 32-bit literal
  // operand, but not necessarily. A FrameIndex for example could resolve to an
  // inline immediate value that will not require an additional 4-bytes; this
  // assumes that it will.</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp' l='455' u='c' c='_ZL16tryAddToFoldListRN4llvm15SmallVectorImplIN12_GLOBAL__N_113FoldCandidateEEEPNS_12MachineInstrEjPNS_14MachineOperandEPKNS_11SIInstrInfoE'/>
<def f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='3321' ll='3337' type='bool llvm::SIInstrInfo::isLiteralConstantLike(const llvm::MachineOperand &amp; MO, const llvm::MCOperandInfo &amp; OpInfo) const'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='4435' u='c' c='_ZNK4llvm11SIInstrInfo14isOperandLegalERKNS_12MachineInstrEjPKNS_14MachineOperandE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='4458' u='c' c='_ZNK4llvm11SIInstrInfo14isOperandLegalERKNS_12MachineInstrEjPKNS_14MachineOperandE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='4499' u='c' c='_ZNK4llvm11SIInstrInfo20legalizeOperandsVOP2ERNS_19MachineRegisterInfoERNS_12MachineInstrE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='4642' u='c' c='_ZNK4llvm11SIInstrInfo20legalizeOperandsVOP3ERNS_19MachineRegisterInfoERNS_12MachineInstrE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='6758' u='c' c='_ZNK4llvm11SIInstrInfo18getInstSizeInBytesERKNS_12MachineInstrE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='6765' u='c' c='_ZNK4llvm11SIInstrInfo18getInstSizeInBytesERKNS_12MachineInstrE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='6772' u='c' c='_ZNK4llvm11SIInstrInfo18getInstSizeInBytesERKNS_12MachineInstrE'/>
