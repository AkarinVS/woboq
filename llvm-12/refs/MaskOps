<def f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp' l='201' ll='210'/>
<use f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp' l='219' c='_ZL15matchAndOrChainPN4llvm5ValueER7MaskOps'/>
<use f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp' l='276' c='_ZL19foldAnyOrAllBitsSetRN4llvm11InstructionE'/>
<size>32</size>
<doc f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp' l='197'>/// This is used by foldAnyOrAllBitsSet() to capture a source value (Root) and
/// the bit indexes (Mask) needed by a masked compare. If we&apos;re matching a chain
/// of &apos;and&apos; ops, then we also need to capture the fact that we saw an
/// &quot;and X, 1&quot;, so that&apos;s an extra return value for that case.</doc>
