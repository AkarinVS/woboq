<dec f='llvm/llvm/include/llvm/Transforms/Scalar/Reassociate.h' l='125' type='llvm::Instruction * llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(llvm::Instruction * I, llvm::Instruction * Op, llvm::Value * OtherOp)'/>
<def f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2090' ll='2143' type='llvm::Instruction * llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(llvm::Instruction * I, llvm::Instruction * Op, llvm::Value * OtherOp)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2158' u='c' c='_ZN4llvm15ReassociatePass26canonicalizeNegFPConstantsEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2161' u='c' c='_ZN4llvm15ReassociatePass26canonicalizeNegFPConstantsEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2164' u='c' c='_ZN4llvm15ReassociatePass26canonicalizeNegFPConstantsEPNS_11InstructionE'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2087'>/// Given an fadd/fsub with an operand that is a one-use instruction
/// (the fadd/fsub), try to change negative floating-point constants into
/// positive constants to increase potential for reassociation and CSE.</doc>
