<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='461' type='bool llvm::isSafeToSpeculativelyExecute(const llvm::Value * V, const llvm::Instruction * CtxI = nullptr, const llvm::DominatorTree * DT = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='438'>/// Return true if the instruction does not have any effects besides
  /// calculating the result and does not have undefined behavior.
  ///
  /// This method never returns true for an instruction that returns true for
  /// mayHaveSideEffects; however, this method also does some other checks in
  /// addition. It checks for undefined behavior, like dividing by zero or
  /// loading from an invalid pointer (but not for undefined results, like a
  /// shift with a shift amount larger than the width of the result). It checks
  /// for malloc and alloca because speculatively executing them might cause a
  /// memory leak. It also returns false for instructions related to control
  /// flow, specifically terminators and PHI nodes.
  ///
  /// If the CtxI is specified this method performs context-sensitive analysis
  /// and returns true if it is safe to execute the instruction immediately
  /// before the CtxI.
  ///
  /// If the CtxI is NOT specified this method only looks at the instruction
  /// itself and its operands, so if this method returns true, it is safe to
  /// move the instruction as long as the correct dominance relationships for
  /// the operands and users hold.
  ///
  /// This method can return true for instructions that read memory;
  /// for such instructions, moving them may change the resulting value.</doc>
<use f='llvm/llvm/lib/Analysis/CodeMetrics.cpp' l='36' u='c' c='_ZL26appendSpeculatableOperandsPKN4llvm5ValueERNS_15SmallPtrSetImplIS2_EERNS_15SmallVectorImplIS2_EE'/>
<use f='llvm/llvm/lib/Analysis/IVUsers.cpp' l='183' u='c' c='_ZN4llvm7IVUsers12AddUsersImplEPNS_11InstructionERNS_15SmallPtrSetImplIPNS_4LoopEEE'/>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='86' u='c' c='_ZNK4llvm4Loop17makeLoopInvariantEPNS_11InstructionERbS2_PNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Analysis/LoopNestAnalysis.cpp' l='112' u='c' c='_ZN4llvm8LoopNest18arePerfectlyNestedERKNS_4LoopES3_RNS_15ScalarEvolutionE'/>
<use f='llvm/llvm/lib/Analysis/PHITransAddr.cpp' l='31' u='c' c='_ZL11CanPHITransPN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/PHITransAddr.cpp' l='188' u='c' c='_ZN4llvm12PHITransAddr19PHITranslateSubExprEPNS_5ValueEPNS_10BasicBlockES4_PKNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Analysis/PHITransAddr.cpp' l='381' u='c' c='_ZN4llvm12PHITransAddr26InsertPHITranslatedSubExprEPNS_5ValueEPNS_10BasicBlockES4_RKNS_13DominatorTreeERNS_15SmallVectorImplIPNS_11InstructionEEE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='509' u='c' c='_ZL18isEphemeralValueOfPKN4llvm11InstructionEPKNS_5ValueE'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4360' ll='4442' type='bool llvm::isSafeToSpeculativelyExecute(const llvm::Value * V, const llvm::Instruction * CtxI = nullptr, const llvm::DominatorTree * DT = nullptr)'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4445' u='c' c='_ZN4llvm20mayBeMemoryDependentERKNS_11InstructionE'/>
<use f='llvm/llvm/lib/CodeGen/Analysis.cpp' l='541' u='c' c='_ZN4llvm20isInTailCallPositionERKNS_8CallBaseERKNS_13TargetMachineE'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6388' u='c' c='_ZL17sinkSelectOperandPKN4llvm19TargetTransformInfoEPNS_5ValueE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp' l='1661' u='c' c='_ZN4llvm16InstCombinerImpl13visitCallInstERNS_8CallInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='1130' u='c' c='_ZN4llvm16InstCombinerImpl26foldSelectValueEquivalenceERNS_10SelectInstERNS_8ICmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1578' u='c' c='_ZN4llvm16InstCombinerImpl15foldVectorBinopERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp' l='504' u='c' c='_ZL11isHoistablePN4llvm11InstructionERNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='1264' u='c' c='_ZN4llvm3GVN14PerformLoadPREEPNS_8LoadInstERNS_11SmallVectorINS_3gvn21AvailableValueInBlockELj64EEERNS3_IPNS_10BasicBlockELj64EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='1267' u='c' c='_ZN4llvm3GVN14PerformLoadPREEPNS_8LoadInstERNS_11SmallVectorINS_3gvn21AvailableValueInBlockELj64EEERNS3_IPNS_10BasicBlockELj64EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='2558' u='c' c='_ZN4llvm3GVN16performScalarPREEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GuardWidening.cpp' l='468' u='c' c='_ZNK12_GLOBAL__N_117GuardWideningImpl13isAvailableAtEPKN4llvm5ValueEPKNS1_11InstructionERNS1_15SmallPtrSetImplIS7_EE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1440' u='c' c='_ZN4llvm17JumpThreadingPass30simplifyPartiallyRedundantLoadEPNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1787' u='c' c='_ZL30isSafeToExecuteUnconditionallyRN4llvm11InstructionEPKNS_13DominatorTreeEPKNS_4LoopEPKNS_14LoopSafetyInfoEPNS_25OptimizationRemarkEmitterEPKS0_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopFlatten.cpp' l='290' u='c' c='_ZL19checkOuterLoopInstsR11FlattenInfoRN4llvm15SmallPtrSetImplIPNS1_11InstructionEEEPKNS1_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp' l='1310' u='c' c='_ZN12_GLOBAL__N_110LoopReroll14DAGRootTracker8validateERNS0_16ReductionTrackerE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp' l='1342' u='c' c='_ZN12_GLOBAL__N_110LoopReroll14DAGRootTracker8validateERNS0_16ReductionTrackerE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp' l='1344' u='c' c='_ZN12_GLOBAL__N_110LoopReroll14DAGRootTracker8validateERNS0_16ReductionTrackerE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp' l='295' u='c' c='_ZN4llvm24SpeculativeExecutionPass22considerHoistingFromToERNS_10BasicBlockES2_'/>
<use f='llvm/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp' l='357' u='c' c='_ZN4llvm18isSafeToMoveBeforeERNS_11InstructionES1_RNS_13DominatorTreeEPKNS_17PostDominatorTreeEPNS_14DependenceInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/FlattenCFG.cpp' l='193' u='c' c='_ZN12_GLOBAL__N_113FlattenCFGOpt20FlattenParallelAndOrEPN4llvm10BasicBlockERNS1_9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/FlattenCFG.cpp' l='473' u='c' c='_ZN12_GLOBAL__N_113FlattenCFGOpt13MergeIfRegionEPN4llvm10BasicBlockERNS1_9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp' l='699' u='c' c='_ZL21shouldSpeculateInstrsN4llvm14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEES5_PNS_4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='404' u='c' c='_ZL19DominatesMergePointPN4llvm5ValueEPNS_10BasicBlockERNS_15SmallPtrSetImplIPNS_11InstructionEEERiRKNS_19TargetTransformInfoEj'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1518' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt21HoistThenElseCodeToIfEPN4llvm10BranchInstERKNS1_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1520' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt21HoistThenElseCodeToIfEPN4llvm10BranchInstERKNS1_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1991' u='c' c='_ZL30SinkCommonCodeFromPredecessorsPN4llvm10BasicBlockEPNS_14DomTreeUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='2153' u='c' c='_ZL30validateAndCostRequiredSelectsPN4llvm10BasicBlockES1_S1_RjRiRKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='2154' u='c' c='_ZL30validateAndCostRequiredSelectsPN4llvm10BasicBlockES1_S1_RjRiRKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='2270' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt22SpeculativelyExecuteBBEPN4llvm10BranchInstEPNS1_10BasicBlockERKNS1_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='3013' u='c' c='_ZN4llvm22FoldBranchToCommonDestEPNS_10BranchInstEPNS_14DomTreeUpdaterEPNS_16MemorySSAUpdaterEPKNS_19TargetTransformInfoEj'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='446' u='c' c='_ZN12_GLOBAL__N_113VectorCombine18foldExtractExtractERN4llvm11InstructionE'/>
