<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='543' type='llvm::Value * llvm::InstCombinerImpl::SimplifyAddWithRemainder(llvm::BinaryOperator &amp; I)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1067' ll='1095' type='llvm::Value * llvm::InstCombinerImpl::SimplifyAddWithRemainder(llvm::BinaryOperator &amp; I)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1353' u='c' c='_ZN4llvm16InstCombinerImpl8visitAddERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1065'>// Simplifies X % C0 + (( X / C0 ) % C1) * C0 to X % (C0 * C1), where (C0 * C1)
// does not overflow.</doc>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='538'>/// Tries to simplify add operations using the definition of remainder.
  ///
  /// The definition of remainder is X % C = X - (X / C ) * C. The add
  /// expression X % C0 + (( X / C0 ) % C1) * C0 can be simplified to
  /// X % (C0 * C1)</doc>
