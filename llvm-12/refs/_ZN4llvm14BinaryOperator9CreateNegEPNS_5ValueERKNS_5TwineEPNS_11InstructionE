<dec f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='378' type='static llvm::BinaryOperator * llvm::BinaryOperator::CreateNeg(llvm::Value * Op, const llvm::Twine &amp; Name = &quot;&quot;, llvm::Instruction * InsertBefore = nullptr)'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='373'>/// Helper functions to construct and inspect unary operations (NEG and NOT)
  /// via binary operators SUB and XOR:
  ///
  /// Create the NEG and NOT instructions out of SUB and XOR instructions.
  ///</doc>
<use f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='1632' u='c' c='_ZN4llvm13IRBuilderBase9CreateNegEPNS_5ValueERKNS_5TwineEbb'/>
<use f='llvm/llvm/include/llvm/IR/NoFolder.h' l='159' u='c' c='_ZNK4llvm8NoFolder9CreateNegEPNS_8ConstantEbb'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='2535' ll='2541' type='static llvm::BinaryOperator * llvm::BinaryOperator::CreateNeg(llvm::Value * Op, const llvm::Twine &amp; Name = &quot;&quot;, llvm::Instruction * InsertBefore = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1323' u='c' c='_ZN4llvm16InstCombinerImpl8visitAddERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1861' u='c' c='_ZN4llvm16InstCombinerImpl8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1865' u='c' c='_ZN4llvm16InstCombinerImpl8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1898' u='c' c='_ZN4llvm16InstCombinerImpl8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1915' u='c' c='_ZN4llvm16InstCombinerImpl8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1931' u='c' c='_ZN4llvm16InstCombinerImpl8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1940' u='c' c='_ZN4llvm16InstCombinerImpl8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp' l='820' u='c' c='_ZN4llvm16InstCombinerImpl13visitCallInstERNS_8CallInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='161' u='c' c='_ZN4llvm16InstCombinerImpl8visitMulERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='264' u='c' c='_ZN4llvm16InstCombinerImpl8visitMulERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='287' u='c' c='_ZN4llvm16InstCombinerImpl8visitMulERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1115' u='c' c='_ZN4llvm16InstCombinerImpl9visitSDivERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1134' u='c' c='_ZN4llvm16InstCombinerImpl9visitSDivERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1198' u='c' c='_ZN4llvm16InstCombinerImpl9visitSDivERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='1075' u='c' c='_ZL19canonicalizeAbsNabsRN4llvm10SelectInstERNS_8ICmpInstERNS_16InstCombinerImplE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='708' u='c' c='_ZL11processSRemPN4llvm14BinaryOperatorEPNS_13LazyValueInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='721' u='c' c='_ZL11processSRemPN4llvm14BinaryOperatorEPNS_13LazyValueInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='764' u='c' c='_ZL11processSDivPN4llvm14BinaryOperatorEPNS_13LazyValueInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='778' u='c' c='_ZL11processSDivPN4llvm14BinaryOperatorEPNS_13LazyValueInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='261' u='c' c='_ZL9CreateNegPN4llvm5ValueERKNS_5TwineEPNS_11InstructionES1_'/>
