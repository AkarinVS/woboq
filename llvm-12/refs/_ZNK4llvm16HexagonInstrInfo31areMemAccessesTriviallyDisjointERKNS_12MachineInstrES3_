<dec f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.h' l='291' type='bool llvm::HexagonInstrInfo::areMemAccessesTriviallyDisjoint(const llvm::MachineInstr &amp; MIa, const llvm::MachineInstr &amp; MIb) const'/>
<doc f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.h' l='286'>// Sometimes, it is possible for the target
  // to tell, even without aliasing information, that two MIs access different
  // memory addresses. This function returns true if two MIs access different
  // memory addresses and false otherwise.</doc>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp' l='826' u='c' c='_ZN12_GLOBAL__N_121HexagonExpandCondsets12canMoveMemToERN4llvm12MachineInstrES3_b'/>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1756' c='_ZNK4llvm15TargetInstrInfo31areMemAccessesTriviallyDisjointERKNS_12MachineInstrES3_'/>
<def f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='1898' ll='1953' type='bool llvm::HexagonInstrInfo::areMemAccessesTriviallyDisjoint(const llvm::MachineInstr &amp; MIa, const llvm::MachineInstr &amp; MIb) const'/>
<doc f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='1894'>// Inspired by this pair:
//  %r13 = L2_loadri_io %r29, 136; mem:LD4[FixedStack0]
//  S2_storeri_io %r29, 132, killed %r1; flags:  mem:ST4[FixedStack1]
// Currently AA considers the addresses in these instructions to be aliasing.</doc>
