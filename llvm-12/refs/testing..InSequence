<def f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-spec-builders.h' l='662' ll='670'/>
<use f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-spec-builders.h' l='669' c='_ZN7testing10InSequenceC1ERKS0_'/>
<use f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-spec-builders.h' l='669' c='_ZN7testing10InSequenceaSERKS0_'/>
<size>1</size>
<doc f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-spec-builders.h' l='638'>// An object of this type causes all EXPECT_CALL() statements
// encountered in its scope to be put in an anonymous sequence.  The
// work is done in the constructor and destructor.  You should only
// create an InSequence object on the stack.
//
// The sole purpose for this class is to support easy definition of
// sequential expectations, e.g.
//
//   {
//     InSequence dummy;  // The name of the object doesn&apos;t matter.
//
//     // The following expectations must match in the order they appear.
//     EXPECT_CALL(a, Bar())...;
//     EXPECT_CALL(a, Baz())...;
//     ...
//     EXPECT_CALL(b, Xyz())...;
//   }
//
// You can create InSequence objects in multiple threads, as long as
// they are used to affect different mock objects.  The idea is that
// each thread can create and set up its own mocks as if it&apos;s the only
// thread.  However, for clarity of your tests we recommend you to set
// up mocks in the main thread unless you have a good reason not to do
// so.</doc>
<fun r='_ZN7testing10InSequenceC1Ev'/>
<fun r='_ZN7testing10InSequenceD1Ev'/>
<mbr r='testing::InSequence::sequence_created_' o='0' t='bool'/>
<fun r='_ZN7testing10InSequenceC1ERKS0_'/>
<use f='llvm/lldb/unittests/Host/NativeProcessProtocolTest.cpp' l='25' c='_ZN44NativeProcessProtocolTest_SetBreakpoint_Test8TestBodyEv'/>
<use f='llvm/lldb/unittests/Host/NativeProcessProtocolTest.cpp' l='50' c='_ZN53NativeProcessProtocolTest_SetBreakpointFailWrite_Test8TestBodyEv'/>
<use f='llvm/lldb/unittests/Host/NativeProcessProtocolTest.cpp' l='65' c='_ZN54NativeProcessProtocolTest_SetBreakpointFailVerify_Test8TestBodyEv'/>
<size>1</size>
<use f='llvm/llvm/unittests/CodeGen/AsmPrinterDwarfTest.cpp' l='332' c='_ZN12_GLOBAL__N_151AsmPrinterEmitDwarfUnitLengthAsIntTest_DWARF64_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/CodeGen/AsmPrinterDwarfTest.cpp' l='368' c='_ZN12_GLOBAL__N_156AsmPrinterEmitDwarfUnitLengthAsHiLoDiffTest_DWARF64_Test8TestBodyEv'/>
<size>1</size>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='334' c='_ZN12_GLOBAL__N_130LoopPassManagerTest_Basic_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='477' c='_ZN12_GLOBAL__N_161LoopPassManagerTest_ModulePassInvalidationOfLoopAnalyses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='569' c='_ZN12_GLOBAL__N_154LoopPassManagerTest_InvalidationOfBundledAnalyses_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='712' c='_ZN12_GLOBAL__N_145LoopPassManagerTest_IndirectInvalidation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='810' c='_ZN12_GLOBAL__N_154LoopPassManagerTest_IndirectOuterPassInvalidation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='951' c='_ZN12_GLOBAL__N_143LoopPassManagerTest_LoopChildInsertion_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='1154' c='_ZN12_GLOBAL__N_142LoopPassManagerTest_LoopPeerInsertion_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='1443' c='_ZN12_GLOBAL__N_137LoopPassManagerTest_LoopDeletion_Test8TestBodyEv'/>
<size>1</size>
