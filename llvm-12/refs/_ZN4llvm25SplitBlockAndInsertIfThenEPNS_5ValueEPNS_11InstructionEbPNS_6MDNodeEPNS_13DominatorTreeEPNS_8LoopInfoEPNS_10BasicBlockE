<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='404' type='llvm::Instruction * llvm::SplitBlockAndInsertIfThen(llvm::Value * Cond, llvm::Instruction * SplitBefore, bool Unreachable, llvm::MDNode * BranchWeights, llvm::DominatorTree * DT, llvm::LoopInfo * LI = nullptr, llvm::BasicBlock * ThenBlock = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='381'>/// Split the containing block at the specified instruction - everything before
/// SplitBefore stays in the old basic block, and the rest of the instructions
/// in the BB are moved to a new block. The two blocks are connected by a
/// conditional branch (with value of Cmp being the condition).
/// Before:
///   Head
///   SplitBefore
///   Tail
/// After:
///   Head
///   if (Cond)
///     ThenBlock
///   SplitBefore
///   Tail
///
/// If \p ThenBlock is not specified, a new block will be created for it.
/// If \p Unreachable is true, the newly created block will end with
/// UnreachableInst, otherwise it branches to Tail.
/// Returns the NewBasicBlock&apos;s terminator.
///
/// Updates DT and LI if given.
///
/// FIXME: deprecated, switch to the DomTreeUpdater-based one.</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUAtomicOptimizer.cpp' l='436' u='c' c='_ZNK12_GLOBAL__N_121AMDGPUAtomicOptimizer14optimizeAtomicERN4llvm11InstructionENS1_13AtomicRMWInst5BinOpEjb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUAtomicOptimizer.cpp' l='571' u='c' c='_ZNK12_GLOBAL__N_121AMDGPUAtomicOptimizer14optimizeAtomicERN4llvm11InstructionENS1_13AtomicRMWInst5BinOpEjb'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp' l='1464' u='c' c='_ZN12_GLOBAL__N_113DFSanFunction14combineShadowsEPN4llvm5ValueES3_PNS1_11InstructionE'/>
<def f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='1204' ll='1213' type='llvm::Instruction * llvm::SplitBlockAndInsertIfThen(llvm::Value * Cond, llvm::Instruction * SplitBefore, bool Unreachable, llvm::MDNode * BranchWeights, llvm::DominatorTree * DT, llvm::LoopInfo * LI = nullptr, llvm::BasicBlock * ThenBlock = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp' l='491' u='c' c='_ZN12_GLOBAL__N_118LibCallsShrinkWrap12shrinkWrapCIEPN4llvm8CallInstEPNS1_5ValueE'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='635' u='c' c='_ZN5polly14BlockGenerator28generateConditionalExecutionERNS_8ScopStmtERKN3isl12noexceptions3setEN4llvm9StringRefERKSt8functionIFvvEE'/>
