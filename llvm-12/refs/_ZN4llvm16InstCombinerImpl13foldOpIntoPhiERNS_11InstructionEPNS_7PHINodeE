<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='602' type='llvm::Instruction * llvm::InstCombinerImpl::foldOpIntoPhi(llvm::Instruction &amp; I, llvm::PHINode * PN)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1838' u='c' c='_ZN4llvm16InstCombinerImpl8visitSubERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='599'>/// Given a binary operator, cast instruction, or select which has a PHI node
  /// as operand #0, see if we can fold the instruction into the PHI (which is
  /// only possible if all operands to the PHI are constants).</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='318' u='c' c='_ZN4llvm16InstCombinerImpl20commonCastTransformsERNS_8CastInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='3229' u='c' c='_ZN4llvm16InstCombinerImpl30foldICmpInstWithConstantNotIntERNS_8ICmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='6209' u='c' c='_ZN4llvm16InstCombinerImpl13visitFCmpInstERNS_8FCmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1407' u='c' c='_ZN4llvm16InstCombinerImpl20commonIRemTransformsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='2877' u='c' c='_ZN4llvm16InstCombinerImpl15visitSelectInstERNS_10SelectInstE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1056' ll='1209' type='llvm::Instruction * llvm::InstCombinerImpl::foldOpIntoPhi(llvm::Instruction &amp; I, llvm::PHINode * PN)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1219' u='c' c='_ZN4llvm16InstCombinerImpl24foldBinOpIntoSelectOrPhiERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='3469' u='c' c='_ZN4llvm16InstCombinerImpl11visitFreezeERNS_10FreezeInstE'/>
