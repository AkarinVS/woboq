<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='560' type='llvm::BasicBlock * llvm::CreateControlFlowHub(llvm::DomTreeUpdater * DTU, SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; GuardBlocks, const SetVector&lt;llvm::BasicBlock *&gt; &amp; Predecessors, const SetVector&lt;llvm::BasicBlock *&gt; &amp; Successors, const llvm::StringRef Prefix)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='491'>/// Given a set of incoming and outgoing blocks, create a &quot;hub&quot; such that every
/// edge from an incoming block InBB to an outgoing block OutBB is now split
/// into two edges, one from InBB to the hub and another from the hub to
/// OutBB. The hub consists of a series of guard blocks, one for each outgoing
/// block. Each guard block conditionally branches to the corresponding outgoing
/// block, or the next guard block in the chain. These guard blocks are returned
/// in the argument vector.
///
/// Since the control flow edges from InBB to OutBB have now been replaced, the
/// function also updates any PHINodes in OutBB. For each such PHINode, the
/// operands corresponding to incoming blocks are moved to a new PHINode in the
/// hub, and the hub is made an operand of the original PHINode.
///
/// Input CFG:
/// ----------
///
///                    Def
///                     |
///                     v
///           In1      In2
///            |        |
///            |        |
///            v        v
///  Foo ---&gt; Out1     Out2
///                     |
///                     v
///                    Use
///
///
/// Create hub: Incoming = {In1, In2}, Outgoing = {Out1, Out2}
/// ----------------------------------------------------------
///
///             Def
///              |
///              v
///  In1        In2          Foo
///   |    Hub   |            |
///   |    + - - | - - +      |
///   |    &apos;     v     &apos;      V
///   +------&gt; Guard1 -----&gt; Out1
///        &apos;     |     &apos;
///        &apos;     v     &apos;
///        &apos;   Guard2 -----&gt; Out2
///        &apos;           &apos;      |
///        + - - - - - +      |
///                           v
///                          Use
///
/// Limitations:
/// -----------
/// 1. This assumes that all terminators in the CFG are direct branches (the
///    &quot;br&quot; instruction). The presence of any other control flow such as
///    indirectbr, switch or callbr will cause an assert.
///
/// 2. The updates to the PHINodes are not sufficient to restore SSA
///    form. Consider a definition Def, its use Use, incoming block In2 and
///    outgoing block Out2, such that:
///    a. In2 is reachable from D or contains D.
///    b. U is reachable from Out2 or is contained in Out2.
///    c. U is not a PHINode if U is contained in Out2.
///
///    Clearly, Def dominates Out2 since the program is valid SSA. But when the
///    hub is introduced, there is a new path through the hub along which Use is
///    reachable from entry without passing through Def, and SSA is no longer
///    valid. To fix this, we need to look at all the blocks post-dominated by
///    the hub on the one hand, and dominated by Out2 on the other. This is left
///    for the caller to accomplish, since each specific use of this function
///    may have additional information which simplifies this fixup. For example,
///    see restoreSSA() in the UnifyLoopExits pass.</doc>
<def f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='1524' ll='1579' type='llvm::BasicBlock * llvm::CreateControlFlowHub(llvm::DomTreeUpdater * DTU, SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; GuardBlocks, const BBSetVector &amp; Incoming, const BBSetVector &amp; Outgoing, const llvm::StringRef Prefix)'/>
<use f='llvm/llvm/lib/Transforms/Utils/FixIrreducible.cpp' l='189' u='c' c='_ZL25createNaturalLoopInternalRN4llvm8LoopInfoERNS_13DominatorTreeEPNS_4LoopERNS_9SetVectorIPNS_10BasicBlockESt6vectorIS8_SaIS8_EENS_8DenseSetIS8_NS_19200445'/>
<use f='llvm/llvm/lib/Transforms/Utils/UnifyLoopExits.cpp' l='182' u='c' c='_ZL14unifyLoopExitsRN4llvm13DominatorTreeERNS_8LoopInfoEPNS_4LoopE'/>
