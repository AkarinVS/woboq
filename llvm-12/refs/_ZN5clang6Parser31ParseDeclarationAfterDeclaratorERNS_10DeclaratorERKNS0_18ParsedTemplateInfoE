<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2327' type='clang::Decl * clang::Parser::ParseDeclarationAfterDeclarator(clang::Declarator &amp; D, const clang::Parser::ParsedTemplateInfo &amp; TemplateInfo = clang::Parser::ParsedTemplateInfo())'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='2087' u='c' c='_ZN5clang6Parser14ParseDeclGroupERNS_15ParsingDeclSpecENS_17DeclaratorContextEPNS_14SourceLocationEPNS0_12ForRangeInitE'/>
<def f='llvm/clang/lib/Parse/ParseDecl.cpp' l='2155' ll='2161' type='clang::Decl * clang::Parser::ParseDeclarationAfterDeclarator(clang::Declarator &amp; D, const clang::Parser::ParsedTemplateInfo &amp; TemplateInfo = clang::Parser::ParsedTemplateInfo())'/>
<doc f='llvm/clang/lib/Parse/ParseDecl.cpp' l='2133'>/// Parse &apos;declaration&apos; after parsing &apos;declaration-specifiers
/// declarator&apos;. This method parses the remainder of the declaration
/// (including any attributes or initializer, among other things) and
/// finalizes the declaration.
///
///       init-declarator: [C99 6.7]
///         declarator
///         declarator &apos;=&apos; initializer
/// [GNU]   declarator simple-asm-expr[opt] attributes[opt]
/// [GNU]   declarator simple-asm-expr[opt] attributes[opt] &apos;=&apos; initializer
/// [C++]   declarator initializer[opt]
///
/// [C++] initializer:
/// [C++]   &apos;=&apos; initializer-clause
/// [C++]   &apos;(&apos; expression-list &apos;)&apos;
/// [C++0x] &apos;=&apos; &apos;default&apos;                                                [TODO]
/// [C++0x] &apos;=&apos; &apos;delete&apos;
/// [C++0x] braced-init-list
///
/// According to the standard grammar, =default and =delete are function
/// definitions, but that definitely doesn&apos;t fit with the parser here.
///</doc>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='330' u='c' c='_ZN5clang6Parser35ParseSingleDeclarationAfterTemplateENS_17DeclaratorContextERKNS0_18ParsedTemplateInfoERNS_21ParsingDeclRAIIObjectERNS_14SourceLocati9492424'/>
