<dec f='llvm/lldb/include/lldb/Target/Target.h' l='682' type='lldb::BreakpointSP lldb_private::Target::CreateBreakpoint(const lldb_private::FileSpecList * containingModules, const lldb_private::FileSpecList * containingSourceFiles, const char ** func_names, size_t num_names, lldb::FunctionNameType func_name_type_mask, lldb::LanguageType language, lldb::addr_t offset, lldb_private::LazyBool skip_prologue, bool internal, bool request_hardware)'/>
<doc f='llvm/lldb/include/lldb/Target/Target.h' l='677'>// This is the same as the func_name breakpoint except that you can specify a
  // vector of names.  This is cheaper than a regular expression breakpoint in
  // the case where you just want to set a breakpoint on a set of names you
  // already know. func_name_type_mask is or&apos;ed values from the
  // FunctionNameType enum.</doc>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='956' u='c' c='_ZN4lldb8SBTarget23BreakpointCreateByNamesEPPKcjjNS_12LanguageTypeEmRKNS_14SBFileSpecListES7_'/>
<use f='llvm/lldb/source/Plugins/Platform/MacOSX/PlatformDarwin.cpp' l='1191' u='c' c='_ZN14PlatformDarwin27SetThreadCreationBreakpointERN12lldb_private6TargetE'/>
<def f='llvm/lldb/source/Target/Target.cpp' l='470' ll='498' type='lldb::BreakpointSP lldb_private::Target::CreateBreakpoint(const lldb_private::FileSpecList * containingModules, const lldb_private::FileSpecList * containingSourceFiles, const char ** func_names, size_t num_names, lldb::FunctionNameType func_name_type_mask, lldb::LanguageType language, lldb::addr_t offset, lldb_private::LazyBool skip_prologue, bool internal, bool hardware)'/>
