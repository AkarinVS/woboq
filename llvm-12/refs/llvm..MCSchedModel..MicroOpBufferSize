<dec f='llvm/llvm/include/llvm/MC/MCSchedule.h' l='273' type='unsigned int'/>
<use f='llvm/llvm/include/llvm/MC/MCSchedule.h' l='333' u='r' c='_ZNK4llvm12MCSchedModel12isOutOfOrderEv'/>
<offset>32</offset>
<doc f='llvm/llvm/include/llvm/MC/MCSchedule.h' l='259'>// MicroOpBufferSize is the number of micro-ops that the processor may buffer
  // for out-of-order execution.
  //
  // &quot;0&quot; means operations that are not ready in this cycle are not considered
  // for scheduling (they go in the pending queue). Latency is paramount. This
  // may be more efficient if many instructions are pending in a schedule.
  //
  // &quot;1&quot; means all instructions are considered for scheduling regardless of
  // whether they are ready in this cycle. Latency still causes issue stalls,
  // but we balance those stalls against other heuristics.
  //
  // &quot;&gt; 1&quot; means the processor is out-of-order. This is a machine independent
  // estimate of highly machine specific characteristics such as the register
  // renaming pool and reorder buffer.</doc>
<use f='llvm/llvm/include/llvm/CodeGen/TargetSchedule.h' l='161' u='r' c='_ZNK4llvm16TargetSchedModel20getMicroOpBufferSizeEv'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp' l='24' u='r' c='_ZN4llvm3mca17RetireControlUnitC1ERKNS_12MCSchedModelE'/>
<use f='llvm/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp' l='25' u='r' c='_ZN4llvm3mca17RetireControlUnitC1ERKNS_12MCSchedModelE'/>
<use f='llvm/llvm/tools/llvm-mca/Views/RetireControlUnitStatistics.cpp' l='23' u='r' c='_ZN4llvm3mca27RetireControlUnitStatisticsC1ERKNS_12MCSchedModelE'/>
<use f='llvm/llvm/tools/llvm-mca/Views/TimelineView.cpp' l='168' u='r' c='_ZNK4llvm3mca12TimelineView18printWaitTimeEntryERNS_21formatted_raw_ostreamERKNS1_13WaitTimeEntryEjj'/>
