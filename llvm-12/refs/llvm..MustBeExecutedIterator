<def f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='272' ll='376'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='284' c='_ZN4llvm22MustBeExecutedIteratorC1ERKS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='288' c='_ZN4llvm22MustBeExecutedIteratorC1EOS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='292' c='_ZN4llvm22MustBeExecutedIteratoraSEOS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='292' c='_ZN4llvm22MustBeExecutedIteratoraSEOS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='306' c='_ZN4llvm22MustBeExecutedIteratorppEv'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='311' c='_ZN4llvm22MustBeExecutedIteratorppEi'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='312' c='_ZN4llvm22MustBeExecutedIteratorppEi'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='320' c='_ZNK4llvm22MustBeExecutedIteratoreqERKS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='324' c='_ZNK4llvm22MustBeExecutedIteratorneERKS0_'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='418'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='419'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='497' c='_ZN4llvm29MustBeExecutedContextExplorer32getMustBeExecutedNextInstructionERNS_22MustBeExecutedIteratorEPKNS_11InstructionE'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='506' c='_ZN4llvm29MustBeExecutedContextExplorer32getMustBeExecutedPrevInstructionERNS_22MustBeExecutedIteratorEPKNS_11InstructionE'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='539'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='543'/>
<size>56</size>
<doc f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='182'>/// Must be executed iterators visit stretches of instructions that are
/// guaranteed to be executed together, potentially with other instruction
/// executed in-between.
///
/// Given the following code, and assuming all statements are single
/// instructions which transfer execution to the successor (see
/// isGuaranteedToTransferExecutionToSuccessor), there are two possible
/// outcomes. If we start the iterator at A, B, or E, we will visit only A, B,
/// and E. If we start at C or D, we will visit all instructions A-E.
///
/// \code
///   A;
///   B;
///   if (...) {
///     C;
///     D;
///   }
///   E;
/// \endcode
///
///
/// Below is the example extneded with instructions F and G. Now we assume F
/// might not transfer execution to it&apos;s successor G. As a result we get the
/// following visit sets:
///
/// Start Instruction   | Visit Set
/// A                   | A, B,       E, F
///    B                | A, B,       E, F
///       C             | A, B, C, D, E, F
///          D          | A, B, C, D, E, F
///             E       | A, B,       E, F
///                F    | A, B,       E, F
///                   G | A, B,       E, F, G
///
///
/// \code
///   A;
///   B;
///   if (...) {
///     C;
///     D;
///   }
///   E;
///   F;  // Might not transfer execution to its successor G.
///   G;
/// \endcode
///
///
/// A more complex example involving conditionals, loops, break, and continue
/// is shown below. We again assume all instructions will transmit control to
/// the successor and we assume we can prove the inner loop to be finite. We
/// omit non-trivial branch conditions as the exploration is oblivious to them.
/// Constant branches are assumed to be unconditional in the CFG. The resulting
/// visist sets are shown in the table below.
///
/// \code
///   A;
///   while (true) {
///     B;
///     if (...)
///       C;
///     if (...)
///       continue;
///     D;
///     if (...)
///       break;
///     do {
///       if (...)
///         continue;
///       E;
///     } while (...);
///     F;
///   }
///   G;
/// \endcode
///
/// Start Instruction    | Visit Set
/// A                    | A, B
///    B                 | A, B
///       C              | A, B, C
///          D           | A, B,    D
///             E        | A, B,    D, E, F
///                F     | A, B,    D,    F
///                   G  | A, B,    D,       G
///
///
/// Note that the examples show optimal visist sets but not necessarily the ones
/// derived by the explorer depending on the available CFG analyses (see
/// MustBeExecutedContextExplorer). Also note that we, depending on the options,
/// the visit set can contain instructions from other functions.</doc>
<fun r='_ZN4llvm22MustBeExecutedIteratorC1ERKS0_'/>
<fun r='_ZN4llvm22MustBeExecutedIteratorC1EOS0_'/>
<fun r='_ZN4llvm22MustBeExecutedIteratoraSEOS0_'/>
<fun r='_ZN4llvm22MustBeExecutedIteratorD1Ev'/>
<fun r='_ZN4llvm22MustBeExecutedIteratorppEv'/>
<fun r='_ZN4llvm22MustBeExecutedIteratorppEi'/>
<fun r='_ZNK4llvm22MustBeExecutedIteratoreqERKS0_'/>
<fun r='_ZNK4llvm22MustBeExecutedIteratorneERKS0_'/>
<fun r='_ZN4llvm22MustBeExecutedIteratordeEv'/>
<fun r='_ZNK4llvm22MustBeExecutedIterator14getCurrentInstEv'/>
<fun r='_ZNK4llvm22MustBeExecutedIterator5countEPKNS_11InstructionE'/>
<fun r='_ZN4llvm22MustBeExecutedIteratorC1ERNS_29MustBeExecutedContextExplorerEPKNS_11InstructionE'/>
<fun r='_ZN4llvm22MustBeExecutedIterator5resetEPKNS_11InstructionE'/>
<fun r='_ZN4llvm22MustBeExecutedIterator16resetInstructionEPKNS_11InstructionE'/>
<fun r='_ZN4llvm22MustBeExecutedIterator7advanceEv'/>
<mbr r='llvm::MustBeExecutedIterator::Visited' o='0' t='llvm::MustBeExecutedIterator::VisitedSetTy'/>
<mbr r='llvm::MustBeExecutedIterator::Explorer' o='192' t='llvm::MustBeExecutedIterator::ExplorerTy &amp;'/>
<mbr r='llvm::MustBeExecutedIterator::CurInst' o='256' t='const llvm::Instruction *'/>
<mbr r='llvm::MustBeExecutedIterator::Head' o='320' t='const llvm::Instruction *'/>
<mbr r='llvm::MustBeExecutedIterator::Tail' o='384' t='const llvm::Instruction *'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='710' c='_ZN4llvm29MustBeExecutedContextExplorer32getMustBeExecutedNextInstructionERNS_22MustBeExecutedIteratorEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='767' c='_ZN4llvm29MustBeExecutedContextExplorer32getMustBeExecutedPrevInstructionERNS_22MustBeExecutedIteratorEPKNS_11InstructionE'/>
<size>56</size>
<fun r='_ZN4llvm22MustBeExecutedIteratorC1ERNS_29MustBeExecutedContextExplorerEPKNS_11InstructionE'/>
<fun r='_ZN4llvm22MustBeExecutedIterator5resetEPKNS_11InstructionE'/>
<fun r='_ZN4llvm22MustBeExecutedIterator16resetInstructionEPKNS_11InstructionE'/>
<fun r='_ZN4llvm22MustBeExecutedIterator7advanceEv'/>
