<dec f='llvm/lld/include/lld/Common/ErrorHandler.h' l='126' type='std::string lld::ErrorHandler::getLocation(const llvm::Twine &amp; msg)'/>
<def f='llvm/lld/Common/ErrorHandler.cpp' l='134' ll='169' type='std::string lld::ErrorHandler::getLocation(const llvm::Twine &amp; msg)'/>
<use f='llvm/lld/Common/ErrorHandler.cpp' l='193' u='c' c='_ZN3lld12ErrorHandler4warnERKN4llvm5TwineE'/>
<use f='llvm/lld/Common/ErrorHandler.cpp' l='220' u='c' c='_ZN3lld12ErrorHandler5errorERKN4llvm5TwineE'/>
<use f='llvm/lld/Common/ErrorHandler.cpp' l='223' u='c' c='_ZN3lld12ErrorHandler5errorERKN4llvm5TwineE'/>
<doc f='llvm/lld/Common/ErrorHandler.cpp' l='113'>// This is for --vs-diagnostics.
//
// Normally, lld&apos;s error message starts with argv[0]. Therefore, it usually
// looks like this:
//
//   ld.lld: error: ...
//
// This error message style is unfortunately unfriendly to Visual Studio
// IDE. VS interprets the first word of the first line as an error location
// and make it clickable, thus &quot;ld.lld&quot; in the above message would become a
// clickable text. When you click it, VS opens &quot;ld.lld&quot; executable file with
// a binary editor.
//
// As a workaround, we print out an error location instead of &quot;ld.lld&quot; if
// lld is running in VS diagnostics mode. As a result, error message will
// look like this:
//
//   src/foo.c(35): error: ...
//
// This function returns an error location string. An error location is
// extracted from an error message using regexps.</doc>
