<dec f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='725' type='llvm::CanonicalLoopInfo * llvm::OpenMPIRBuilder::createLoopSkeleton(llvm::DebugLoc DL, llvm::Value * TripCount, llvm::Function * F, llvm::BasicBlock * PreInsertBefore, llvm::BasicBlock * PostInsertBefore, const llvm::Twine &amp; Name = {})'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='709'>/// Create the control flow structure of a canonical OpenMP loop.
  ///
  /// The emitted loop will be disconnected, i.e. no edge to the loop&apos;s
  /// preheader and no terminator in the AfterBB. The OpenMPIRBuilder&apos;s
  /// IRBuilder location is not preserved.
  ///
  /// \param DL        DebugLoc used for the instructions in the skeleton.
  /// \param TripCount Value to be used for the trip count.
  /// \param F         Function in which to insert the BasicBlocks.
  /// \param PreInsertBefore  Where to insert BBs that execute before the body,
  ///                         typically the body itself.
  /// \param PostInsertBefore Where to insert BBs that execute after the body.
  /// \param Name      Base name used to derive BB
  ///                  and instruction names.
  ///
  /// \returns The CanonicalLoopInfo that represents the emitted loop.</doc>
<def f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='879' ll='948' type='llvm::CanonicalLoopInfo * llvm::OpenMPIRBuilder::createLoopSkeleton(llvm::DebugLoc DL, llvm::Value * TripCount, llvm::Function * F, llvm::BasicBlock * PreInsertBefore, llvm::BasicBlock * PostInsertBefore, const llvm::Twine &amp; Name = {})'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='957' u='c' c='_ZN4llvm15OpenMPIRBuilder19createCanonicalLoopERKNS0_19LocationDescriptionENS_12function_refIFvNS_13IRBuilderBase11InsertPointEPNS_5ValueEEEES8_RKNS_5TwineE'/>
<use f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='1318' u='c' c='_ZN4llvm15OpenMPIRBuilder9tileLoopsENS_8DebugLocENS_8ArrayRefIPNS_17CanonicalLoopInfoEEENS2_IPNS_5ValueEEE'/>
