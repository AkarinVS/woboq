<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='308' type='bool IRForTarget::RewritePersistentAlloc(llvm::Instruction * persistent_alloc)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='293'>/// A basic block-level pass to find all newly-declared persistent
  /// variables and register them with the ClangExprDeclMap.  This allows them
  /// to be materialized and dematerialized like normal external variables.
  /// Before transformation, these persistent variables look like normal
  /// locals, so they have an allocation. This pass excises these allocations
  /// and makes references look like external references where they will be
  /// resolved -- like all other external references -- by ResolveExternals().

  /// Handle a single allocation of a persistent variable
  ///
  /// \param[in] persistent_alloc
  ///     The allocation of the persistent variable.
  ///
  /// \return
  ///     True on success; false otherwise</doc>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1066' ll='1133' type='bool IRForTarget::RewritePersistentAlloc(llvm::Instruction * persistent_alloc)'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1166' u='c' c='_ZN11IRForTarget23RewritePersistentAllocsERN4llvm10BasicBlockE'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1065'>// This function does not report errors; its callers are responsible.</doc>
