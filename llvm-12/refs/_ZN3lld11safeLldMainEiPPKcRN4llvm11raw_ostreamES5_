<dec f='llvm/lld/include/lld/Common/Driver.h' l='27' type='lld::SafeReturn lld::safeLldMain(int argc, const char ** argv, llvm::raw_ostream &amp; stdoutOS, llvm::raw_ostream &amp; stderrOS)'/>
<doc f='llvm/lld/include/lld/Common/Driver.h' l='21'>// Generic entry point when using LLD as a library, safe for re-entry, supports
// crash recovery. Returns a general completion code and a boolean telling
// whether it can be called again. In some cases, a crash could corrupt memory
// and re-entry would not be possible anymore. Use exitLld() in that case to
// properly exit your application and avoid intermittent crashes on exit caused
// by cleanup.</doc>
<def f='llvm/lld/tools/lld/lld.cpp' l='170' ll='193' type='lld::SafeReturn lld::safeLldMain(int argc, const char ** argv, llvm::raw_ostream &amp; stdoutOS, llvm::raw_ostream &amp; stderrOS)'/>
<use f='llvm/lld/tools/lld/lld.cpp' l='222' u='c' c='main'/>
<doc f='llvm/lld/tools/lld/lld.cpp' l='169'>// Similar to lldMain except that exceptions are caught.</doc>
