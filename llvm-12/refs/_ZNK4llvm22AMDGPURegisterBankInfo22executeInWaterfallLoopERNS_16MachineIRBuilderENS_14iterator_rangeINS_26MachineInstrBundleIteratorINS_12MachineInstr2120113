<dec f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.h' l='56' type='bool llvm::AMDGPURegisterBankInfo::executeInWaterfallLoop(llvm::MachineIRBuilder &amp; B, iterator_range&lt;MachineBasicBlock::iterator&gt; Range, SmallSet&lt;llvm::Register, 4&gt; &amp; SGPROperandRegs, llvm::MachineRegisterInfo &amp; MRI) const'/>
<def f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='720' ll='1053' type='bool llvm::AMDGPURegisterBankInfo::executeInWaterfallLoop(llvm::MachineIRBuilder &amp; B, iterator_range&lt;MachineBasicBlock::iterator&gt; Range, SmallSet&lt;llvm::Register, 4&gt; &amp; SGPROperandRegs, llvm::MachineRegisterInfo &amp; MRI) const'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='1085' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo22executeInWaterfallLoopERNS_16MachineIRBuilderERNS_12MachineInstrERNS_19MachineRegisterInfoENS_8ArrayRefIjEE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='1504' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo23applyMappingSBufferLoadERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2776' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2905' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='702'>/// Legalize instruction \p MI where operands in \p OpIndices must be SGPRs. If
/// any of the required SGPR operands are VGPRs, perform a waterfall loop to
/// execute the instruction for each unique combination of values in all lanes
/// in the wave. The block will be split such that rest of the instructions are
/// moved to a new block.
///
/// Essentially performs this loop:
//
/// Save Execution Mask
/// For (Lane : Wavefront) {
///   Enable Lane, Disable all other lanes
///   SGPR = read SGPR value for current lane from VGPR
///   VGPRResult[Lane] = use_op SGPR
/// }
/// Restore Execution Mask
///
/// There is additional complexity to try for compare values to identify the
/// unique values used.</doc>
