<dec f='llvm/lldb/include/lldb/Core/Communication.h' l='340' type='void lldb_private::Communication::AppendBytesToCache(const uint8_t * src, size_t src_len, bool broadcast, lldb::ConnectionStatus status)'/>
<doc f='llvm/lldb/include/lldb/Core/Communication.h' l='322'>/// Append new bytes that get read from the read thread into the internal
  /// object byte cache. This will cause a \b eBroadcastBitReadThreadGotBytes
  /// event to be broadcast if \a broadcast is true.
  ///
  /// Subclasses can override this function in order to inspect the received
  /// data and check if a packet is available.
  ///
  /// Subclasses can also still call this function from the overridden method
  /// to allow the caching to correctly happen and suppress the broadcasting
  /// of the \a eBroadcastBitReadThreadGotBytes event by setting \a broadcast
  /// to false.
  ///
  /// \param[in] src
  ///     A source buffer that must be at least \a src_len bytes
  ///     long.
  ///
  /// \param[in] src_len
  ///     The number of bytes to append to the cache.</doc>
<def f='llvm/lldb/source/Core/Communication.cpp' l='270' ll='289' type='void lldb_private::Communication::AppendBytesToCache(const uint8_t * bytes, size_t len, bool broadcast, lldb::ConnectionStatus status)'/>
<use f='llvm/lldb/source/Core/Communication.cpp' l='324' u='c' c='_ZN12lldb_private13Communication10ReadThreadEPv'/>
<ovr f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunication.cpp' l='1288' c='_ZN12lldb_private18process_gdb_remote22GDBRemoteCommunication18AppendBytesToCacheEPKhmbN4lldb16ConnectionStatusE'/>
