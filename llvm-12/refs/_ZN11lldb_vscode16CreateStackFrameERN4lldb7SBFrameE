<dec f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='359' type='llvm::json::Value lldb_vscode::CreateStackFrame(lldb::SBFrame &amp; frame)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='342'>/// Create a &quot;StackFrame&quot; object for a LLDB frame object.
///
/// This function will fill in the following keys in the returned
/// object:
///   &quot;id&quot; - the stack frame ID as an integer
///   &quot;name&quot; - the function name as a string
///   &quot;source&quot; - source file information as a &quot;Source&quot; VSCode object
///   &quot;line&quot; - the source file line number as an integer
///   &quot;column&quot; - the source file column number as an integer
///
/// \param[in] frame
///     The LLDB stack frame to use when populating out the &quot;StackFrame&quot;
///     object.
///
/// \return
///     A &quot;StackFrame&quot; JSON object with that follows the formal JSON
///     definition outlined by Microsoft.</doc>
<def f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='732' ll='751' type='llvm::json::Value lldb_vscode::CreateStackFrame(lldb::SBFrame &amp; frame)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='676'>// &quot;StackFrame&quot;: {
//   &quot;type&quot;: &quot;object&quot;,
//   &quot;description&quot;: &quot;A Stackframe contains the source location.&quot;,
//   &quot;properties&quot;: {
//     &quot;id&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;An identifier for the stack frame. It must be unique
//                       across all threads. This id can be used to retrieve
//                       the scopes of the frame with the &apos;scopesRequest&apos; or
//                       to restart the execution of a stackframe.&quot;
//     },
//     &quot;name&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;description&quot;: &quot;The name of the stack frame, typically a method name.&quot;
//     },
//     &quot;source&quot;: {
//       &quot;$ref&quot;: &quot;#/definitions/Source&quot;,
//       &quot;description&quot;: &quot;The optional source of the frame.&quot;
//     },
//     &quot;line&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;The line within the file of the frame. If source is
//                       null or doesn&apos;t exist, line is 0 and must be ignored.&quot;
//     },
//     &quot;column&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;The column within the line. If source is null or
//                       doesn&apos;t exist, column is 0 and must be ignored.&quot;
//     },
//     &quot;endLine&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;An optional end line of the range covered by the
//                       stack frame.&quot;
//     },
//     &quot;endColumn&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;An optional end column of the range covered by the
//                       stack frame.&quot;
//     },
//     &quot;moduleId&quot;: {
//       &quot;type&quot;: [&quot;integer&quot;, &quot;string&quot;],
//       &quot;description&quot;: &quot;The module associated with this frame, if any.&quot;
//     },
//     &quot;presentationHint&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;enum&quot;: [ &quot;normal&quot;, &quot;label&quot;, &quot;subtle&quot; ],
//       &quot;description&quot;: &quot;An optional hint for how to present this frame in
//                       the UI. A value of &apos;label&apos; can be used to indicate
//                       that the frame is an artificial frame that is used
//                       as a visual label or separator. A value of &apos;subtle&apos;
//                       can be used to change the appearance of a frame in
//                       a &apos;subtle&apos; way.&quot;
//     }
//   },
//   &quot;required&quot;: [ &quot;id&quot;, &quot;name&quot;, &quot;line&quot;, &quot;column&quot; ]
// }</doc>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='2394' u='c' c='_ZN12_GLOBAL__N_118request_stackTraceERKN4llvm4json6ObjectE'/>
