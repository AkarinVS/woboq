<dec f='llvm/llvm/include/llvm/Analysis/CFG.h' l='35' type='void llvm::FindFunctionBackedges(const llvm::Function &amp; F, SmallVectorImpl&lt;std::pair&lt;const BasicBlock *, const BasicBlock *&gt; &gt; &amp; Result)'/>
<doc f='llvm/llvm/include/llvm/Analysis/CFG.h' l='30'>/// Analyze the specified function to find all of the loop backedges in the
/// function and return them.  This is a relatively cheap (compared to
/// computing dominators and loop info) analysis.
///
/// The output is added to Result, as pairs of &lt;from,to&gt; edge info.</doc>
<def f='llvm/llvm/lib/Analysis/CFG.cpp' l='34' ll='73' type='void llvm::FindFunctionBackedges(const llvm::Function &amp; F, SmallVectorImpl&lt;std::pair&lt;const BasicBlock *, const BasicBlock *&gt; &gt; &amp; Result)'/>
<doc f='llvm/llvm/lib/Analysis/CFG.cpp' l='29'>/// FindFunctionBackedges - Analyze the specified function to find all of the
/// loop backedges in the function and return them.  This is a relatively cheap
/// (compared to computing dominators and loop info) analysis.
///
/// The output is added to Result, as pairs of &lt;from,to&gt; edge info.</doc>
<use f='llvm/llvm/lib/ExecutionEngine/Orc/SpeculateAnalyses.cpp' l='246' u='c' c='_ZN4llvm3orc15SequenceBBQuery8queryCFGERNS_8FunctionERKNS_11SmallVectorIPKNS_10BasicBlockELj8EEE'/>
<use f='llvm/llvm/lib/Transforms/IPO/FunctionAttrs.cpp' l='1448' u='c' c='_ZL18functionWillReturnRKN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='611' u='c' c='_ZN4llvm17JumpThreadingPass15findLoopHeadersERNS_8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp' l='203' u='c' c='_ZL22iterativelySimplifyCFGRN4llvm8FunctionERKNS_19TargetTransformInfoEPNS_14DomTreeUpdaterERKNS_18SimplifyCFGOptionsE'/>
