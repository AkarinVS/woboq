<def f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='3004' ll='3037' type='void LaunchRunInTerminalTarget(llvm::opt::Arg &amp; target_arg, llvm::StringRef comm_file, char ** argv)'/>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='3057' u='c' c='main'/>
<doc f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='2985'>// If --launch-target is provided, this instance of lldb-vscode becomes a
// runInTerminal launcher. It will ultimately launch the program specified in
// the --launch-target argument, which is the original program the user wanted
// to debug. This is done in such a way that the actual debug adaptor can
// place breakpoints at the beginning of the program.
//
// The launcher will communicate with the debug adaptor using a fifo file in the
// directory specified in the --comm-file argument.
//
// Regarding the actual flow, this launcher will first notify the debug adaptor
// of its pid. Then, the launcher will be in a pending state waiting to be
// attached by the adaptor.
//
// Once attached and resumed, the launcher will exec and become the program
// specified by --launch-target, which is the original target the
// user wanted to run.
//
// In case of errors launching the target, a suitable error message will be
// emitted to the debug adaptor.</doc>
