<dec f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h' l='214' type='std::pair&lt;ProgramStateRef, ProgramStateRef&gt; clang::ento::ProgramState::assumeInclusiveRange(clang::ento::DefinedOrUnknownSVal Val, const llvm::APSInt &amp; From, const llvm::APSInt &amp; To) const'/>
<def f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h' l='696' ll='707' type='std::pair&lt;ProgramStateRef, ProgramStateRef&gt; clang::ento::ProgramState::assumeInclusiveRange(clang::ento::DefinedOrUnknownSVal Val, const llvm::APSInt &amp; From, const llvm::APSInt &amp; To) const'/>
<doc f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h' l='208'>/// Assumes given range both &quot;true&quot; and &quot;false&quot; for \p Val, and returns both
  /// corresponding states (respectively).
  ///
  /// This is more efficient than calling assume() twice. Note that one (but not
  /// both) of the returned states may be NULL.</doc>
<use f='llvm/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp' l='2480' u='c' c='_ZN5clang4ento10ExprEngine13processSwitchERNS0_17SwitchNodeBuilderE'/>
