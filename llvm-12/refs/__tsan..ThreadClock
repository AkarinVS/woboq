<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.h' l='63'/>
<def f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.h' l='124' ll='218'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl.h' l='401'/>
<use f='llvm/compiler-rt/lib/tsan/rtl/tsan_rtl.h' l='441'/>
<size>130088</size>
<doc f='llvm/compiler-rt/lib/tsan/rtl/tsan_clock.h' l='123'>// The clock that lives in threads.</doc>
<fun r='__tsan::ThreadClock::ThreadClock'/>
<fun r='__tsan::ThreadClock::get'/>
<fun r='__tsan::ThreadClock::set'/>
<fun r='__tsan::ThreadClock::set'/>
<fun r='__tsan::ThreadClock::tick'/>
<fun r='__tsan::ThreadClock::size'/>
<fun r='__tsan::ThreadClock::acquire'/>
<fun r='__tsan::ThreadClock::releaseStoreAcquire'/>
<fun r='__tsan::ThreadClock::release'/>
<fun r='__tsan::ThreadClock::acq_rel'/>
<fun r='__tsan::ThreadClock::ReleaseStore'/>
<fun r='__tsan::ThreadClock::ResetCached'/>
<fun r='__tsan::ThreadClock::NoteGlobalAcquire'/>
<fun r='__tsan::ThreadClock::DebugReset'/>
<fun r='__tsan::ThreadClock::DebugDump'/>
<smbr r='__tsan::ThreadClock::kDirtyTids' t='const __sanitizer::uptr'/>
<mbr r='__tsan::ThreadClock::tid_' o='0' t='const unsigned int'/>
<mbr r='__tsan::ThreadClock::reused_' o='32' t='const unsigned int'/>
<mbr r='__tsan::ThreadClock::last_acquire_' o='64' t='__sanitizer::u64'/>
<mbr r='__tsan::ThreadClock::global_acquire_' o='128' t='__sanitizer::atomic_uint64_t'/>
<mbr r='__tsan::ThreadClock::cached_idx_' o='192' t='__sanitizer::u32'/>
<mbr r='__tsan::ThreadClock::cached_size_' o='224' t='__sanitizer::u16'/>
<mbr r='__tsan::ThreadClock::cached_blocks_' o='240' t='__sanitizer::u16'/>
<mbr r='__tsan::ThreadClock::nclk_' o='256' t='__sanitizer::uptr'/>
<mbr r='__tsan::ThreadClock::clk_' o='320' t='__sanitizer::u64 [16256]'/>
<fun r='__tsan::ThreadClock::IsAlreadyAcquired'/>
<fun r='__tsan::ThreadClock::HasAcquiredAfterRelease'/>
<fun r='__tsan::ThreadClock::UpdateCurrentThread'/>
<fun r='__tsan::ThreadClock::get'/>
<fun r='__tsan::ThreadClock::set'/>
<fun r='__tsan::ThreadClock::tick'/>
<fun r='__tsan::ThreadClock::size'/>
<fun r='__tsan::ThreadClock::NoteGlobalAcquire'/>
<fun r='__tsan::ThreadClock::ThreadClock'/>
<fun r='__tsan::ThreadClock::ResetCached'/>
<fun r='__tsan::ThreadClock::acquire'/>
<fun r='__tsan::ThreadClock::releaseStoreAcquire'/>
<fun r='__tsan::ThreadClock::release'/>
<fun r='__tsan::ThreadClock::ReleaseStore'/>
<fun r='__tsan::ThreadClock::acq_rel'/>
<fun r='__tsan::ThreadClock::UpdateCurrentThread'/>
<fun r='__tsan::ThreadClock::IsAlreadyAcquired'/>
<fun r='__tsan::ThreadClock::HasAcquiredAfterRelease'/>
<fun r='__tsan::ThreadClock::set'/>
<fun r='__tsan::ThreadClock::DebugDump'/>
