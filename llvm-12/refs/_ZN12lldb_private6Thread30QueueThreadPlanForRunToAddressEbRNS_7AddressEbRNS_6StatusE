<dec f='llvm/lldb/include/lldb/Target/Thread.h' l='919' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForRunToAddress(bool abort_other_plans, lldb_private::Address &amp; target_addr, bool stop_other_threads, lldb_private::Status &amp; status)'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='897'>/// Gets the plan used to continue from the current PC.
  /// This is a simple plan, mostly useful as a backstop when you are continuing
  /// for some particular purpose.
  ///
  /// \param[in] abort_other_plans
  ///    \b true if we discard the currently queued plans and replace them with
  ///    this one.
  ///    Otherwise this plan will go on the end of the plan stack.
  ///
  /// \param[in] target_addr
  ///    The address to which we&apos;re running.
  ///
  /// \param[in] stop_other_threads
  ///    \b true if we will stop other threads while we single step this one.
  ///
  /// \param[out] status
  ///     A status with an error if queuing failed.
  ///
  /// \return
  ///     A shared pointer to the newly queued thread plan, or nullptr if the
  ///     plan could not be queued.</doc>
<use f='llvm/lldb/source/API/SBThread.cpp' l='765' u='c' c='_ZN4lldb8SBThread12RunToAddressEmRNS_7SBErrorE'/>
<use f='llvm/lldb/source/API/SBThreadPlan.cpp' l='379' u='c' c='_ZN4lldb12SBThreadPlan30QueueThreadPlanForRunToAddressENS_9SBAddressERNS_7SBErrorE'/>
<def f='llvm/lldb/source/Target/Thread.cpp' l='1365' ll='1374' type='lldb::ThreadPlanSP lldb_private::Thread::QueueThreadPlanForRunToAddress(bool abort_other_plans, lldb_private::Address &amp; target_addr, bool stop_other_threads, lldb_private::Status &amp; status)'/>
<use f='llvm/lldb/source/Target/ThreadPlanStepInRange.cpp' l='275' u='c' c='_ZN12lldb_private21ThreadPlanStepInRange10ShouldStopEPNS_5EventE'/>
