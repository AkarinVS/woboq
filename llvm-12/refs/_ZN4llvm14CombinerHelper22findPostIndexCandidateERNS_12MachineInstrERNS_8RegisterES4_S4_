<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h' l='508' type='bool llvm::CombinerHelper::findPostIndexCandidate(llvm::MachineInstr &amp; MI, llvm::Register &amp; Addr, llvm::Register &amp; Base, llvm::Register &amp; Offset)'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp' l='743' ll='809' type='bool llvm::CombinerHelper::findPostIndexCandidate(llvm::MachineInstr &amp; MI, llvm::Register &amp; Addr, llvm::Register &amp; Base, llvm::Register &amp; Offset)'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp' l='895' u='c' c='_ZN4llvm14CombinerHelper28matchCombineIndexedLoadStoreERNS_12MachineInstrERNS_25IndexedLoadStoreMatchInfoE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h' l='504'>/// Given a non-indexed load or store instruction \p MI, find an offset that
  /// can be usefully and legally folded into it as a post-indexing operation.
  ///
  /// \returns true if a candidate is found.</doc>
