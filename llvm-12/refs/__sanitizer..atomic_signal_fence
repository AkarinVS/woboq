<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_atomic_clang.h' l='37' ll='39' type='void __sanitizer::atomic_signal_fence(__sanitizer::memory_order )'/>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_atomic_clang.h' l='25'>// We would like to just use compiler builtin atomic operations
// for loads and stores, but they are mostly broken in clang:
// - they lead to vastly inefficient code generation
// (http://llvm.org/bugs/show_bug.cgi?id=17281)
// - 64-bit atomic operations are not implemented on x86_32
// (http://llvm.org/bugs/show_bug.cgi?id=15034)
// - they are not implemented on ARM
// error: undefined reference to &apos;__atomic_load_4&apos;

// See http://www.cl.cam.ac.uk/~pes20/cpp/cpp0xmappings.html
// for mappings of the memory model to different processors.</doc>
<use f='llvm/compiler-rt/lib/hwasan/hwasan_linux.cpp' l='249' u='c' c='__hwasan::__hwasan_thread_exit'/>
<use f='llvm/compiler-rt/lib/msan/msan_linux.cpp' l='254' u='c' c='__msan::MsanTSDDtor'/>
