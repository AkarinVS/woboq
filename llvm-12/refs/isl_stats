<def f='llvm/polly/lib/External/isl/include/isl/ctx.h' l='71' ll='73'/>
<size>8</size>
<doc f='llvm/polly/lib/External/isl/include/isl/ctx.h' l='47'>/* Nearly all isa functions require a struct isl_ctx allocated using
 * isl_ctx_alloc.  This ctx contains (or will contain) options that
 * control the behavior of the library and some caches.
 *
 * An object allocated within a given ctx should never be used inside
 * another ctx.  Functions for moving objects from one ctx to another
 * will be added as the need arises.
 *
 * A given context should only be used inside a single thread.
 * A global context for synchronization between different threads
 * as well as functions for moving a context to a different thread
 * will be added as the need arises.
 *
 * If anything goes wrong (out of memory, failed assertion), then
 * the library will currently simply abort.  This will be made
 * configurable in the future.
 * Users of the library should expect functions that return
 * a pointer to a structure, to return NULL, indicating failure.
 * Any function accepting a pointer to a structure will treat
 * a NULL argument as a failure, resulting in the function freeing
 * the remaining structures (if any) and returning NULL itself
 * (in case of pointer return type).
 * The only exception is the isl_ctx argument, which should never be NULL.
 */</doc>
<mbr r='isl_stats::gbr_solved_lps' o='0' t='long'/>
<use f='llvm/polly/lib/External/isl/isl_ctx_private.h' l='14'/>
<size>8</size>
<use f='llvm/polly/lib/External/isl/isl_ctx.c' l='220' c='isl_ctx_alloc_with_options'/>
<use f='llvm/polly/lib/External/isl/isl_ctx.c' l='220' c='isl_ctx_alloc_with_options'/>
<size>8</size>
