<def f='llvm/llvm/include/llvm/CodeGen/BasicTTIImpl.h' l='1859' ll='1862' type='unsigned int llvm::BasicTTIImplBase::getCallInstrCost(llvm::Function * F, llvm::Type * RetTy, ArrayRef&lt;llvm::Type *&gt; Tys, TTI::TargetCostKind CostKind = TTI::TCK_SizeAndLatency)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/BasicTTIImpl.h' l='1848'>/// Compute a cost of the given call instruction.
  ///
  /// Compute the cost of calling function F with return type RetTy and
  /// argument types Tys. F might be nullptr, in this case the cost of an
  /// arbitrary call with the specified signature will be returned.
  /// This is used, for instance,  when we estimate call of a vector
  /// counterpart of the given function.
  /// \param F Called function, might be nullptr.
  /// \param RetTy Return value types.
  /// \param Tys Argument types.
  /// \returns The cost of Call instruction.</doc>
<use f='llvm/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp' l='744' u='c' c='_ZN4llvm10ARMTTIImpl16getCastInstrCostEjPNS_4TypeES2_NS_19TargetTransformInfo15CastContextHintENS3_14TargetCostKindEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonTargetTransformInfo.cpp' l='124' u='c' c='_ZN4llvm14HexagonTTIImpl16getCallInstrCostEPNS_8FunctionEPNS_4TypeENS_8ArrayRefIS4_EENS_19TargetTransformInfo14TargetCostKindE'/>
