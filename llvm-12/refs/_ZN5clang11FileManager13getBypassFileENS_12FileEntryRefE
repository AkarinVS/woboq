<dec f='llvm/clang/include/clang/Basic/FileManager.h' l='267' type='llvm::Optional&lt;FileEntryRef&gt; clang::FileManager::getBypassFile(clang::FileEntryRef VFE)'/>
<doc f='llvm/clang/include/clang/Basic/FileManager.h' l='259'>/// Retrieve a FileEntry that bypasses VFE, which is expected to be a virtual
  /// file entry, to access the real file.  The returned FileEntry will have
  /// the same filename as FE but a different identity and its own stat.
  ///
  /// This should be used only for rare error recovery paths because it
  /// bypasses all mapping and uniquing, blindly creating a new FileEntry.
  /// There is no attempt to deduplicate these; if you bypass the same file
  /// twice, you get two new file entries.</doc>
<def f='llvm/clang/lib/Basic/FileManager.cpp' l='438' ll='468' type='llvm::Optional&lt;FileEntryRef&gt; clang::FileManager::getBypassFile(clang::FileEntryRef VF)'/>
<use f='llvm/clang/lib/Basic/SourceManager.cpp' l='711' u='c' c='_ZN5clang13SourceManager26bypassFileContentsOverrideENS_12FileEntryRefE'/>
<use f='llvm/clang/unittests/Basic/FileManagerTest.cpp' l='570' u='c' c='_ZN12_GLOBAL__N_134FileManagerTest_getBypassFile_Test8TestBodyEv'/>
