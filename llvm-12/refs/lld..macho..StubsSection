<inh f='llvm/lld/MachO/SyntheticSections.h' l='57' c='lld::macho::SyntheticSection'/>
<def f='llvm/lld/MachO/SyntheticSections.h' l='305' ll='318'/>
<use f='llvm/lld/MachO/SyntheticSections.h' l='489'/>
<size>144</size>
<doc f='llvm/lld/MachO/SyntheticSections.h' l='274'>// The following sections implement lazy symbol binding -- very similar to the
// PLT mechanism in ELF.
//
// ELF&apos;s .plt section is broken up into two sections in Mach-O: StubsSection
// and StubHelperSection. Calls to functions in dylibs will end up calling into
// StubsSection, which contains indirect jumps to addresses stored in the
// LazyPointerSection (the counterpart to ELF&apos;s .plt.got).
//
// We will first describe how non-weak symbols are handled.
//
// At program start, the LazyPointerSection contains addresses that point into
// one of the entry points in the middle of the StubHelperSection. The code in
// StubHelperSection will push on the stack an offset into the
// LazyBindingSection. The push is followed by a jump to the beginning of the
// StubHelperSection (similar to PLT0), which then calls into dyld_stub_binder.
// dyld_stub_binder is a non-lazily-bound symbol, so this call looks it up in
// the GOT.
//
// The stub binder will look up the bind opcodes in the LazyBindingSection at
// the given offset. The bind opcodes will tell the binder to update the
// address in the LazyPointerSection to point to the symbol, so that subsequent
// calls don&apos;t have to redo the symbol resolution. The binder will then jump to
// the resolved symbol.
//
// With weak symbols, the situation is slightly different. Since there is no
// &quot;weak lazy&quot; lookup, function calls to weak symbols are always non-lazily
// bound. We emit both regular non-lazy bindings as well as weak bindings, in
// order that the weak bindings may overwrite the non-lazy bindings if an
// appropriate symbol is found at runtime. However, the bound addresses will
// still be written (non-lazily) into the LazyPointerSection.</doc>
<fun r='_ZN3lld5macho12StubsSectionC1Ev'/>
<fun r='_ZNK3lld5macho12StubsSection7getSizeEv'/>
<fun r='_ZNK3lld5macho12StubsSection8isNeededEv'/>
<fun r='_ZNK3lld5macho12StubsSection7writeToEPh'/>
<fun r='_ZNK3lld5macho12StubsSection10getEntriesEv'/>
<fun r='_ZN3lld5macho12StubsSection8addEntryEPNS0_6SymbolE'/>
<mbr r='lld::macho::StubsSection::entries' o='768' t='llvm::SetVector&lt;Symbol *&gt;'/>
<use f='llvm/lld/MachO/Writer.cpp' l='799' c='_ZN3lld5macho23createSyntheticSectionsEv'/>
<size>144</size>
