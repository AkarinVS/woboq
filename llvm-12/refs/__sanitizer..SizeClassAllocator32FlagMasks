<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h' l='40' ll='45'/>
<size>1</size>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h' l='18'>// SizeClassAllocator32 -- allocator for 32-bit address space.
// This allocator can theoretically be used on 64-bit arch, but there it is less
// efficient than SizeClassAllocator64.
//
// [kSpaceBeg, kSpaceBeg + kSpaceSize) is the range of addresses which can
// be returned by MmapOrDie().
//
// Region:
//   a result of a single call to MmapAlignedOrDieOnFatalError(kRegionSize,
//                                                             kRegionSize).
// Since the regions are aligned by kRegionSize, there are exactly
// kNumPossibleRegions possible regions in the address space and so we keep
// a ByteMap possible_regions to store the size classes of each Region.
// 0 size class means the region is not used by the allocator.
//
// One Region is used to allocate chunks of a single size class.
// A Region looks like this:
// UserChunk1 .. UserChunkN &lt;gap&gt; MetaChunkN .. MetaChunk1
//
// In order to avoid false sharing the objects of this class should be
// chache-line aligned.</doc>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h' l='40'>//  Bit masks.</doc>
