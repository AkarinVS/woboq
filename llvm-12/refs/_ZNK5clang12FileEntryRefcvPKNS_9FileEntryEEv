<def f='llvm/clang/include/clang/Basic/FileEntry.h' l='148' type='const clang::FileEntry * clang::FileEntryRef::operator const clang::FileEntry *() const'/>
<doc f='llvm/clang/include/clang/Basic/FileEntry.h' l='131'>/// Allow FileEntryRef to degrade into &apos;const FileEntry*&apos; to facilitate
  /// incremental adoption.
  ///
  /// The goal is to avoid code churn due to dances like the following:
  /// \code
  /// // Old code.
  /// lvalue = rvalue;
  ///
  /// // Temporary code from an incremental patch.
  /// lvalue = &amp;rvalue.getFileEntry();
  ///
  /// // Final code.
  /// lvalue = rvalue;
  /// \endcode
  ///
  /// FIXME: Once FileEntryRef is &quot;everywhere&quot; and FileEntry::LastRef and
  /// FileEntry::getName have been deleted, delete this implicit conversion.</doc>
<use f='llvm/clang/lib/Basic/SourceManager.cpp' l='391' u='c' c='_ZN5clang13SourceManager23getOrCreateContentCacheENS_12FileEntryRefEb'/>
<use f='llvm/clang/lib/Basic/SourceManager.cpp' l='402' u='c' c='_ZN5clang13SourceManager23getOrCreateContentCacheENS_12FileEntryRefEb'/>
<use f='llvm/clang/lib/Basic/SourceManager.cpp' l='404' u='c' c='_ZN5clang13SourceManager23getOrCreateContentCacheENS_12FileEntryRefEb'/>
<use f='llvm/clang/lib/Basic/SourceManager.cpp' l='406' u='c' c='_ZN5clang13SourceManager23getOrCreateContentCacheENS_12FileEntryRefEb'/>
<use f='llvm/clang/lib/Basic/SourceManager.cpp' l='410' u='c' c='_ZN5clang13SourceManager23getOrCreateContentCacheENS_12FileEntryRefEb'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1126' u='c' c='_ZN5clang9ModuleMap17setUmbrellaHeaderEPNS_6ModuleENS_12FileEntryRefEN4llvm5TwineE'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1133' u='c' c='_ZN5clang9ModuleMap17setUmbrellaHeaderEPNS_6ModuleENS_12FileEntryRefEN4llvm5TwineE'/>
<use f='llvm/clang/unittests/Basic/FileEntryTest.cpp' l='82' u='c' c='_ZN12_GLOBAL__N_131FileEntryTest_FileEntryRef_Test8TestBodyEv'/>
