<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='514' type='void llvm::InnerLoopVectorizer::widenPHIInstruction(llvm::Instruction * PN, llvm::RecurrenceDescriptor * RdxDesc, llvm::Value * StartV, unsigned int UF, llvm::ElementCount VF)'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='4577' ll='4748' type='void llvm::InnerLoopVectorizer::widenPHIInstruction(llvm::Instruction * PN, llvm::RecurrenceDescriptor * RdxDesc, llvm::Value * StartV, unsigned int UF, llvm::ElementCount VF)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='8985' u='c' c='_ZN4llvm16VPWidenPHIRecipe7executeERNS_16VPTransformStateE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='511'>/// Vectorize a single PHINode in a block. This method handles the induction
  /// variable canonicalization. It supports both VF = 1 for unrolled loops and
  /// arbitrary length vectors.</doc>
