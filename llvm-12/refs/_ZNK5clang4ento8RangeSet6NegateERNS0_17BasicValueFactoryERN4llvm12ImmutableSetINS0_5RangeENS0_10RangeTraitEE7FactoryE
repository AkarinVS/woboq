<dec f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h' l='128' type='clang::ento::RangeSet clang::ento::RangeSet::Negate(clang::ento::BasicValueFactory &amp; BV, clang::ento::RangeSet::Factory &amp; F) const'/>
<def f='llvm/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp' l='308' ll='365' type='clang::ento::RangeSet clang::ento::RangeSet::Negate(clang::ento::BasicValueFactory &amp; BV, clang::ento::RangeSet::Factory &amp; F) const'/>
<use f='llvm/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp' l='966' u='c' c='_ZN12_GLOBAL__N_121SymbolicRangeInferrer21getRangeForNegatedSubEPKN5clang4ento7SymExprE'/>
<doc f='llvm/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp' l='290'>// Turn all [A, B] ranges to [-B, -A], when &quot;-&quot; is a C-like unary minus
// operation under the values of the type.
//
// We also handle MIN because applying unary minus to MIN does not change it.
// Example 1:
// char x = -128;        // -128 is a MIN value in a range of &apos;char&apos;
// char y = -x;          // y: -128
// Example 2:
// unsigned char x = 0;  // 0 is a MIN value in a range of &apos;unsigned char&apos;
// unsigned char y = -x; // y: 0
//
// And it makes us to separate the range
// like [MIN, N] to [MIN, MIN] U [-N,MAX].
// For instance, whole range is {-128..127} and subrange is [-128,-126],
// thus [-128,-127,-126,.....] negates to [-128,.....,126,127].
//
// Negate restores disrupted ranges on bounds,
// e.g. [MIN, B] =&gt; [MIN, MIN] U [-B, MAX] =&gt; [MIN, B].</doc>
<use f='llvm/clang/unittests/StaticAnalyzer/RangeSetTest.cpp' l='111' u='c' c='_ZN5clang4ento12_GLOBAL__N_112RangeSetTest11checkNegateEv'/>
