<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1908' type='clang::ExprResult clang::Parser::ParseLambdaExpression()'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='1907'>// [...] () -&gt; type {...}</doc>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='1750' u='c' c='_ZN5clang6Parser19ParseCastExpressionENS0_13CastParseKindEbRbNS0_13TypeCastStateEbPb'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='729' ll='740' type='clang::ExprResult clang::Parser::ParseLambdaExpression()'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='764' u='c' c='_ZN5clang6Parser24TryParseLambdaExpressionEv'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='3327' u='c' c='_ZN5clang6Parser24ParseCXXDeleteExpressionEbNS_14SourceLocationE'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='688'>/// ParseLambdaExpression - Parse a C++11 lambda expression.
///
///       lambda-expression:
///         lambda-introducer lambda-declarator[opt] compound-statement
///         lambda-introducer &apos;&lt;&apos; template-parameter-list &apos;&gt;&apos;
///             lambda-declarator[opt] compound-statement
///
///       lambda-introducer:
///         &apos;[&apos; lambda-capture[opt] &apos;]&apos;
///
///       lambda-capture:
///         capture-default
///         capture-list
///         capture-default &apos;,&apos; capture-list
///
///       capture-default:
///         &apos;&amp;&apos;
///         &apos;=&apos;
///
///       capture-list:
///         capture
///         capture-list &apos;,&apos; capture
///
///       capture:
///         simple-capture
///         init-capture     [C++1y]
///
///       simple-capture:
///         identifier
///         &apos;&amp;&apos; identifier
///         &apos;this&apos;
///
///       init-capture:      [C++1y]
///         identifier initializer
///         &apos;&amp;&apos; identifier initializer
///
///       lambda-declarator:
///         &apos;(&apos; parameter-declaration-clause &apos;)&apos; attribute-specifier[opt]
///           &apos;mutable&apos;[opt] exception-specification[opt]
///           trailing-return-type[opt]
///</doc>
