<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='147' type='bool llvm::LazyCallGraph::Edge::operator bool() const'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='207' u='c' c='_ZN4llvm13LazyCallGraph12EdgeSequence8iteratorC1EPNS0_4EdgeES4_'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='218' u='c' c='_ZN4llvm13LazyCallGraph12EdgeSequence8iteratorppEv'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='237' u='c' c='_ZN4llvm13LazyCallGraph12EdgeSequence13call_iterator17advanceToNextEdgeEv'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='273' u='c' c='_ZN4llvm13LazyCallGraph12EdgeSequence6lookupERNS0_4NodeE'/>
<use f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='287' u='c' c='_ZN4llvm13LazyCallGraph12EdgeSequence5emptyEv'/>
<def f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='1234' ll='1236' type='bool llvm::LazyCallGraph::Edge::operator bool() const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='143'>/// Test whether the edge is null.
    ///
    /// This happens when an edge has been deleted. We leave the edge objects
    /// around but clear them.</doc>
