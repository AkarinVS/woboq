<dec f='llvm/clang/include/clang/Format/Format.h' l='1872' type='bool'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='3076' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='3076' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<use f='llvm/clang/lib/Format/FormatToken.h' l='658' u='r' c='_ZNK5clang6format11FormatToken25opensBlockOrBlockTypeListERKNS0_11FormatStyleE'/>
<offset>1184</offset>
<doc f='llvm/clang/include/clang/Format/Format.h' l='1852'>/// If ``true``, format braced lists as best suited for C++11 braced
  /// lists.
  ///
  /// Important differences:
  /// - No spaces inside the braced list.
  /// - No line break before the closing brace.
  /// - Indentation with the continuation indent, not with the block indent.
  ///
  /// Fundamentally, C++11 braced lists are formatted exactly like function
  /// calls would be formatted in their place. If the braced list follows a name
  /// (e.g. a type or variable name), clang-format formats as if the ``{}`` were
  /// the parentheses of a function call with that name. If there is no name,
  /// a zero-length name is assumed.
  /// \code
  ///    true:                                  false:
  ///    vector&lt;int&gt; x{1, 2, 3, 4};     vs.     vector&lt;int&gt; x{ 1, 2, 3, 4 };
  ///    vector&lt;T&gt; x{{}, {}, {}, {}};           vector&lt;T&gt; x{ {}, {}, {}, {} };
  ///    f(MyMap[{composite, key}]);            f(MyMap[{ composite, key }]);
  ///    new int[3]{1, 2, 3};                   new int[3]{ 1, 2, 3 };
  /// \endcode</doc>
<use f='llvm/clang/lib/Format/ContinuationIndenter.cpp' l='633' u='r' c='_ZN5clang6format20ContinuationIndenter21addTokenOnCurrentLineERNS0_9LineStateEbj'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='571' u='a' c='_ZN4llvm4yaml13MappingTraitsIN5clang6format11FormatStyleEE7mappingERNS0_2IOERS4_'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='943' u='w' c='_ZN5clang6format12getLLVMStyleENS0_11FormatStyle12LanguageKindE'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='1150' u='w' c='_ZN5clang6format14getGoogleStyleENS0_11FormatStyle12LanguageKindE'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='1251' u='w' c='_ZN5clang6format15getMozillaStyleEv'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='1272' u='w' c='_ZN5clang6format14getWebKitStyleEv'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='1292' u='w' c='_ZN5clang6format11getGNUStyleEv'/>
<use f='llvm/clang/lib/Format/FormatToken.cpp' l='162' u='r' c='_ZN5clang6format18CommaSeparatedList25precomputeFormattingInfosEPKNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Format/FormatToken.cpp' l='201' u='r' c='_ZN5clang6format18CommaSeparatedList25precomputeFormattingInfosEPKNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2493' u='r' c='_ZN5clang6format14TokenAnnotator30calculateFormattingInformationERNS0_13AnnotatedLineE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2757' u='r' c='_ZN5clang6format14TokenAnnotator12splitPenaltyERKNS0_13AnnotatedLineERKNS0_11FormatTokenEb'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2875' u='r' c='_ZN5clang6format14TokenAnnotator20spaceRequiredBetweenERKNS0_13AnnotatedLineERKNS0_11FormatTokenES7_'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2978' u='r' c='_ZN5clang6format14TokenAnnotator20spaceRequiredBetweenERKNS0_13AnnotatedLineERKNS0_11FormatTokenES7_'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='3011' u='r' c='_ZN5clang6format14TokenAnnotator20spaceRequiredBetweenERKNS0_13AnnotatedLineERKNS0_11FormatTokenES7_'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='3116' u='r' c='_ZN5clang6format14TokenAnnotator19spaceRequiredBeforeERKNS0_13AnnotatedLineERKNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='3400' u='r' c='_ZN5clang6format14TokenAnnotator19spaceRequiredBeforeERKNS0_13AnnotatedLineERKNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='4007' u='r' c='_ZN5clang6format14TokenAnnotator14canBreakBeforeERKNS0_13AnnotatedLineERKNS0_11FormatTokenE'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='9604' u='w' c='_ZN5clang6format12_GLOBAL__N_144FormatTest_LayoutCxx11BraceInitializers_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15464' u='w' c='_ZN5clang6format12_GLOBAL__N_140FormatTest_ParsesConfigurationBools_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15464' u='r' c='_ZN5clang6format12_GLOBAL__N_140FormatTest_ParsesConfigurationBools_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='15464' u='r' c='_ZN5clang6format12_GLOBAL__N_140FormatTest_ParsesConfigurationBools_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTestCSharp.cpp' l='741' u='w' c='_ZN5clang6format34FormatTestCSharp_CSharpSpaces_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTestJava.cpp' l='257' u='w' c='_ZN5clang6format37FormatTestJava_ArrayInitializers_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTestTextProto.cpp' l='529' u='w' c='_ZN5clang6format56FormatTestTextProto_FormatsRepeatedListInitializers_Test8TestBodyEv'/>
