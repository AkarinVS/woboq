<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='133' type='bool llvm::AllocaInst::isStaticAlloca() const'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='130'>/// Return true if this alloca is in the entry block of the function and is a
  /// constant size. If so, the code generator will fold it into the
  /// prolog/epilog code, so it is basically free.</doc>
<use f='llvm/clang/lib/CodeGen/CGCleanup.cpp' l='450' u='c' c='_ZN5clang7CodeGen15CodeGenFunction16PopCleanupBlocksENS0_12EHScopeStack15stable_iteratorESt16initializer_listIPPN4llvm5ValueEE'/>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='832' u='c' c='_ZN4llvm13BasicAAResult13getModRefInfoEPKNS_8CallBaseERKNS_14MemoryLocationERNS_11AAQueryInfoE'/>
<use f='llvm/llvm/lib/Analysis/CodeMetrics.cpp' l='157' u='c' c='_ZN4llvm11CodeMetrics17analyzeBasicBlockEPKNS_10BasicBlockERKNS_19TargetTransformInfoERKNS_15SmallPtrSetImplIPKNS_5ValueEEEb'/>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='1058' u='c' c='_ZN12_GLOBAL__N_112CallAnalyzer11visitAllocaERN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='1065' u='c' c='_ZN12_GLOBAL__N_112CallAnalyzer11visitAllocaERN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='2620' u='c' c='_ZL18computePointerICmpRKN4llvm10DataLayoutEPKNS_17TargetLibraryInfoEPKNS_13DominatorTreeENS_7CmpInst9PredicateEPNS_15AssumptionCacheEPKNS_11Instructi10406885'/>
<use f='llvm/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h' l='922' u='c' c='_ZN4llvm31TargetTransformInfoImplCRTPBase11getUserCostEPKNS_4UserENS_8ArrayRefIPKNS_5ValueEEENS_19TargetTransformInfo14TargetCostKindE'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='4785' u='c' c='_ZN12_GLOBAL__N_121AddressingModeMatcher22valueAlreadyLiveAtInstEPN4llvm5ValueES3_S3_'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='1859' u='c' c='_ZN4llvm12IRTranslator23translateKnownIntrinsicERKNS_8CallInstEjRNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='1880' u='c' c='_ZN4llvm12IRTranslator23translateKnownIntrinsicERKNS_8CallInstEjRNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='2558' u='c' c='_ZN4llvm12IRTranslator15translateAllocaERKNS_4UserERNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/CodeGen/SafeStack.cpp' l='394' u='c' c='_ZN12_GLOBAL__N_19SafeStack9findInstsERN4llvm8FunctionERNS1_15SmallVectorImplIPNS1_10AllocaInstEEES8_RNS4_IPNS1_8ArgumentEEERNS4_IPNS1_11InstructionEEESG_'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp' l='156' u='c' c='_ZN4llvm20FunctionLoweringInfo3setERKNS_8FunctionERNS_15MachineFunctionEPNS_12SelectionDAGE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp' l='5885' u='c' c='_ZN4llvm19SelectionDAGBuilder18visitIntrinsicCallERKNS_8CallInstEj'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp' l='9645' u='c' c='_ZL33findArgumentCopyElisionCandidatesRKN4llvm10DataLayoutEPNS_20FunctionLoweringInfoERNS_8DenseMapIPKNS_8ArgumentESt4pairIPKNS_10AllocaInstEPKNS_9Sto1223968'/>
<use f='llvm/llvm/lib/CodeGen/SjLjEHPrepare.cpp' l='241' u='c' c='_ZN12_GLOBAL__N_113SjLjEHPrepare22lowerIncomingArgumentsERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/CodeGen/SjLjEHPrepare.cpp' l='287' u='c' c='_ZN12_GLOBAL__N_113SjLjEHPrepare22lowerAcrossUnwindEdgesERN4llvm8FunctionENS1_8ArrayRefIPNS1_10InvokeInstEEE'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='1344' ll='1351' type='bool llvm::AllocaInst::isStaticAlloca() const'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='1341'>/// isStaticAlloca - Return true if this alloca is in the entry block of the
/// function and is a constant size.  If so, the code generator will fold it
/// into the prolog/epilog code, so it is basically free.</doc>
<use f='llvm/llvm/lib/IR/Verifier.cpp' l='4780' u='c' c='_ZN12_GLOBAL__N_18Verifier18visitIntrinsicCallEjRN4llvm8CallBaseE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64StackTagging.cpp' l='418' u='c' c='_ZN12_GLOBAL__N_119AArch64StackTagging19isInterestingAllocaERKN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp' l='50' u='c' c='_ZL11getInsertPtRN4llvm10BasicBlockE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp' l='839' u='c' c='_ZN12_GLOBAL__N_123AMDGPUPromoteAllocaImpl12handleAllocaERN4llvm10AllocaInstEb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp' l='1059' u='c' c='_Z27handlePromoteAllocaToVectorRN4llvm10AllocaInstEj'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp' l='189' u='c' c='_ZN4llvm13AMDGPUTTIImpl23getUnrollingPreferencesEPNS_4LoopERNS_15ScalarEvolutionERNS_19TargetTransformInfo20UnrollingPreferencesE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp' l='1168' u='c' c='_ZNK4llvm10GCNTTIImpl23adjustInliningThresholdEPKNS_8CallBaseE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='618' u='c' c='_ZL29isSafeAndProfitableToSinkLoadPN4llvm8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='629' u='c' c='_ZL29isSafeAndProfitableToSinkLoadPN4llvm8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='1028' u='c' c='_ZN12_GLOBAL__N_121FunctionStackPoisoner15visitAllocaInstERN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='1040' u='c' c='_ZN12_GLOBAL__N_121FunctionStackPoisoner15visitAllocaInstERN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='1079' u='c' c='_ZN12_GLOBAL__N_121FunctionStackPoisoner18visitIntrinsicInstERN4llvm13IntrinsicInstE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='1332' u='c' c='_ZN12_GLOBAL__N_116AddressSanitizer19isInterestingAllocaERKN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp' l='1179' u='c' c='_ZN12_GLOBAL__N_118HWAddressSanitizer19isInterestingAllocaERKN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/Instrumentation.cpp' l='47' u='c' c='_ZN4llvm24PrepareToSplitEntryBlockERNS_10BasicBlockENS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Sink.cpp' l='114' u='c' c='_ZL15SinkInstructionPN4llvm11InstructionERNS_15SmallPtrSetImplIS1_EERNS_13DominatorTreeERNS_8LoopInfoERNS_9AAResultsE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='101' u='c' c='_ZL6canTRERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/CloneFunction.cpp' l='68' u='c' c='_ZN4llvm15CloneBasicBlockEPKNS_10BasicBlockERNS_8ValueMapIPKNS_5ValueENS_14WeakTrackingVHENS_14ValueMapConfigIS6_NS_3sys10SmartMutexILb0EEEEEEERKNS_5T15682005'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='3238' u='c' c='_ZN4llvm29canReplaceOperandWithVariableEPKNS_11InstructionEj'/>
