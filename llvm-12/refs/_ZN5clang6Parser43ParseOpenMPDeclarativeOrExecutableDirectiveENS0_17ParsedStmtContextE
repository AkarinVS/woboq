<dec f='llvm/clang/include/clang/Parse/Parser.h' l='3173' type='clang::StmtResult clang::Parser::ParseOpenMPDeclarativeOrExecutableDirective(clang::Parser::ParsedStmtContext StmtCtx)'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='3169'>/// Parses declarative or executable directive.
  ///
  /// \param StmtCtx The context in which we&apos;re parsing the directive.</doc>
<def f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='2261' ll='2569' type='clang::StmtResult clang::Parser::ParseOpenMPDeclarativeOrExecutableDirective(clang::Parser::ParsedStmtContext StmtCtx)'/>
<doc f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='2221'>/// Parsing of declarative or executable OpenMP directives.
///
///       threadprivate-directive:
///         annot_pragma_openmp &apos;threadprivate&apos; simple-variable-list
///         annot_pragma_openmp_end
///
///       allocate-directive:
///         annot_pragma_openmp &apos;allocate&apos; simple-variable-list
///         annot_pragma_openmp_end
///
///       declare-reduction-directive:
///         annot_pragma_openmp &apos;declare&apos; &apos;reduction&apos; &apos;(&apos; &lt;reduction_id&gt; &apos;:&apos;
///         &lt;type&gt; {&apos;,&apos; &lt;type&gt;} &apos;:&apos; &lt;expression&gt; &apos;)&apos; [&apos;initializer&apos; &apos;(&apos;
///         (&apos;omp_priv&apos; &apos;=&apos; &lt;expression&gt;|&lt;function_call&gt;) &apos;)&apos;]
///         annot_pragma_openmp_end
///
///       declare-mapper-directive:
///         annot_pragma_openmp &apos;declare&apos; &apos;mapper&apos; &apos;(&apos; [&lt;mapper-identifer&gt; &apos;:&apos;]
///         &lt;type&gt; &lt;var&gt; &apos;)&apos; [&lt;clause&gt;[[,] &lt;clause&gt;] ... ]
///         annot_pragma_openmp_end
///
///       executable-directive:
///         annot_pragma_openmp &apos;parallel&apos; | &apos;simd&apos; | &apos;for&apos; | &apos;sections&apos; |
///         &apos;section&apos; | &apos;single&apos; | &apos;master&apos; | &apos;critical&apos; [ &apos;(&apos; &lt;name&gt; &apos;)&apos; ] |
///         &apos;parallel for&apos; | &apos;parallel sections&apos; | &apos;parallel master&apos; | &apos;task&apos; |
///         &apos;taskyield&apos; | &apos;barrier&apos; | &apos;taskwait&apos; | &apos;flush&apos; | &apos;ordered&apos; |
///         &apos;atomic&apos; | &apos;for simd&apos; | &apos;parallel for simd&apos; | &apos;target&apos; | &apos;target
///         data&apos; | &apos;taskgroup&apos; | &apos;teams&apos; | &apos;taskloop&apos; | &apos;taskloop simd&apos; |
///         &apos;master taskloop&apos; | &apos;master taskloop simd&apos; | &apos;parallel master
///         taskloop&apos; | &apos;parallel master taskloop simd&apos; | &apos;distribute&apos; | &apos;target
///         enter data&apos; | &apos;target exit data&apos; | &apos;target parallel&apos; | &apos;target
///         parallel for&apos; | &apos;target update&apos; | &apos;distribute parallel for&apos; |
///         &apos;distribute paralle for simd&apos; | &apos;distribute simd&apos; | &apos;target parallel
///         for simd&apos; | &apos;target simd&apos; | &apos;teams distribute&apos; | &apos;teams distribute
///         simd&apos; | &apos;teams distribute parallel for simd&apos; | &apos;teams distribute
///         parallel for&apos; | &apos;target teams&apos; | &apos;target teams distribute&apos; | &apos;target
///         teams distribute parallel for&apos; | &apos;target teams distribute parallel
///         for simd&apos; | &apos;target teams distribute simd&apos; {clause}
///         annot_pragma_openmp_end
///</doc>
<use f='llvm/clang/lib/Parse/ParseStmt.cpp' l='395' u='c' c='_ZN5clang6Parser42ParseStatementOrDeclarationAfterAttributesERN4llvm11SmallVectorIPNS_4StmtELj32EEENS0_17ParsedStmtContextEPNS_14SourceLocationERNS0_214630584'/>
