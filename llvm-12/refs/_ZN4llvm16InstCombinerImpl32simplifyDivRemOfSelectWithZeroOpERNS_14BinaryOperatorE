<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='99' type='bool llvm::InstCombinerImpl::simplifyDivRemOfSelectWithZeroOp(llvm::BinaryOperator &amp; I)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='623' ll='688' type='bool llvm::InstCombinerImpl::simplifyDivRemOfSelectWithZeroOp(llvm::BinaryOperator &amp; I)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='735' u='c' c='_ZN4llvm16InstCombinerImpl20commonIDivTransformsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1391' u='c' c='_ZN4llvm16InstCombinerImpl20commonIRemTransformsERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='620'>/// Fold a divide or remainder with a select instruction divisor when one of the
/// select operands is zero. In that case, we can use the other select operand
/// because div/rem by zero is undefined.</doc>
