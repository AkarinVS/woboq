<dec f='llvm/llvm/include/llvm/Analysis/MemoryBuiltins.h' l='283' type='bool llvm::ObjectSizeOffsetVisitor::CheckedZextOrTrunc(llvm::APInt &amp; I)'/>
<def f='llvm/llvm/lib/Analysis/MemoryBuiltins.cpp' l='652' ll='661' type='bool llvm::ObjectSizeOffsetVisitor::CheckedZextOrTrunc(llvm::APInt &amp; I)'/>
<use f='llvm/llvm/lib/Analysis/MemoryBuiltins.cpp' l='677' u='c' c='_ZN4llvm23ObjectSizeOffsetVisitor15visitAllocaInstERNS_10AllocaInstE'/>
<use f='llvm/llvm/lib/Analysis/MemoryBuiltins.cpp' l='730' u='c' c='_ZN4llvm23ObjectSizeOffsetVisitor13visitCallBaseERNS_8CallBaseE'/>
<use f='llvm/llvm/lib/Analysis/MemoryBuiltins.cpp' l='742' u='c' c='_ZN4llvm23ObjectSizeOffsetVisitor13visitCallBaseERNS_8CallBaseE'/>
<doc f='llvm/llvm/lib/Analysis/MemoryBuiltins.cpp' l='647'>/// When we&apos;re compiling N-bit code, and the user uses parameters that are
/// greater than N bits (e.g. uint64_t on a 32-bit build), we can run into
/// trouble with APInt size issues. This function handles resizing + overflow
/// checks for us. Check and zext or trunc \p I depending on IntTyBits and
/// I&apos;s value.</doc>
