<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='246' ll='249' type='bool llvm::TargetInstrInfo::isCoalescableExtInstr(const llvm::MachineInstr &amp; MI, llvm::Register &amp; SrcReg, llvm::Register &amp; DstReg, unsigned int &amp; SubIdx) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='241'>/// Return true if the instruction is a &quot;coalescable&quot; extension instruction.
  /// That is, it&apos;s like a copy where it&apos;s legal for the source to overlap the
  /// destination. e.g. X86::MOVSX64rr32. If this returns true, then it&apos;s
  /// expected the pre-extension value is available as a subreg of the result
  /// register. This also returns the sub-register index in SubIdx.</doc>
<use f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='465' u='c' c='_ZN12_GLOBAL__N_117PeepholeOptimizer16optimizeExtInstrERN4llvm12MachineInstrERNS1_17MachineBasicBlockERNS1_15SmallPtrSetImplIPS2_EE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp' l='515' u='c' c='_ZN4llvm12InstrEmitter14EmitSubregNodeEPNS_6SDNodeERNS_8DenseMapINS_7SDValueENS_8RegisterENS_12DenseMapInfoIS4_EENS_6detail12DenseMapPairIS4_S5_EEEEbb'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='1029' c='_ZNK4llvm16AArch64InstrInfo21isCoalescableExtInstrERKNS_12MachineInstrERNS_8RegisterES5_Rj'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='1054' c='_ZNK4llvm12PPCInstrInfo21isCoalescableExtInstrERKNS_12MachineInstrERNS_8RegisterES5_Rj'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InstrInfo.cpp' l='90' c='_ZNK4llvm12X86InstrInfo21isCoalescableExtInstrERKNS_12MachineInstrERNS_8RegisterES5_Rj'/>
