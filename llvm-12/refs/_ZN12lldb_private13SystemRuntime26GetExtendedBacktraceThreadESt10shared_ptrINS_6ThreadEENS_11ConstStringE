<dec f='llvm/lldb/include/lldb/Target/SystemRuntime.h' l='135' type='lldb::ThreadSP lldb_private::SystemRuntime::GetExtendedBacktraceThread(lldb::ThreadSP thread, lldb_private::ConstString type)'/>
<doc f='llvm/lldb/include/lldb/Target/SystemRuntime.h' l='111'>/// Return a Thread which shows the origin of this thread&apos;s creation.
  ///
  /// This likely returns a HistoryThread which shows how thread was
  /// originally created (e.g. &quot;pthread&quot; type), or how the work that is
  /// currently executing on it was originally enqueued (e.g. &quot;libdispatch&quot;
  /// type).
  ///
  /// There may be a chain of thread-origins; it may be informative to the end
  /// user to query the returned ThreadSP for its origins as well.
  ///
  /// \param [in] thread
  ///   The thread to examine.
  ///
  /// \param [in] type
  ///   The type of thread origin being requested.  The types supported
  ///   are returned from SystemRuntime::GetExtendedBacktraceTypes.
  ///
  /// \return
  ///   A ThreadSP which will have a StackList of frames.  This Thread will
  ///   not appear in the Process&apos; list of current threads.  Normal thread
  ///   operations like stepping will not be available.  This is a historical
  ///   view thread and may be only useful for showing a backtrace.
  ///
  ///   An empty ThreadSP will be returned if no thread origin is available.</doc>
<use f='llvm/lldb/source/API/SBThread.cpp' l='1285' u='c' c='_ZN4lldb8SBThread26GetExtendedBacktraceThreadEPKc'/>
<use f='llvm/lldb/source/Commands/CommandObjectThread.cpp' l='134' u='c' c='_ZN28CommandObjectThreadBacktrace19DoExtendedBacktraceEPN12lldb_private6ThreadERNS0_19CommandReturnObjectE'/>
<ovr f='llvm/lldb/source/Plugins/SystemRuntime/MacOSX/SystemRuntimeMacOSX.cpp' l='456' c='_ZN19SystemRuntimeMacOSX26GetExtendedBacktraceThreadESt10shared_ptrIN12lldb_private6ThreadEENS1_11ConstStringE'/>
<def f='llvm/lldb/source/Target/SystemRuntime.cpp' l='46' ll='49' type='lldb::ThreadSP lldb_private::SystemRuntime::GetExtendedBacktraceThread(lldb::ThreadSP thread, lldb_private::ConstString type)'/>
