<def f='llvm/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h' l='57' ll='79'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h' l='66' c='_ZN4llvm21ValueProfileCollectorC1EOS0_'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h' l='67' c='_ZN4llvm21ValueProfileCollectoraSEOS0_'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h' l='67' c='_ZN4llvm21ValueProfileCollectoraSEOS0_'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h' l='69' c='_ZN4llvm21ValueProfileCollectorC1ERKS0_'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h' l='70' c='_ZN4llvm21ValueProfileCollectoraSERKS0_'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h' l='70' c='_ZN4llvm21ValueProfileCollectoraSERKS0_'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp' l='569'/>
<size>8</size>
<doc f='llvm/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.h' l='30'>/// Utility analysis that determines what values are worth profiling.
/// The actual logic is inside the ValueProfileCollectorImpl, whose job is to
/// populate the Candidates vector.
///
/// Value profiling an expression means to track the values that this expression
/// takes at runtime and the frequency of each value.
/// It is important to distinguish between two sets of value profiles for a
/// particular expression:
///  1) The set of values at the point of evaluation.
///  2) The set of values at the point of use.
/// In some cases, the two sets are identical, but it&apos;s not unusual for the two
/// to differ.
///
/// To elaborate more, consider this C code, and focus on the expression `nn`:
///  void foo(int nn, bool b) {
///    if (b)  memcpy(x, y, nn);
///  }
/// The point of evaluation can be as early as the start of the function, and
/// let&apos;s say the value profile for `nn` is:
///     total=100; (value,freq) set = {(8,10), (32,50)}
/// The point of use is right before we call memcpy, and since we execute the
/// memcpy conditionally, the value profile of `nn` can be:
///     total=15; (value,freq) set = {(8,10), (4,5)}
///
/// For this reason, a plugin is responsible for computing the insertion point
/// for each value to be profiled. The `CandidateInfo` structure encapsulates
/// all the information needed for each value profile site.</doc>
<fun r='_ZN4llvm21ValueProfileCollectorC1ERNS_8FunctionERNS_17TargetLibraryInfoE'/>
<fun r='_ZN4llvm21ValueProfileCollectorC1EOS0_'/>
<fun r='_ZN4llvm21ValueProfileCollectoraSEOS0_'/>
<fun r='_ZN4llvm21ValueProfileCollectorC1ERKS0_'/>
<fun r='_ZN4llvm21ValueProfileCollectoraSERKS0_'/>
<fun r='_ZN4llvm21ValueProfileCollectorD1Ev'/>
<fun r='_ZNK4llvm21ValueProfileCollector3getENS_18InstrProfValueKindE'/>
<mbr r='llvm::ValueProfileCollector::PImpl' o='0' t='std::unique_ptr&lt;ValueProfileCollectorImpl&gt;'/>
