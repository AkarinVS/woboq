<dec f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='347' type='std::vector&lt;CanonicalLoopInfo *&gt; llvm::OpenMPIRBuilder::tileLoops(llvm::DebugLoc DL, ArrayRef&lt;llvm::CanonicalLoopInfo *&gt; Loops, ArrayRef&lt;llvm::Value *&gt; TileSizes)'/>
<doc f='llvm/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h' l='303'>/// Tile a loop nest.
  ///
  /// Tiles the loops of \p Loops by the tile sizes in \p TileSizes. Loops in
  /// \p/ Loops must be perfectly nested, from outermost to innermost loop
  /// (i.e. Loops.front() is the outermost loop). The trip count llvm::Value
  /// of every loop and every tile sizes must be usable in the outermost
  /// loop&apos;s preheader. This implies that the loop nest is rectangular.
  ///
  /// Example:
  /// \code
  ///   for (int i = 0; i &lt; 15; ++i) // Canonical loop &quot;i&quot;
  ///     for (int j = 0; j &lt; 14; ++j) // Canonical loop &quot;j&quot;
  ///         body(i, j);
  /// \endcode
  ///
  /// After tiling with Loops={i,j} and TileSizes={5,7}, the loop is changed to
  /// \code
  ///   for (int i1 = 0; i1 &lt; 3; ++i1)
  ///     for (int j1 = 0; j1 &lt; 2; ++j1)
  ///       for (int i2 = 0; i2 &lt; 5; ++i2)
  ///         for (int j2 = 0; j2 &lt; 7; ++j2)
  ///           body(i1*3+i2, j1*3+j2);
  /// \endcode
  ///
  /// The returned vector are the loops {i1,j1,i2,j2}. The loops i1 and j1 are
  /// referred to the floor, and the loops i2 and j2 are the tiles. Tiling also
  /// handles non-constant trip counts, non-constant tile sizes and trip counts
  /// that are not multiples of the tile size. In the latter case the tile loop
  /// of the last floor-loop iteration will have fewer iterations than specified
  /// as its tile size.
  ///
  ///
  /// @param DL        Debug location for instructions added by tiling, for
  ///                  instance the floor- and tile trip count computation.
  /// @param Loops     Loops to tile. The CanonicalLoopInfo objects are
  ///                  invalidated by this method, i.e. should not used after
  ///                  tiling.
  /// @param TileSizes For each loop in \p Loops, the tile size for that
  ///                  dimensions.
  ///
  /// \returns A list of generated loops. Contains twice as many loops as the
  ///          input loop nest; the first half are the floor loops and the
  ///          second half are the tile loops.</doc>
<def f='llvm/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp' l='1228' ll='1411' type='std::vector&lt;CanonicalLoopInfo *&gt; llvm::OpenMPIRBuilder::tileLoops(llvm::DebugLoc DL, ArrayRef&lt;llvm::CanonicalLoopInfo *&gt; Loops, ArrayRef&lt;llvm::Value *&gt; TileSizes)'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1195' u='c' c='_ZN12_GLOBAL__N_139OpenMPIRBuilderTest_TileSingleLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1261' u='c' c='_ZN12_GLOBAL__N_140OpenMPIRBuilderTest_TileNestedLoops_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1364' u='c' c='_ZN12_GLOBAL__N_150OpenMPIRBuilderTest_TileNestedLoopsWithBounds_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp' l='1466' u='c' c='_ZN12_GLOBAL__N_145OpenMPIRBuilderTest_TileSingleLoopCounts_Test8TestBodyEv'/>
