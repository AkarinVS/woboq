<dec f='llvm/compiler-rt/lib/lsan/lsan_common.h' l='152' type='void __lsan::ScanRangeForPointers(__sanitizer::uptr begin, __sanitizer::uptr end, __lsan::Frontier * frontier, const char * region_type, __lsan::ChunkTag tag)'/>
<def f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='185' ll='219' type='void __lsan::ScanRangeForPointers(__sanitizer::uptr begin, __sanitizer::uptr end, __lsan::Frontier * frontier, const char * region_type, __lsan::ChunkTag tag)'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='229' u='c' c='__lsan::ScanGlobalRange'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='232' u='c' c='__lsan::ScanGlobalRange'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='234' u='c' c='__lsan::ScanGlobalRange'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='240' u='c' c='__lsan::ForEachExtraStackRangeCb'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='310' u='c' c='__lsan::ProcessThreads'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='334' u='c' c='__lsan::ProcessThreads'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='346' u='c' c='__lsan::ProcessThreads'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='349' u='c' c='__lsan::ProcessThreads'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='352' u='c' c='__lsan::ProcessThreads'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='376' u='c' c='__lsan::ProcessThreads'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='405' u='c' c='__lsan::ScanRootRegion'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='433' u='c' c='__lsan::FloodFillTag'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='444' u='c' c='__lsan::MarkIndirectlyLeakedCb'/>
<doc f='llvm/compiler-rt/lib/lsan/lsan_common.cpp' l='179'>// Scans the memory range, looking for byte patterns that point into allocator
// chunks. Marks those chunks with |tag| and adds them to |frontier|.
// There are two usage modes for this function: finding reachable chunks
// (|tag| = kReachable) and finding indirectly leaked chunks
// (|tag| = kIndirectlyLeaked). In the second case, there&apos;s no flood fill,
// so |frontier| = 0.</doc>
