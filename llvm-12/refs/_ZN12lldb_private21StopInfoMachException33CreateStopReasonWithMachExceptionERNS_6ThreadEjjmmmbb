<dec f='llvm/lldb/source/Plugins/Process/Utility/StopInfoMachException.h' l='38' type='static lldb::StopInfoSP lldb_private::StopInfoMachException::CreateStopReasonWithMachException(lldb_private::Thread &amp; thread, uint32_t exc_type, uint32_t exc_data_count, uint64_t exc_code, uint64_t exc_sub_code, uint64_t exc_sub_sub_code, bool pc_already_adjusted = true, bool adjust_pc_if_needed = false)'/>
<def f='llvm/lldb/source/Plugins/Process/Utility/StopInfoMachException.cpp' l='335' ll='539' type='static lldb::StopInfoSP lldb_private::StopInfoMachException::CreateStopReasonWithMachException(lldb_private::Thread &amp; thread, uint32_t exc_type, uint32_t exc_data_count, uint64_t exc_code, uint64_t exc_sub_code, uint64_t exc_sub_sub_code, bool pc_already_adjusted = true, bool adjust_pc_if_needed = false)'/>
<doc f='llvm/lldb/source/Plugins/Process/Utility/StopInfoMachException.h' l='35'>// Since some mach exceptions will be reported as breakpoints, signals,
  // or trace, we use this static accessor which will translate the mach
  // exception into the correct StopInfo.</doc>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp' l='1810' u='c' c='_ZN12lldb_private18process_gdb_remote16ProcessGDBRemote17SetThreadStopInfoEmRSt3mapIjNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIjESaI2035141'/>
<use f='llvm/lldb/source/Plugins/Process/minidump/ProcessMinidump.cpp' l='352' u='c' c='_ZN12lldb_private8minidump15ProcessMinidump21RefreshStateAfterStopEv'/>
