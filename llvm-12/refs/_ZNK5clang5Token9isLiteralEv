<def f='llvm/clang/include/clang/Lex/Token.h' l='115' ll='117' type='bool clang::Token::isLiteral() const'/>
<use f='llvm/clang/include/clang/Lex/Token.h' l='184' u='c' c='_ZNK5clang5Token17getIdentifierInfoEv'/>
<doc f='llvm/clang/include/clang/Lex/Token.h' l='113'>/// Return true if this is a &quot;literal&quot;, like a numeric
  /// constant, string, etc.</doc>
<use f='llvm/clang/lib/ARCMigrate/ObjCMT.cpp' l='822' u='c' c='_ZL17UseNSOptionsMacroRN5clang12PreprocessorERNS_10ASTContextEPKNS_8EnumDeclE'/>
<use f='llvm/clang/lib/Format/ContinuationIndenter.cpp' l='512' u='c' c='_ZN5clang6format20ContinuationIndenter9mustBreakERKNS0_9LineStateE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='90' u='c' c='_ZN5clang6format12_GLOBAL__N_116AnnotatingParser10parseAngleEv'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='1590' u='c' c='_ZN5clang6format12_GLOBAL__N_116AnnotatingParser18determineTokenTypeERNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='1860' u='c' c='_ZN5clang6format12_GLOBAL__N_116AnnotatingParser14rParenEndsCastERKNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='1990' u='c' c='_ZN5clang6format12_GLOBAL__N_116AnnotatingParser21determineStarAmpUsageERKNS0_11FormatTokenEbb'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='1993' u='c' c='_ZN5clang6format12_GLOBAL__N_116AnnotatingParser21determineStarAmpUsageERKNS0_11FormatTokenEbb'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2445' u='c' c='_ZN5clang6formatL25isFunctionDeclarationNameERKNS0_11FormatTokenERKNS0_13AnnotatedLineE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2880' u='c' c='_ZN5clang6format14TokenAnnotator20spaceRequiredBetweenERKNS0_13AnnotatedLineERKNS0_11FormatTokenES7_'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2900' u='c' c='_ZN5clang6format14TokenAnnotator20spaceRequiredBetweenERKNS0_13AnnotatedLineERKNS0_11FormatTokenES7_'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2919' u='c' c='_ZN5clang6format14TokenAnnotator20spaceRequiredBetweenERKNS0_13AnnotatedLineERKNS0_11FormatTokenES7_'/>
<use f='llvm/clang/lib/Format/UnwrappedLineParser.cpp' l='957' u='c' c='_ZN5clang6formatL20mustBeJSIdentOrValueERKNS0_18AdditionalKeywordsEPKNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Frontend/PrintPreprocessedOutput.cpp' l='789' u='c' c='_ZL23PrintPreprocessedTokensRN5clang12PreprocessorERNS_5TokenEPN12_GLOBAL__N_124PrintPPOutputPPCallbacksERN4llvm11raw_ostreamE'/>
<use f='llvm/clang/lib/Lex/Lexer.cpp' l='418' u='c' c='_ZN5clang5Lexer11getSpellingERKNS_5TokenERPKcRKNS_13SourceManagerERKNS_11LangOptionsEPb'/>
<use f='llvm/clang/lib/Lex/MacroInfo.cpp' l='169' u='c' c='_ZNK5clang9MacroInfo4dumpEv'/>
<use f='llvm/clang/lib/Lex/Preprocessor.cpp' l='497' u='c' c='_ZN5clang12Preprocessor12CreateStringEN4llvm9StringRefERNS_5TokenENS_14SourceLocationES5_'/>
<use f='llvm/clang/lib/Lex/TokenConcatenation.cpp' l='133' u='c' c='_ZL12GetFirstCharRKN5clang12PreprocessorERKNS_5TokenE'/>
<use f='llvm/clang/lib/Lex/TokenLexer.cpp' l='618' u='c' c='_ZL28isWideStringLiteralFromMacroRKN5clang5TokenES2_'/>
<use f='llvm/clang/lib/StaticAnalyzer/Core/CheckerHelpers.cpp' l='133' u='c' c='_ZN5clang4ento18tryExpandAsIntegerEN4llvm9StringRefERKNS_12PreprocessorE'/>
<use f='llvm/clang/tools/libclang/CIndex.cpp' l='6858' u='c' c='_ZL9getTokensPN5clang7ASTUnitENS_11SourceRangeERN4llvm15SmallVectorImplI7CXTokenEE'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangModulesDeclVendor.cpp' l='542' u='c' c='_ZN12_GLOBAL__N_126ClangModulesDeclVendorImpl12ForEachMacroERKSt6vectorImSaImEESt8functionIFbN4llvm9StringRefES8_EE'/>
