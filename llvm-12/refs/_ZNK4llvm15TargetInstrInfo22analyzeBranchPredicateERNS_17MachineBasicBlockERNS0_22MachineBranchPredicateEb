<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='654' ll='658' type='bool llvm::TargetInstrInfo::analyzeBranchPredicate(llvm::MachineBasicBlock &amp; MBB, llvm::TargetInstrInfo::MachineBranchPredicate &amp; MBP, bool AllowModify = false) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='647'>/// Analyze the branching code at the end of MBB and parse it into the
  /// MachineBranchPredicate structure if possible.  Returns false on success
  /// and true on failure.
  ///
  /// If AllowModify is true, then this routine is allowed to modify the basic
  /// block (e.g. delete instructions after the unconditional branch).
  ///</doc>
<use f='llvm/llvm/lib/CodeGen/ImplicitNullChecks.cpp' l='568' u='c' c='_ZN12_GLOBAL__N_118ImplicitNullChecks25analyzeBlockForNullChecksERN4llvm17MachineBasicBlockERNS1_15SmallVectorImplINS0_9NullCheckEEE'/>
<use f='llvm/llvm/lib/CodeGen/MachineSink.cpp' l='916' u='c' c='_ZL32SinkingPreventsImplicitNullCheckRN4llvm12MachineInstrEPKNS_15TargetInstrInfoEPKNS_18TargetRegisterInfoE'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='356' c='_ZNK4llvm16AArch64InstrInfo22analyzeBranchPredicateERNS_17MachineBasicBlockERNS_15TargetInstrInfo22MachineBranchPredicateEb'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InstrInfo.cpp' l='3154' c='_ZNK4llvm12X86InstrInfo22analyzeBranchPredicateERNS_17MachineBasicBlockERNS_15TargetInstrInfo22MachineBranchPredicateEb'/>
