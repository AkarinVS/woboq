<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangModulesDeclVendor.h' l='97' type='void lldb_private::ClangModulesDeclVendor::ForEachMacro(const lldb_private::ClangModulesDeclVendor::ModuleVector &amp; modules, std::function&lt;bool (llvm::StringRef, llvm::StringRef)&gt; handler)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangModulesDeclVendor.h' l='84'>/// Enumerate all the macros that are defined by a given set of modules
  /// that are already imported.
  ///
  /// \param[in] modules
  ///     The unique IDs for all modules to query.  Later modules have higher
  ///     priority, just as if you @imported them in that order.  This matters
  ///     if module A #defines a macro and module B #undefs it.
  ///
  /// \param[in] handler
  ///     A function to call with the identifier of this macro and the text of
  ///     each #define (including the #define directive). #undef directives are
  ///     not included; we simply elide any corresponding #define. If this
  ///     function returns true, we stop the iteration immediately.</doc>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionSourceCode.cpp' l='346' u='c' c='_ZNK12lldb_private25ClangExpressionSourceCode7GetTextERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_16ExecutionContextEbbN4llvm8ArrayRefIS6_EE'/>
<ovr f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangModulesDeclVendor.cpp' l='423' c='_ZN12_GLOBAL__N_126ClangModulesDeclVendorImpl12ForEachMacroERKSt6vectorImSaImEESt8functionIFbN4llvm9StringRefES8_EE'/>
