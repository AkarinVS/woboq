<dec f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='237' type='llvm::json::Value lldb_vscode::CreateBreakpoint(lldb::SBBreakpoint &amp; bp, llvm::Optional&lt;llvm::StringRef&gt; request_path = llvm::None, llvm::Optional&lt;uint32_t&gt; request_line = llvm::None)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='215'>/// Converts breakpoint location to a Visual Studio Code &quot;Breakpoint&quot;
///
/// \param[in] bp
///     A LLDB breakpoint object to convert into a JSON value
///
/// \param[in] request_path
///     An optional source path to use when creating the &quot;Source&quot; object of this
///     breakpoint. If not specified, the &quot;Source&quot; object is created from the
///     breakpoint&apos;s address&apos; LineEntry. It is useful to ensure the same source
///     paths provided by the setBreakpoints request are returned to the IDE.
///
/// \param[in] request_line
///     An optional line to use when creating the resulting &quot;Breakpoint&quot; object.
///     It is used if the breakpoint has no valid locations.
///     It is useful to ensure the same line
///     provided by the setBreakpoints request are returned to the IDE as a
///     fallback.
///
/// \return
///     A &quot;Breakpoint&quot; JSON object with that follows the formal JSON
///     definition outlined by Microsoft.</doc>
<def f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='285' ll='330' type='llvm::json::Value lldb_vscode::CreateBreakpoint(lldb::SBBreakpoint &amp; bp, llvm::Optional&lt;llvm::StringRef&gt; request_path = llvm::None, llvm::Optional&lt;uint32_t&gt; request_line = llvm::None)'/>
<use f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='420' u='c' c='_ZN11lldb_vscode16AppendBreakpointERN4lldb12SBBreakpointERN4llvm4json5ArrayENS3_8OptionalINS3_9StringRefEEENS7_IjEE'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='237'>// &quot;Breakpoint&quot;: {
//   &quot;type&quot;: &quot;object&quot;,
//   &quot;description&quot;: &quot;Information about a Breakpoint created in setBreakpoints
//                   or setFunctionBreakpoints.&quot;,
//   &quot;properties&quot;: {
//     &quot;id&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;An optional unique identifier for the breakpoint.&quot;
//     },
//     &quot;verified&quot;: {
//       &quot;type&quot;: &quot;boolean&quot;,
//       &quot;description&quot;: &quot;If true breakpoint could be set (but not necessarily
//                       at the desired location).&quot;
//     },
//     &quot;message&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;description&quot;: &quot;An optional message about the state of the breakpoint.
//                       This is shown to the user and can be used to explain
//                       why a breakpoint could not be verified.&quot;
//     },
//     &quot;source&quot;: {
//       &quot;$ref&quot;: &quot;#/definitions/Source&quot;,
//       &quot;description&quot;: &quot;The source where the breakpoint is located.&quot;
//     },
//     &quot;line&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;The start line of the actual range covered by the
//                       breakpoint.&quot;
//     },
//     &quot;column&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;An optional start column of the actual range covered
//                       by the breakpoint.&quot;
//     },
//     &quot;endLine&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;An optional end line of the actual range covered by
//                       the breakpoint.&quot;
//     },
//     &quot;endColumn&quot;: {
//       &quot;type&quot;: &quot;integer&quot;,
//       &quot;description&quot;: &quot;An optional end column of the actual range covered by
//                       the breakpoint. If no end line is given, then the end
//                       column is assumed to be in the start line.&quot;
//     }
//   },
//   &quot;required&quot;: [ &quot;verified&quot; ]
// }</doc>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='430' u='c' c='_ZN12_GLOBAL__N_119EventThreadFunctionEv'/>
