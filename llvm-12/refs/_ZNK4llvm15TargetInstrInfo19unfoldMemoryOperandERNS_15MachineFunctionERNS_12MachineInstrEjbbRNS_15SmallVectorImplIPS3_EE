<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1245' ll='1250' type='bool llvm::TargetInstrInfo::unfoldMemoryOperand(llvm::MachineFunction &amp; MF, llvm::MachineInstr &amp; MI, unsigned int Reg, bool UnfoldLoad, bool UnfoldStore, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; NewMIs) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1242'>/// unfoldMemoryOperand - Separate a single instruction which folded a load or
  /// a store or a load and a store into two or more instruction. If this is
  /// possible, returns true as well as the new instructions by reference.</doc>
<use f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='1344' u='c' c='_ZN12_GLOBAL__N_115MachineLICMBase20ExtractHoistableLoadEPN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp' l='1221' u='c' c='_ZN12_GLOBAL__N_125TwoAddressInstructionPass23tryInstructionTransformERN4llvm26MachineInstrBundleIteratorINS1_12MachineInstrELb0EEES5_jjjb'/>
<use f='llvm/llvm/lib/Target/X86/X86CmovConversion.cpp' l='761' u='c' c='_ZNK12_GLOBAL__N_120X86CmovConverterPass26convertCmovInstsToBranchesERN4llvm15SmallVectorImplIPNS1_12MachineInstrEEE'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InstrInfo.cpp' l='6244' c='_ZNK4llvm12X86InstrInfo19unfoldMemoryOperandERNS_15MachineFunctionERNS_12MachineInstrEjbbRNS_15SmallVectorImplIPS3_EE'/>
