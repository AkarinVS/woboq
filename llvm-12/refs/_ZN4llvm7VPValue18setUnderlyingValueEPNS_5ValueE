<def f='llvm/llvm/lib/Transforms/Vectorize/VPlanValue.h' l='77' ll='80' type='void llvm::VPValue::setUnderlyingValue(llvm::Value * Val)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VPlan.h' l='748' u='c' c='_ZN4llvm13VPInstruction18setUnderlyingInstrEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h' l='124' u='c' c='_ZN4llvm9VPBuilder12createNaryOpEjNS_8ArrayRefIPNS_7VPValueEEEPNS_11InstructionE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/VPlanValue.h' l='69'>// DESIGN PRINCIPLE: Access to the underlying IR must be strictly limited to
  // the front-end and back-end of VPlan so that the middle-end is as
  // independent as possible of the underlying IR. We grant access to the
  // underlying IR using friendship. In that way, we should be able to use VPlan
  // for multiple underlying IRs (Polly?) by providing a new VPlan front-end,
  // back-end and analysis information for the new IR.

  // Set \p Val as the underlying Value of this VPValue.</doc>
