<dec f='llvm/lldb/include/lldb/Target/RegisterContext.h' l='69' type='bool lldb_private::RegisterContext::ReadAllRegisterValues(lldb_private::RegisterCheckpoint &amp; reg_checkpoint)'/>
<doc f='llvm/lldb/include/lldb/Target/RegisterContext.h' l='58'>// These two functions are used to implement &quot;push&quot; and &quot;pop&quot; of register
  // states.  They are used primarily for expression evaluation, where we need
  // to push a new state (storing the old one in data_sp) and then restoring
  // the original state by passing the data_sp we got from ReadAllRegisters to
  // WriteAllRegisterValues. ReadAllRegisters will do what is necessary to
  // return a coherent set of register values for this thread, which may mean
  // e.g. interrupting a thread that is sitting in a kernel trap.  That is a
  // somewhat disruptive operation, so these API&apos;s should only be used when
  // this behavior is needed.</doc>
<ovr f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteRegisterContext.cpp' l='446' c='_ZN12lldb_private18process_gdb_remote24GDBRemoteRegisterContext21ReadAllRegisterValuesERNS_18RegisterCheckpointE'/>
<def f='llvm/lldb/source/Target/RegisterContext.cpp' l='429' ll='432' type='bool lldb_private::RegisterContext::ReadAllRegisterValues(lldb_private::RegisterCheckpoint &amp; reg_checkpoint)'/>
<use f='llvm/lldb/source/Target/Thread.cpp' l='493' u='c' c='_ZN12lldb_private6Thread21CheckpointThreadStateERNS0_21ThreadStateCheckpointE'/>
