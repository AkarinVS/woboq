<dec f='llvm/lldb/include/lldb/Core/AddressRange.h' l='133' type='bool lldb_private::AddressRange::ContainsFileAddress(lldb::addr_t file_addr) const'/>
<doc f='llvm/lldb/include/lldb/Core/AddressRange.h' l='123'>/// Check if the resolved file address \a file_addr is contained within this
  /// object&apos;s file address range.
  ///
  /// \param[in] file_addr
  ///     A section offset address object reference.
  ///
  /// \return
  ///     Returns \b true if both \a this has a resolvable file
  ///     address value and \a so_addr is contained in the address
  ///     range, \b false otherwise.</doc>
<def f='llvm/lldb/source/Core/AddressRange.cpp' l='79' ll='91' type='bool lldb_private::AddressRange::ContainsFileAddress(lldb::addr_t file_addr) const'/>
<use f='llvm/lldb/source/Core/IOHandlerCursesGUI.cpp' l='3733' u='c' c='_ZN24SourceFileWindowDelegate18WindowDelegateDrawERN6curses6WindowEb'/>
<use f='llvm/lldb/source/Plugins/UnwindAssembly/InstEmulation/UnwindAssemblyInstEmulation.cpp' l='258' u='c' c='_ZN27UnwindAssemblyInstEmulation36GetNonCallSiteUnwindPlanFromAssemblyERN12lldb_private12AddressRangeEPhmRNS0_10UnwindPlanE'/>
<use f='llvm/lldb/source/Symbol/Symbol.cpp' l='568' u='c' c='_ZNK12lldb_private6Symbol19ContainsFileAddressEm'/>
