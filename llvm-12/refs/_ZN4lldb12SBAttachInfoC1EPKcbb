<dec f='llvm/lldb/include/lldb/API/SBAttachInfo.h' l='59' type='void lldb::SBAttachInfo::SBAttachInfo(const char * path, bool wait_for, bool async)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='5297' u='c' c='_ZL30_wrap_new_SBAttachInfo__SWIG_3P7_objectlPS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBAttachInfo.h' l='37'>/// Attach to a process by name.
  ///
  /// Future calls to SBTarget::Attach(...) will be synchronous or
  /// asynchronous depending on the \a async argument.
  ///
  /// \param[in] path
  ///     A full or partial name for the process to attach to.
  ///
  /// \param[in] wait_for
  ///     If \b false, attach to an existing process whose name matches.
  ///     If \b true, then wait for the next process whose name matches.
  ///
  /// \param[in] async
  ///     If \b false, then the SBTarget::Attach(...) call will be a
  ///     synchronous call with no way to cancel the attach in
  ///     progress.
  ///     If \b true, then the SBTarget::Attach(...) function will
  ///     return immediately and clients are expected to wait for a
  ///     process eStateStopped event if a suitable process is
  ///     eventually found. If the client wants to cancel the event,
  ///     SBProcess::Stop() can be called and an eStateExited process
  ///     event will be delivered.</doc>
<def f='llvm/lldb/source/API/SBAttachInfo.cpp' l='39' ll='48' type='void lldb::SBAttachInfo::SBAttachInfo(const char * path, bool wait_for, bool async)'/>
