<dec f='llvm/llvm/include/llvm/Analysis/LoopCacheAnalysis.h' l='93' type='llvm::CacheCostTy llvm::IndexedReference::computeRefCost(const llvm::Loop &amp; L, unsigned int CLS) const'/>
<def f='llvm/llvm/lib/Analysis/LoopCacheAnalysis.cpp' l='264' ll='321' type='llvm::CacheCostTy llvm::IndexedReference::computeRefCost(const llvm::Loop &amp; L, unsigned int CLS) const'/>
<use f='llvm/llvm/lib/Analysis/LoopCacheAnalysis.cpp' l='650' u='c' c='_ZNK4llvm9CacheCost24computeRefGroupCacheCostERKNS_11SmallVectorISt10unique_ptrINS_16IndexedReferenceESt14default_deleteIS3_EELj8EEERKNS_4LoopE'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopCacheAnalysis.h' l='84'>/// Compute the cost of the reference w.r.t. the given loop \p L when it is
  /// considered in the innermost position in the loop nest.
  /// The cost is defined as:
  ///   - equal to one if the reference is loop invariant, or
  ///   - equal to &apos;(TripCount * stride) / cache_line_size&apos; if:
  ///     + the reference stride is less than the cache line size, and
  ///     + the coefficient of this loop&apos;s index variable used in all other
  ///       subscripts is zero
  ///   - or otherwise equal to &apos;TripCount&apos;.</doc>
