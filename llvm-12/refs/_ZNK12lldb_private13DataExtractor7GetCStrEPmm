<dec f='llvm/lldb/include/lldb/Utility/DataExtractor.h' l='303' type='const char * lldb_private::DataExtractor::GetCStr(lldb::offset_t * offset_ptr, lldb::offset_t len) const'/>
<doc f='llvm/lldb/include/lldb/Utility/DataExtractor.h' l='282'>/// Extract a C string from \a *offset_ptr with field size \a len.
  ///
  /// Returns a pointer to a C String from the data at the offset pointed to
  /// by \a offset_ptr, with a field length of \a len.
  /// A NULL terminated C string will be extracted and the \a offset_ptr
  /// will be updated with the offset of the byte that follows the fixed
  /// length field.
  ///
  /// \param[in,out] offset_ptr
  ///     A pointer to an offset within the data that will be advanced
  ///     by the appropriate number of bytes if the value is extracted
  ///     correctly. If the offset is out of bounds or there are not
  ///     enough bytes to extract this value, the offset will be left
  ///     unmodified.
  ///
  /// \return
  ///     A pointer to the C string value in the data. If the offset
  ///     pointed to by \a offset_ptr is out of bounds, or if the
  ///     offset plus the length of the field is out of bounds, or if
  ///     the field does not contain a NULL terminator byte, nullptr will
  ///     be returned.</doc>
<use f='llvm/lldb/source/Plugins/ObjectFile/ELF/ObjectFileELF.cpp' l='235' u='c' c='_ZN7ELFNote5ParseERKN12lldb_private13DataExtractorEPm'/>
<use f='llvm/lldb/source/Plugins/Process/elf-core/ProcessElfCore.cpp' l='552' u='c' c='_ZN14ProcessElfCore17parseFreeBSDNotesEN4llvm8ArrayRefIN12lldb_private8CoreNoteEEE'/>
<def f='llvm/lldb/source/Utility/DataExtractor.cpp' l='817' ll='827' type='const char * lldb_private::DataExtractor::GetCStr(lldb::offset_t * offset_ptr, lldb::offset_t len) const'/>
<doc f='llvm/lldb/source/Utility/DataExtractor.cpp' l='809'>// Extracts a NULL terminated C string from the fixed length field of length
// &quot;len&quot; at the offset pointed to by &quot;offset_ptr&quot;. The &quot;offset_ptr&quot; will be
// updated with the offset of the byte that follows the fixed length field.
//
// If the offset pointed to by &quot;offset_ptr&quot; is out of bounds, or if the offset
// plus the length of the field is out of bounds, or if the field does not
// contain a NULL terminator byte, nullptr will be returned and &quot;offset_ptr&quot;
// will not be updated.</doc>
