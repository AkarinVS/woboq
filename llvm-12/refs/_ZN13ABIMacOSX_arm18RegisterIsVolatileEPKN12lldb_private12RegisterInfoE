<dec f='llvm/lldb/source/Plugins/ABI/ARM/ABIMacOSX_arm.h' l='37' type='bool ABIMacOSX_arm::RegisterIsVolatile(const lldb_private::RegisterInfo * reg_info)'/>
<inh f='llvm/lldb/include/lldb/Target/ABI.h' l='102' c='_ZN12lldb_private3ABI18RegisterIsVolatileEPKNS_12RegisterInfoE'/>
<def f='llvm/lldb/source/Plugins/ABI/ARM/ABIMacOSX_arm.cpp' l='1864' ll='2017' type='bool ABIMacOSX_arm::RegisterIsVolatile(const lldb_private::RegisterInfo * reg_info)'/>
<doc f='llvm/lldb/source/Plugins/ABI/ARM/ABIMacOSX_arm.cpp' l='1840'>// cf. &quot;ARMv6 Function Calling Conventions&quot;
// https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html
// and &quot;ARMv7 Function Calling Conventions&quot;
// https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html

// ARMv7 on iOS general purpose reg rules:
//    r0-r3 not preserved  (used for argument passing)
//    r4-r6 preserved
//    r7    preserved (frame pointer)
//    r8    preserved
//    r9    not preserved (usable as volatile scratch register with iOS 3.x and
//    later)
//    r10-r11 preserved
//    r12   not presrved
//    r13   preserved (stack pointer)
//    r14   not preserved (link register)
//    r15   preserved (pc)
//    cpsr  not preserved (different rules for different bits)

// ARMv7 on iOS floating point rules:
//    d0-d7   not preserved   (aka s0-s15, q0-q3)
//    d8-d15  preserved       (aka s16-s31, q4-q7)
//    d16-d31 not preserved   (aka q8-q15)</doc>
