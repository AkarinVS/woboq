<dec f='llvm/polly/lib/External/isl/isl_polynomial_private.h' l='218' type='isl_qpolynomial_fold * isl_qpolynomial_fold_fold_on_domain(isl_map * set, isl_qpolynomial_fold * fold1, isl_qpolynomial_fold * fold2)'/>
<use f='llvm/polly/lib/External/isl/isl_bernstein.c' l='141' u='c' c='add_fold'/>
<use f='llvm/polly/lib/External/isl/isl_bernstein.c' l='144' u='c' c='add_fold'/>
<def f='llvm/polly/lib/External/isl/isl_fold.c' l='724' ll='765' type='isl_qpolynomial_fold * isl_qpolynomial_fold_fold_on_domain(isl_map * set, isl_qpolynomial_fold * fold1, isl_qpolynomial_fold * fold2)'/>
<use f='llvm/polly/lib/External/isl/isl_fold.c' l='852' u='c' c='isl_qpolynomial_fold_add_on_domain'/>
<use f='llvm/polly/lib/External/isl/isl_fold.c' l='1159' u='c' c='isl_pw_qpolynomial_fold_fold'/>
<doc f='llvm/polly/lib/External/isl/isl_fold.c' l='716'>/* Combine &quot;fold1&quot; and &quot;fold2&quot; into a single reduction, eliminating
 * those elements of one reduction that are already covered by the other
 * reduction on &quot;set&quot;.
 *
 * If &quot;fold1&quot; or &quot;fold2&quot; is an empty reduction, then return
 * the other reduction.
 * If &quot;fold1&quot; or &quot;fold2&quot; is a NaN, then return this NaN.
 */</doc>
