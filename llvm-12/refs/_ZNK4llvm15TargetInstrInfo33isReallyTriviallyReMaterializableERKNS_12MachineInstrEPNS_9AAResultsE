<use f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='128' u='c' c='_ZNK4llvm15TargetInstrInfo27isTriviallyReMaterializableERKNS_12MachineInstrEPNS_9AAResultsE'/>
<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='140' ll='143' type='bool llvm::TargetInstrInfo::isReallyTriviallyReMaterializable(const llvm::MachineInstr &amp; MI, llvm::AAResults * AA) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='133'>/// For instructions with opcodes for which the M_REMATERIALIZABLE flag is
  /// set, this hook lets the target specify whether the instruction is actually
  /// trivially rematerializable, taking into consideration its operands. This
  /// predicate must return false if the instruction has any side effects other
  /// than producing a value, or if it requres any address registers that are
  /// not always available.
  /// Requirements must be check as stated in isTriviallyReMaterializable() .</doc>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp' l='108' c='_ZNK4llvm11SIInstrInfo33isReallyTriviallyReMaterializableERKNS_12MachineInstrEPNS_9AAResultsE'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp' l='6506' c='_ZNK4llvm16ARMBaseInstrInfo33isReallyTriviallyReMaterializableERKNS_12MachineInstrEPNS_9AAResultsE'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='1089' c='_ZNK4llvm12PPCInstrInfo33isReallyTriviallyReMaterializableERKNS_12MachineInstrEPNS_9AAResultsE'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyInstrInfo.cpp' l='41' c='_ZNK4llvm20WebAssemblyInstrInfo33isReallyTriviallyReMaterializableERKNS_12MachineInstrEPNS_9AAResultsE'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InstrInfo.cpp' l='966' c='_ZNK4llvm12X86InstrInfo33isReallyTriviallyReMaterializableERKNS_12MachineInstrEPNS_9AAResultsE'/>
