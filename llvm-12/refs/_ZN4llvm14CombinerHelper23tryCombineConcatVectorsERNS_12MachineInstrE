<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h' l='172' type='bool llvm::CombinerHelper::tryCombineConcatVectors(llvm::MachineInstr &amp; MI)'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp' l='160' ll='168' type='bool llvm::CombinerHelper::tryCombineConcatVectors(llvm::MachineInstr &amp; MI)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h' l='164'>/// If \p MI is G_CONCAT_VECTORS, try to combine it.
  /// Returns true if MI changed.
  /// Right now, we support:
  /// - concat_vector(undef, undef) =&gt; undef
  /// - concat_vector(build_vector(A, B), build_vector(C, D)) =&gt;
  ///   build_vector(A, B, C, D)
  ///
  /// \pre MI.getOpcode() == G_CONCAT_VECTORS.</doc>
<use f='llvm/llvm/lib/Target/AArch64/GISel/AArch64PreLegalizerCombiner.cpp' l='104' u='c' c='_ZNK12_GLOBAL__N_131AArch64PreLegalizerCombinerInfo7combineERN4llvm19GISelChangeObserverERNS1_12MachineInstrERNS1_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUPreLegalizerCombiner.cpp' l='69' u='c' c='_ZNK12_GLOBAL__N_130AMDGPUPreLegalizerCombinerInfo7combineERN4llvm19GISelChangeObserverERNS1_12MachineInstrERNS1_16MachineIRBuilderE'/>
