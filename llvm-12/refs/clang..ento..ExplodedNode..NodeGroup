<def f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h' l='83' ll='119'/>
<use f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h' l='129'/>
<use f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h' l='132'/>
<size>8</size>
<doc f='llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h' l='74'>/// Efficiently stores a list of ExplodedNodes, or an optional flag.
  ///
  /// NodeGroup provides opaque storage for a list of ExplodedNodes, optimizing
  /// for the case when there is only one node in the group. This is a fairly
  /// common case in an ExplodedGraph, where most nodes have only one
  /// predecessor and many have only one successor. It can also be used to
  /// store a flag rather than a node list, which ExplodedNode uses to mark
  /// whether a node is a sink. If the flag is set, the group is implicitly
  /// empty and no nodes may be added.</doc>
<mbr r='clang::ento::ExplodedNode::NodeGroup::P' o='0' t='uintptr_t'/>
<fun r='_ZN5clang4ento12ExplodedNode9NodeGroupC1Eb'/>
<fun r='_ZNK5clang4ento12ExplodedNode9NodeGroup5beginEv'/>
<fun r='_ZNK5clang4ento12ExplodedNode9NodeGroup3endEv'/>
<fun r='_ZNK5clang4ento12ExplodedNode9NodeGroup4sizeEv'/>
<fun r='_ZNK5clang4ento12ExplodedNode9NodeGroup5emptyEv'/>
<fun r='_ZN5clang4ento12ExplodedNode9NodeGroup7addNodeEPS1_RNS0_13ExplodedGraphE'/>
<fun r='_ZN5clang4ento12ExplodedNode9NodeGroup11replaceNodeEPS1_'/>
<fun r='_ZNK5clang4ento12ExplodedNode9NodeGroup7getFlagEv'/>
