<inh f='llvm/llvm/include/llvm/IR/PassManager.h' l='374' c='llvm::PassInfoMixin'/>
<def f='llvm/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h' l='50' ll='53'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h' l='50'/>
<size>1</size>
<doc f='llvm/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h' l='41'>/// Computes function attributes in post-order over the call graph.
///
/// By operating in post-order, this pass computes precise attributes for
/// called functions prior to processsing their callers. This &quot;bottom-up&quot;
/// approach allows powerful interprocedural inference of function attributes
/// like memory access patterns, etc. It can discover functions that do not
/// access memory, or only read memory, and give them the readnone/readonly
/// attribute. It also discovers function arguments that are not captured by
/// the function and marks them with the nocapture attribute.</doc>
<fun r='_ZN4llvm26PostOrderFunctionAttrsPass3runERNS_13LazyCallGraph3SCCERNS_15AnalysisManagerIS2_JRS1_EEES5_RNS_17CGSCCUpdateResultE'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='971' c='_ZN4llvm11PassBuilder20buildInlinerPipelineENS0_17OptimizationLevelENS_18ThinOrFullLTOPhaseE'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1616' c='_ZN4llvm11PassBuilder23buildLTODefaultPipelineENS0_17OptimizationLevelEPNS_18ModuleSummaryIndexE'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1717' c='_ZN4llvm11PassBuilder23buildLTODefaultPipelineENS0_17OptimizationLevelEPNS_18ModuleSummaryIndexE'/>
<use f='llvm/llvm/lib/Passes/PassRegistry.def' l='138' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementE'/>
<use f='llvm/llvm/lib/Passes/PassRegistry.def' l='138' c='_ZN4llvm11PassBuilder14parseCGSCCPassERNS_11PassManagerINS_13LazyCallGraph3SCCENS_15AnalysisManagerIS3_JRS2_EEEJS5_RNS_17CGSCCUpdateResultEEEERKNS0_15PipelineElementE'/>
<size>1</size>
