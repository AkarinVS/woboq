<def f='llvm/lld/COFF/MinGW.h' l='50' ll='54'/>
<use f='llvm/lld/COFF/MinGW.h' l='56' c='_ZN3lld4coff17addWrappedSymbolsERN4llvm3opt12InputArgListE'/>
<use f='llvm/lld/COFF/MinGW.h' l='58' c='_ZN3lld4coff11wrapSymbolsEN4llvm8ArrayRefINS0_13WrappedSymbolEEE'/>
<use f='llvm/lld/COFF/Driver.cpp' l='2030' c='_ZN3lld4coff12LinkerDriver10linkerMainEN4llvm8ArrayRefIPKcEE'/>
<size>24</size>
<doc f='llvm/lld/COFF/MinGW.h' l='42'>// The -wrap option is a feature to rename symbols so that you can write
// wrappers for existing functions. If you pass `-wrap:foo`, all
// occurrences of symbol `foo` are resolved to `__wrap_foo` (so, you are
// expected to write `__wrap_foo` function as a wrapper). The original
// symbol becomes accessible as `__real_foo`, so you can call that from your
// wrapper.
//
// This data structure is instantiated for each -wrap option.</doc>
<mbr r='lld::coff::WrappedSymbol::sym' o='0' t='lld::coff::Symbol *'/>
<mbr r='lld::coff::WrappedSymbol::real' o='64' t='lld::coff::Symbol *'/>
<mbr r='lld::coff::WrappedSymbol::wrap' o='128' t='lld::coff::Symbol *'/>
<use f='llvm/lld/COFF/MinGW.cpp' l='194' c='_ZN3lld4coff17addWrappedSymbolsERN4llvm3opt12InputArgListE'/>
<use f='llvm/lld/COFF/MinGW.cpp' l='196' c='_ZN3lld4coff17addWrappedSymbolsERN4llvm3opt12InputArgListE'/>
<use f='llvm/lld/COFF/MinGW.cpp' l='236' c='_ZN3lld4coff11wrapSymbolsEN4llvm8ArrayRefINS0_13WrappedSymbolEEE'/>
<use f='llvm/lld/COFF/MinGW.cpp' l='238' c='_ZN3lld4coff11wrapSymbolsEN4llvm8ArrayRefINS0_13WrappedSymbolEEE'/>
<size>24</size>
