<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='611' type='llvm::Instruction * llvm::InstCombinerImpl::foldBinOpIntoSelectOrPhi(llvm::BinaryOperator &amp; I)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='870' u='c' c='_ZN4llvm16InstCombinerImpl19foldAddWithConstantERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1519' u='c' c='_ZN4llvm16InstCombinerImpl9visitFAddERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='610'>/// This is a convenience wrapper function for the above two functions.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='1879' u='c' c='_ZN4llvm16InstCombinerImpl8visitAndERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='2584' u='c' c='_ZN4llvm16InstCombinerImpl7visitOrERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='3350' u='c' c='_ZN4llvm16InstCombinerImpl8visitXorERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='213' u='c' c='_ZN4llvm16InstCombinerImpl8visitMulERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='440' u='c' c='_ZN4llvm16InstCombinerImpl9visitFMulERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='802' u='c' c='_ZN4llvm16InstCombinerImpl20commonIDivTransformsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='684' u='c' c='_ZN4llvm16InstCombinerImpl19FoldShiftByConstantEPNS_5ValueEPNS_8ConstantERNS_14BinaryOperatorE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1211' ll='1223' type='llvm::Instruction * llvm::InstCombinerImpl::foldBinOpIntoSelectOrPhi(llvm::BinaryOperator &amp; I)'/>
