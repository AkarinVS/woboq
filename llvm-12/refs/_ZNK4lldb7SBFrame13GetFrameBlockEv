<dec f='llvm/lldb/include/lldb/API/SBFrame.h' l='124' type='lldb::SBBlock lldb::SBFrame::GetFrameBlock() const'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='31115' u='c' c='_ZL27_wrap_SBFrame_GetFrameBlockP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBFrame.h' l='112'>/// Gets the lexical block that defines the stack frame. Another way to think
  /// of this is it will return the block that contains all of the variables
  /// for a stack frame. Inlined functions are represented as SBBlock objects
  /// that have inlined function information: the name of the inlined function,
  /// where it was called from. The block that is returned will be the first
  /// block at or above the block for the PC (SBFrame::GetBlock()) that defines
  /// the scope of the frame. When a function contains no inlined functions,
  /// this will be the top most lexical block that defines the function.
  /// When a function has inlined functions and the PC is currently
  /// in one of those inlined functions, this method will return the inlined
  /// block that defines this frame. If the PC isn&apos;t currently in an inlined
  /// function, the lexical block that defines the function is returned.</doc>
<def f='llvm/lldb/source/API/SBFrame.cpp' l='255' ll='274' type='lldb::SBBlock lldb::SBFrame::GetFrameBlock() const'/>
<use f='llvm/lldb/source/API/SBFrame.cpp' l='256' u='a' c='_ZNK4lldb7SBFrame13GetFrameBlockEv'/>
<use f='llvm/lldb/source/API/SBFrame.cpp' l='256' u='a' c='_ZNK4lldb7SBFrame13GetFrameBlockEv'/>
<use f='llvm/lldb/source/API/SBFrame.cpp' l='1311' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
