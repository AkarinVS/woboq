<def f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='30' ll='54'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='49'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='50'/>
<ovr f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='57' c='scudo::GlobalStats'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='57'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='67' c='_ZN5scudo11GlobalStats4linkEPNS_10LocalStatsE'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='72' c='_ZN5scudo11GlobalStats6unlinkEPNS_10LocalStatsE'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='97'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/local_cache.h' l='119' c='_ZN5scudo28SizeClassAllocatorLocalCache8getStatsEv'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/local_cache.h' l='130'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/secondary.h' l='307'/>
<size>40</size>
<doc f='llvm/compiler-rt/lib/scudo/standalone/stats.h' l='25'>// Per-thread stats, live in per-thread cache. We use atomics so that the
// numbers themselves are consistent. But we don&apos;t use atomic_{add|sub} or a
// lock, because those are expensive operations , and we only care for the stats
// to be &quot;somewhat&quot; correct: eg. if we call GlobalStats::get while a thread is
// LocalStats::add&apos;ing, this is OK, we will still get a meaningful number.</doc>
<fun r='_ZN5scudo10LocalStats21initLinkerInitializedEv'/>
<fun r='_ZN5scudo10LocalStats4initEv'/>
<fun r='_ZN5scudo10LocalStats3addENS_8StatTypeEm'/>
<fun r='_ZN5scudo10LocalStats3subENS_8StatTypeEm'/>
<fun r='_ZN5scudo10LocalStats3setENS_8StatTypeEm'/>
<fun r='_ZNK5scudo10LocalStats3getENS_8StatTypeE'/>
<mbr r='scudo::LocalStats::Next' o='0' t='scudo::LocalStats *'/>
<mbr r='scudo::LocalStats::Prev' o='64' t='scudo::LocalStats *'/>
<mbr r='scudo::LocalStats::StatsArray' o='128' t='scudo::atomic_uptr [3]'/>
