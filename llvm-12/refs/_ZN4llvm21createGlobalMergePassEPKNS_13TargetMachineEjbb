<dec f='llvm/llvm/include/llvm/CodeGen/Passes.h' l='415' type='llvm::Pass * llvm::createGlobalMergePass(const llvm::TargetMachine * TM, unsigned int MaximalOffset, bool OnlyOptimizeForSize = false, bool MergeExternalByDefault = false)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/Passes.h' l='411'>/// GlobalMerge - This pass merges internal (by default) globals into structs
  /// to enable reuse of a base pointer by indexed addressing modes.
  /// It can also be configured to focus on size optimizations only.
  ///</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalMerge.cpp' l='680' ll='686' type='llvm::Pass * llvm::createGlobalMergePass(const llvm::TargetMachine * TM, unsigned int Offset, bool OnlyOptimizeForSize = false, bool MergeExternalByDefault = false)'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp' l='536' u='c' c='_ZN12_GLOBAL__N_117AArch64PassConfig10addPreISelEv'/>
<use f='llvm/llvm/lib/Target/ARM/ARMTargetMachine.cpp' l='457' u='c' c='_ZN12_GLOBAL__N_113ARMPassConfig10addPreISelEv'/>
