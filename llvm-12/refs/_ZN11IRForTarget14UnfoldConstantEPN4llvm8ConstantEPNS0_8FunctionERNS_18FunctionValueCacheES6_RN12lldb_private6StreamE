<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='498' type='static bool IRForTarget::UnfoldConstant(llvm::Constant * old_constant, llvm::Function * llvm_function, IRForTarget::FunctionValueCache &amp; value_maker, IRForTarget::FunctionValueCache &amp; entry_instruction_finder, lldb_private::Stream &amp; error_stream)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.h' l='484'>/// UnfoldConstant operates on a constant [Old] which has just been replaced
  /// with a value [New].  We assume that new_value has been properly placed
  /// early in the function, in front of the first instruction in the entry
  /// basic block [FirstEntryInstruction].
  ///
  /// UnfoldConstant reads through the uses of Old and replaces Old in those
  /// uses with New.  Where those uses are constants, the function generates
  /// new instructions to compute the result of the new, non-constant
  /// expression and places them before FirstEntryInstruction.  These
  /// instructions replace the constant uses, so UnfoldConstant calls itself
  /// recursively for those.
  ///
  /// \return
  ///     True on success; false otherwise</doc>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='530' u='c' c='_ZN11IRForTarget22RewriteObjCConstStringEPN4llvm14GlobalVariableES2_'/>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1532' ll='1648' type='static bool IRForTarget::UnfoldConstant(llvm::Constant * old_constant, llvm::Function * llvm_function, IRForTarget::FunctionValueCache &amp; value_maker, IRForTarget::FunctionValueCache &amp; entry_instruction_finder, lldb_private::Stream &amp; error_stream)'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1573' u='c' c='_ZN11IRForTarget14UnfoldConstantEPN4llvm8ConstantEPNS0_8FunctionERNS_18FunctionValueCacheES6_RN12lldb_private6StreamE'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1613' u='c' c='_ZN11IRForTarget14UnfoldConstantEPN4llvm8ConstantEPNS0_8FunctionERNS_18FunctionValueCacheES6_RN12lldb_private6StreamE'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1812' u='c' c='_ZN11IRForTarget16ReplaceVariablesERN4llvm8FunctionE'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/IRForTarget.cpp' l='1531'>// This function does not report errors; its callers are responsible.</doc>
