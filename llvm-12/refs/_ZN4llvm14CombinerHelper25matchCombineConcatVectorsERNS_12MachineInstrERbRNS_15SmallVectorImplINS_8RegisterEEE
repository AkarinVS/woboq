<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h' l='180' type='bool llvm::CombinerHelper::matchCombineConcatVectors(llvm::MachineInstr &amp; MI, bool &amp; IsUndef, SmallVectorImpl&lt;llvm::Register&gt; &amp; Ops)'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp' l='163' u='c' c='_ZN4llvm14CombinerHelper23tryCombineConcatVectorsERNS_12MachineInstrE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp' l='170' ll='214' type='bool llvm::CombinerHelper::matchCombineConcatVectors(llvm::MachineInstr &amp; MI, bool &amp; IsUndef, SmallVectorImpl&lt;llvm::Register&gt; &amp; Ops)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h' l='173'>/// Check if the G_CONCAT_VECTORS \p MI is undef or if it
  /// can be flattened into a build_vector.
  /// In the first case \p IsUndef will be true.
  /// In the second case \p Ops will contain the operands needed
  /// to produce the flattened build_vector.
  ///
  /// \pre MI.getOpcode() == G_CONCAT_VECTORS.</doc>
