<dec f='llvm/clang/include/clang/Sema/Sema.h' l='2322' type='bool clang::Sema::isMicrosoftMissingTypename(const clang::CXXScopeSpec * SS, clang::Scope * S)'/>
<def f='llvm/clang/lib/Sema/SemaDecl.cpp' l='642' ll='656' type='bool clang::Sema::isMicrosoftMissingTypename(const clang::CXXScopeSpec * SS, clang::Scope * S)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='756' u='c' c='_ZN5clang4Sema23DiagnoseUnknownTypeNameERPNS_14IdentifierInfoENS_14SourceLocationEPNS_5ScopeEPNS_12CXXScopeSpecERNS_9OpaquePtrINS_8QualTypeEEEb'/>
<doc f='llvm/clang/lib/Sema/SemaDecl.cpp' l='628'>/// isMicrosoftMissingTypename - In Microsoft mode, within class scope,
/// if a CXXScopeSpec&apos;s type is equal to the type of one of the base classes
/// then downgrade the missing typename error to a warning.
/// This is needed for MSVC compatibility; Example:
/// @code
/// template&lt;class T&gt; class A {
/// public:
///   typedef int TYPE;
/// };
/// template&lt;class T&gt; class B : public A&lt;T&gt; {
/// public:
///   A&lt;T&gt;::TYPE a; // no typename required because A&lt;T&gt; is a base class.
/// };
/// @endcode</doc>
