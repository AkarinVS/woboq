<def f='llvm/compiler-rt/lib/scudo/standalone/release.h' l='50' ll='140'/>
<use f='llvm/compiler-rt/lib/scudo/standalone/release.h' l='224' c='_ZN5scudo21releaseFreeMemoryToOSERKNS_13IntrusiveListIT_EEmmmmPT0_T1_'/>
<size>72</size>
<doc f='llvm/compiler-rt/lib/scudo/standalone/release.h' l='42'>// A packed array of Counters. Each counter occupies 2^N bits, enough to store
// counter&apos;s MaxValue. Ctor will try to use a static buffer first, and if that
// fails (the buffer is too small or already locked), will allocate the
// required Buffer via map(). The caller is expected to check whether the
// initialization was successful by checking isAllocated() result. For
// performance sake, none of the accessors check the validity of the arguments,
// It is assumed that Index is always in [0, N) range and the value is not
// incremented past MaxValue.</doc>
<fun r='_ZN5scudo18PackedCounterArrayC1Emmm'/>
<fun r='_ZN5scudo18PackedCounterArrayD1Ev'/>
<fun r='_ZNK5scudo18PackedCounterArray11isAllocatedEv'/>
<fun r='_ZNK5scudo18PackedCounterArray8getCountEv'/>
<fun r='_ZNK5scudo18PackedCounterArray3getEmm'/>
<fun r='_ZNK5scudo18PackedCounterArray3incEmm'/>
<fun r='_ZNK5scudo18PackedCounterArray8incRangeEmmm'/>
<fun r='_ZNK5scudo18PackedCounterArray13getBufferSizeEv'/>
<smbr r='scudo::PackedCounterArray::StaticBufferCount' t='const scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::Regions' o='0' t='const scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::NumCounters' o='64' t='const scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::CounterSizeBitsLog' o='128' t='scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::CounterMask' o='192' t='scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::PackingRatioLog' o='256' t='scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::BitOffsetMask' o='320' t='scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::SizePerRegion' o='384' t='scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::BufferSize' o='448' t='scudo::uptr'/>
<mbr r='scudo::PackedCounterArray::Buffer' o='512' t='scudo::uptr *'/>
<smbr r='scudo::PackedCounterArray::Mutex' t='scudo::HybridMutex'/>
<smbr r='scudo::PackedCounterArray::StaticBuffer' t='scudo::uptr [2048]'/>
