<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='565' type='bool llvm::isGuaranteedToTransferExecutionToSuccessor(const llvm::Instruction * I)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='552'>/// Return true if this function can prove that the instruction I will
  /// always transfer execution to one of its successors (including the next
  /// instruction that follows within a basic block). E.g. this is not
  /// guaranteed for function calls that could loop infinitely.
  ///
  /// In other words, this function returns false for instructions that may
  /// transfer execution or fail to transfer execution in a way that is not
  /// captured in the CFG nor in the sequence of instructions within a basic
  /// block.
  ///
  /// Undefined behavior is assumed not to happen, so e.g. division is
  /// guaranteed to transfer execution to the following instruction even
  /// though division by zero might cause undefined behavior.</doc>
<use f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='129' u='c' c='_ZNK4llvm27ImplicitControlFlowTracking20isSpecialInstructionEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='724' u='c' c='_ZN4llvm29MustBeExecutedContextExplorer32getMustBeExecutedNextInstructionERNS_22MustBeExecutedIteratorEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6329' u='c' c='_ZN4llvm15ScalarEvolution17getLoopPropertiesEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='574' u='c' c='_ZN4llvm23isValidAssumeForContextEPKNS_11InstructionES2_PKNS_13DominatorTreeE'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5015' ll='5029' type='bool llvm::isGuaranteedToTransferExecutionToSuccessor(const llvm::Instruction * I)'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5035' u='c' c='_ZN4llvm42isGuaranteedToTransferExecutionToSuccessorEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5050' u='c' c='_ZN4llvm38isGuaranteedToExecuteForEveryIterationEPKNS_11InstructionEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5170' u='c' c='_ZL31programUndefinedIfUndefOrPoisonPKN4llvm5ValueEb'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5194' u='c' c='_ZL31programUndefinedIfUndefOrPoisonPKN4llvm5ValueEb'/>
<use f='llvm/llvm/lib/Transforms/IPO/FunctionAttrs.cpp' l='667' u='c' c='_ZL29addArgumentAttrsFromCallsitesRN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='660' u='c' c='_ZN4llvm16InstCombinerImpl32simplifyDivRemOfSelectWithZeroOpERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='2857' u='c' c='_ZN4llvm16InstCombinerImpl20visitUnreachableInstERNS_15UnreachableInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVNHoist.cpp' l='1181' u='c' c='_ZN4llvm8GVNHoist16hoistExpressionsERNS_8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='506' u='c' c='_ZL19replaceFoldableUsesPN4llvm11InstructionEPNS_5ValueE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1442' u='c' c='_ZN4llvm17JumpThreadingPass30simplifyPartiallyRedundantLoadEPNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='546' u='c' c='_ZN4llvm13MemCpyOptPass6moveUpEPNS_9StoreInstEPNS_11InstructionEPKNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Utils/AssumeBundleBuilder.cpp' l='465' u='c' c='_ZN12_GLOBAL__N_114AssumeSimplify10mergeRangeEPN4llvm10BasicBlockEPPNS1_13IntrinsicInstES6_'/>
<use f='llvm/llvm/lib/Transforms/Utils/AssumeBundleBuilder.cpp' l='494' u='c' c='_ZN12_GLOBAL__N_114AssumeSimplify12mergeAssumesEv'/>
<use f='llvm/llvm/lib/Transforms/Utils/InlineFunction.cpp' l='1185' u='c' c='_ZL31MayContainThrowingOrExitingCallPN4llvm11InstructionES1_'/>
<use f='llvm/llvm/unittests/Analysis/ValueTrackingTest.cpp' l='667' u='c' c='_ZN59ValueTracking_GuaranteedToTransferExecutionToSuccessor_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/ValueTrackingTest.cpp' l='667' u='c' c='_ZN59ValueTracking_GuaranteedToTransferExecutionToSuccessor_Test8TestBodyEv'/>
