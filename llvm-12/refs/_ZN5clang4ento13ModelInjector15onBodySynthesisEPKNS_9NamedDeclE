<dec f='llvm/clang/lib/StaticAnalyzer/Frontend/ModelInjector.h' l='58' type='void clang::ento::ModelInjector::onBodySynthesis(const clang::NamedDecl * D)'/>
<doc f='llvm/clang/lib/StaticAnalyzer/Frontend/ModelInjector.h' l='45'>/// Synthesize a body for a declaration
  ///
  /// This method first looks up the appropriate model file based on the
  /// model-path configuration option and the name of the declaration that is
  /// looked up. If no model were synthesized yet for a function with that name
  /// it will create a new compiler instance to parse the model file using the
  /// ASTContext, Preprocessor, SourceManager of the original compiler instance.
  /// The former resources are shared between the two compiler instance, so the
  /// newly created instance have to &quot;leak&quot; these objects, since they are owned
  /// by the original instance.
  ///
  /// The model-path should be either an absolute path or relative to the
  /// working directory of the compiler.</doc>
<use f='llvm/clang/lib/StaticAnalyzer/Frontend/ModelInjector.cpp' l='32' u='c' c='_ZN5clang4ento13ModelInjector7getBodyEPKNS_12FunctionDeclE'/>
<use f='llvm/clang/lib/StaticAnalyzer/Frontend/ModelInjector.cpp' l='37' u='c' c='_ZN5clang4ento13ModelInjector7getBodyEPKNS_14ObjCMethodDeclE'/>
<def f='llvm/clang/lib/StaticAnalyzer/Frontend/ModelInjector.cpp' l='41' ll='114' type='void clang::ento::ModelInjector::onBodySynthesis(const clang::NamedDecl * D)'/>
