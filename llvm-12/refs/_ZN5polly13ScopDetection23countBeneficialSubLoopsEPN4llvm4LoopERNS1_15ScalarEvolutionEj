<dec f='llvm/polly/include/polly/ScopDetection.h' l='483' type='static ScopDetection::LoopStats polly::ScopDetection::countBeneficialSubLoops(llvm::Loop * L, llvm::ScalarEvolution &amp; SE, unsigned int MinProfitableTrips)'/>
<doc f='llvm/polly/include/polly/ScopDetection.h' l='474'>/// Count the number of loops and the maximal loop depth in @p L.
  ///
  /// @param L The loop to check.
  /// @param SE The scalar evolution analysis.
  /// @param MinProfitableTrips The minimum number of trip counts from which
  ///                           a loop is assumed to be profitable and
  ///                           consequently is counted.
  /// returns A tuple of number of loops and their maximal depth.</doc>
<def f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='1342' ll='1362' type='static ScopDetection::LoopStats polly::ScopDetection::countBeneficialSubLoops(llvm::Loop * L, llvm::ScalarEvolution &amp; SE, unsigned int MinProfitableTrips)'/>
<use f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='1356' u='c' c='_ZN5polly13ScopDetection23countBeneficialSubLoopsEPN4llvm4LoopERNS1_15ScalarEvolutionEj'/>
<use f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='1385' u='c' c='_ZN5polly13ScopDetection20countBeneficialLoopsEPN4llvm6RegionERNS1_15ScalarEvolutionERNS1_8LoopInfoEj'/>
<doc f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='1340'>/// Return the number of loops in @p L (incl. @p L) that have a trip
///        count that is not known to be less than @MinProfitableTrips.</doc>
