<dec f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleThreadPlanStepThroughObjCTrampoline.h' l='77' type='void lldb_private::AppleThreadPlanStepThroughDirectDispatch::AppleThreadPlanStepThroughDirectDispatch(lldb_private::Thread &amp; thread, lldb_private::AppleObjCTrampolineHandler &amp; handler, llvm::StringRef dispatch_func_name, bool stop_others, lldb_private::LazyBool step_in_avoids_code_without_debug_info)'/>
<def f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleThreadPlanStepThroughObjCTrampoline.cpp' l='222' ll='272' type='void lldb_private::AppleThreadPlanStepThroughDirectDispatch::AppleThreadPlanStepThroughDirectDispatch(lldb_private::Thread &amp; thread, lldb_private::AppleObjCTrampolineHandler &amp; handler, llvm::StringRef dispatch_func_name, bool stop_others, lldb_private::LazyBool step_in_avoids_code_without_debug_info)'/>
<doc f='llvm/lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleThreadPlanStepThroughObjCTrampoline.cpp' l='201'>// Objective-C uses optimized dispatch functions for some common and seldom
// overridden methods.  For instance
//      [object respondsToSelector:];
// will get compiled to:
//      objc_opt_respondsToSelector(object);
// This checks whether the selector has been overridden, directly calling the
// implementation if it hasn&apos;t and calling objc_msgSend if it has.
//
// We need to get into the overridden implementation.  We&apos;ll do that by 
// setting a breakpoint on objc_msgSend, and doing a &quot;step out&quot;.  If we stop
// at objc_msgSend, we can step through to the target of the send, and see if
// that&apos;s a place we want to stop.
//
// A couple of complexities.  The checking code might call some other method,
// so we might see objc_msgSend more than once.  Also, these optimized dispatch
// functions might dispatch more than one message at a time (e.g. alloc followed
// by init.)  So we can&apos;t give up at the first objc_msgSend.
// That means among other things that we have to handle the &quot;ShouldStopHere&quot; - 
// since we can&apos;t just return control to the plan that&apos;s controlling us on the
// first step.</doc>
