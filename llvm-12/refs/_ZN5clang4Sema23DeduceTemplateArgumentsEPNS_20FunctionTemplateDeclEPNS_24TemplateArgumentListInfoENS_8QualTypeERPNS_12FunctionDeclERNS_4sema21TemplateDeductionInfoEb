<dec f='llvm/clang/include/clang/Sema/Sema.h' l='8386' type='clang::Sema::TemplateDeductionResult clang::Sema::DeduceTemplateArguments(clang::FunctionTemplateDecl * FunctionTemplate, clang::TemplateArgumentListInfo * ExplicitTemplateArgs, clang::QualType ArgFunctionType, clang::FunctionDecl *&amp; Specialization, sema::TemplateDeductionInfo &amp; Info, bool IsAddressOfFunction = false)'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='2730' u='c' c='_ZN5clang4Sema23FindAllocationFunctionsENS_14SourceLocationENS_11SourceRangeENS0_23AllocationFunctionScopeES3_NS_8QualTypeEbRbN4llvm15MutableArrayRefI4442873'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='1135' u='c' c='_ZL12LookupDirectRN5clang4SemaERNS_12LookupResultEPKNS_11DeclContextE'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='12023' u='c' c='_ZN12_GLOBAL__N_125AddressOfFunctionResolver27AddMatchingTemplateFunctionEPN5clang20FunctionTemplateDeclERKNS1_14DeclAccessPairE'/>
<use f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='8981' u='c' c='_ZN5clang4Sema35CheckFunctionTemplateSpecializationEPNS_12FunctionDeclEPNS_24TemplateArgumentListInfoERNS_12LookupResultEb'/>
<use f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='10155' u='c' c='_ZN5clang4Sema26ActOnExplicitInstantiationEPNS_5ScopeENS_14SourceLocationES3_RNS_10DeclaratorE'/>
<def f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4283' ll='4400' type='Sema::TemplateDeductionResult clang::Sema::DeduceTemplateArguments(clang::FunctionTemplateDecl * FunctionTemplate, clang::TemplateArgumentListInfo * ExplicitTemplateArgs, clang::QualType ArgFunctionType, clang::FunctionDecl *&amp; Specialization, clang::sema::TemplateDeductionInfo &amp; Info, bool IsAddressOfFunction = false)'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4551' u='c' c='_ZN5clang4Sema23DeduceTemplateArgumentsEPNS_20FunctionTemplateDeclEPNS_24TemplateArgumentListInfoERPNS_12FunctionDeclERNS_4sema21TemplateDeductionInfoEb'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4255'>/// Deduce template arguments when taking the address of a function
/// template (C++ [temp.deduct.funcaddr]) or matching a specialization to
/// a template.
///
/// \param FunctionTemplate the function template for which we are performing
/// template argument deduction.
///
/// \param ExplicitTemplateArgs the explicitly-specified template
/// arguments.
///
/// \param ArgFunctionType the function type that will be used as the
/// &quot;argument&quot; type (A) when performing template argument deduction from the
/// function template&apos;s function type. This type may be NULL, if there is no
/// argument type to compare against, in C++0x [temp.arg.explicit]p3.
///
/// \param Specialization if template argument deduction was successful,
/// this will be set to the function template specialization produced by
/// template argument deduction.
///
/// \param Info the argument will be updated to provide additional information
/// about template argument deduction.
///
/// \param IsAddressOfFunction If \c true, we are deducing as part of taking
/// the address of a function template per [temp.deduct.funcaddr] and
/// [over.over]. If \c false, we are looking up a function template
/// specialization based on its signature, per [temp.deduct.decl].
///
/// \returns the result of template argument deduction.</doc>
