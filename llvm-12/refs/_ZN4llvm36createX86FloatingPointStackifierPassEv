<dec f='llvm/llvm/lib/Target/X86/X86.h' l='44' type='llvm::FunctionPass * llvm::createX86FloatingPointStackifierPass()'/>
<doc f='llvm/llvm/lib/Target/X86/X86.h' l='41'>/// This function returns a pass which converts floating-point register
/// references and pseudo instructions into floating-point stack references and
/// physical instructions.</doc>
<def f='llvm/llvm/lib/Target/X86/X86FloatingPoint.cpp' l='311' type='llvm::FunctionPass * llvm::createX86FloatingPointStackifierPass()'/>
<use f='llvm/llvm/lib/Target/X86/X86TargetMachine.cpp' l='511' u='c' c='_ZN12_GLOBAL__N_113X86PassConfig15addPostRegAllocEv'/>
<use f='llvm/llvm/tools/llvm-exegesis/lib/X86/Target.cpp' l='760' u='c' c='_ZNK4llvm8exegesis12_GLOBAL__N_117ExegesisX86Target23addTargetSpecificPassesERNS_6legacy15PassManagerBaseE'/>
