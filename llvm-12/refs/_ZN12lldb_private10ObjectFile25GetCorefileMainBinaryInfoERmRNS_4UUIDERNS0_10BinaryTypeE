<def f='llvm/lldb/include/lldb/Symbol/ObjectFile.h' l='520' ll='525' type='bool lldb_private::ObjectFile::GetCorefileMainBinaryInfo(lldb::addr_t &amp; address, lldb_private::UUID &amp; uuid, ObjectFile::BinaryType &amp; type)'/>
<doc f='llvm/lldb/include/lldb/Symbol/ObjectFile.h' l='498'>/// When the ObjectFile is a core file, lldb needs to locate the &quot;binary&quot; in
  /// the core file.  lldb can iterate over the pages looking for a valid
  /// binary, but some core files may have metadata  describing where the main
  /// binary is exactly which removes ambiguity when there are multiple
  /// binaries present in the captured memory pages.
  ///
  /// \param[out] address
  ///   If the address of the binary is specified, this will be set.
  ///   This is an address is the virtual address space of the core file
  ///   memory segments; it is not an offset into the object file.
  ///   If no address is available, will be set to LLDB_INVALID_ADDRESS.
  ///
  /// \param[out] uuid
  ///   If the uuid of the binary is specified, this will be set.
  ///   If no UUID is available, will be cleared.
  ///
  /// \param[out] type
  ///   Return the type of the binary, which will dictate which
  ///   DynamicLoader plugin should be used.
  ///
  /// \return
  ///   Returns true if either address or uuid has been set.</doc>
<ovr f='llvm/lldb/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp' l='5513' c='_ZN15ObjectFileMachO25GetCorefileMainBinaryInfoERmRN12lldb_private4UUIDERNS1_10ObjectFile10BinaryTypeE'/>
<use f='llvm/lldb/source/Plugins/Process/mach-core/ProcessMachCore.cpp' l='286' u='c' c='_ZN15ProcessMachCore10DoLoadCoreEv'/>
