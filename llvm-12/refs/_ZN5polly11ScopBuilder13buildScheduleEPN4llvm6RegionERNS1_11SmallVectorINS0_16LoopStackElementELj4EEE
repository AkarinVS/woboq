<dec f='llvm/polly/include/polly/ScopBuilder.h' l='808' type='void polly::ScopBuilder::buildSchedule(llvm::Region * R, polly::ScopBuilder::LoopStackTy &amp; LoopStack)'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1207' ll='1249' type='void polly::ScopBuilder::buildSchedule(llvm::Region * R, polly::ScopBuilder::LoopStackTy &amp; LoopStack)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1255' u='c' c='_ZN5polly11ScopBuilder13buildScheduleEPN4llvm10RegionNodeERNS1_11SmallVectorINS0_16LoopStackElementELj4EEE'/>
<doc f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1183'>/// To generate a schedule for the elements in a Region we traverse the Region
/// in reverse-post-order and add the contained RegionNodes in traversal order
/// to the schedule of the loop that is currently at the top of the LoopStack.
/// For loop-free codes, this results in a correct sequential ordering.
///
/// Example:
///           bb1(0)
///         /     \.
///      bb2(1)   bb3(2)
///         \    /  \.
///          bb4(3)  bb5(4)
///             \   /
///              bb6(5)
///
/// Including loops requires additional processing. Whenever a loop header is
/// encountered, the corresponding loop is added to the @p LoopStack. Starting
/// from an empty schedule, we first process all RegionNodes that are within
/// this loop and complete the sequential schedule at this loop-level before
/// processing about any other nodes. To implement this
/// loop-nodes-first-processing, the reverse post-order traversal is
/// insufficient. Hence, we additionally check if the traversal yields
/// sub-regions or blocks that are outside the last loop on the @p LoopStack.
/// These region-nodes are then queue and only traverse after the all nodes
/// within the current loop have been processed.</doc>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='798'>/// Construct schedule information for a given Region and add the
  ///        derived information to @p LoopStack.
  ///
  /// Given a Region we derive schedule information for all RegionNodes
  /// contained in this region ensuring that the assigned execution times
  /// correctly model the existing control flow relations.
  ///
  /// @param R              The region which to process.
  /// @param LoopStack      A stack of loops that are currently under
  ///                       construction.</doc>
