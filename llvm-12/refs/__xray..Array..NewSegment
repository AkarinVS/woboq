<def f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='204' ll='260' type='__xray::Array::Segment * __xray::Array::NewSegment()'/>
<use f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='265' u='c' c='__xray::Array::InitHeadAndTail'/>
<use f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='280' u='c' c='__xray::Array::AppendNewSegment'/>
<doc f='llvm/compiler-rt/lib/xray/xray_segmented_array.h' l='173'>// ===============================
  // In the following implementation, we work through the algorithms and the
  // list operations using the following notation:
  //
  //   - pred(s) is the predecessor (previous node accessor) and succ(s) is
  //     the successor (next node accessor).
  //
  //   - S is a sentinel segment, which has the following property:
  //
  //         pred(S) == succ(S) == S
  //
  //   - @ is a loop operator, which can imply pred(s) == s if it appears on
  //     the left of s, or succ(s) == S if it appears on the right of s.
  //
  //   - sL &lt;-&gt; sR : means a bidirectional relation between sL and sR, which
  //     means:
  //
  //         succ(sL) == sR &amp;&amp; pred(SR) == sL
  //
  //   - sL -&gt; sR : implies a unidirectional relation between sL and SR,
  //     with the following properties:
  //
  //         succ(sL) == sR
  //
  //     sL &lt;- sR : implies a unidirectional relation between sR and sL,
  //     with the following properties:
  //
  //         pred(sR) == sL
  //
  // ===============================</doc>
