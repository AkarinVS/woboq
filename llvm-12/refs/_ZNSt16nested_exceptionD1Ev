<dec f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_x86_64/include/c++/v1/exception' l='245' type='void std::nested_exception::~nested_exception()'/>
<doc f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_x86_64/include/c++/v1/exception' l='243'>//     nested_exception(const nested_exception&amp;) noexcept = default;
//     nested_exception&amp; operator=(const nested_exception&amp;) noexcept = default;</doc>
<dec f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_i386/include/c++/v1/exception' l='245' type='void std::nested_exception::~nested_exception()'/>
<doc f='llvm/build/projects/compiler-rt/lib/fuzzer/libcxx_fuzzer_i386/include/c++/v1/exception' l='243'>//     nested_exception(const nested_exception&amp;) noexcept = default;
//     nested_exception&amp; operator=(const nested_exception&amp;) noexcept = default;</doc>
<dec f='llvm/build/include/c++/v1/exception' l='245' type='void std::nested_exception::~nested_exception()'/>
<doc f='llvm/build/include/c++/v1/exception' l='243'>//     nested_exception(const nested_exception&amp;) noexcept = default;
//     nested_exception&amp; operator=(const nested_exception&amp;) noexcept = default;</doc>
<def f='llvm/libcxx/src/support/runtime/exception_pointer_cxxabi.ipp' l='42' ll='44' type='void std::nested_exception::~nested_exception()'/>
<dec f='llvm/libcxx/include/exception' l='245' type='void std::nested_exception::~nested_exception()'/>
<doc f='llvm/libcxx/include/exception' l='243'>//     nested_exception(const nested_exception&amp;) noexcept = default;
//     nested_exception&amp; operator=(const nested_exception&amp;) noexcept = default;</doc>
