<dec f='llvm/clang/include/clang/Sema/Sema.h' l='7585' type='clang::TemplateNameKind clang::Sema::ActOnTemplateName(clang::Scope * S, clang::CXXScopeSpec &amp; SS, clang::SourceLocation TemplateKWLoc, const clang::UnqualifiedId &amp; Name, clang::ParsedType ObjectType, bool EnteringContext, clang::Sema::TemplateTy &amp; Template, bool AllowInjectedClassName = false)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='320' u='c' c='_ZN5clang6Parser30ParseOptionalCXXScopeSpecifierERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbbPbbPPNS_14IdentifierInfoEbb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='532' u='c' c='_ZN5clang6Parser30ParseOptionalCXXScopeSpecifierERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbbPbbPPNS_14IdentifierInfoEbb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2349' u='c' c='_ZN5clang6Parser28ParseUnqualifiedIdTemplateIdERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbNS_14SourceLocationEPNS_14IdentifierInfoES6_bRNS_13UnqualifiedIdEb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2388' u='c' c='_ZN5clang6Parser28ParseUnqualifiedIdTemplateIdERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbNS_14SourceLocationEPNS_14IdentifierInfoES6_bRNS_13UnqualifiedIdEb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2415' u='c' c='_ZN5clang6Parser28ParseUnqualifiedIdTemplateIdERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbNS_14SourceLocationEPNS_14IdentifierInfoES6_bRNS_13UnqualifiedIdEb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2831' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbbbbbPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2917' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbbbbbPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='1470' u='c' c='_ZN5clang6Parser29ParseTemplateTemplateArgumentEv'/>
<def f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='4797' ll='4922' type='clang::TemplateNameKind clang::Sema::ActOnTemplateName(clang::Scope * S, clang::CXXScopeSpec &amp; SS, clang::SourceLocation TemplateKWLoc, const clang::UnqualifiedId &amp; Name, clang::ParsedType ObjectType, bool EnteringContext, clang::Sema::TemplateTy &amp; Result, bool AllowInjectedClassName = false)'/>
<doc f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='4783'>/// Form a template name from a name that is syntactically required to name a
/// template, either due to use of the &apos;template&apos; keyword or because a name in
/// this syntactic context is assumed to name a template (C++ [temp.names]p2-4).
///
/// This action forms a template name given the name of the template and its
/// optional scope specifier. This is used when the &apos;template&apos; keyword is used
/// or when the parsing context unambiguously treats a following &apos;&lt;&apos; as
/// introducing a template argument list. Note that this may produce a
/// non-dependent template name if we can perform the lookup now and identify
/// the named template.
///
/// For example, given &quot;x.MetaFun::template apply&quot;, the scope specifier
/// \p SS will be &quot;MetaFun::&quot;, \p TemplateKWLoc contains the location
/// of the &quot;template&quot; keyword, and &quot;apply&quot; is the \p Name.</doc>
