<dec f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='271' type='llvm::json::Value lldb_vscode::CreateExceptionBreakpointFilter(const lldb_vscode::ExceptionBreakpoint &amp; bp)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.h' l='261'>/// Create a &quot;ExceptionBreakpointsFilter&quot; JSON object as described in
/// the Visual Studio Code debug adaptor definition.
///
/// \param[in] bp
///     The exception breakpoint object to use
///
/// \return
///     A &quot;ExceptionBreakpointsFilter&quot; JSON object with that follows
///     the formal JSON definition outlined by Microsoft.</doc>
<def f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='491' ll='498' type='llvm::json::Value lldb_vscode::CreateExceptionBreakpointFilter(const lldb_vscode::ExceptionBreakpoint &amp; bp)'/>
<doc f='llvm/lldb/tools/lldb-vscode/JSONUtils.cpp' l='469'>// &quot;ExceptionBreakpointsFilter&quot;: {
//   &quot;type&quot;: &quot;object&quot;,
//   &quot;description&quot;: &quot;An ExceptionBreakpointsFilter is shown in the UI as an
//                   option for configuring how exceptions are dealt with.&quot;,
//   &quot;properties&quot;: {
//     &quot;filter&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;description&quot;: &quot;The internal ID of the filter. This value is passed
//                       to the setExceptionBreakpoints request.&quot;
//     },
//     &quot;label&quot;: {
//       &quot;type&quot;: &quot;string&quot;,
//       &quot;description&quot;: &quot;The name of the filter. This will be shown in the UI.&quot;
//     },
//     &quot;default&quot;: {
//       &quot;type&quot;: &quot;boolean&quot;,
//       &quot;description&quot;: &quot;Initial value of the filter. If not specified a value
//                       &apos;false&apos; is assumed.&quot;
//     }
//   },
//   &quot;required&quot;: [ &quot;filter&quot;, &quot;label&quot; ]
// }</doc>
<use f='llvm/lldb/tools/lldb-vscode/lldb-vscode.cpp' l='1391' u='c' c='_ZN12_GLOBAL__N_118request_initializeERKN4llvm4json6ObjectE'/>
