<dec f='llvm/clang/include/clang/Format/Format.h' l='2003' type='std::vector&lt;std::string&gt;'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='3156' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='3156' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<offset>1472</offset>
<doc f='llvm/clang/include/clang/Format/Format.h' l='1989'>/// \brief A vector of macros that should be interpreted as type declarations
  /// instead of as function calls.
  ///
  /// These are expected to be macros of the form:
  /// \code
  ///   STACK_OF(...)
  /// \endcode
  ///
  /// In the .clang-format configuration file, this can be configured like:
  /// \code{.yaml}
  ///   TypenameMacros: [&apos;STACK_OF&apos;, &apos;LIST&apos;]
  /// \endcode
  ///
  /// For example: OpenSSL STACK_OF, BSD LIST_ENTRY.</doc>
<use f='llvm/clang/lib/Format/Format.cpp' l='672' u='a' c='_ZN4llvm4yaml13MappingTraitsIN5clang6format11FormatStyleEE7mappingERNS0_2IOERS4_'/>
<use f='llvm/clang/lib/Format/FormatTokenLexer.cpp' l='46' c='_ZN5clang6format16FormatTokenLexerC1ERKNS_13SourceManagerENS_6FileIDEjRKNS0_11FormatStyleENS0_8encoding8EncodingERN4llvm24SpecificBumpPtrAllocatorINS01923091'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='6799' u='w' c='_ZN5clang6format12_GLOBAL__N_139FormatTest_ReturnTypeBreakingStyle_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='8195' u='w' c='_ZN5clang6format12_GLOBAL__N_143FormatTest_UnderstandsUsesOfStarAndAmp_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='18226' u='w' c='_ZN5clang6format12_GLOBAL__N_130FormatTest_TypenameMacros_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='18234' u='w' c='_ZN5clang6format12_GLOBAL__N_130FormatTest_TypenameMacros_Test8TestBodyEv'/>
