<dec f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='402' type='bool lldb_private::EmulateInstructionARM::EmulateADDReg(const uint32_t opcode, const lldb_private::EmulateInstructionARM::ARMEncoding encoding)'/>
<def f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3202' ll='3287' type='bool lldb_private::EmulateInstructionARM::EmulateADDReg(const uint32_t opcode, const lldb_private::EmulateInstructionARM::ARMEncoding encoding)'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='12934' u='a' c='_ZN12lldb_private21EmulateInstructionARM26GetARMOpcodeForInstructionEjj'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='13348' u='a' c='_ZN12lldb_private21EmulateInstructionARM28GetThumbOpcodeForInstructionEjj'/>
<use f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='13352' u='a' c='_ZN12lldb_private21EmulateInstructionARM28GetThumbOpcodeForInstructionEjj'/>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.cpp' l='3199'>// This instruction adds a register value and an optionally-shifted register
// value, and writes the result to the destination register. It can optionally
// update the condition flags based on the result.</doc>
<doc f='llvm/lldb/source/Plugins/Instruction/ARM/EmulateInstructionARM.h' l='401'>// A8.6.6 ADD (register)</doc>
