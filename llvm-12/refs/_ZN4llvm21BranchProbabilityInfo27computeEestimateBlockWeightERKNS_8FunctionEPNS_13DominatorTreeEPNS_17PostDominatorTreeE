<dec f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='407' type='void llvm::BranchProbabilityInfo::computeEestimateBlockWeight(const llvm::Function &amp; F, llvm::DominatorTree * DT, llvm::PostDominatorTree * PDT)'/>
<doc f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='406'>// Computes estimated weights for all blocks in \p F.</doc>
<def f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='759' ll='823' type='void llvm::BranchProbabilityInfo::computeEestimateBlockWeight(const llvm::Function &amp; F, llvm::DominatorTree * DT, llvm::PostDominatorTree * PDT)'/>
<use f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='1280' u='c' c='_ZN4llvm21BranchProbabilityInfo9calculateERKNS_8FunctionERKNS_8LoopInfoEPKNS_17TargetLibraryInfoEPNS_13DominatorTreeEPNS_17PostDominatorTreeE'/>
<doc f='llvm/llvm/lib/Analysis/BranchProbabilityInfo.cpp' l='756'>// Does RPO traversal over all blocks in \p F and assigns weights to
// &apos;unreachable&apos;, &apos;noreturn&apos;, &apos;cold&apos;, &apos;unwind&apos; blocks. In addition it does its
// best to propagate the weight to up/down the IR.</doc>
