<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='219' type='bool llvm::InstCombinerImpl::OptimizeOverflowCheck(Instruction::BinaryOps BinaryOp, bool IsSigned, llvm::Value * LHS, llvm::Value * RHS, llvm::Instruction &amp; CtxI, llvm::Value *&amp; OperationResult, llvm::Constant *&amp; OverflowResult)'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='207'>/// Try to optimize a sequence of instructions checking if an operation
  /// on LHS and RHS overflows.
  ///
  /// If this overflow check is done via one of the overflow check intrinsics,
  /// then CtxI has to be the call instruction calling that intrinsic.  If this
  /// overflow check is done by arithmetic followed by a compare, then CtxI has
  /// to be the arithmetic instruction.
  ///
  /// If a simplification is possible, stores the simplified result of the
  /// operation in OperationResult and result of the overflow check in
  /// OverflowResult, and return true.  If no simplification is possible,
  /// returns false.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp' l='659' u='c' c='_ZN4llvm16InstCombinerImpl31foldIntrinsicWithOverflowCommonEPNS_13IntrinsicInstE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='4549' ll='4596' type='bool llvm::InstCombinerImpl::OptimizeOverflowCheck(Instruction::BinaryOps BinaryOp, bool IsSigned, llvm::Value * LHS, llvm::Value * RHS, llvm::Instruction &amp; OrigI, llvm::Value *&amp; Result, llvm::Constant *&amp; Overflow)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='5708' u='c' c='_ZN4llvm16InstCombinerImpl13visitICmpInstERNS_8ICmpInstE'/>
