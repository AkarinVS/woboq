<dec f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunication.h' l='212' type='void lldb_private::process_gdb_remote::GDBRemoteCommunication::AppendBytesToCache(const uint8_t * bytes, size_t len, bool broadcast, lldb::ConnectionStatus status)'/>
<doc f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunication.h' l='202'>// GDB-Remote read thread
  //  . this thread constantly tries to read from the communication
  //    class and stores all packets received in a queue.  The usual
  //    threads read requests simply pop packets off the queue in the
  //    usual order.
  //    This setup allows us to intercept and handle async packets, such
  //    as the notify packet.

  // This method is defined as part of communication.h
  // when the read thread gets any bytes it will pass them on to this function</doc>
<inh f='llvm/lldb/include/lldb/Core/Communication.h' l='340' c='_ZN12lldb_private13Communication18AppendBytesToCacheEPKhmbN4lldb16ConnectionStatusE'/>
<def f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunication.cpp' l='1288' ll='1327' type='void lldb_private::process_gdb_remote::GDBRemoteCommunication::AppendBytesToCache(const uint8_t * bytes, size_t len, bool broadcast, lldb::ConnectionStatus status)'/>
<doc f='llvm/lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunication.cpp' l='1282'>// This function is called via the Communications class read thread when bytes
// become available for this connection. This function will consume all
// incoming bytes and try to parse whole packets as they become available. Full
// packets are placed in a queue, so that all packet requests can simply pop
// from this queue. Async notification packets will be dispatched immediately
// to the ProcessGDBRemote Async thread via an event.</doc>
