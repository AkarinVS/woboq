<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1331' ll='1386' type='bool isFortranArrayDescriptor(llvm::Value * V)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1449' u='c' c='_ZN5polly11ScopBuilder24findFADAllocationVisibleENS_10MemAccInstE'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1487' u='c' c='_ZN5polly11ScopBuilder26findFADAllocationInvisibleENS_10MemAccInstE'/>
<doc f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1310'>/// Check that a value is a Fortran Array descriptor.
///
/// We check if V has the following structure:
/// %&quot;struct.array1_real(kind=8)&quot; = type { i8*, i&lt;zz&gt;, i&lt;zz&gt;,
///                                   [&lt;num&gt; x %struct.descriptor_dimension] }
///
///
/// %struct.descriptor_dimension = type { i&lt;zz&gt;, i&lt;zz&gt;, i&lt;zz&gt; }
///
/// 1. V&apos;s type name starts with &quot;struct.array&quot;
/// 2. V&apos;s type has layout as shown.
/// 3. Final member of V&apos;s type has name &quot;struct.descriptor_dimension&quot;,
/// 4. &quot;struct.descriptor_dimension&quot; has layout as shown.
/// 5. Consistent use of i&lt;zz&gt; where &lt;zz&gt; is some fixed integer number.
///
/// We are interested in such types since this is the code that dragonegg
/// generates for Fortran array descriptors.
///
/// @param V the Value to be checked.
///
/// @returns True if V is a Fortran array descriptor, False otherwise.</doc>
