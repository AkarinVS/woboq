<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.h' l='165' type='unsigned int lldb_private::ClangExpressionParser::ParseInternal(lldb_private::DiagnosticManager &amp; diagnostic_manager, clang::CodeCompleteConsumer * completion = nullptr, unsigned int completion_line = 0, unsigned int completion_column = 0)'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpp' l='1023' u='c' c='_ZN12lldb_private21ClangExpressionParser8CompleteERNS_17CompletionRequestEjjj'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpp' l='1029' u='c' c='_ZN12lldb_private21ClangExpressionParser5ParseERNS_17DiagnosticManagerE'/>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpp' l='1032' ll='1200' type='unsigned int lldb_private::ClangExpressionParser::ParseInternal(lldb_private::DiagnosticManager &amp; diagnostic_manager, clang::CodeCompleteConsumer * completion_consumer = nullptr, unsigned int completion_line = 0, unsigned int completion_column = 0)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.h' l='145'>/// Parses the expression.
  ///
  /// \param[in] diagnostic_manager
  ///     The diagnostic manager that should receive the diagnostics
  ///     from the parsing process.
  ///
  /// \param[in] completion
  ///     The completion consumer that should be used during parsing
  ///     (or a nullptr if no consumer should be attached).
  ///
  /// \param[in] completion_line
  ///     The line in which the completion marker should be placed.
  ///     The first line is represented by the value 0.
  ///
  /// \param[in] completion_column
  ///     The column in which the completion marker should be placed.
  ///     The first column is represented by the value 0.
  ///
  /// \return
  ///    The number of parsing errors.</doc>
