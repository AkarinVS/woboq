<dec f='llvm/llvm/include/llvm/Analysis/Loads.h' l='42' type='bool llvm::isDereferenceableAndAlignedPointer(const llvm::Value * V, llvm::Type * Ty, llvm::MaybeAlign Alignment, const llvm::DataLayout &amp; DL, const llvm::Instruction * CtxI = nullptr, const llvm::DominatorTree * DT = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/Loads.h' l='38'>/// Returns true if V is always a dereferenceable pointer with alignment
/// greater or equal than requested. If the context instruction is specified
/// performs context-sensitive analysis and returns true if the pointer is
/// dereferenceable at the specified instruction.</doc>
<def f='llvm/llvm/lib/Analysis/Loads.cpp' l='175' ll='196' type='bool llvm::isDereferenceableAndAlignedPointer(const llvm::Value * V, llvm::Type * Ty, llvm::MaybeAlign MA, const llvm::DataLayout &amp; DL, const llvm::Instruction * CtxI = nullptr, const llvm::DominatorTree * DT = nullptr)'/>
<use f='llvm/llvm/lib/Analysis/Loads.cpp' l='202' u='c' c='_ZN4llvm24isDereferenceablePointerEPKNS_5ValueEPNS_4TypeERKNS_10DataLayoutEPKNS_11InstructionEPKNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Analysis/MemDerefPrinter.cpp' l='62' u='c' c='_ZN12_GLOBAL__N_115MemDerefPrinter13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Analysis/MemDerefPrinter.cpp' l='96' u='c' c='_ZN4llvm19MemDerefPrinterPass3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4407' u='c' c='_ZN4llvm28isSafeToSpeculativelyExecuteEPKNS_5ValueEPKNS_11InstructionEPKNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='2105' u='c' c='_ZN4llvm28promoteLoopAccessesToScalarsERKNS_14SmallSetVectorIPNS_5ValueELj8EEERNS_15SmallVectorImplIPNS_10BasicBlockEEERNS6_IPNS_11InstructionEEERNS6_2137798'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2959' u='c' c='_ZN5polly11ScopBuilder18canAlwaysBeHoistedEPNS_12MemoryAccessEbbb'/>
