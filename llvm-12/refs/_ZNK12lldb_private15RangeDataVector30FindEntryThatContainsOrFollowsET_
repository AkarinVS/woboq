<def f='llvm/lldb/include/lldb/Utility/RangeMap.h' l='565' ll='585' type='const lldb_private::RangeDataVector::Entry * lldb_private::RangeDataVector::FindEntryThatContainsOrFollows(B addr) const'/>
<doc f='llvm/lldb/include/lldb/Utility/RangeMap.h' l='556'>// This method will return the entry that contains the given address, or the
  // entry following that address.  If you give it an address of 0 and the
  // first entry starts at address 0x100, you will get the entry at 0x100.
  //
  // For most uses, FindEntryThatContains is the correct one to use, this is a
  // less commonly needed behavior.  It was added for core file memory regions,
  // where we want to present a gap in the memory regions as a distinct region,
  // so we need to know the start address of the next memory section that
  // exists.</doc>
<use f='llvm/lldb/source/Plugins/Process/elf-core/ProcessElfCore.cpp' l='298' u='c' c='_ZN14ProcessElfCore19GetMemoryRegionInfoEmRN12lldb_private16MemoryRegionInfoE'/>
<use f='llvm/lldb/source/Plugins/Process/mach-core/ProcessMachCore.cpp' l='639' u='c' c='_ZN15ProcessMachCore19GetMemoryRegionInfoEmRN12lldb_private16MemoryRegionInfoE'/>
<use f='llvm/lldb/source/Symbol/DWARFCallFrameInfo.cpp' l='203' u='c' c='_ZN12lldb_private18DWARFCallFrameInfo23GetFirstFDEEntryInRangeERKNS_12AddressRangeE'/>
