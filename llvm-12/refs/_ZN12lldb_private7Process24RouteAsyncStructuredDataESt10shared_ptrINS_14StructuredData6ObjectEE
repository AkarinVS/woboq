<dec f='llvm/lldb/include/lldb/Target/Process.h' l='2709' type='bool lldb_private::Process::RouteAsyncStructuredData(const StructuredData::ObjectSP object_sp)'/>
<doc f='llvm/lldb/include/lldb/Target/Process.h' l='2687'>/// Route the incoming structured data dictionary to the right plugin.
  ///
  /// The incoming structured data must be a dictionary, and it must have a
  /// key named &apos;type&apos; that stores a string value.  The string value must be
  /// the name of the structured data feature that knows how to handle it.
  ///
  /// \param[in] object_sp
  ///     When non-null and pointing to a dictionary, the &apos;type&apos;
  ///     key&apos;s string value is used to look up the plugin that
  ///     was registered for that structured data type.  It then
  ///     calls the following method on the StructuredDataPlugin
  ///     instance:
  ///
  ///     virtual void
  ///     HandleArrivalOfStructuredData(Process &amp;process,
  ///                                   ConstString type_name,
  ///                                   const StructuredData::ObjectSP
  ///                                   &amp;object_sp)
  ///
  /// \return
  ///     True if the structured data was routed to a plugin; otherwise,
  ///     false.</doc>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp' l='5099' u='c' c='_ZN12lldb_private18process_gdb_remote16ProcessGDBRemote31HandleAsyncStructuredDataPacketEN4llvm9StringRefE'/>
<def f='llvm/lldb/source/Target/Process.cpp' l='5920' ll='5947' type='bool lldb_private::Process::RouteAsyncStructuredData(const StructuredData::ObjectSP object_sp)'/>
