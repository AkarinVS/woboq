<dec f='llvm/llvm/include/llvm/Transforms/Utils/Evaluator.h' l='77' type='llvm::Constant * llvm::Evaluator::castCallResultIfNeeded(llvm::Value * CallExpr, llvm::Constant * RV)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Evaluator.h' l='76'>/// Casts call result to a type of bitcast call expression</doc>
<def f='llvm/llvm/lib/Transforms/Utils/Evaluator.cpp' l='305' ll='317' type='llvm::Constant * llvm::Evaluator::castCallResultIfNeeded(llvm::Value * CallExpr, llvm::Constant * RV)'/>
<use f='llvm/llvm/lib/Transforms/Utils/Evaluator.cpp' l='571' u='c' c='_ZN4llvm9Evaluator13EvaluateBlockENS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEERPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Evaluator.cpp' l='594' u='c' c='_ZN4llvm9Evaluator13EvaluateBlockENS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb0ELb0EvEELb0ELb0EEERPNS_10BasicBlockE'/>
<doc f='llvm/llvm/lib/Transforms/Utils/Evaluator.cpp' l='303'>/// If call expression contains bitcast then we may need to cast
/// evaluated return value to a type of the call expression.</doc>
