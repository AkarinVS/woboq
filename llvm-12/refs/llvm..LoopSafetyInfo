<def f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='60' ll='104'/>
<ovr f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='110' c='llvm::SimpleLoopSafetyInfo'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='110'/>
<ovr f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='132' c='llvm::ICFLoopSafetyInfo'/>
<use f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='132'/>
<size>32</size>
<doc f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='46'>/// Captures loop safety information.
/// It keep information for loop blocks may throw exception or otherwise
/// exit abnormally on any iteration of the loop which might actually execute
/// at runtime.  The primary way to consume this information is via
/// isGuaranteedToExecute below, but some callers bailout or fallback to
/// alternate reasoning if a loop contains any implicit control flow.
/// NOTE: LoopSafetyInfo contains cached information regarding loops and their
/// particular blocks. This information is only dropped on invocation of
/// computeLoopSafetyInfo. If the loop or any of its block is deleted, or if
/// any thrower instructions have been added or removed from them, or if the
/// control flow has changed, or in case of other meaningful modifications, the
/// LoopSafetyInfo needs to be recomputed. If a meaningful modifications to the
/// loop were made and the info wasn&apos;t recomputed properly, the behavior of all
/// methods except for computeLoopSafetyInfo is undefined.</doc>
<mbr r='llvm::LoopSafetyInfo::BlockColors' o='64' t='DenseMap&lt;llvm::BasicBlock *, llvm::ColorVector&gt;'/>
<fun r='_ZN4llvm14LoopSafetyInfo18computeBlockColorsEPKNS_4LoopE'/>
<fun r='_ZNK4llvm14LoopSafetyInfo14getBlockColorsEv'/>
<fun r='_ZN4llvm14LoopSafetyInfo10copyColorsEPNS_10BasicBlockES2_'/>
<fun r='_ZNK4llvm14LoopSafetyInfo13blockMayThrowEPKNS_10BasicBlockE'/>
<fun r='_ZNK4llvm14LoopSafetyInfo16anyBlockMayThrowEv'/>
<fun r='_ZNK4llvm14LoopSafetyInfo23allLoopPathsLeadToBlockEPKNS_4LoopEPKNS_10BasicBlockEPKNS_13DominatorTreeE'/>
<fun r='_ZN4llvm14LoopSafetyInfo21computeLoopSafetyInfoEPKNS_4LoopE'/>
<fun r='_ZNK4llvm14LoopSafetyInfo21isGuaranteedToExecuteERKNS_11InstructionEPKNS_13DominatorTreeEPKNS_4LoopE'/>
<fun r='_ZN4llvm14LoopSafetyInfoC1Ev'/>
<fun r='_ZN4llvm14LoopSafetyInfoD1Ev'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='153' c='_ZL21isNotUsedOrFreeInLoopRKN4llvm11InstructionEPKNS_4LoopEPKNS_14LoopSafetyInfoEPNS_19TargetTransformInfoERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='166' c='_ZL30isSafeToExecuteUnconditionallyRN4llvm11InstructionEPKNS_13DominatorTreeEPKNS_4LoopEPKNS_14LoopSafetyInfoEPNS_25OptimizationRemarkEmitterEPKS0_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='179' c='_ZL27cloneInstructionInExitBlockRN4llvm11InstructionERNS_10BasicBlockERNS_7PHINodeEPKNS_8LoopInfoEPKNS_14LoopSafetyInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1386' c='_ZL21isNotUsedOrFreeInLoopRKN4llvm11InstructionEPKNS_4LoopEPKNS_14LoopSafetyInfoEPNS_19TargetTransformInfoERb'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1419' c='_ZL27cloneInstructionInExitBlockRN4llvm11InstructionERNS_10BasicBlockERNS_7PHINodeEPKNS_8LoopInfoEPKNS_14LoopSafetyInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1520' c='_ZL34sinkThroughTriviallyReplaceablePHIPN4llvm7PHINodeEPNS_11InstructionEPNS_8LoopInfoERNS_13SmallDenseMapIPNS_10BasicBlockES3_Lj32ENS_12DenseMapInfoI10373940'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1535' c='_ZL20canSplitPredecessorsPN4llvm7PHINodeEPNS_14LoopSafetyInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1556' c='_ZL27splitPredecessorsOfLoopExitPN4llvm7PHINodeEPNS_13DominatorTreeEPNS_8LoopInfoEPKNS_4LoopEPNS_14LoopSafetyInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1784' c='_ZL30isSafeToExecuteUnconditionallyRN4llvm11InstructionEPKNS_13DominatorTreeEPKNS_4LoopEPKNS_14LoopSafetyInfoEPNS_25OptimizationRemarkEmitterEPKS0_'/>
<size>32</size>
