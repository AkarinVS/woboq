<dec f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='60' type='bool llvm::ARMBaseInstrInfo::getRegSequenceLikeInputs(const llvm::MachineInstr &amp; MI, unsigned int DefIdx, SmallVectorImpl&lt;llvm::TargetInstrInfo::RegSubRegPairAndIdx&gt; &amp; InputRegs) const'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='47'>/// Build the equivalent inputs of a REG_SEQUENCE for the given \p MI
  /// and \p DefIdx.
  /// \p [out] InputRegs of the equivalent REG_SEQUENCE. Each element of
  /// the list is modeled as &lt;Reg:SubReg, SubIdx&gt;.
  /// E.g., REG_SEQUENCE %1:sub1, sub0, %2, sub1 would produce
  /// two elements:
  /// - %1:sub1, sub0
  /// - %2&lt;:0&gt;, sub1
  ///
  /// \returns true if it is possible to build such an input sequence
  /// with the pair \p MI, \p DefIdx. False otherwise.
  ///
  /// \pre MI.isRegSequenceLike().</doc>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1199' c='_ZNK4llvm15TargetInstrInfo24getRegSequenceLikeInputsERKNS_12MachineInstrEjRNS_15SmallVectorImplINS0_19RegSubRegPairAndIdxEEE'/>
<def f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp' l='5336' ll='5361' type='bool llvm::ARMBaseInstrInfo::getRegSequenceLikeInputs(const llvm::MachineInstr &amp; MI, unsigned int DefIdx, SmallVectorImpl&lt;llvm::TargetInstrInfo::RegSubRegPairAndIdx&gt; &amp; InputRegs) const'/>
