<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='945' type='bool llvm::DependenceInfo::tryDelinearizeParametricSize(llvm::Instruction * Src, llvm::Instruction * Dst, const llvm::SCEV * SrcAccessFn, const llvm::SCEV * DstAccessFn, SmallVectorImpl&lt;const llvm::SCEV *&gt; &amp; SrcSubscripts, SmallVectorImpl&lt;const llvm::SCEV *&gt; &amp; DstSubscripts)'/>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='942'>/// Tries to delinearize access function for a multi-dimensional array with
    /// symbolic runtime sizes.
    /// Returns true upon success and false otherwise.</doc>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3272' u='c' c='_ZN4llvm14DependenceInfo14tryDelinearizeEPNS_11InstructionES2_RNS_15SmallVectorImplINS0_9SubscriptEEE'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3371' ll='3439' type='bool llvm::DependenceInfo::tryDelinearizeParametricSize(llvm::Instruction * Src, llvm::Instruction * Dst, const llvm::SCEV * SrcAccessFn, const llvm::SCEV * DstAccessFn, SmallVectorImpl&lt;const llvm::SCEV *&gt; &amp; SrcSubscripts, SmallVectorImpl&lt;const llvm::SCEV *&gt; &amp; DstSubscripts)'/>
