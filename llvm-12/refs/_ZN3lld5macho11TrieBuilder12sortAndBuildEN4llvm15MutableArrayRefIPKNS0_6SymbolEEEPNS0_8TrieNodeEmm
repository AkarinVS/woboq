<dec f='llvm/lld/MachO/ExportTrie.h' l='33' type='void lld::macho::TrieBuilder::sortAndBuild(llvm::MutableArrayRef&lt;const Symbol *&gt; vec, lld::macho::TrieNode * node, size_t lastPos, size_t pos)'/>
<def f='llvm/lld/MachO/ExportTrie.cpp' l='172' ll='218' type='void lld::macho::TrieBuilder::sortAndBuild(MutableArrayRef&lt;const lld::macho::Symbol *&gt; vec, lld::macho::TrieNode * node, size_t lastPos, size_t pos)'/>
<use f='llvm/lld/MachO/ExportTrie.cpp' l='205' u='c' c='_ZN3lld5macho11TrieBuilder12sortAndBuildEN4llvm15MutableArrayRefIPKNS0_6SymbolEEEPNS0_8TrieNodeEmm'/>
<use f='llvm/lld/MachO/ExportTrie.cpp' l='206' u='c' c='_ZN3lld5macho11TrieBuilder12sortAndBuildEN4llvm15MutableArrayRefIPKNS0_6SymbolEEEPNS0_8TrieNodeEmm'/>
<use f='llvm/lld/MachO/ExportTrie.cpp' l='225' u='c' c='_ZN3lld5macho11TrieBuilder5buildEv'/>
<doc f='llvm/lld/MachO/ExportTrie.cpp' l='161'>// Build the trie by performing a three-way radix quicksort: We start by sorting
// the strings by their first characters, then sort the strings with the same
// first characters by their second characters, and so on recursively. Each
// time the prefixes diverge, we add a node to the trie.
//
// node:    The most recently created node along this path in the trie (i.e.
//          the furthest from the root.)
// lastPos: The prefix length of the most recently created node, i.e. the number
//          of characters along its path from the root.
// pos:     The string index we are currently sorting on. Note that each symbol
//          S contained in vec has the same prefix S[0...pos).</doc>
