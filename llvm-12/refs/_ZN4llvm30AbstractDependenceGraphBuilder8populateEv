<def f='llvm/llvm/include/llvm/Analysis/DependenceGraphBuilder.h' l='59' ll='68' type='void llvm::AbstractDependenceGraphBuilder::populate()'/>
<use f='llvm/llvm/lib/Analysis/DDG.cpp' l='195' u='c' c='_ZN4llvm19DataDependenceGraphC1ERNS_8FunctionERNS_14DependenceInfoE'/>
<use f='llvm/llvm/lib/Analysis/DDG.cpp' l='210' u='c' c='_ZN4llvm19DataDependenceGraphC1ERNS_4LoopERNS_8LoopInfoERNS_14DependenceInfoE'/>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceGraphBuilder.h' l='48'>/// The main entry to the graph construction algorithm. It starts by
  /// creating nodes in increasing order of granularity and then
  /// adds def-use and memory edges. As one of the final stages, it
  /// also creates pi-block nodes to facilitate codegen in transformations
  /// that use dependence graphs.
  ///
  /// The algorithmic complexity of this implementation is O(V^2 * I^2), where V
  /// is the number of vertecies (nodes) and I is the number of instructions in
  /// each node. The total number of instructions, N, is equal to V * I,
  /// therefore the worst-case time complexity is O(N^2). The average time
  /// complexity is O((N^2)/2).</doc>
