<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2880' type='void clang::Parser::ParseDeclaratorInternal(clang::Declarator &amp; D, clang::Parser::DirectDeclParseFunction DirectDeclParser)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5583' u='c' c='_ZN5clang6Parser15ParseDeclaratorERNS_10DeclaratorE'/>
<def f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5649' ll='5811' type='void clang::Parser::ParseDeclaratorInternal(clang::Declarator &amp; D, clang::Parser::DirectDeclParseFunction DirectDeclParser)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5693' u='c' c='_ZN5clang6Parser23ParseDeclaratorInternalERNS_10DeclaratorEMS0_FvS2_E'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5742' u='c' c='_ZN5clang6Parser23ParseDeclaratorInternalERNS_10DeclaratorEMS0_FvS2_E'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5787' u='c' c='_ZN5clang6Parser23ParseDeclaratorInternalERNS_10DeclaratorEMS0_FvS2_E'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6333' u='c' c='_ZN5clang6Parser20ParseParenDeclaratorERNS_10DeclaratorE'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='7092' u='c' c='_ZN5clang6Parser31ParseMisplacedBracketDeclaratorERNS_10DeclaratorE'/>
<doc f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5624'>/// ParseDeclaratorInternal - Parse a C or C++ declarator. The direct-declarator
/// is parsed by the function passed to it. Pass null, and the direct-declarator
/// isn&apos;t parsed at all, making this function effectively parse the C++
/// ptr-operator production.
///
/// If the grammar of this construct is extended, matching changes must also be
/// made to TryParseDeclarator and MightBeDeclarator, and possibly to
/// isConstructorDeclarator.
///
///       declarator: [C99 6.7.5] [C++ 8p4, dcl.decl]
/// [C]     pointer[opt] direct-declarator
/// [C++]   direct-declarator
/// [C++]   ptr-operator declarator
///
///       pointer: [C99 6.7.5]
///         &apos;*&apos; type-qualifier-list[opt]
///         &apos;*&apos; type-qualifier-list[opt] pointer
///
///       ptr-operator:
///         &apos;*&apos; cv-qualifier-seq[opt]
///         &apos;&amp;&apos;
/// [C++0x] &apos;&amp;&amp;&apos;
/// [GNU]   &apos;&amp;&apos; restrict[opt] attributes[opt]
/// [GNU?]  &apos;&amp;&amp;&apos; restrict[opt] attributes[opt]
///         &apos;::&apos;[opt] nested-name-specifier &apos;*&apos; cv-qualifier-seq[opt]</doc>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2715' u='c' c='_ZN5clang6Parser26ParseUnqualifiedIdOperatorERNS_12CXXScopeSpecEbNS_9OpaquePtrINS_8QualTypeEEERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='3111' u='c' c='_ZN5clang6Parser21ParseCXXNewExpressionEbNS_14SourceLocationE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='3124' u='c' c='_ZN5clang6Parser21ParseCXXNewExpressionEbNS_14SourceLocationE'/>
