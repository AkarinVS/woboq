<dec f='llvm/llvm/include/llvm/Analysis/InstructionSimplify.h' l='319' type='const llvm::SimplifyQuery llvm::getBestSimplifyQuery(llvm::Pass &amp; , llvm::Function &amp; )'/>
<doc f='llvm/llvm/include/llvm/Analysis/InstructionSimplify.h' l='316'>// These helper functions return a SimplifyQuery structure that contains as
// many of the optional analysis we use as are currently valid.  This is the
// strongly preferred way of constructing SimplifyQuery in passes.</doc>
<def f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='6038' ll='6046' type='const llvm::SimplifyQuery llvm::getBestSimplifyQuery(llvm::Pass &amp; P, llvm::Function &amp; F)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='1023' u='c' c='_ZN12_GLOBAL__N_126CorrelatedValuePropagation13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopRotation.cpp' l='116' u='c' c='_ZN12_GLOBAL__N_120LoopRotateLegacyPass9runOnLoopEPN4llvm4LoopERNS1_13LPPassManagerE'/>
