<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegisterBankInfo.h' l='565' type='static void llvm::RegisterBankInfo::applyDefaultMapping(const llvm::RegisterBankInfo::OperandsMapper &amp; OpdMapper)'/>
<use f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegisterBankInfo.h' l='718' u='c' c='_ZNK4llvm16RegisterBankInfo12applyMappingERKNS0_14OperandsMapperE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegisterBankInfo.h' l='550'>/// Helper method to apply something that is like the default mapping.
  /// Basically, that means that \p OpdMapper.getMI() is left untouched
  /// aside from the reassignment of the register operand that have been
  /// remapped.
  ///
  /// The type of all the new registers that have been created by the
  /// mapper are properly remapped to the type of the original registers
  /// they replace. In other words, the semantic of the instruction does
  /// not change, only the register banks.
  ///
  /// If the mapping of one of the operand spans several registers, this
  /// method will abort as this is not like a default mapping anymore.
  ///
  /// \pre For OpIdx in {0..\p OpdMapper.getMI().getNumOperands())
  ///        the range OpdMapper.getVRegs(OpIdx) is empty or of size 1.</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/RegisterBankInfo.cpp' l='438' ll='491' type='static void llvm::RegisterBankInfo::applyDefaultMapping(const llvm::RegisterBankInfo::OperandsMapper &amp; OpdMapper)'/>
<use f='llvm/llvm/lib/Target/AArch64/GISel/AArch64RegisterBankInfo.cpp' l='388' u='c' c='_ZNK4llvm23AArch64RegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='1290' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo17applyMappingImageERNS_12MachineInstrERKNS_16RegisterBankInfo14OperandsMapperERNS_19MachineRegisterInfoEi'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='1528' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo24applyMappingBFEIntrinsicERKNS_16RegisterBankInfo14OperandsMapperEb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2113' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2716' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2936' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2952' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2957' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2962' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2998' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='3114' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/Mips/MipsRegisterBankInfo.cpp' l='772' u='c' c='_ZNK4llvm20MipsRegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
<use f='llvm/llvm/lib/Target/X86/X86RegisterBankInfo.cpp' l='274' u='c' c='_ZNK4llvm19X86RegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
