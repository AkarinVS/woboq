<dec f='llvm/llvm/include/llvm/DebugInfo/GSYM/LineTable.h' l='139' type='static Expected&lt;llvm::gsym::LineEntry&gt; llvm::gsym::LineTable::lookup(llvm::DataExtractor &amp; Data, uint64_t BaseAddr, uint64_t Addr)'/>
<doc f='llvm/llvm/include/llvm/DebugInfo/GSYM/LineTable.h' l='122'>/// Lookup a single address within a line table&apos;s data.
  ///
  /// Clients have the option to decode an entire line table using
  /// LineTable::decode() or just find a single matching entry using this
  /// function. The benefit of using this function is that parsed LineEntry
  /// objects that do not match will not be stored in an array. This will avoid
  /// memory allocation costs and parsing can stop once a match has been found.
  ///
  /// \param Data The binary stream to read the data from. This object must
  /// have the data for the LineTable object starting at offset zero. The data
  /// can contain more data than needed.
  ///
  /// \param BaseAddr The base address to use when decoding the line table.
  /// This will be the FunctionInfo&apos;s start address and will be used to
  /// initialize the line table row prior to parsing any opcodes.
  ///
  /// \returns An LineEntry object if a match is found, error otherwise.</doc>
<use f='llvm/llvm/lib/DebugInfo/GSYM/FunctionInfo.cpp' l='203' u='c' c='_ZN4llvm4gsym12FunctionInfo6lookupERNS_13DataExtractorERKNS0_10GsymReaderEmm'/>
<def f='llvm/llvm/lib/DebugInfo/GSYM/LineTable.cpp' l='266' ll='287' type='static Expected&lt;llvm::gsym::LineEntry&gt; llvm::gsym::LineTable::lookup(llvm::DataExtractor &amp; Data, uint64_t BaseAddr, uint64_t Addr)'/>
<doc f='llvm/llvm/lib/DebugInfo/GSYM/LineTable.cpp' l='262'>// Parse the line table on the fly and find the row we are looking for.
// We will need to determine if we need to cache the line table by calling
// LineTable::parseAllEntries(...) or just call this function each time.
// There is a CPU vs memory tradeoff we will need to determined.</doc>
