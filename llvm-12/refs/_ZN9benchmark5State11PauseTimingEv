<dec f='llvm/llvm/utils/benchmark/include/benchmark/benchmark.h' l='478' type='void benchmark::State::PauseTiming()'/>
<doc f='llvm/llvm/utils/benchmark/include/benchmark/benchmark.h' l='464'>// REQUIRES: timer is running and &apos;SkipWithError(...)&apos; has not been called
  //           by the current thread.
  // Stop the benchmark timer.  If not called, the timer will be
  // automatically stopped after the last iteration of the benchmark loop.
  //
  // For threaded benchmarks the PauseTiming() function only pauses the timing
  // for the current thread.
  //
  // NOTE: The &quot;real time&quot; measurement is per-thread. If different threads
  // report different measurements the largest one is reported.
  //
  // NOTE: PauseTiming()/ResumeTiming() are relatively
  // heavyweight, and so their use should generally be avoided
  // within each benchmark iteration, if possible.</doc>
<def f='llvm/llvm/utils/benchmark/src/benchmark.cc' l='333' ll='337' type='void benchmark::State::PauseTiming()'/>
<use f='llvm/llvm/utils/benchmark/src/benchmark.cc' l='378' u='c' c='_ZN9benchmark5State17FinishKeepRunningEv'/>
