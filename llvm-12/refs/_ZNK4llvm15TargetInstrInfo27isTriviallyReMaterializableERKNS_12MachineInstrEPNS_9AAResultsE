<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='124' ll='130' type='bool llvm::TargetInstrInfo::isTriviallyReMaterializable(const llvm::MachineInstr &amp; MI, llvm::AAResults * AA = nullptr) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='119'>/// Return true if the instruction is trivially rematerializable, meaning it
  /// has no side effects and requires no operands that aren&apos;t always available.
  /// This means the only allowed uses are constants and unallocatable physical
  /// registers so that the instructions result is independent of the place
  /// in the function.</doc>
<use f='llvm/llvm/lib/CodeGen/CalcSpillWeights.cpp' l='122' u='c' c='_ZL18isRematerializableRKN4llvm12LiveIntervalERKNS_13LiveIntervalsERKNS_10VirtRegMapERKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/LiveRangeEdit.cpp' l='75' u='c' c='_ZN4llvm13LiveRangeEdit21checkRematerializableEPNS_6VNInfoEPKNS_12MachineInstrEPNS_9AAResultsE'/>
<use f='llvm/llvm/lib/CodeGen/LiveRangeEdit.cpp' l='364' u='c' c='_ZN4llvm13LiveRangeEdit16eliminateDeadDefEPNS_12MachineInstrERNS_9SetVectorIPNS_12LiveIntervalENS_11SmallVectorIS5_Lj8EEENS_11SmallPtrSetIS5_Lj8EEEEEPNS_9AAResultsE'/>
<use f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='1253' u='c' c='_ZN12_GLOBAL__N_115MachineLICMBase19IsProfitableToHoistERN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='1306' u='c' c='_ZN12_GLOBAL__N_115MachineLICMBase19IsProfitableToHoistERN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/RegisterCoalescer.cpp' l='1286' u='c' c='_ZN12_GLOBAL__N_117RegisterCoalescer23reMaterializeTrivialDefERKN4llvm13CoalescerPairEPNS1_12MachineInstrERb'/>
<use f='llvm/llvm/lib/CodeGen/TargetRegisterInfo.cpp' l='73' u='c' c='_ZNK4llvm18TargetRegisterInfo27shouldRegionSplitForVirtRegERKNS_15MachineFunctionERKNS_12LiveIntervalE'/>
<use f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp' l='265' u='c' c='_ZL19shouldRematerializeRKN4llvm12MachineInstrERNS_9AAResultsEPKNS_20WebAssemblyInstrInfoE'/>
