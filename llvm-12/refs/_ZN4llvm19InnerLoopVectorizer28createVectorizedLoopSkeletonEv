<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='480' type='llvm::BasicBlock * llvm::InnerLoopVectorizer::createVectorizedLoopSkeleton()'/>
<ovr f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='971' c='_ZN4llvm30InnerLoopAndEpilogueVectorizer28createVectorizedLoopSkeletonEv'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='3511' ll='3594' type='llvm::BasicBlock * llvm::InnerLoopVectorizer::createVectorizedLoopSkeleton()'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='7721' u='c' c='_ZN4llvm24LoopVectorizationPlanner11executePlanERNS_19InnerLoopVectorizerEPNS_13DominatorTreeE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='473'>/// Create a new empty loop that will contain vectorized instructions later
  /// on, while the old loop will be used as the scalar remainder. Control flow
  /// is generated around the vectorized (and scalar epilogue) loops consisting
  /// of various checks and bypasses. Return the pre-header block of the new
  /// loop.
  /// In the case of epilogue vectorization, this function is overriden to
  /// handle the more complex control flow around the loops.</doc>
