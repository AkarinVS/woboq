<dec f='llvm/polly/lib/External/isl/isl_tab.h' l='244' type='int isl_tab_relax(struct isl_tab * tab, int con)'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='1131' u='c' c='is_relaxed_extension'/>
<def f='llvm/polly/lib/External/isl/isl_tab.c' l='2778' ll='2823' type='int isl_tab_relax(struct isl_tab * tab, int con)'/>
<doc f='llvm/polly/lib/External/isl/isl_tab.c' l='2761'>/* Given a tableau &quot;tab&quot; and an inequality constraint &quot;con&quot; of the tableau,
 * relax the inequality by one.  That is, the inequality r &gt;= 0 is replaced
 * by r&apos; = r + 1 &gt;= 0.
 * If r is a row variable, we simply increase the constant term by one
 * (taking into account the denominator).
 * If r is a column variable, then we need to modify each row that
 * refers to r = r&apos; - 1 by substituting this equality, effectively
 * subtracting the coefficient of the column from the constant.
 * We should only do this if the minimum is manifestly unbounded,
 * however.  Otherwise, we may end up with negative sample values
 * for non-negative variables.
 * So, if r is a column variable with a minimum that is not
 * manifestly unbounded, then we need to move it to a row.
 * However, the sample value of this row may be negative,
 * even after the relaxation, so we need to restore it.
 * We therefore prefer to pivot a column up to a row, if possible.
 */</doc>
