<dec f='llvm/llvm/utils/TableGen/CodeGenTarget.h' l='113' type='Optional&lt;llvm::CodeGenRegisterClass *&gt; llvm::CodeGenTarget::getSuperRegForSubReg(const llvm::ValueTypeByHwMode &amp; Ty, llvm::CodeGenRegBank &amp; RegBank, const llvm::CodeGenSubRegIndex * SubIdx, bool MustBeAllocatable = false) const'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenTarget.h' l='110'>/// Return the largest register class on \p RegBank which supports \p Ty and
  /// covers \p SubIdx if it exists.</doc>
<def f='llvm/llvm/utils/TableGen/CodeGenTarget.cpp' l='341' ll='388' type='Optional&lt;llvm::CodeGenRegisterClass *&gt; llvm::CodeGenTarget::getSuperRegForSubReg(const llvm::ValueTypeByHwMode &amp; ValueTy, llvm::CodeGenRegBank &amp; RegBank, const llvm::CodeGenSubRegIndex * SubIdx, bool MustBeAllocatable = false) const'/>
<use f='llvm/llvm/utils/TableGen/GlobalISelEmitter.cpp' l='5003' u='c' c='_ZN12_GLOBAL__N_117GlobalISelEmitter23inferSuperRegisterClassERKN4llvm15TypeSetByHwModeEPNS1_15TreePatternNodeE'/>
