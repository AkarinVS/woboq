<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='681' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildSExtOrTrunc(const llvm::DstOp &amp; Res, const llvm::SrcOp &amp; Op)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='673'>/// Build and insert \p Res = G_SEXT \p Op, \p Res = G_TRUNC \p Op, or
  /// \p Res = COPY \p Op depending on the differing sizes of \p Res and \p Op.
  ///  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p Res must be a generic virtual register with scalar or vector type.
  /// \pre \p Op must be a generic virtual register with scalar or vector type.
  ///
  /// \return The newly created instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='1530' u='c' c='_ZN4llvm12IRTranslator22translateGetElementPtrERKNS_4UserERNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='2656' u='c' c='_ZN4llvm12IRTranslator23translateExtractElementERKNS_4UserERNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h' l='122' u='c' c='_ZN4llvm28LegalizationArtifactCombiner14tryCombineZExtERNS_12MachineInstrERNS_15SmallVectorImplIPS1_EERNS3_INS_8RegisterEEERNS_20GISelObserverWrapperE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp' l='462' ll='465' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildSExtOrTrunc(const llvm::DstOp &amp; Res, const llvm::SrcOp &amp; Op)'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='2549' u='c' c='_ZNK4llvm22AMDGPURegisterBankInfo16applyMappingImplERKNS_16RegisterBankInfo14OperandsMapperE'/>
