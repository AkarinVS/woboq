<dec f='llvm/llvm/include/llvm/Analysis/VectorUtils.h' l='400' type='bool llvm::widenShuffleMaskElts(int Scale, ArrayRef&lt;int&gt; Mask, SmallVectorImpl&lt;int&gt; &amp; ScaledMask)'/>
<doc f='llvm/llvm/include/llvm/Analysis/VectorUtils.h' l='385'>/// Try to transform a shuffle mask by replacing elements with the scaled index
/// for an equivalent mask of widened elements. If all mask elements that would
/// map to a wider element of the new mask are the same negative number
/// (sentinel value), that element of the new mask is the same value. If any
/// element in a given slice is negative and some other element in that slice is
/// not the same value, return false (partial matches with sentinel values are
/// not allowed).
///
/// Example with Scale = 4:
///   &lt;16 x i8&gt; &lt;12, 13, 14, 15, 8, 9, 10, 11, 0, 1, 2, 3, -1, -1, -1, -1&gt; --&gt;
///   &lt;4 x i32&gt; &lt;3, 2, 0, -1&gt;
///
/// This is the reverse process of narrowing shuffle mask elements if it
/// succeeds. This transform is not always possible because indexes may not
/// divide evenly (scale down) to map to wider vector elements.</doc>
<def f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='432' ll='481' type='bool llvm::widenShuffleMaskElts(int Scale, ArrayRef&lt;int&gt; Mask, SmallVectorImpl&lt;int&gt; &amp; ScaledMask)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='2314' u='c' c='_ZN4llvm16InstCombinerImpl22visitShuffleVectorInstERNS_17ShuffleVectorInstE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VectorCombine.cpp' l='542' u='c' c='_ZN12_GLOBAL__N_113VectorCombine15foldBitcastShufERN4llvm11InstructionE'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='118' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='126' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='129' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='132' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='140' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='148' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='151' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='159' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='162' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/VectorUtilsTest.cpp' l='165' u='c' c='_ZN35BasicTest_widenShuffleMaskElts_Test8TestBodyEv'/>
