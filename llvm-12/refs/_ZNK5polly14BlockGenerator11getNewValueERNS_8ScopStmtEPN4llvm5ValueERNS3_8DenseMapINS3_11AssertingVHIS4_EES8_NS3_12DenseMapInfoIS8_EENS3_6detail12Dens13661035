<dec f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='474' type='llvm::Value * polly::BlockGenerator::getNewValue(polly::ScopStmt &amp; Stmt, llvm::Value * Old, polly::ValueMapT &amp; BBMap, llvm::LoopToScevMapT &amp; LTS, llvm::Loop * L) const'/>
<def f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='97' ll='212' type='llvm::Value * polly::BlockGenerator::getNewValue(polly::ScopStmt &amp; Stmt, llvm::Value * Old, polly::ValueMapT &amp; BBMap, llvm::LoopToScevMapT &amp; LTS, llvm::Loop * L) const'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='227' u='c' c='_ZN5polly14BlockGenerator14copyInstScalarERNS_8ScopStmtEPN4llvm11InstructionERNS3_8DenseMapINS3_11AssertingVHINS3_5ValueEEES9_NS3_12DenseMapInfoIS9_EE15700514'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='291' u='c' c='_ZN5polly14BlockGenerator24generateLocationAccessedERNS_8ScopStmtEPN4llvm4LoopEPNS3_5ValueERNS3_8DenseMapINS3_11AssertingVHIS6_EESA_NS3_12DenseMapInfo13745228'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='339' u='c' c='_ZN5polly14BlockGenerator18generateArrayStoreERNS_8ScopStmtEPN4llvm9StoreInstERNS3_8DenseMapINS3_11AssertingVHINS3_5ValueEEES9_NS3_12DenseMapInfoIS9_E15109439'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='716' u='c' c='_ZN5polly14BlockGenerator22generateBeginStmtTraceERNS_8ScopStmtERN4llvm8DenseMapIPKNS3_4LoopEPKNS3_4SCEVENS3_12DenseMapInfoIS7_EENS3_6detail12DenseMap3713235'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='739' u='c' c='_ZN5polly14BlockGenerator22generateBeginStmtTraceERNS_8ScopStmtERN4llvm8DenseMapIPKNS3_4LoopEPKNS3_4SCEVENS3_12DenseMapInfoIS7_EENS3_6detail12DenseMap3713235'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='791' u='c' c='_ZN5polly14BlockGenerator20generateScalarStoresERNS_8ScopStmtERN4llvm8DenseMapIPKNS3_4LoopEPKNS3_4SCEVENS3_12DenseMapInfoIS7_EENS3_6detail12DenseMapPa9229264'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1032' u='c' c='_ZN5polly20VectorBlockGenerator14getVectorValueERNS_8ScopStmtEPN4llvm5ValueERNS3_8DenseMapINS3_11AssertingVHIS4_EES8_NS3_12DenseMapInfoIS8_EENS3_6deta7029145'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1656' u='c' c='_ZN5polly15RegionGenerator12buildExitPHIEPNS_12MemoryAccessERN4llvm8DenseMapIPKNS3_4LoopEPKNS3_4SCEVENS3_12DenseMapInfoIS7_EENS3_6detail12DenseMapPair6209420'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1678' u='c' c='_ZN5polly15RegionGenerator13getExitScalarEPNS_12MemoryAccessERN4llvm8DenseMapIPKNS3_4LoopEPKNS3_4SCEVENS3_12DenseMapInfoIS7_EENS3_6detail12DenseMapPai7780523'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1687' u='c' c='_ZN5polly15RegionGenerator13getExitScalarEPNS_12MemoryAccessERN4llvm8DenseMapIPKNS3_4LoopEPKNS3_4SCEVENS3_12DenseMapInfoIS7_EENS3_6detail12DenseMapPai7780523'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1767' u='c' c='_ZN5polly15RegionGenerator15addOperandToPHIERNS_8ScopStmtEPN4llvm7PHINodeES5_PNS3_10BasicBlockERNS3_8DenseMapIPKNS3_4LoopEPKNS3_4SCEVENS3_12DenseMapIn3585504'/>
<use f='llvm/polly/lib/CodeGen/BlockGenerators.cpp' l='1779' u='c' c='_ZN5polly15RegionGenerator15addOperandToPHIERNS_8ScopStmtEPN4llvm7PHINodeES5_PNS3_10BasicBlockERNS3_8DenseMapIPKNS3_4LoopEPKNS3_4SCEVENS3_12DenseMapIn3585504'/>
<doc f='llvm/polly/include/polly/CodeGen/BlockGenerators.h' l='450'>/// Get the new version of a value.
  ///
  /// Given an old value, we first check if a new version of this value is
  /// available in the BBMap or GlobalMap. In case it is not and the value can
  /// be recomputed using SCEV, we do so. If we can not recompute a value
  /// using SCEV, but we understand that the value is constant within the scop,
  /// we return the old value.  If the value can still not be derived, this
  /// function will assert.
  ///
  /// @param Stmt      The statement to code generate.
  /// @param Old       The old Value.
  /// @param BBMap     A mapping from old values to their new values
  ///                  (for values recalculated within this basic block).
  /// @param LTS       A mapping from loops virtual canonical induction
  ///                  variable to their new values
  ///                  (for values recalculated in the new ScoP, but not
  ///                   within this basic block).
  /// @param L         The loop that surrounded the instruction that referenced
  ///                  this value in the original code. This loop is used to
  ///                  evaluate the scalar evolution at the right scope.
  ///
  /// @returns  o The old value, if it is still valid.
  ///           o The new value, if available.
  ///           o NULL, if no value is found.</doc>
