<def f='llvm/lldb/include/lldb/DataFormatters/FormattersContainer.h' l='52' ll='68' type='static lldb_private::ConstString lldb_private::TypeMatcher::StripTypeName(lldb_private::ConstString type)'/>
<use f='llvm/lldb/include/lldb/DataFormatters/FormattersContainer.h' l='84' u='c' c='_ZNK12lldb_private11TypeMatcher7MatchesENS_11ConstStringE'/>
<use f='llvm/lldb/include/lldb/DataFormatters/FormattersContainer.h' l='84' u='c' c='_ZNK12lldb_private11TypeMatcher7MatchesENS_11ConstStringE'/>
<use f='llvm/lldb/include/lldb/DataFormatters/FormattersContainer.h' l='91' u='c' c='_ZNK12lldb_private11TypeMatcher14GetMatchStringEv'/>
<doc f='llvm/lldb/include/lldb/DataFormatters/FormattersContainer.h' l='48'>// if the user tries to add formatters for, say, &quot;struct Foo&quot; those will not
  // match any type because of the way we strip qualifiers from typenames this
  // method looks for the case where the user is adding a
  // &quot;class&quot;,&quot;struct&quot;,&quot;enum&quot; or &quot;union&quot; Foo and strips the unnecessary qualifier</doc>
