<dec f='llvm/lldb/include/lldb/API/SBModuleSpec.h' l='58' type='lldb::SBFileSpec lldb::SBModuleSpec::GetPlatformFileSpec()'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='40638' u='c' c='_ZL38_wrap_SBModuleSpec_GetPlatformFileSpecP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBModuleSpec.h' l='45'>/// Get accessor for the module platform file.
  ///
  /// Platform file refers to the path of the module as it is known on
  /// the remote system on which it is being debugged. For local
  /// debugging this is always the same as Module::GetFileSpec(). But
  /// remote debugging might mention a file &apos;/usr/lib/liba.dylib&apos;
  /// which might be locally downloaded and cached. In this case the
  /// platform file could be something like:
  /// &apos;/tmp/lldb/platform-cache/remote.host.computer/usr/lib/liba.dylib&apos;
  /// The file could also be cached in a local developer kit directory.
  ///
  /// \return
  ///     A const reference to the file specification object.</doc>
<def f='llvm/lldb/source/API/SBModuleSpec.cpp' l='73' ll='78' type='lldb::SBFileSpec lldb::SBModuleSpec::GetPlatformFileSpec()'/>
<use f='llvm/lldb/source/API/SBModuleSpec.cpp' l='75' u='a' c='_ZN4lldb12SBModuleSpec19GetPlatformFileSpecEv'/>
<use f='llvm/lldb/source/API/SBModuleSpec.cpp' l='75' u='a' c='_ZN4lldb12SBModuleSpec19GetPlatformFileSpecEv'/>
<use f='llvm/lldb/source/API/SBModuleSpec.cpp' l='262' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
