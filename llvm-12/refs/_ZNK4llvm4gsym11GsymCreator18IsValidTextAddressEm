<dec f='llvm/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h' l='276' type='bool llvm::gsym::GsymCreator::IsValidTextAddress(uint64_t Addr) const'/>
<use f='llvm/llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp' l='387' u='c' c='_ZN4llvm4gsym16DwarfTransformer9handleDieERNS_11raw_ostreamERNS0_6CUInfoENS_8DWARFDieE'/>
<doc f='llvm/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h' l='257'>/// Check if an address is a valid code address.
  ///
  /// Any functions whose addresses do not exist within these function bounds
  /// will not be converted into the final GSYM. This allows the object file
  /// to figure out the valid file address ranges of all the code sections
  /// and ensure we don&apos;t add invalid functions to the final output. Many
  /// linkers have issues when dead stripping functions from DWARF debug info
  /// where they set the DW_AT_low_pc to zero, but newer DWARF has the
  /// DW_AT_high_pc as an offset from the DW_AT_low_pc and these size
  /// attributes have no relocations that can be applied. This results in DWARF
  /// where many functions have an DW_AT_low_pc of zero and a valid offset size
  /// for DW_AT_high_pc. If we extract all valid ranges from an object file
  /// that are marked with executable permissions, we can properly ensure that
  /// these functions are removed.
  ///
  /// \param Addr An address to check.
  ///
  /// \returns True if the address is in the valid text ranges or if no valid
  ///          text ranges have been set, false otherwise.</doc>
<def f='llvm/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp' l='311' ll='315' type='bool llvm::gsym::GsymCreator::IsValidTextAddress(uint64_t Addr) const'/>
<use f='llvm/llvm/lib/DebugInfo/GSYM/ObjectFileTransformer.cpp' l='95' u='c' c='_ZN4llvm4gsym21ObjectFileTransformer7convertERKNS_6object10ObjectFileERNS_11raw_ostreamERNS0_11GsymCreatorE'/>
