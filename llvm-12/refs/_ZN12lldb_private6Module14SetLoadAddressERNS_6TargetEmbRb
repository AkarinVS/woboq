<dec f='llvm/lldb/include/lldb/Core/Module.h' l='184' type='bool lldb_private::Module::SetLoadAddress(lldb_private::Target &amp; target, lldb::addr_t value, bool value_is_offset, bool &amp; changed)'/>
<doc f='llvm/lldb/include/lldb/Core/Module.h' l='148'>/// Set the load address for all sections in a module to be the file address
  /// plus \a slide.
  ///
  /// Many times a module will be loaded in a target with a constant offset
  /// applied to all top level sections. This function can set the load
  /// address for all top level sections to be the section file address +
  /// offset.
  ///
  /// \param[in] target
  ///     The target in which to apply the section load addresses.
  ///
  /// \param[in] value
  ///     if \a value_is_offset is true, then value is the offset to
  ///     apply to all file addresses for all top level sections in
  ///     the object file as each section load address is being set.
  ///     If \a value_is_offset is false, then &quot;value&quot; is the new
  ///     absolute base address for the image.
  ///
  /// \param[in] value_is_offset
  ///     If \b true, then \a value is an offset to apply to each
  ///     file address of each top level section.
  ///     If \b false, then \a value is the image base address that
  ///     will be used to rigidly slide all loadable sections.
  ///
  /// \param[out] changed
  ///     If any section load addresses were changed in \a target,
  ///     then \a changed will be set to \b true. Else \a changed
  ///     will be set to false. This allows this function to be
  ///     called multiple times on the same module for the same
  ///     target. If the module hasn&apos;t moved, then \a changed will
  ///     be false and no module updated notification will need to
  ///     be sent out.
  ///
  /// \return
  ///     /b True if any sections were successfully loaded in \a target,
  ///     /b false otherwise.</doc>
<use f='llvm/lldb/source/API/SBModule.cpp' l='63' u='c' c='_ZN4lldb8SBModuleC1ERNS_9SBProcessEm'/>
<use f='llvm/lldb/source/API/SBTarget.cpp' l='2254' u='c' c='_ZN4lldb8SBTarget20SetModuleLoadAddressENS_8SBModuleEl'/>
<use f='llvm/lldb/source/Commands/CommandObjectTarget.cpp' l='2722' u='c' c='_ZN30CommandObjectTargetModulesLoad9DoExecuteERN12lldb_private4ArgsERNS0_19CommandReturnObjectE'/>
<use f='llvm/lldb/source/Core/DynamicLoader.cpp' l='117' u='c' c='_ZN12lldb_private13DynamicLoader26UpdateLoadedSectionsCommonESt10shared_ptrINS_6ModuleEEmb'/>
<def f='llvm/lldb/source/Core/Module.cpp' l='1552' ll='1562' type='bool lldb_private::Module::SetLoadAddress(lldb_private::Target &amp; target, lldb::addr_t value, bool value_is_offset, bool &amp; changed)'/>
<use f='llvm/lldb/source/Expression/IRExecutionUnit.cpp' l='1275' u='c' c='_ZN12lldb_private15IRExecutionUnit12GetJITModuleEv'/>
<use f='llvm/lldb/source/Plugins/DynamicLoader/Darwin-Kernel/DynamicLoaderDarwinKernel.cpp' l='572' u='c' c='_ZN25DynamicLoaderDarwinKernel13KextImageInfo22LoadImageAtFileAddressEPN12lldb_private7ProcessE'/>
<use f='llvm/lldb/source/Plugins/JITLoader/GDB/JITLoaderGDB.cpp' l='354' u='c' c='_ZN12JITLoaderGDB21ReadJITDescriptorImplEb'/>
<use f='llvm/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp' l='1122' u='c' c='_ZN12lldb_private18process_gdb_remote16ProcessGDBRemote25MaybeLoadExecutableModuleEv'/>
<use f='llvm/lldb/source/Plugins/Process/mach-core/ProcessMachCore.cpp' l='397' u='c' c='_ZN15ProcessMachCore10DoLoadCoreEv'/>
<use f='llvm/lldb/source/Plugins/Process/minidump/ProcessMinidump.cpp' l='613' u='c' c='_ZN12lldb_private8minidump15ProcessMinidump14ReadModuleListEv'/>
<use f='llvm/lldb/source/Target/TraceSessionFileParser.cpp' l='52' u='c' c='_ZN12lldb_private22TraceSessionFileParser11ParseModuleERSt10shared_ptrINS_6TargetEERKNS0_10JSONModuleE'/>
