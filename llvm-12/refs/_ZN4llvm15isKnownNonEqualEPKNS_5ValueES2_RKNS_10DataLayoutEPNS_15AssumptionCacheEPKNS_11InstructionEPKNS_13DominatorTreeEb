<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='171' type='bool llvm::isKnownNonEqual(const llvm::Value * V1, const llvm::Value * V2, const llvm::DataLayout &amp; DL, llvm::AssumptionCache * AC = nullptr, const llvm::Instruction * CxtI = nullptr, const llvm::DominatorTree * DT = nullptr, bool UseInstrInfo = true)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='169'>/// Return true if the given values are known to be non-equal when defined.
  /// Supports scalar integer types only.</doc>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1280' u='c' c='_ZN4llvm13BasicAAResult8aliasGEPEPKNS_11GEPOperatorENS_12LocationSizeERKNS_9AAMDNodesEPKNS_5ValueES4_S7_SA_SA_RNS_11AAQueryInfoE'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='3621' u='c' c='_ZL16SimplifyICmpInstjPN4llvm5ValueES1_RKNS_13SimplifyQueryEj'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='356' ll='363' type='bool llvm::isKnownNonEqual(const llvm::Value * V1, const llvm::Value * V2, const llvm::DataLayout &amp; DL, llvm::AssumptionCache * AC = nullptr, const llvm::Instruction * CxtI = nullptr, const llvm::DominatorTree * DT = nullptr, bool UseInstrInfo = true)'/>
