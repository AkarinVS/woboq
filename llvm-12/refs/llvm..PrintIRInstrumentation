<def f='llvm/llvm/include/llvm/Passes/StandardInstrumentations.h' l='40' ll='64'/>
<use f='llvm/llvm/include/llvm/Passes/StandardInstrumentations.h' l='270'/>
<size>144</size>
<doc f='llvm/llvm/include/llvm/Passes/StandardInstrumentations.h' l='36'>/// Instrumentation to print IR before/after passes.
///
/// Needs state to be able to print module after pass that invalidates IR unit
/// (typically Loop or SCC).</doc>
<fun r='_ZN4llvm22PrintIRInstrumentationD1Ev'/>
<fun r='_ZN4llvm22PrintIRInstrumentation17registerCallbacksERNS_28PassInstrumentationCallbacksE'/>
<fun r='_ZN4llvm22PrintIRInstrumentation15printBeforePassENS_9StringRefENS_3AnyE'/>
<fun r='_ZN4llvm22PrintIRInstrumentation14printAfterPassENS_9StringRefENS_3AnyE'/>
<fun r='_ZN4llvm22PrintIRInstrumentation25printAfterPassInvalidatedENS_9StringRefE'/>
<fun r='_ZN4llvm22PrintIRInstrumentation21shouldPrintBeforePassENS_9StringRefE'/>
<fun r='_ZN4llvm22PrintIRInstrumentation20shouldPrintAfterPassENS_9StringRefE'/>
<fun r='_ZN4llvm22PrintIRInstrumentation14pushModuleDescENS_9StringRefENS_3AnyE'/>
<fun r='_ZN4llvm22PrintIRInstrumentation13popModuleDescB5cxx11ENS_9StringRefE'/>
<mbr r='llvm::PrintIRInstrumentation::PIC' o='0' t='llvm::PassInstrumentationCallbacks *'/>
<mbr r='llvm::PrintIRInstrumentation::ModuleDescStack' o='64' t='SmallVector&lt;llvm::PrintIRInstrumentation::PrintModuleDesc, 2&gt;'/>
<mbr r='llvm::PrintIRInstrumentation::StoreModuleDesc' o='1088' t='bool'/>
