<dec f='llvm/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.h' l='57' type='void llvm::exegesis::ParallelSnippetGenerator::instantiateMemoryOperands(unsigned int ScratchSpaceReg, std::vector&lt;InstructionTemplate&gt; &amp; SnippetTemplate) const'/>
<def f='llvm/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp' l='93' ll='115' type='void llvm::exegesis::ParallelSnippetGenerator::instantiateMemoryOperands(const unsigned int ScratchSpacePointerInReg, std::vector&lt;InstructionTemplate&gt; &amp; Instructions) const'/>
<use f='llvm/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp' l='171' u='c' c='_ZNK4llvm8exegesis24ParallelSnippetGenerator21generateCodeTemplatesENS0_19InstructionTemplateERKNS_9BitVectorE'/>
<use f='llvm/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp' l='177' u='c' c='_ZNK4llvm8exegesis24ParallelSnippetGenerator21generateCodeTemplatesENS0_19InstructionTemplateERKNS_9BitVectorE'/>
<use f='llvm/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp' l='185' u='c' c='_ZNK4llvm8exegesis24ParallelSnippetGenerator21generateCodeTemplatesENS0_19InstructionTemplateERKNS_9BitVectorE'/>
<use f='llvm/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp' l='216' u='c' c='_ZNK4llvm8exegesis24ParallelSnippetGenerator21generateCodeTemplatesENS0_19InstructionTemplateERKNS_9BitVectorE'/>
<doc f='llvm/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.h' l='34'>// Instantiates memory operands within a snippet.
  // To make computations as parallel as possible, we generate independant
  // memory locations for instructions that load and store. If there are less
  // than kMinNumDifferentAddresses in the original snippet, we duplicate
  // instructions until there are this number of instructions.
  // For example, assuming kMinNumDifferentAddresses=5 and
  // getMaxMemoryAccessSize()=64, if the original snippet is:
  //   mov eax, [memory]
  // we might generate:
  //   mov eax, [rdi]
  //   mov eax, [rdi + 64]
  //   mov eax, [rdi + 128]
  //   mov eax, [rdi + 192]
  //   mov eax, [rdi + 256]
  // If the original snippet is:
  //   mov eax, [memory]
  //   add eax, [memory]
  // we might generate:
  //   mov eax, [rdi]
  //   add eax, [rdi + 64]
  //   mov eax, [rdi + 128]
  //   add eax, [rdi + 192]
  //   mov eax, [rdi + 256]</doc>
