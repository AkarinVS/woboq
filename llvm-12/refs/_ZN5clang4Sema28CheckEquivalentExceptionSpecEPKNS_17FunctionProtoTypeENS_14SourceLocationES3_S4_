<dec f='llvm/clang/include/clang/Sema/Sema.h' l='1980' type='bool clang::Sema::CheckEquivalentExceptionSpec(const clang::FunctionProtoType * Old, clang::SourceLocation OldLoc, const clang::FunctionProtoType * New, clang::SourceLocation NewLoc)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='10252' u='c' c='_ZN5clang4Sema41areMultiversionVariantFunctionsCompatibleEPKNS_12FunctionDeclES3_RKNS_17PartialDiagnosticERKSt4pairINS_14SourceLocationES4_ESB_SB_bbb'/>
<use f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='1561' u='c' c='_ZN5clang4Sema26MergeVarDeclExceptionSpecsEPNS_7VarDeclES2_'/>
<def f='llvm/clang/lib/Sema/SemaExceptionSpec.cpp' l='483' ll='500' type='bool clang::Sema::CheckEquivalentExceptionSpec(const clang::FunctionProtoType * Old, clang::SourceLocation OldLoc, const clang::FunctionProtoType * New, clang::SourceLocation NewLoc)'/>
<doc f='llvm/clang/lib/Sema/SemaExceptionSpec.cpp' l='479'>/// CheckEquivalentExceptionSpec - Check if the two types have equivalent
/// exception specifications. Exception specifications are equivalent if
/// they allow exactly the same set of exception types. It does not matter how
/// that is achieved. See C++ [except.spec]p2.</doc>
