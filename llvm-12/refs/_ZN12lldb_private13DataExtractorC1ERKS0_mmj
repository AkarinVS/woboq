<dec f='llvm/lldb/include/lldb/Utility/DataExtractor.h' l='134' type='void lldb_private::DataExtractor::DataExtractor(const lldb_private::DataExtractor &amp; data, lldb::offset_t offset, lldb::offset_t length, uint32_t target_byte_size = 1)'/>
<doc f='llvm/lldb/include/lldb/Utility/DataExtractor.h' l='112'>/// Construct with a subset of \a data.
  ///
  /// Initialize this object with a subset of the data bytes in \a data. If \a
  /// data contains shared data, then a reference to the shared data will be
  /// added to ensure the shared data stays around as long as any objects have
  /// references to the shared data. The byte order value and the address size
  /// settings are copied from \a data. If \a offset is not a valid offset in
  /// \a data, then no reference to the shared data will be added. If there
  /// are not \a length bytes available in \a data starting at \a offset, the
  /// length will be truncated to contain as many bytes as possible.
  ///
  /// \param[in] data
  ///     Another DataExtractor object that contains data.
  ///
  /// \param[in] offset
  ///     The offset into \a data at which the subset starts.
  ///
  /// \param[in] length
  ///     The length in bytes of the subset of data.
  ///
  /// \param[in] target_byte_size
  ///     A size of a target byte in 8-bit host bytes</doc>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/DWARFDataExtractor.h' l='24' u='c' c='_ZN12lldb_private18DWARFDataExtractorC1ERKS0_mm'/>
<use f='llvm/lldb/source/Plugins/ObjectFile/ELF/ELFHeader.cpp' l='100' u='c' c='_ZN3elf9ELFHeader20ParseHeaderExtensionERN12lldb_private13DataExtractorE'/>
<use f='llvm/lldb/source/Plugins/ObjectFile/ELF/ObjectFileELF.cpp' l='3382' u='c' c='_ZN13ObjectFileELF14GetSegmentDataERKN3elf16ELFProgramHeaderE'/>
<use f='llvm/lldb/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp' l='5600' u='c' c='_ZN15ObjectFileMachO23GetThreadContextAtIndexEjRN12lldb_private6ThreadE'/>
<use f='llvm/lldb/source/Plugins/ObjectFile/PECOFF/ObjectFilePECOFF.cpp' l='514' u='c' c='_ZN16ObjectFilePECOFF13ReadImageDataEjm'/>
<use f='llvm/lldb/source/Plugins/Process/elf-core/ProcessElfCore.cpp' l='443' u='c' c='_ZL20ParseFreeBSDPrStatusR10ThreadDataRKN12lldb_private13DataExtractorERKNS1_8ArchSpecE'/>
<use f='llvm/lldb/source/Plugins/Process/elf-core/ProcessElfCore.cpp' l='515' u='c' c='_ZN14ProcessElfCore12parseSegmentERKN12lldb_private13DataExtractorE'/>
<use f='llvm/lldb/source/Plugins/Process/elf-core/ProcessElfCore.cpp' l='557' u='c' c='_ZN14ProcessElfCore17parseFreeBSDNotesEN4llvm8ArrayRefIN12lldb_private8CoreNoteEEE'/>
<use f='llvm/lldb/source/Plugins/Process/elf-core/ProcessElfCore.cpp' l='803' u='c' c='_ZN14ProcessElfCore15parseLinuxNotesEN4llvm8ArrayRefIN12lldb_private8CoreNoteEEE'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp' l='2425' u='c' c='_ZN19DWARFASTParserClang17ParseSingleMemberERK8DWARFDIES2_RKN12lldb_private12CompilerTypeERSt6vectorIiSaIiEEN4lldb10AccessTypeERS7_INS_27DelayedAddObj8488390'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp' l='2828' u='c' c='_ZN19DWARFASTParserClang17ParseChildMembersERK8DWARFDIERN12lldb_private12CompilerTypeERSt6vectorISt10unique_ptrIN5clang16CXXBaseSpecifierESt14default_4707216'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/DWARFDebugInfoEntry.cpp' l='345' u='c' c='_ZNK19DWARFDebugInfoEntry20GetDIENamesAndRangesEP9DWARFUnitRPKcS4_RN12lldb_private11RangeVectorImmLj2EEERiS9_S9_S9_S9_S9_PNS5_15DWARFExpressionE'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/DWARFDebugInfoEntry.cpp' l='350' u='c' c='_ZNK19DWARFDebugInfoEntry20GetDIENamesAndRangesEP9DWARFUnitRPKcS4_RN12lldb_private11RangeVectorImmLj2EEERiS9_S9_S9_S9_S9_PNS5_15DWARFExpressionE'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp' l='3193' u='c' c='_ZN15SymbolFileDWARF16ParseVariableDIEERKN12lldb_private13SymbolContextERK8DWARFDIEm'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp' l='3200' u='c' c='_ZN15SymbolFileDWARF16ParseVariableDIEERKN12lldb_private13SymbolContextERK8DWARFDIEm'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp' l='3218' u='c' c='_ZN15SymbolFileDWARF16ParseVariableDIEERKN12lldb_private13SymbolContextERK8DWARFDIEm'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp' l='3627' u='c' c='_ZL25CollectCallSiteParametersSt10shared_ptrIN12lldb_private6ModuleEE8DWARFDIE'/>
<use f='llvm/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp' l='3736' u='c' c='_ZN15SymbolFileDWARF16CollectCallEdgesESt10shared_ptrIN12lldb_private6ModuleEE8DWARFDIE'/>
<def f='llvm/lldb/source/Utility/DataExtractor.cpp' l='158' ll='170' type='void lldb_private::DataExtractor::DataExtractor(const lldb_private::DataExtractor &amp; data, lldb::offset_t offset, lldb::offset_t length, uint32_t target_byte_size = 1)'/>
<doc f='llvm/lldb/source/Utility/DataExtractor.cpp' l='153'>// Initialize this object with a subset of the data bytes in &quot;data&quot;. If &quot;data&quot;
// contains shared data, then a reference to this shared data will added and
// the shared data will stay around as long as any object contains a reference
// to that data. The endian swap and address size settings are copied from
// &quot;data&quot;.</doc>
