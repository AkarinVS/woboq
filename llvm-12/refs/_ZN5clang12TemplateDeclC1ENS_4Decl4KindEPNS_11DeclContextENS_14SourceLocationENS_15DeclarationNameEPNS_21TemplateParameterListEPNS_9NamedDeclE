<dec f='llvm/clang/include/clang/AST/DeclTemplate.h' l='403' type='void clang::TemplateDecl::TemplateDecl(clang::Decl::Kind DK, clang::DeclContext * DC, clang::SourceLocation L, clang::DeclarationName Name, clang::TemplateParameterList * Params, clang::NamedDecl * Decl)'/>
<use f='llvm/clang/include/clang/AST/DeclTemplate.h' l='410' u='c' c='_ZN5clang12TemplateDeclC1ENS_4Decl4KindEPNS_11DeclContextENS_14SourceLocationENS_15DeclarationNameEPNS_21TemplateParameterListE'/>
<use f='llvm/clang/include/clang/AST/DeclTemplate.h' l='850' u='c' c='_ZN5clang24RedeclarableTemplateDeclC1ENS_4Decl4KindERNS_10ASTContextEPNS_11DeclContextENS_14SourceLocationENS_15DeclarationNameEPNS_21TemplateParamete13081809'/>
<doc f='llvm/clang/include/clang/AST/DeclTemplate.h' l='402'>// Construct a template decl with name, parameters, and templated element.</doc>
<def f='llvm/clang/lib/AST/DeclTemplate.cpp' l='182' ll='185' type='void clang::TemplateDecl::TemplateDecl(clang::Decl::Kind DK, clang::DeclContext * DC, clang::SourceLocation L, clang::DeclarationName Name, clang::TemplateParameterList * Params, clang::NamedDecl * Decl)'/>
<doc f='llvm/clang/lib/AST/DeclTemplate.cpp' l='178'>//===----------------------------------------------------------------------===//
// TemplateDecl Implementation
//===----------------------------------------------------------------------===//</doc>
