<dec f='llvm/clang/include/clang/Lex/ModuleMap.h' l='457' type='void clang::ModuleMap::resolveHeaderDirectives(const clang::FileEntry * File) const'/>
<doc f='llvm/clang/include/clang/Lex/ModuleMap.h' l='453'>/// Resolve all lazy header directives for the specified file.
  ///
  /// This ensures that the HeaderFileInfo on HeaderSearch is up to date. This
  /// is effectively internal, but is exposed so HeaderSearch can call it.</doc>
<use f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='1284' u='c' c='_ZN5clang12HeaderSearch22ShouldEnterIncludeFileERNS_12PreprocessorEPKNS_9FileEntryEbbPNS_6ModuleE'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='397' u='c' c='_ZN5clang9ModuleMap15findKnownHeaderEPKNS_9FileEntryE'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='683' u='c' c='_ZNK5clang9ModuleMap28findResolvedModulesForHeaderEPKNS_9FileEntryE'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='697' u='c' c='_ZNK5clang9ModuleMap27isHeaderUnavailableInModuleEPKNS_9FileEntryEPKNS_6ModuleE'/>
<def f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1179' ll='1193' type='void clang::ModuleMap::resolveHeaderDirectives(const clang::FileEntry * File) const'/>
