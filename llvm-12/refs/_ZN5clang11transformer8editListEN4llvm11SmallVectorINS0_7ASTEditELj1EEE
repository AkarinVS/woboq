<dec f='llvm/clang/include/clang/Tooling/Transformer/RewriteRule.h' l='129' type='clang::transformer::EditGenerator clang::transformer::editList(llvm::SmallVector&lt;ASTEdit, 1&gt; Edits)'/>
<use f='llvm/clang/include/clang/Tooling/Transformer/RewriteRule.h' l='132' u='c' c='_ZN5clang11transformer7noEditsEv'/>
<use f='llvm/clang/include/clang/Tooling/Transformer/RewriteRule.h' l='251' u='c' c='_ZN5clang11transformer8shrinkToESt8functionIFN4llvm8ExpectedINS_15CharSourceRangeEEERKNS_12ast_matchers11MatchFinder11MatchResultEEESC_'/>
<use f='llvm/clang/include/clang/Tooling/Transformer/RewriteRule.h' l='299' u='c' c='_ZN5clang11transformer8makeRuleENS_12ast_matchers8internal15DynTypedMatcherEN4llvm11SmallVectorINS0_7ASTEditELj1EEESt10shared_ptrINS0_16MatchComputati7101656'/>
<def f='llvm/clang/lib/Tooling/Transformer/RewriteRule.cpp' l='69' ll='73' type='clang::transformer::EditGenerator clang::transformer::editList(SmallVector&lt;clang::transformer::ASTEdit, 1&gt; Edits)'/>
<doc f='llvm/clang/include/clang/Tooling/Transformer/RewriteRule.h' l='120'>/// Lifts a list of `ASTEdit`s into an `EditGenerator`.
///
/// The `EditGenerator` will return an empty vector if any of the edits apply to
/// portions of the source that are ineligible for rewriting (certain
/// interactions with macros, for example) and it will fail if any invariants
/// are violated relating to bound nodes in the match.  However, it does not
/// fail in the case of conflicting edits -- conflict handling is left to
/// clients.  We recommend use of the \c AtomicChange or \c Replacements classes
/// for assistance in detecting such conflicts.</doc>
<use f='llvm/clang/unittests/Tooling/TransformerTest.cpp' l='821' u='c' c='_ZN12_GLOBAL__N_129TransformerTest_EditList_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/TransformerTest.cpp' l='880' u='c' c='_ZN12_GLOBAL__N_141TransformerTest_FlattenWithMixedArgs_Test8TestBodyEv'/>
