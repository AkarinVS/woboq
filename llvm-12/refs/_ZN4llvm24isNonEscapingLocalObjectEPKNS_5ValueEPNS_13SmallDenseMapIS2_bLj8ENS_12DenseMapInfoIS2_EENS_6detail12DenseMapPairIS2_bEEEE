<dec f='llvm/llvm/include/llvm/Analysis/CaptureTracking.h' l='102' type='bool llvm::isNonEscapingLocalObject(const llvm::Value * V, SmallDenseMap&lt;const llvm::Value *, bool, 8&gt; * IsCapturedCache = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/CaptureTracking.h' l='100'>/// Returns true if the pointer is to a function-local object that never
  /// escapes from the function.</doc>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='839' u='c' c='_ZN4llvm13BasicAAResult13getModRefInfoEPKNS_8CallBaseERKNS_14MemoryLocationERNS_11AAQueryInfoE'/>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1563' u='c' c='_ZN4llvm13BasicAAResult10aliasCheckEPKNS_5ValueENS_12LocationSizeERKNS_9AAMDNodesES3_S4_S7_RNS_11AAQueryInfoE'/>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1566' u='c' c='_ZN4llvm13BasicAAResult10aliasCheckEPKNS_5ValueENS_12LocationSizeERKNS_9AAMDNodesES3_S4_S7_RNS_11AAQueryInfoE'/>
<def f='llvm/llvm/lib/Analysis/CaptureTracking.cpp' l='415' ll='454' type='bool llvm::isNonEscapingLocalObject(const llvm::Value * V, SmallDenseMap&lt;const llvm::Value *, bool, 8&gt; * IsCapturedCache = nullptr)'/>
