<def f='llvm/lldb/include/lldb/Target/Thread.h' l='1075' ll='1077' type='uint32_t lldb_private::Thread::GetExtendedBacktraceOriginatingIndexID()'/>
<doc f='llvm/lldb/include/lldb/Target/Thread.h' l='1066'>// Get the originating thread&apos;s index ID.
  // In the case of an &quot;extended&quot; thread -- a thread which represents the stack
  // that enqueued/spawned work that is currently executing -- we need to
  // provide the IndexID of the thread that actually did this work.  We don&apos;t
  // want to just masquerade as that thread&apos;s IndexID by using it in our own
  // IndexID because that way leads to madness - but the driver program which
  // is iterating over extended threads may ask for the OriginatingThreadID to
  // display that information to the user.
  // Normal threads will return the same thing as GetIndexID();</doc>
<use f='llvm/lldb/source/API/SBThread.cpp' l='1307' u='c' c='_ZN4lldb8SBThread38GetExtendedBacktraceOriginatingIndexIDEv'/>
<ovr f='llvm/lldb/source/Plugins/Process/Utility/HistoryThread.cpp' l='75' c='_ZN12lldb_private13HistoryThread38GetExtendedBacktraceOriginatingIndexIDEv'/>
