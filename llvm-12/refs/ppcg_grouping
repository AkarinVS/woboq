<def f='llvm/polly/lib/External/ppcg/grouping.c' l='37' ll='46'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='50' c='ppcg_grouping_clear'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='62' c='ppcg_grouping_compute_dep'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='376' c='construct_group_id'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='429' c='group_contraction_from_prefix_and_domain'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='475' c='add_groups'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='529' c='group_subsequence'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='561' c='detect_groups'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='609' c='complete_grouping'/>
<use f='llvm/polly/lib/External/ppcg/grouping.c' l='650' c='ppcg_compute_schedule'/>
<size>48</size>
<doc f='llvm/polly/lib/External/ppcg/grouping.c' l='23'>/* Internal data structure for use during the detection of statements
 * that can be grouped.
 *
 * &quot;sc&quot; contains the original schedule constraints (not a copy).
 * &quot;dep&quot; contains the intersection of the validity and the proximity
 * constraints in &quot;sc&quot;.  It may be NULL if it has not been computed yet.
 * &quot;group_id&quot; is the identifier for the next group that is extracted.
 *
 * &quot;domain&quot; is the set of statement instances that belong to any of the groups.
 * &quot;contraction&quot; maps the elements of &quot;domain&quot; to the corresponding group
 * instances.
 * &quot;schedule&quot; schedules the statements in each group relatively to each other.
 * These last three fields are NULL if no groups have been found so far.
 */</doc>
