<dec f='llvm/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h' l='70' type='std::unique_ptr&lt;MIRParser&gt; llvm::createMIRParserFromFile(llvm::StringRef Filename, llvm::SMDiagnostic &amp; Error, llvm::LLVMContext &amp; Context, std::function&lt;void (Function &amp;)&gt; ProcessIRFunction = nullptr)'/>
<def f='llvm/llvm/lib/CodeGen/MIRParser/MIRParser.cpp' l='983' ll='994' type='std::unique_ptr&lt;MIRParser&gt; llvm::createMIRParserFromFile(llvm::StringRef Filename, llvm::SMDiagnostic &amp; Error, llvm::LLVMContext &amp; Context, std::function&lt;void (Function &amp;)&gt; ProcessIRFunction = nullptr)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h' l='59'>/// This function is the main interface to the MIR serialization format parser.
///
/// It reads in a MIR file and returns a MIR parser that can parse the embedded
/// LLVM IR module and initialize the machine functions by parsing the machine
/// function&apos;s state.
///
/// \param Filename - The name of the file to parse.
/// \param Error - Error result info.
/// \param Context - Context which will be used for the parsed LLVM IR module.
/// \param ProcessIRFunction - function to run on every IR function or stub
/// loaded from the MIR file.</doc>
<use f='llvm/llvm/tools/llc/llc.cpp' l='520' u='c' c='_ZL13compileModulePPcRN4llvm11LLVMContextE'/>
