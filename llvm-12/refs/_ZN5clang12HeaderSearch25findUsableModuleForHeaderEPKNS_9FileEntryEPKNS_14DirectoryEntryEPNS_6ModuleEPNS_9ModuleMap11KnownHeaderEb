<dec f='llvm/clang/include/clang/Lex/HeaderSearch.h' l='674' type='bool clang::HeaderSearch::findUsableModuleForHeader(const clang::FileEntry * File, const clang::DirectoryEntry * Root, clang::Module * RequestingModule, ModuleMap::KnownHeader * SuggestedModule, bool IsSystemHeaderDir)'/>
<doc f='llvm/clang/include/clang/Lex/HeaderSearch.h' l='670'>/// Find and suggest a usable module for the given file.
  ///
  /// \return \c true if the file can be used, \c false if we are not permitted to
  ///         find this file due to requirements from \p RequestingModule.</doc>
<use f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='366' u='c' c='_ZN5clang12HeaderSearch23getFileAndSuggestModuleEN4llvm9StringRefENS_14SourceLocationEPKNS_14DirectoryEntryEbPNS_6ModuleEPNS_9ModuleMap11KnownHeaderE'/>
<use f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='641' u='c' c='_ZNK5clang15DirectoryLookup17DoFrameworkLookupEN4llvm9StringRefERNS_12HeaderSearchEPNS1_15SmallVectorImplIcEES7_PNS_6ModuleEPNS_9ModuleMap11KnownHeaderERbSD_'/>
<def f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='1465' ll='1474' type='bool clang::HeaderSearch::findUsableModuleForHeader(const clang::FileEntry * File, const clang::DirectoryEntry * Root, clang::Module * RequestingModule, ModuleMap::KnownHeader * SuggestedModule, bool IsSystemHeaderDir)'/>
