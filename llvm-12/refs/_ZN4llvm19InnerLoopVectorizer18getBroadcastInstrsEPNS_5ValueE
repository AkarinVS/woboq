<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='648' type='llvm::Value * llvm::InnerLoopVectorizer::getBroadcastInstrs(llvm::Value * V)'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2005' ll='2022' type='llvm::Value * llvm::InnerLoopVectorizer::getBroadcastInstrs(llvm::Value * V)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2203' u='c' c='_ZN4llvm19InnerLoopVectorizer21widenIntOrFpInductionEPNS_7PHINodeEPNS_5ValueEPNS_9TruncInstE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2423' u='c' c='_ZN4llvm19InnerLoopVectorizer22getOrCreateVectorValueEPNS_5ValueEj'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2440' u='c' c='_ZN4llvm19InnerLoopVectorizer22getOrCreateVectorValueEPNS_5ValueEj'/>
<ovr f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='7805' c='_ZN4llvm17InnerLoopUnroller18getBroadcastInstrsEPNS_5ValueE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='643'>/// Create a broadcast instruction. This method generates a broadcast
  /// instruction (shuffle) for loop invariant values and for the induction
  /// value. If this is the induction variable then we extend it to N, N+1, ...
  /// this is needed because each iteration in the loop corresponds to a SIMD
  /// element.</doc>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2000'>//===----------------------------------------------------------------------===//
// Implementation of LoopVectorizationLegality, InnerLoopVectorizer and
// LoopVectorizationCostModel and LoopVectorizationPlanner.
//===----------------------------------------------------------------------===//</doc>
