<dec f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='444' type='void llvm::PPCInstrInfo::storeRegToStackSlotNoUpd(llvm::MachineBasicBlock &amp; MBB, MachineBasicBlock::iterator MBBI, unsigned int SrcReg, bool isKill, int FrameIndex, const llvm::TargetRegisterClass * RC, const llvm::TargetRegisterInfo * TRI) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='441'>// Emits a register spill without updating the register class for vector
  // registers. This ensures that when we spill a vector register the
  // element order in the register is the same as it was in memory.</doc>
<use f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp' l='2354' u='c' c='_ZNK4llvm16PPCFrameLowering25spillCalleeSavedRegistersERNS_17MachineBasicBlockENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEENS_8ArrayRefINS10705252'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='1924' ll='1942' type='void llvm::PPCInstrInfo::storeRegToStackSlotNoUpd(llvm::MachineBasicBlock &amp; MBB, MachineBasicBlock::iterator MI, unsigned int SrcReg, bool isKill, int FrameIdx, const llvm::TargetRegisterClass * RC, const llvm::TargetRegisterInfo * TRI) const'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='1958' u='c' c='_ZNK4llvm12PPCInstrInfo19storeRegToStackSlotERNS_17MachineBasicBlockENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEENS_8RegisterEbiPKNS_19Tar8316117'/>
