<dec f='llvm/lldb/include/lldb/Core/Communication.h' l='276' type='static lldb::thread_result_t lldb_private::Communication::ReadThread(lldb::thread_arg_t comm_ptr)'/>
<doc f='llvm/lldb/include/lldb/Core/Communication.h' l='264'>/// The static read thread function. This function will call the &quot;DoRead&quot;
  /// function continuously and wait for data to become available. When data
  /// is received it will append the available data to the internal cache and
  /// broadcast a \b eBroadcastBitReadThreadGotBytes event.
  ///
  /// \param[in] comm_ptr
  ///     A pointer to an instance of this class.
  ///
  /// \return
  ///     \b NULL.
  ///
  /// \see void Communication::ReadThreadGotBytes (const uint8_t *, size_t);</doc>
<use f='llvm/lldb/source/Core/Communication.cpp' l='208' u='r' c='_ZN12lldb_private13Communication15StartReadThreadEPNS_6StatusE'/>
<def f='llvm/lldb/source/Core/Communication.cpp' l='307' ll='384' type='static lldb::thread_result_t lldb_private::Communication::ReadThread(lldb::thread_arg_t p)'/>
