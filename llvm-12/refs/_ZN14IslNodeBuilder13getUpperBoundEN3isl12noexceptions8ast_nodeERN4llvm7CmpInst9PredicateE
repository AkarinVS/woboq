<dec f='llvm/polly/include/polly/CodeGen/IslNodeBuilder.h' l='222' type='isl::ast_expr IslNodeBuilder::getUpperBound(isl::ast_node For, CmpInst::Predicate &amp; Predicate)'/>
<doc f='llvm/polly/include/polly/CodeGen/IslNodeBuilder.h' l='203'>// Extract the upper bound of this loop
  //
  // The isl code generation can generate arbitrary expressions to check if the
  // upper bound of a loop is reached, but it provides an option to enforce
  // &apos;atomic&apos; upper bounds. An &apos;atomic upper bound is always of the form
  // iv &lt;= expr, where expr is an (arbitrary) expression not containing iv.
  //
  // This function extracts &apos;atomic&apos; upper bounds. Polly, in general, requires
  // atomic upper bounds for the following reasons:
  //
  // 1. An atomic upper bound is loop invariant
  //
  //    It must not be calculated at each loop iteration and can often even be
  //    hoisted out further by the loop invariant code motion.
  //
  // 2. OpenMP needs a loop invariant upper bound to calculate the number
  //    of loop iterations.
  //
  // 3. With the existing code, upper bounds have been easier to implement.</doc>
<def f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='110' ll='146' type='isl::ast_expr IslNodeBuilder::getUpperBound(isl::ast_node For, ICmpInst::Predicate &amp; Predicate)'/>
<use f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='194' u='c' c='_ZN14IslNodeBuilder21getNumberOfIterationsEN3isl12noexceptions8ast_nodeE'/>
<use f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='535' u='c' c='_ZN14IslNodeBuilder19createForSequentialEN3isl12noexceptions8ast_nodeEb'/>
<use f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='639' u='c' c='_ZN14IslNodeBuilder17createForParallelEP12isl_ast_node'/>
