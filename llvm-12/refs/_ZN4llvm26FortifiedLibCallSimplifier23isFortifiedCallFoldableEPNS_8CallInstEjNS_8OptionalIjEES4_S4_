<dec f='llvm/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h' l='91' type='bool llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable(llvm::CallInst * CI, unsigned int ObjSizeOp, Optional&lt;unsigned int&gt; SizeOp = None, Optional&lt;unsigned int&gt; StrOp = None, Optional&lt;unsigned int&gt; FlagsOp = None)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h' l='73'>/// Checks whether the call \p CI to a fortified libcall is foldable
  /// to the non-fortified version.
  ///
  /// \param CI the call to the fortified libcall.
  ///
  /// \param ObjSizeOp the index of the object size parameter of this chk
  /// function. Not optional since this is mandatory.
  ///
  /// \param SizeOp optionally set to the parameter index of an explicit buffer
  /// size argument. For instance, set to &apos;2&apos; for __strncpy_chk.
  ///
  /// \param StrOp optionally set to the parameter index of the source string
  /// parameter to strcpy-like functions, where only the strlen of the source
  /// will be writtin into the destination.
  ///
  /// \param FlagsOp optionally set to the parameter index of a &apos;flags&apos;
  /// parameter. These are used by an implementation to opt-into stricter
  /// checking.</doc>
<def f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3230' ll='3272' type='bool llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable(llvm::CallInst * CI, unsigned int ObjSizeOp, Optional&lt;unsigned int&gt; SizeOp = None, Optional&lt;unsigned int&gt; StrOp = None, Optional&lt;unsigned int&gt; FlagOp = None)'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3276' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier17optimizeMemCpyChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3290' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier18optimizeMemMoveChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3306' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier17optimizeMemSetChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3321' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier18optimizeMemPCpyChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3352' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier18optimizeStrpCpyChkEPNS_8CallInstERNS_13IRBuilderBaseENS_7LibFuncE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3381' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier17optimizeStrLenChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3390' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier19optimizeStrpNCpyChkEPNS_8CallInstERNS_13IRBuilderBaseENS_7LibFuncE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3404' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier18optimizeMemCCpyChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3413' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier19optimizeSNPrintfChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3424' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier18optimizeSPrintfChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3435' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier17optimizeStrCatChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3443' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier15optimizeStrLCatEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3452' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier18optimizeStrNCatChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3461' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier18optimizeStrLCpyChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3470' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier20optimizeVSNPrintfChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3479' u='c' c='_ZN4llvm26FortifiedLibCallSimplifier19optimizeVSPrintfChkEPNS_8CallInstERNS_13IRBuilderBaseE'/>
<doc f='llvm/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp' l='3195'>// TODO:
//   Additional cases that we need to add to this file:
//
// cbrt:
//   * cbrt(expN(X))  -&gt; expN(x/3)
//   * cbrt(sqrt(x))  -&gt; pow(x,1/6)
//   * cbrt(cbrt(x))  -&gt; pow(x,1/9)
//
// exp, expf, expl:
//   * exp(log(x))  -&gt; x
//
// log, logf, logl:
//   * log(exp(x))   -&gt; x
//   * log(exp(y))   -&gt; y*log(e)
//   * log(exp10(y)) -&gt; y*log(10)
//   * log(sqrt(x))  -&gt; 0.5*log(x)
//
// pow, powf, powl:
//   * pow(sqrt(x),y) -&gt; pow(x,y*0.5)
//   * pow(pow(x,y),z)-&gt; pow(x,y*z)
//
// signbit:
//   * signbit(cnst) -&gt; cnst&apos;
//   * signbit(nncst) -&gt; 0 (if pstv is a non-negative constant)
//
// sqrt, sqrtf, sqrtl:
//   * sqrt(expN(x))  -&gt; expN(x*0.5)
//   * sqrt(Nroot(x)) -&gt; pow(x,1/(2*N))
//   * sqrt(pow(x,y)) -&gt; pow(|x|,y*0.5)
//

//===----------------------------------------------------------------------===//
// Fortified Library Call Optimizations
//===----------------------------------------------------------------------===//</doc>
