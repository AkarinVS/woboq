<dec f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombineInternal.h' l='105' type='llvm::Type * llvm::TruncInstCombine::getBestTruncatedType()'/>
<doc f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombineInternal.h' l='99'>/// Build an expression dag dominated by the current processed TruncInst and
  /// Check if it is eligible to be reduced to a smaller type.
  ///
  /// \return the scalar version of the new type to be used for the reduced
  ///         expression dag, or nullptr if the expression dag is not eligible
  ///         to be reduced.</doc>
<def f='llvm/llvm/lib/Transforms/AggressiveInstCombine/TruncInstCombine.cpp' l='240' ll='284' type='llvm::Type * llvm::TruncInstCombine::getBestTruncatedType()'/>
<use f='llvm/llvm/lib/Transforms/AggressiveInstCombine/TruncInstCombine.cpp' l='424' u='c' c='_ZN4llvm16TruncInstCombine3runERNS_8FunctionE'/>
