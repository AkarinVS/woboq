<dec f='llvm/lldb/include/lldb/Core/Disassembler.h' l='142' type='void lldb_private::Instruction::Dump(lldb_private::Stream * s, uint32_t max_opcode_byte_size, bool show_address, bool show_bytes, const lldb_private::ExecutionContext * exe_ctx, const lldb_private::SymbolContext * sym_ctx, const lldb_private::SymbolContext * prev_sym_ctx, const FormatEntity::Entry * disassembly_addr_format, size_t max_address_text_size)'/>
<doc f='llvm/lldb/include/lldb/Core/Disassembler.h' l='93'>/// Dump the text representation of this Instruction to a Stream
  ///
  /// Print the (optional) address, (optional) bytes, opcode,
  /// operands, and instruction comments to a stream.
  ///
  /// \param[in] s
  ///     The Stream to add the text to.
  ///
  /// \param[in] show_address
  ///     Whether the address (using disassembly_addr_format_spec formatting)
  ///     should be printed.
  ///
  /// \param[in] show_bytes
  ///     Whether the bytes of the assembly instruction should be printed.
  ///
  /// \param[in] max_opcode_byte_size
  ///     The size (in bytes) of the largest instruction in the list that
  ///     we are printing (for text justification/alignment purposes)
  ///     Only needed if show_bytes is true.
  ///
  /// \param[in] exe_ctx
  ///     The current execution context, if available.  May be used in
  ///     the assembling of the operands+comments for this instruction.
  ///     Pass NULL if not applicable.
  ///
  /// \param[in] sym_ctx
  ///     The SymbolContext for this instruction.
  ///     Pass NULL if not available/computed.
  ///     Only needed if show_address is true.
  ///
  /// \param[in] prev_sym_ctx
  ///     The SymbolContext for the previous instruction.  Depending on
  ///     the disassembly address format specification, a change in
  ///     Symbol / Function may mean that a line is printed with the new
  ///     symbol/function name.
  ///     Pass NULL if unavailable, or if this is the first instruction of
  ///     the InstructionList.
  ///     Only needed if show_address is true.
  ///
  /// \param[in] disassembly_addr_format
  ///     The format specification for how addresses are printed.
  ///     Only needed if show_address is true.
  ///
  /// \param[in] max_address_text_size
  ///     The length of the longest address string at the start of the
  ///     disassembly line that will be printed (the
  ///     Debugger::FormatDisassemblerAddress() string)
  ///     so this method can properly align the instruction opcodes.
  ///     May be 0 to indicate no indentation/alignment of the opcodes.</doc>
<use f='llvm/lldb/source/API/SBInstruction.cpp' l='253' u='c' c='_ZN4lldb13SBInstruction14GetDescriptionERNS_8SBStreamE'/>
<use f='llvm/lldb/source/API/SBInstruction.cpp' l='287' u='c' c='_ZN4lldb13SBInstruction5PrintESt10shared_ptrIN12lldb_private4FileEE'/>
<use f='llvm/lldb/source/API/SBInstructionList.cpp' l='178' u='c' c='_ZN4lldb17SBInstructionList14GetDescriptionERN12lldb_private6StreamE'/>
<use f='llvm/lldb/source/Core/Disassembler.cpp' l='531' u='c' c='_ZN12lldb_private12Disassembler17PrintInstructionsERNS_8DebuggerERKNS_8ArchSpecERKNS_16ExecutionContextEbjjRNS_6StreamE'/>
<def f='llvm/lldb/source/Core/Disassembler.cpp' l='578' ll='637' type='void lldb_private::Instruction::Dump(lldb_private::Stream * s, uint32_t max_opcode_byte_size, bool show_address, bool show_bytes, const lldb_private::ExecutionContext * exe_ctx, const lldb_private::SymbolContext * sym_ctx, const lldb_private::SymbolContext * prev_sym_ctx, const FormatEntity::Entry * disassembly_addr_format, size_t max_address_text_size)'/>
<use f='llvm/lldb/source/Core/Disassembler.cpp' l='979' u='c' c='_ZN12lldb_private15InstructionList4DumpEPNS_6StreamEbbPKNS_16ExecutionContextE'/>
<use f='llvm/lldb/source/Plugins/UnwindAssembly/InstEmulation/UnwindAssemblyInstEmulation.cpp' l='245' u='c' c='_ZN27UnwindAssemblyInstEmulation36GetNonCallSiteUnwindPlanFromAssemblyERN12lldb_private12AddressRangeEPhmRNS0_10UnwindPlanE'/>
<use f='llvm/lldb/source/Target/ThreadPlanTracer.cpp' l='178' u='c' c='_ZN12lldb_private24ThreadPlanAssemblyTracer3LogEv'/>
<use f='llvm/lldb/source/Target/Trace.cpp' l='154' u='c' c='_ZL22TryDumpInstructionInfoRN12lldb_private6StreamERKSt10shared_ptrINS_12DisassemblerEERKNS_16ExecutionContextERKNS_7AddressE'/>
