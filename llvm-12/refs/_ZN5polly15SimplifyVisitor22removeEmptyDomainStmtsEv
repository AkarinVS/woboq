<dec f='llvm/polly/include/polly/Simplify.h' l='70' type='void polly::SimplifyVisitor::removeEmptyDomainStmts()'/>
<doc f='llvm/polly/include/polly/Simplify.h' l='62'>/// Remove statements that are never executed due to their domains being
  /// empty.
  ///
  /// In contrast to Scop::simplifySCoP, this removes based on the SCoP&apos;s
  /// effective domain, i.e. including the SCoP&apos;s context as used by some other
  /// simplification methods in this pass. This is necessary because the
  /// analysis on empty domains is unreliable, e.g. remove a scalar value
  /// definition MemoryAccesses, but not its use.</doc>
<def f='llvm/polly/lib/Transform/Simplify.cpp' l='137' ll='151' type='void polly::SimplifyVisitor::removeEmptyDomainStmts()'/>
<use f='llvm/polly/lib/Transform/Simplify.cpp' l='621' u='c' c='_ZN5polly15SimplifyVisitor5visitERNS_4ScopEPN4llvm8LoopInfoE'/>
<doc f='llvm/polly/lib/Transform/Simplify.cpp' l='129'>/// Remove statements that are never executed due to their domains being
/// empty.
///
/// In contrast to Scop::simplifySCoP, this removes based on the SCoP&apos;s
/// effective domain, i.e. including the SCoP&apos;s context as used by some other
/// simplification methods in this pass. This is necessary because the
/// analysis on empty domains is unreliable, e.g. remove a scalar value
/// definition MemoryAccesses, but not its use.</doc>
