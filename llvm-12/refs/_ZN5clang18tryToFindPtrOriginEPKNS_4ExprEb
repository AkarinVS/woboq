<dec f='llvm/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h' l='58' type='std::pair&lt;const clang::Expr *, bool&gt; clang::tryToFindPtrOrigin(const clang::Expr * E, bool StopAtFirstRefCountedObj)'/>
<def f='llvm/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.cpp' l='19' ll='80' type='std::pair&lt;const Expr *, bool&gt; clang::tryToFindPtrOrigin(const clang::Expr * E, bool StopAtFirstRefCountedObj)'/>
<doc f='llvm/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h' l='26'>/// This function de-facto defines a set of transformations that we consider
/// safe (in heuristical sense). These transformation if passed a safe value as
/// an input should provide a safe value (or an object that provides safe
/// values).
///
/// For more context see Static Analyzer checkers documentation - specifically
/// webkit.UncountedCallArgsChecker checker. Whitelist of transformations:
/// - constructors of ref-counted types (including factory methods)
/// - getters of ref-counted types
/// - member overloaded operators
/// - casts
/// - unary operators like ``&amp;`` or ``*``
///
/// If passed expression is of type uncounted pointer/reference we try to find
/// the &quot;origin&quot; of the pointer value.
/// Origin can be for example a local variable, nullptr, constant or
/// this-pointer.
///
/// Certain subexpression nodes represent transformations that don&apos;t affect
/// where the memory address originates from. We try to traverse such
/// subexpressions to get to the relevant child nodes. Whenever we encounter a
/// subexpression that either can&apos;t be ignored, we don&apos;t model its semantics or
/// that has multiple children we stop.
///
/// \p E is an expression of uncounted pointer/reference type.
/// If \p StopAtFirstRefCountedObj is true and we encounter a subexpression that
/// represents ref-counted object during the traversal we return relevant
/// sub-expression and true.
///
/// \returns subexpression that we traversed to and if \p
/// StopAtFirstRefCountedObj is true we also return whether we stopped early.</doc>
<use f='llvm/clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedCallArgsChecker.cpp' l='96' u='c' c='_ZNK12_GLOBAL__N_124UncountedCallArgsChecker13visitCallExprEPKN5clang8CallExprE'/>
<use f='llvm/clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLocalVarsChecker.cpp' l='179' u='c' c='_ZNK12_GLOBAL__N_125UncountedLocalVarsChecker12visitVarDeclEPKN5clang7VarDeclE'/>
