<dec f='llvm/polly/include/polly/ScopDetection.h' l='264' type='bool polly::ScopDetection::computeAccessFunctions(polly::ScopDetection::DetectionContext &amp; Context, const llvm::SCEVUnknown * BasePointer, std::shared_ptr&lt;ArrayShape&gt; Shape) const'/>
<doc f='llvm/polly/include/polly/ScopDetection.h' l='254'>/// Derive access functions for a given base pointer.
  ///
  /// @param Context     The current detection context.
  /// @param Sizes       The sizes of the different array dimensions.
  /// @param BasePointer The base pointer of all the array for which to compute
  ///                    access functions.
  /// @param Shape       The shape that describes the derived array sizes and
  ///                    which should be filled with newly computed access
  ///                    functions.
  /// @returns True if a set of affine access functions could be derived.</doc>
<def f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='971' ll='1021' type='bool polly::ScopDetection::computeAccessFunctions(polly::ScopDetection::DetectionContext &amp; Context, const llvm::SCEVUnknown * BasePointer, std::shared_ptr&lt;ArrayShape&gt; Shape) const'/>
<use f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='1037' u='c' c='_ZNK5polly13ScopDetection21hasBaseAffineAccessesERNS0_16DetectionContextEPKN4llvm11SCEVUnknownEPNS3_4LoopE'/>
<doc f='llvm/polly/lib/Analysis/ScopDetection.cpp' l='965'>// We first store the resulting memory accesses in TempMemoryAccesses. Only
// if the access functions for all memory accesses have been successfully
// delinearized we continue. Otherwise, we either report a failure or, if
// non-affine accesses are allowed, we drop the information. In case the
// information is dropped the memory accesses need to be overapproximated
// when translated to a polyhedral representation.</doc>
