<dec f='llvm/llvm/lib/AsmParser/LLParser.h' l='411' type='bool llvm::LLParser::parseArrayVectorType(llvm::Type *&amp; Result, bool IsVector)'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2491' u='c' c='_ZN4llvm8LLParser9parseTypeERPNS_4TypeERKNS_5TwineEb'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2501' u='c' c='_ZN4llvm8LLParser9parseTypeERPNS_4TypeERKNS_5TwineEb'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2885' u='c' c='_ZN4llvm8LLParser21parseStructDefinitionENS_5SMLocENS_9StringRefERSt4pairIPNS_4TypeES1_ERS5_'/>
<def f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2951' ll='2996' type='bool llvm::LLParser::parseArrayVectorType(llvm::Type *&amp; Result, bool IsVector)'/>
<doc f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2945'>/// parseArrayVectorType - parse an array or vector type, assuming the first
/// token has already been consumed.
///   Type
///     ::= &apos;[&apos; APSINTVAL &apos;x&apos; Types &apos;]&apos;
///     ::= &apos;&lt;&apos; APSINTVAL &apos;x&apos; Types &apos;&gt;&apos;
///     ::= &apos;&lt;&apos; &apos;vscale&apos; &apos;x&apos; APSINTVAL &apos;x&apos; Types &apos;&gt;&apos;</doc>
