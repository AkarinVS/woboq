<dec f='llvm/lldb/include/lldb/API/SBValue.h' l='376' type='lldb::ValueObjectSP lldb::SBValue::GetSP() const'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='2670' u='c' c='_Z42LLDBSWIGPython_GetValueObjectSPFromSBValuePv'/>
<doc f='llvm/lldb/include/lldb/API/SBValue.h' l='365'>/// Same as the protected version of GetSP that takes a locker, except that we
  /// make the
  /// locker locally in the function.  Since the Target API mutex is recursive,
  /// and the
  /// StopLocker is a read lock, you can call this function even if you are
  /// already
  /// holding the two above-mentioned locks.
  ///
  /// \return
  ///     A ValueObjectSP of the best kind (static, dynamic or synthetic) we
  ///     can cons up, in accordance with the SBValue&apos;s settings.</doc>
<use f='llvm/lldb/source/API/SBThread.cpp' l='985' u='c' c='_ZN4lldb8SBThread15ReturnFromFrameERNS_7SBFrameERNS_7SBValueE'/>
<use f='llvm/lldb/source/API/SBTypeSummary.cpp' l='335' u='c' c='_ZN4lldb13SBTypeSummary14DoesPrintValueENS_7SBValueE'/>
<def f='llvm/lldb/source/API/SBValue.cpp' l='1089' ll='1094' type='lldb::ValueObjectSP lldb::SBValue::GetSP() const'/>
<use f='llvm/lldb/source/API/SBValue.cpp' l='1090' u='a' c='_ZNK4lldb7SBValue5GetSPEv'/>
<use f='llvm/lldb/source/API/SBValue.cpp' l='1090' u='a' c='_ZNK4lldb7SBValue5GetSPEv'/>
<use f='llvm/lldb/source/API/SBValue.cpp' l='1636' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
