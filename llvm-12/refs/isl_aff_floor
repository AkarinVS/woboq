<dec f='llvm/polly/lib/External/isl/include/isl/aff.h' l='105' type='isl_aff * isl_aff_floor(isl_aff * aff)'/>
<use f='llvm/polly/lib/External/isl/include/isl/isl-noexceptions.h' l='4007' u='c' c='_ZNK3isl12noexceptions3aff5floorEv'/>
<def f='llvm/polly/lib/External/isl/isl_aff.c' l='1635' ll='1694' type='isl_aff * isl_aff_floor(isl_aff * aff)'/>
<use f='llvm/polly/lib/External/isl/isl_aff.c' l='1716' u='c' c='isl_aff_mod_val'/>
<use f='llvm/polly/lib/External/isl/isl_aff.c' l='1798' u='c' c='isl_aff_ceil'/>
<use f='llvm/polly/lib/External/isl/isl_aff.c' l='3278' u='c' c='isl_pw_aff_floor'/>
<use f='llvm/polly/lib/External/isl/isl_multi_floor.c' l='23' macro='1' u='c' c='isl_multi_aff_floor'/>
<use f='llvm/polly/lib/External/isl/isl_aff.c' l='5028' u='c' c='pw_multi_aff_from_map_div'/>
<doc f='llvm/polly/lib/External/isl/isl_aff.c' l='1624'>/* Given f, return floor(f).
 * If f is an integer expression, then just return f.
 * If f is a constant, then return the constant floor(f).
 * Otherwise, if f = g/m, write g = q m + r,
 * create a new div d = [r/m] and return the expression q + d.
 * The coefficients in r are taken to lie between -m/2 and m/2.
 *
 * reduce_div_coefficients performs the same normalization.
 *
 * As a special case, floor(NaN) = NaN.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_ast_codegen.c' l='671' u='c' c='upper_bounds'/>
<use f='llvm/polly/lib/External/isl/isl_coalesce.c' l='3656' u='c' c='set_up_substitutions'/>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='6819' u='c' c='test_aff'/>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='6822' u='c' c='test_aff'/>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='6840' u='c' c='test_aff'/>
<use f='llvm/polly/lib/External/ppcg/hybrid.c' l='732' u='c' c='compute_time_tile'/>
