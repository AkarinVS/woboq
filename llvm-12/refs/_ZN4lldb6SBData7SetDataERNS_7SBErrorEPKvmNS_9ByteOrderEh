<dec f='llvm/lldb/include/lldb/API/SBData.h' l='79' type='void lldb::SBData::SetData(lldb::SBError &amp; error, const void * buf, size_t size, lldb::ByteOrder endian, uint8_t addr_size)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='18987' u='c' c='_ZL20_wrap_SBData_SetDataP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBData.h' l='74'>// it would be nice to have SetData(SBError, const void*, size_t) when
  // endianness and address size can be inferred from the existing
  // DataExtractor, but having two SetData() signatures triggers a SWIG bug
  // where the typemap isn&apos;t applied before resolving the overload, and thus
  // the right function never gets called</doc>
<def f='llvm/lldb/source/API/SBData.cpp' l='361' ll='375' type='void lldb::SBData::SetData(lldb::SBError &amp; error, const void * buf, size_t size, lldb::ByteOrder endian, uint8_t addr_size)'/>
<use f='llvm/lldb/tools/intel-features/intel-mpx/cli-wrapper-mpxtable.cpp' l='126' u='c' c='_ZL14GetBTEntryAddrmmRN4lldb8SBTargetEN4llvm6Triple8ArchTypeERmS5_RNS_21SBCommandReturnObjectERNS_7SBErrorE'/>
<use f='llvm/lldb/tools/intel-features/intel-mpx/cli-wrapper-mpxtable.cpp' l='182' u='c' c='_ZL10GetBTEntrymmRN4lldb8SBTargetEN4llvm6Triple8ArchTypeERNS_21SBCommandReturnObjectERNS_7SBErrorE'/>
