<dec f='llvm/polly/include/polly/ScopBuilder.h' l='735' type='void polly::ScopBuilder::collectCandidateReductionLoads(polly::MemoryAccess * StoreMA, SmallVectorImpl&lt;polly::MemoryAccess *&gt; &amp; Loads)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2708' u='c' c='_ZN5polly11ScopBuilder18checkForReductionsERNS_8ScopStmtE'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3102' ll='3146' type='void polly::ScopBuilder::collectCandidateReductionLoads(polly::MemoryAccess * StoreMA, SmallVectorImpl&lt;polly::MemoryAccess *&gt; &amp; Loads)'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='725'>/// Collect loads which might form a reduction chain with @p StoreMA.
  ///
  /// Check if the stored value for @p StoreMA is a binary operator with one or
  /// two loads as operands. If the binary operand is commutative &amp; associative,
  /// used only once (by @p StoreMA) and its load operands are also used only
  /// once, we have found a possible reduction chain. It starts at an operand
  /// load and includes the binary operator and @p StoreMA.
  ///
  /// Note: We allow only one use to ensure the load and binary operator cannot
  ///       escape this block or into any other store except @p StoreMA.</doc>
