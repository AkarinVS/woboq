<dec f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='67' type='bool lldb_private::StructuredDataPlugin::SupportsStructuredDataType(lldb_private::ConstString type_name)'/>
<doc f='llvm/lldb/include/lldb/Target/StructuredDataPlugin.h' l='48'>// Public instance API

  /// Return whether this plugin supports the given StructuredData feature.
  ///
  /// When Process is informed of a list of process-monitor-supported
  /// structured data features, Process will go through the list of plugins,
  /// one at a time, and have the first plugin that supports a given feature
  /// be the plugin instantiated to handle that feature.  There is a 1-1
  /// correspondence between a Process instance and a StructuredDataPlugin
  /// mapped to that process.  A plugin can support handling multiple
  /// features, and if that happens, there is a single plugin instance
  /// created covering all of the mapped features for a given process.
  ///
  /// \param[in] type_name
  ///     The name of the feature tag supported by a process.
  ///     e.g. &quot;darwin-log&quot;.
  ///
  /// \return
  ///     true if the plugin supports the feature; otherwise, false.</doc>
<ovr f='llvm/lldb/source/Plugins/StructuredData/DarwinLog/StructuredDataDarwinLog.cpp' l='1084' c='_ZN12lldb_private23StructuredDataDarwinLog26SupportsStructuredDataTypeENS_11ConstStringE'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='5902' u='c' c='_ZN12lldb_private7Process33MapSupportedStructuredDataPluginsERKNS_14StructuredData5ArrayE'/>
