<def f='llvm/llvm/include/llvm/Transforms/Utils/LoopVersioning.h' l='40' ll='144'/>
<size>272</size>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopVersioning.h' l='35'>/// This class emits a version of the loop where run-time checks ensure
/// that may-alias pointers can&apos;t overlap.
///
/// It currently only supports single-exit loops and assumes that the loop
/// already has a preheader.</doc>
<fun r='_ZN4llvm14LoopVersioningC1ERKNS_14LoopAccessInfoENS_8ArrayRefISt4pairIPKNS_23RuntimeCheckingPtrGroupES8_EEEPNS_4LoopEPNS_8LoopInfoEPNS_13DominatorTree4557812'/>
<fun r='_ZN4llvm14LoopVersioning11versionLoopEv'/>
<fun r='_ZN4llvm14LoopVersioning11versionLoopERKNS_15SmallVectorImplIPNS_11InstructionEEE'/>
<fun r='_ZN4llvm14LoopVersioning16getVersionedLoopEv'/>
<fun r='_ZN4llvm14LoopVersioning19getNonVersionedLoopEv'/>
<fun r='_ZN4llvm14LoopVersioning23annotateLoopWithNoAliasEv'/>
<fun r='_ZN4llvm14LoopVersioning22prepareNoAliasMetadataEv'/>
<fun r='_ZN4llvm14LoopVersioning23annotateInstWithNoAliasEPNS_11InstructionEPKS1_'/>
<fun r='_ZN4llvm14LoopVersioning11addPHINodesERKNS_15SmallVectorImplIPNS_11InstructionEEE'/>
<fun r='_ZN4llvm14LoopVersioning23annotateInstWithNoAliasEPNS_11InstructionE'/>
<mbr r='llvm::LoopVersioning::VersionedLoop' o='0' t='llvm::Loop *'/>
<mbr r='llvm::LoopVersioning::NonVersionedLoop' o='64' t='llvm::Loop *'/>
<mbr r='llvm::LoopVersioning::VMap' o='128' t='llvm::ValueToValueMapTy'/>
<mbr r='llvm::LoopVersioning::AliasChecks' o='640' t='SmallVector&lt;llvm::RuntimePointerCheck, 4&gt;'/>
<mbr r='llvm::LoopVersioning::Preds' o='1280' t='const llvm::SCEVUnionPredicate &amp;'/>
<mbr r='llvm::LoopVersioning::PtrToGroup' o='1344' t='DenseMap&lt;const llvm::Value *, const llvm::RuntimeCheckingPtrGroup *&gt;'/>
<mbr r='llvm::LoopVersioning::GroupToScope' o='1536' t='DenseMap&lt;const llvm::RuntimeCheckingPtrGroup *, llvm::MDNode *&gt;'/>
<mbr r='llvm::LoopVersioning::GroupToNonAliasingScopeList' o='1728' t='DenseMap&lt;const llvm::RuntimeCheckingPtrGroup *, llvm::MDNode *&gt;'/>
<mbr r='llvm::LoopVersioning::LAI' o='1920' t='const llvm::LoopAccessInfo &amp;'/>
<mbr r='llvm::LoopVersioning::LI' o='1984' t='llvm::LoopInfo *'/>
<mbr r='llvm::LoopVersioning::DT' o='2048' t='llvm::DominatorTree *'/>
<mbr r='llvm::LoopVersioning::SE' o='2112' t='llvm::ScalarEvolution *'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopDistribute.cpp' l='818' c='_ZN12_GLOBAL__N_121LoopDistributeForLoop11processLoopERSt8functionIFRKN4llvm14LoopAccessInfoERNS2_4LoopEEE'/>
<size>272</size>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp' l='566' c='_ZN12_GLOBAL__N_122LoadEliminationForLoop11processLoopEv'/>
<size>272</size>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp' l='625' c='_ZN12_GLOBAL__N_118LoopVersioningLICM9runOnLoopEPN4llvm4LoopEPNS1_8LoopInfoEPNS1_13DominatorTreeE'/>
<size>272</size>
<use f='llvm/llvm/lib/Transforms/Utils/LoopVersioning.cpp' l='280' c='_ZN12_GLOBAL__N_17runImplEPN4llvm8LoopInfoENS0_12function_refIFRKNS0_14LoopAccessInfoERNS0_4LoopEEEEPNS0_13DominatorTreeEPNS0_15ScalarEvolutionE'/>
<size>272</size>
<fun r='_ZN4llvm14LoopVersioningC1ERKNS_14LoopAccessInfoENS_8ArrayRefISt4pairIPKNS_23RuntimeCheckingPtrGroupES8_EEEPNS_4LoopEPNS_8LoopInfoEPNS_13DominatorTree4557812'/>
<fun r='_ZN4llvm14LoopVersioning11versionLoopERKNS_15SmallVectorImplIPNS_11InstructionEEE'/>
<fun r='_ZN4llvm14LoopVersioning11addPHINodesERKNS_15SmallVectorImplIPNS_11InstructionEEE'/>
<fun r='_ZN4llvm14LoopVersioning22prepareNoAliasMetadataEv'/>
<fun r='_ZN4llvm14LoopVersioning23annotateLoopWithNoAliasEv'/>
<fun r='_ZN4llvm14LoopVersioning23annotateInstWithNoAliasEPNS_11InstructionEPKS1_'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='819'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='3228' c='_ZN4llvm19InnerLoopVectorizer20emitMemRuntimeChecksEPNS_4LoopEPNS_10BasicBlockE'/>
<size>272</size>
