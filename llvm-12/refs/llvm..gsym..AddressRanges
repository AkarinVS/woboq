<def f='llvm/llvm/include/llvm/DebugInfo/GSYM/Range.h' l='84' ll='123'/>
<use f='llvm/llvm/include/llvm/DebugInfo/GSYM/Range.h' l='96' c='_ZNK4llvm4gsym13AddressRangeseqERKS1_'/>
<use f='llvm/llvm/include/llvm/DebugInfo/GSYM/Range.h' l='125' c='_ZN4llvm4gsymlsERNS_11raw_ostreamERKNS0_13AddressRangesE'/>
<use f='llvm/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h' l='66'/>
<use f='llvm/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h' l='143'/>
<use f='llvm/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h' l='144'/>
<use f='llvm/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h' l='248' c='_ZN4llvm4gsym11GsymCreator18SetValidTextRangesERNS0_13AddressRangesE'/>
<use f='llvm/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h' l='253' c='_ZNK4llvm4gsym11GsymCreator18GetValidTextRangesEv'/>
<size>24</size>
<doc f='llvm/llvm/include/llvm/DebugInfo/GSYM/Range.h' l='77'>/// The AddressRanges class helps normalize address range collections.
/// This class keeps a sorted vector of AddressRange objects and can perform
/// insertions and searches efficiently. The address ranges are always sorted
/// and never contain any invalid or empty address ranges. This allows us to
/// emit address ranges into the GSYM file efficiently. Intersecting address
/// ranges are combined during insertion so that we can emit the most compact
/// representation for address ranges when writing to disk.</doc>
<mbr r='llvm::gsym::AddressRanges::Ranges' o='0' t='llvm::gsym::AddressRanges::Collection'/>
<fun r='_ZN4llvm4gsym13AddressRanges5clearEv'/>
<fun r='_ZNK4llvm4gsym13AddressRanges5emptyEv'/>
<fun r='_ZNK4llvm4gsym13AddressRanges8containsEm'/>
<fun r='_ZNK4llvm4gsym13AddressRanges8containsENS0_12AddressRangeE'/>
<fun r='_ZNK4llvm4gsym13AddressRanges20getRangeThatContainsEm'/>
<fun r='_ZN4llvm4gsym13AddressRanges6insertENS0_12AddressRangeE'/>
<fun r='_ZNK4llvm4gsym13AddressRanges4sizeEv'/>
<fun r='_ZNK4llvm4gsym13AddressRangeseqERKS1_'/>
<fun r='_ZNK4llvm4gsym13AddressRangesixEm'/>
<fun r='_ZNK4llvm4gsym13AddressRanges5beginEv'/>
<fun r='_ZNK4llvm4gsym13AddressRanges3endEv'/>
<fun r='_ZN4llvm4gsym13AddressRanges6decodeERNS_13DataExtractorEmRm'/>
<fun r='_ZNK4llvm4gsym13AddressRanges6encodeERNS0_10FileWriterEm'/>
<fun r='_ZN4llvm4gsym13AddressRanges4skipERNS_13DataExtractorERm'/>
<use f='llvm/llvm/lib/DebugInfo/GSYM/Range.cpp' l='70' c='_ZN4llvm4gsymlsERNS_11raw_ostreamERKNS0_13AddressRangesE'/>
<size>24</size>
<fun r='_ZN4llvm4gsym13AddressRanges6insertENS0_12AddressRangeE'/>
<fun r='_ZNK4llvm4gsym13AddressRanges8containsEm'/>
<fun r='_ZNK4llvm4gsym13AddressRanges8containsENS0_12AddressRangeE'/>
<fun r='_ZNK4llvm4gsym13AddressRanges20getRangeThatContainsEm'/>
<fun r='_ZNK4llvm4gsym13AddressRanges6encodeERNS0_10FileWriterEm'/>
<fun r='_ZN4llvm4gsym13AddressRanges6decodeERNS_13DataExtractorEmRm'/>
<fun r='_ZN4llvm4gsym13AddressRanges4skipERNS_13DataExtractorERm'/>
<use f='llvm/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp' l='293' c='_ZL16handleObjectFileRN4llvm6object10ObjectFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<size>24</size>
<use f='llvm/llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp' l='504' c='_ZN40GSYMTest_TestInlineInfoDecodeErrors_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp' l='609' c='_ZN24GSYMTest_TestRanges_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp' l='763' c='_ZL34TestAddressRangeEncodeDecodeHelperRKN4llvm4gsym13AddressRangesEm'/>
<use f='llvm/llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp' l='775' c='_ZL34TestAddressRangeEncodeDecodeHelperRKN4llvm4gsym13AddressRangesEm'/>
<use f='llvm/llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp' l='789' c='_ZN43GSYMTest_TestAddressRangesEncodeDecode_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp' l='1751' c='_ZN33GSYMTest_TestDWARFTextRanges_Test8TestBodyEv'/>
<size>24</size>
