<dec f='llvm/polly/include/polly/ScopBuilder.h' l='664' type='void polly::ScopBuilder::checkForReductions(polly::ScopStmt &amp; Stmt)'/>
<def f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='2697' ll='2756' type='void polly::ScopBuilder::checkForReductions(polly::ScopStmt &amp; Stmt)'/>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='3732' u='c' c='_ZN5polly11ScopBuilder9buildScopERN4llvm6RegionERNS1_15AssumptionCacheE'/>
<doc f='llvm/polly/include/polly/ScopBuilder.h' l='653'>/// Check for reductions in @p Stmt.
  ///
  /// Iterate over all store memory accesses and check for valid binary
  /// reduction like chains. For all candidates we check if they have the same
  /// base address and there are no other accesses which overlap with them. The
  /// base address check rules out impossible reductions candidates early. The
  /// overlap check, together with the &quot;only one user&quot; check in
  /// collectCandidateReductionLoads, guarantees that none of the intermediate
  /// results will escape during execution of the loop nest. We basically check
  /// here that no other memory access can access the same memory as the
  /// potential reduction.</doc>
