<def f='llvm/lldb/include/lldb/Utility/Predicate.h' l='182' ll='186' type='llvm::Optional&lt;T&gt; lldb_private::Predicate::WaitForValueNotEqualTo(T value, const Timeout&lt;std::micro&gt; &amp; timeout = llvm::None)'/>
<doc f='llvm/lldb/include/lldb/Utility/Predicate.h' l='161'>/// Wait for \a m_value to not be equal to \a value.
  ///
  /// Waits in a thread safe way for \a m_value to not be equal to \a
  /// value. If \a m_value is already not equal to \a value, this
  /// function will return without waiting.
  ///
  /// It is possible for the value to be changed between the time
  /// the value is set and the time the waiting thread wakes up.
  /// If the value is equal to the test value when the waiting thread
  /// wakes up, it will go back into a wait state.  It may be
  /// necessary for the calling code to use additional thread
  /// synchronization methods to detect transitory states.
  ///
  /// \param[in] value
  ///     The value we want \a m_value to not be equal to.
  ///
  /// \param[in] timeout
  ///     How long to wait for the condition to hold.
  ///
  /// \return
  ///     m_value if m_value != value, None otherwise (timeout occurred).</doc>
<use f='llvm/lldb/source/Host/posix/ConnectionFileDescriptorPosix.cpp' l='768' u='c' c='_ZN12lldb_private24ConnectionFileDescriptor16GetListeningPortERKNS_7TimeoutISt5ratioILl1ELl1000000EEEE'/>
<use f='llvm/lldb/source/Target/Process.cpp' l='602' u='c' c='_ZN12lldb_private7Process13SyncIOHandlerEjRKNS_7TimeoutISt5ratioILl1ELl1000000EEEE'/>
<use f='llvm/lldb/unittests/Utility/PredicateTest.cpp' l='30' u='c' c='_ZN37Predicate_WaitForValueNotEqualTo_Test8TestBodyEv'/>
<use f='llvm/lldb/unittests/Utility/PredicateTest.cpp' l='32' u='c' c='_ZN37Predicate_WaitForValueNotEqualTo_Test8TestBodyEv'/>
