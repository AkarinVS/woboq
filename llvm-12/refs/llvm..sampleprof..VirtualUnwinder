<def f='llvm/llvm/tools/llvm-profgen/PerfReader.h' l='451' ll='490'/>
<use f='llvm/llvm/tools/llvm-profgen/PerfReader.cpp' l='399' c='_ZN4llvm10sampleprof10PerfReader13unwindSamplesEv'/>
<size>16</size>
<doc f='llvm/llvm/tools/llvm-profgen/PerfReader.h' l='432'>/*
As in hybrid sample we have a group of LBRs and the most recent sampling call
stack, we can walk through those LBRs to infer more call stacks which would be
used as context for profile. VirtualUnwinder is the class to do the call stack
unwinding based on LBR state. Two types of unwinding are processd here:
1) LBR unwinding and 2) linear range unwinding.
Specifically, for each LBR entry(can be classified into call, return, regular
branch), LBR unwinding will replay the operation by pushing, popping or
switching leaf frame towards the call stack and since the initial call stack
is most recently sampled, the replay should be in anti-execution order, i.e. for
the regular case, pop the call stack when LBR is call, push frame on call stack
when LBR is return. After each LBR processed, it also needs to align with the
next LBR by going through instructions from previous LBR&apos;s target to current
LBR&apos;s source, which is the linear unwinding. As instruction from linear range
can come from different function by inlining, linear unwinding will do the range
splitting and record counters by the range with same inline context. Over those
unwinding process we will record each call stack as context id and LBR/linear
range as sample counter for further CS profile generation.
*/</doc>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinderC1EPSt13unordered_mapINS0_8HashableINS0_10ContextKeyEEENS0_13SampleCounterENS5_4HashENS5_5EqualESaISt4pairIKS5_S61320842'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder6unwindEPKNS0_12HybridSampleEm'/>
<fun r='_ZNK4llvm10sampleprof15VirtualUnwinder11isCallStateERNS0_11UnwindStateE'/>
<fun r='_ZNK4llvm10sampleprof15VirtualUnwinder13isReturnStateERNS0_11UnwindStateE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder10unwindCallERNS0_11UnwindStateE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder12unwindLinearERNS0_11UnwindStateEm'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder12unwindReturnERNS0_11UnwindStateE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder23unwindBranchWithinFrameERNS0_11UnwindStateE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder23collectSamplesFromFrameEPNS0_11UnwindState13ProfiledFrameERT_'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder27collectSamplesFromFrameTrieEPNS0_11UnwindState13ProfiledFrameERT_'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder27collectSamplesFromFrameTrieEPNS0_11UnwindState13ProfiledFrameE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder16recordRangeCountEmmRNS0_11UnwindStateEm'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder17recordBranchCountERKNS0_8LBREntryERNS0_11UnwindStateEm'/>
<mbr r='llvm::sampleprof::VirtualUnwinder::CtxCounterMap' o='0' t='llvm::sampleprof::ContextSampleCounterMap *'/>
<mbr r='llvm::sampleprof::VirtualUnwinder::Binary' o='64' t='const llvm::sampleprof::ProfiledBinary *'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder10unwindCallERNS0_11UnwindStateE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder12unwindLinearERNS0_11UnwindStateEm'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder12unwindReturnERNS0_11UnwindStateE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder23unwindBranchWithinFrameERNS0_11UnwindStateE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder23collectSamplesFromFrameEPNS0_11UnwindState13ProfiledFrameERT_'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder27collectSamplesFromFrameTrieEPNS0_11UnwindState13ProfiledFrameERT_'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder27collectSamplesFromFrameTrieEPNS0_11UnwindState13ProfiledFrameE'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder17recordBranchCountERKNS0_8LBREntryERNS0_11UnwindStateEm'/>
<fun r='_ZN4llvm10sampleprof15VirtualUnwinder6unwindEPKNS0_12HybridSampleEm'/>
