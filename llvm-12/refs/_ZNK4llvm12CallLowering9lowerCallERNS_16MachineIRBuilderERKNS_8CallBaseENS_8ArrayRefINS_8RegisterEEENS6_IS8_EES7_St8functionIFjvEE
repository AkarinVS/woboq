<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h' l='455' type='bool llvm::CallLowering::lowerCall(llvm::MachineIRBuilder &amp; MIRBuilder, const llvm::CallBase &amp; Call, ArrayRef&lt;llvm::Register&gt; ResRegs, ArrayRef&lt;ArrayRef&lt;llvm::Register&gt; &gt; ArgRegs, llvm::Register SwiftErrorVReg, std::function&lt;unsigned int ()&gt; GetCalleeReg) const'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp' l='78' ll='147' type='bool llvm::CallLowering::lowerCall(llvm::MachineIRBuilder &amp; MIRBuilder, const llvm::CallBase &amp; CB, ArrayRef&lt;llvm::Register&gt; ResRegs, ArrayRef&lt;ArrayRef&lt;llvm::Register&gt; &gt; ArgRegs, llvm::Register SwiftErrorVReg, std::function&lt;unsigned int ()&gt; GetCalleeReg) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h' l='431'>/// Lower the given call instruction, including argument and return value
  /// marshalling.
  ///
  /// \p CI is the call/invoke instruction.
  ///
  /// \p ResRegs are the registers where the call&apos;s return value should be
  /// stored (or 0 if there is no return value). There will be one register for
  /// each non-aggregate type, as returned by \c computeValueLLTs.
  ///
  /// \p ArgRegs is a list of lists of virtual registers containing each
  /// argument that needs to be passed (argument \c i should be placed in \c
  /// ArgRegs[i]). For each argument, there will be one register for each
  /// non-aggregate type, as returned by \c computeValueLLTs.
  ///
  /// \p SwiftErrorVReg is non-zero if the call has a swifterror inout
  /// parameter, and contains the vreg that the swifterror should be copied into
  /// after the call.
  ///
  /// \p GetCalleeReg is a callback to materialize a register for the callee if
  /// the target determines it cannot jump to the destination based purely on \p
  /// CI. This might be because \p CI is indirect, or because of the limited
  /// range of an immediate jump.
  ///
  /// \return true if the lowering succeeded, false otherwise.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='2262' u='c' c='_ZN4llvm12IRTranslator17translateCallBaseERKNS_8CallBaseERNS_16MachineIRBuilderE'/>
