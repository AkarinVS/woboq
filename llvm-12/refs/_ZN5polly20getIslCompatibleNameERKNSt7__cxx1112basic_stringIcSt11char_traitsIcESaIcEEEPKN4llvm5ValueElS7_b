<dec f='llvm/polly/include/polly/Support/GICHelper.h' l='235' type='std::string polly::getIslCompatibleName(const std::string &amp; Prefix, const llvm::Value * Val, long Number, const std::string &amp; Suffix, bool UseInstructionNames)'/>
<doc f='llvm/polly/include/polly/Support/GICHelper.h' l='221'>/// Combine Prefix, Val (or Number) and Suffix to an isl-compatible name.
///
/// In case @p UseInstructionNames is set, this function returns:
///
/// @p Prefix + &quot;_&quot; + @p Val-&gt;getName() + @p Suffix
///
/// otherwise
///
/// @p Prefix + to_string(Number) + @p Suffix
///
/// We ignore the value names by default, as they may change between release
/// and debug mode and can consequently not be used when aiming for reproducible
/// builds. However, for debugging named statements are often helpful, hence
/// we allow their optional use.</doc>
<use f='llvm/polly/lib/Analysis/ScopBuilder.cpp' l='1958' u='c' c='_ZL12makeStmtNameB5cxx11PN4llvm10BasicBlockElibb'/>
<use f='llvm/polly/lib/Analysis/ScopInfo.cpp' l='235' u='c' c='_ZN5polly13ScopArrayInfoC1EPN4llvm5ValueEPNS1_4TypeEN3isl12noexceptions3ctxENS1_8ArrayRefIPKNS1_4SCEVEEENS_10MemoryKindERKNS1_10DataLayoutEPNS_4ScopEPKc'/>
<def f='llvm/polly/lib/Support/GICHelper.cpp' l='204' ll='216' type='std::string polly::getIslCompatibleName(const std::string &amp; Prefix, const llvm::Value * Val, long Number, const std::string &amp; Suffix, bool UseInstructionNames)'/>
<use f='llvm/polly/lib/Transform/Simplify.cpp' l='232' u='c' c='_ZN5polly15SimplifyVisitor14coalesceWritesEv'/>
<use f='llvm/polly/lib/Transform/Simplify.cpp' l='397' u='c' c='_ZN5polly15SimplifyVisitor21removeRedundantWritesEv'/>
<use f='llvm/polly/lib/Transform/ZoneAlgo.cpp' l='736' u='c' c='_ZN5polly13ZoneAlgorithm11makeValueIdEPN4llvm5ValueE'/>
