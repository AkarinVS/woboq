<dec f='llvm/lldb/include/lldb/Host/posix/ConnectionFileDescriptorPosix.h' l='64' type='lldb::ConnectionStatus lldb_private::ConnectionFileDescriptor::BytesAvailable(const Timeout&lt;std::micro&gt; &amp; timeout, lldb_private::Status * error_ptr)'/>
<use f='llvm/lldb/source/Host/posix/ConnectionFileDescriptorPosix.cpp' l='381' u='c' c='_ZN12lldb_private24ConnectionFileDescriptor4ReadEPvmRKNS_7TimeoutISt5ratioILl1ELl1000000EEEERN4lldb16ConnectionStatusEPNS_6StatusE'/>
<def f='llvm/lldb/source/Host/posix/ConnectionFileDescriptorPosix.cpp' l='548' ll='641' type='lldb::ConnectionStatus lldb_private::ConnectionFileDescriptor::BytesAvailable(const Timeout&lt;std::micro&gt; &amp; timeout, lldb_private::Status * error_ptr)'/>
<doc f='llvm/lldb/source/Host/posix/ConnectionFileDescriptorPosix.cpp' l='533'>// This ConnectionFileDescriptor::BytesAvailable() uses select() via
// SelectHelper
//
// PROS:
//  - select is consistent across most unix platforms
//  - The Apple specific version allows for unlimited fds in the fd_sets by
//    setting the _DARWIN_UNLIMITED_SELECT define prior to including the
//    required header files.
// CONS:
//  - on non-Apple platforms, only supports file descriptors up to FD_SETSIZE.
//     This implementation  will assert if it runs into that hard limit to let
//     users know that another ConnectionFileDescriptor::BytesAvailable() should
//     be used or a new version of ConnectionFileDescriptor::BytesAvailable()
//     should be written for the system that is running into the limitations.</doc>
