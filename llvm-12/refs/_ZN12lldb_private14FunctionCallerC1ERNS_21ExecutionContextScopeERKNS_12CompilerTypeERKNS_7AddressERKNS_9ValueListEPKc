<dec f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='80' type='void lldb_private::FunctionCaller::FunctionCaller(lldb_private::ExecutionContextScope &amp; exe_scope, const lldb_private::CompilerType &amp; return_type, const lldb_private::Address &amp; function_address, const lldb_private::ValueList &amp; arg_value_list, const char * name)'/>
<def f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='35' ll='51' type='void lldb_private::FunctionCaller::FunctionCaller(lldb_private::ExecutionContextScope &amp; exe_scope, const lldb_private::CompilerType &amp; return_type, const lldb_private::Address &amp; functionAddress, const lldb_private::ValueList &amp; arg_value_list, const char * name)'/>
<doc f='llvm/lldb/source/Expression/FunctionCaller.cpp' l='34'>// FunctionCaller constructor</doc>
<doc f='llvm/lldb/include/lldb/Expression/FunctionCaller.h' l='64'>/// Constructor
  ///
  /// \param[in] exe_scope
  ///     An execution context scope that gets us at least a target and
  ///     process.
  ///
  /// \param[in] return_type
  ///     An opaque Clang QualType for the function result.  Should be
  ///     defined in ast_context.
  ///
  /// \param[in] function_address
  ///     The address of the function to call.
  ///
  /// \param[in] arg_value_list
  ///     The default values to use when calling this function.  Can
  ///     be overridden using WriteFunctionArguments().</doc>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangFunctionCaller.cpp' l='53' u='c' c='_ZN12lldb_private19ClangFunctionCallerC1ERNS_21ExecutionContextScopeERKNS_12CompilerTypeERKNS_7AddressERKNS_9ValueListEPKc'/>
