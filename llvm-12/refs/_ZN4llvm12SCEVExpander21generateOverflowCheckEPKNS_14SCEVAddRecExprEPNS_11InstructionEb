<dec f='llvm/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h' l='287' type='llvm::Value * llvm::SCEVExpander::generateOverflowCheck(const llvm::SCEVAddRecExpr * AR, llvm::Instruction * Loc, bool Signed)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h' l='286'>/// Generates code that evaluates if the \p AR expression will overflow.</doc>
<def f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='2442' ll='2537' type='llvm::Value * llvm::SCEVExpander::generateOverflowCheck(const llvm::SCEVAddRecExpr * AR, llvm::Instruction * Loc, bool Signed)'/>
<use f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='2546' u='c' c='_ZN4llvm12SCEVExpander19expandWrapPredicateEPKNS_17SCEVWrapPredicateEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp' l='2550' u='c' c='_ZN4llvm12SCEVExpander19expandWrapPredicateEPKNS_17SCEVWrapPredicateEPNS_11InstructionE'/>
