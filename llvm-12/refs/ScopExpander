<inh f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h' l='568' c='llvm::SCEVVisitor'/>
<def f='llvm/polly/lib/Support/ScopHelper.cpp' l='240' ll='405'/>
<use f='llvm/polly/lib/Support/ScopHelper.cpp' l='240'/>
<use f='llvm/polly/lib/Support/ScopHelper.cpp' l='241'/>
<use f='llvm/polly/lib/Support/ScopHelper.cpp' l='411' c='_ZN5polly13expandCodeForERNS_4ScopERN4llvm15ScalarEvolutionERKNS2_10DataLayoutEPKcPKNS2_4SCEVEPNS2_4TypeEPNS2_11InstructionEPNS2_8DenseMapINS2_11Asser13868707'/>
<size>704</size>
<doc f='llvm/polly/lib/Support/ScopHelper.cpp' l='234'>/// The SCEVExpander will __not__ generate any code for an existing SDiv/SRem
/// instruction but just use it, if it is referenced as a SCEVUnknown. We want
/// however to generate new code if the instruction is in the analyzed region
/// and we generate code outside/in front of that region. Hence, we generate the
/// code for the SDiv/SRem operands in front of the analyzed region and then
/// create a new SDiv/SRem operation there too.</doc>
