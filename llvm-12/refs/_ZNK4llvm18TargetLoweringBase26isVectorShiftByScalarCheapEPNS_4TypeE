<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='2385' ll='2387' type='bool llvm::TargetLoweringBase::isVectorShiftByScalarCheap(llvm::Type * Ty) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='2380'>/// Return true if it&apos;s significantly cheaper to shift a vector by a uniform
  /// scalar than by an amount which will vary across each lane. On x86 before
  /// AVX2 for example, there is a &quot;psllw&quot; instruction for the former case, but
  /// no simple instruction for a general &quot;a &lt;&lt; b&quot; operation on vectors.
  /// This should also apply to lowering for vector funnel shifts (rotates).</doc>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6468' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare17optimizeShiftInstEPN4llvm14BinaryOperatorE'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6503' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare19optimizeFunnelShiftEPN4llvm13IntrinsicInstE'/>
<ovr f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='31397' c='_ZNK4llvm17X86TargetLowering26isVectorShiftByScalarCheapEPNS_4TypeE'/>
