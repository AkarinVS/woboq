<use f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='355' u='c' c='_ZNK4llvm15TargetInstrInfo23isUnspillableTerminatorEPKNS_12MachineInstrE'/>
<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='971' ll='973' type='bool llvm::TargetInstrInfo::isUnspillableTerminatorImpl(const llvm::MachineInstr * MI) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='964'>/// Return true if the given terminator MI is not expected to spill. This
  /// sets the live interval as not spillable and adjusts phi node lowering to
  /// not introduce copies after the terminator. Use with care, these are
  /// currently used for hardware loop intrinsics in very controlled situations,
  /// created prior to registry allocation in loops that only have single phi
  /// users for the terminators value. They may run out of registers if not used
  /// carefully.</doc>
<ovr f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='367' c='_ZNK4llvm16ARMBaseInstrInfo27isUnspillableTerminatorImplEPKNS_12MachineInstrE'/>
