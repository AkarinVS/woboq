<dec f='llvm/clang/include/clang/AST/ASTContext.h' l='1858' type='std::string clang::ASTContext::getObjCEncodingForPropertyDecl(const clang::ObjCPropertyDecl * PD, const clang::Decl * Container) const'/>
<doc f='llvm/clang/include/clang/AST/ASTContext.h' l='1854'>/// getObjCEncodingForPropertyDecl - Return the encoded type for
  /// this method declaration. If non-NULL, Container must be either
  /// an ObjCCategoryImplDecl or ObjCImplementationDecl; it should
  /// only be NULL when getting encodings for protocol properties.</doc>
<def f='llvm/clang/lib/AST/ASTContext.cpp' l='7037' ll='7103' type='std::string clang::ASTContext::getObjCEncodingForPropertyDecl(const clang::ObjCPropertyDecl * PD, const clang::Decl * Container) const'/>
<doc f='llvm/clang/lib/AST/ASTContext.cpp' l='7012'>/// getObjCEncodingForPropertyDecl - Return the encoded type for this
/// property declaration. If non-NULL, Container must be either an
/// ObjCCategoryImplDecl or ObjCImplementationDecl; it should only be
/// NULL when getting encodings for protocol properties.
/// Property attributes are stored as a comma-delimited C string. The simple
/// attributes readonly and bycopy are encoded as single characters. The
/// parametrized attributes, getter=name, setter=name, and ivar=name, are
/// encoded as single characters, followed by an identifier. Property types
/// are also encoded as a parametrized attribute. The characters used to encode
/// these attributes are defined by the following enumeration:
/// @code
/// enum PropertyAttributes {
/// kPropertyReadOnly = &apos;R&apos;,   // property is read-only.
/// kPropertyBycopy = &apos;C&apos;,     // property is a copy of the value last assigned
/// kPropertyByref = &apos;&amp;&apos;,  // property is a reference to the value last assigned
/// kPropertyDynamic = &apos;D&apos;,    // property is dynamic
/// kPropertyGetter = &apos;G&apos;,     // followed by getter selector name
/// kPropertySetter = &apos;S&apos;,     // followed by setter selector name
/// kPropertyInstanceVariable = &apos;V&apos;  // followed by instance variable  name
/// kPropertyType = &apos;T&apos;              // followed by old-style type encoding.
/// kPropertyWeak = &apos;W&apos;              // &apos;weak&apos; property
/// kPropertyStrong = &apos;P&apos;            // property GC&apos;able
/// kPropertyNonAtomic = &apos;N&apos;         // property non-atomic
/// };
/// @endcode</doc>
<use f='llvm/clang/lib/CodeGen/CGObjCGNU.cpp' l='231' u='c' c='_ZN12_GLOBAL__N_19CGObjCGNU26MakePropertyEncodingStringEPKN5clang16ObjCPropertyDeclEPKNS1_4DeclE'/>
<use f='llvm/clang/lib/CodeGen/CGObjCGNU.cpp' l='1133' u='c' c='_ZN12_GLOBAL__N_114CGObjCGNUstep212PushPropertyERN5clang7CodeGen20ConstantArrayBuilderEPKNS1_16ObjCPropertyDeclEPKNS1_4DeclEbb'/>
<use f='llvm/clang/lib/CodeGen/CGObjCMac.cpp' l='5727' u='c' c='_ZN12_GLOBAL__N_115CGObjCCommonMac21GetPropertyTypeStringEPKN5clang16ObjCPropertyDeclEPKNS1_4DeclE'/>
<use f='llvm/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp' l='6389' u='c' c='_ZL29Write_prop_list_t_initializerRN12_GLOBAL__N_117RewriteModernObjCEPN5clang10ASTContextERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN4llvm6890214'/>
<use f='llvm/clang/tools/libclang/CXType.cpp' l='1111' u='c' c='clang_getDeclObjCTypeEncoding'/>
