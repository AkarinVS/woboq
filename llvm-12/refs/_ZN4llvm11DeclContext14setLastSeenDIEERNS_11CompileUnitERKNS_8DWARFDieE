<dec f='llvm/llvm/include/llvm/DWARFLinker/DWARFLinkerDeclContext.h' l='92' type='bool llvm::DeclContext::setLastSeenDIE(llvm::CompileUnit &amp; U, const llvm::DWARFDie &amp; Die)'/>
<def f='llvm/llvm/lib/DWARFLinker/DWARFLinkerDeclContext.cpp' l='30' ll='41' type='bool llvm::DeclContext::setLastSeenDIE(llvm::CompileUnit &amp; U, const llvm::DWARFDie &amp; Die)'/>
<use f='llvm/llvm/lib/DWARFLinker/DWARFLinkerDeclContext.cpp' l='173' u='c' c='_ZN4llvm15DeclContextTree19getChildDeclContextERNS_11DeclContextERKNS_8DWARFDieERNS_11CompileUnitEb'/>
<doc f='llvm/llvm/lib/DWARFLinker/DWARFLinkerDeclContext.cpp' l='16'>/// Set the last DIE/CU a context was seen in and, possibly invalidate the
/// context if it is ambiguous.
///
/// In the current implementation, we don&apos;t handle overloaded functions well,
/// because the argument types are not taken into account when computing the
/// DeclContext tree.
///
/// Some of this is mitigated byt using mangled names that do contain the
/// arguments types, but sometimes (e.g. with function templates) we don&apos;t have
/// that. In that case, just do not unique anything that refers to the contexts
/// we are not able to distinguish.
///
/// If a context that is not a namespace appears twice in the same CU, we know
/// it is ambiguous. Make it invalid.</doc>
