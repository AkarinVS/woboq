<dec f='llvm/lldb/include/lldb/Target/Platform.h' l='815' type='uint32_t lldb_private::Platform::LoadImageUsingPaths(lldb_private::Process * process, const lldb_private::FileSpec &amp; library_name, const std::vector&lt;std::string&gt; &amp; paths, lldb_private::Status &amp; error, lldb_private::FileSpec * loaded_path)'/>
<doc f='llvm/lldb/include/lldb/Target/Platform.h' l='785'>/// Load a shared library specified by base name into this process,
  /// looking by hand along a set of paths.
  ///
  /// \param[in] process
  ///     The process to load the image.
  ///
  /// \param[in] library_name
  ///     The name of the library to look for.  If library_name is an
  ///     absolute path, the basename will be extracted and searched for
  ///     along the paths.  This emulates the behavior of the loader when
  ///     given an install name and a set (e.g. DYLD_LIBRARY_PATH provided) of
  ///     alternate paths.
  ///
  /// \param[in] paths
  ///     The list of paths to use to search for the library.  First
  ///     match wins.
  ///
  /// \param[out] error
  ///     An error object that gets filled in with any errors that
  ///     might occur when trying to load the shared library.
  ///
  /// \param[out] loaded_path
  ///      If non-null, the path to the dylib that was successfully loaded
  ///      is stored in this path.
  ///
  /// \return
  ///     A token that represents the shared library which can be
  ///     passed to UnloadImage. A value of
  ///     LLDB_INVALID_IMAGE_TOKEN will be returned if the shared
  ///     library can&apos;t be opened.</doc>
<use f='llvm/lldb/source/API/SBProcess.cpp' l='1114' u='c' c='_ZN4lldb9SBProcess19LoadImageUsingPathsERKNS_10SBFileSpecERNS_12SBStringListERS1_RNS_7SBErrorE'/>
<def f='llvm/lldb/source/Target/Platform.cpp' l='1771' ll='1786' type='uint32_t lldb_private::Platform::LoadImageUsingPaths(lldb_private::Process * process, const lldb_private::FileSpec &amp; remote_filename, const std::vector&lt;std::string&gt; &amp; paths, lldb_private::Status &amp; error, lldb_private::FileSpec * loaded_path)'/>
