<dec f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='507' type='llvm::ConstantRange::OverflowResult llvm::ConstantRange::signedSubMayOverflow(const llvm::ConstantRange &amp; Other) const'/>
<doc f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='506'>/// Return whether signed sub of the two ranges always/never overflows.</doc>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4648' u='c' c='_ZN4llvm27computeOverflowForSignedSubEPKNS_5ValueES2_RKNS_10DataLayoutEPNS_15AssumptionCacheEPKNS_11InstructionEPKNS_13DominatorTreeE'/>
<def f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1605' ll='1633' type='ConstantRange::OverflowResult llvm::ConstantRange::signedSubMayOverflow(const llvm::ConstantRange &amp; Other) const'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2031' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2032' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2036' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2037' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2040' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2041' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2042' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2043' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2048' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2049' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2052' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2053' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2058' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2059' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2062' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2063' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2066' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2068' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='2189' u='c' c='_ZN12_GLOBAL__N_150ConstantRangeTest_SignedSubOverflowExhaustive_Test8TestBodyEv'/>
