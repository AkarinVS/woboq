<dec f='llvm/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h' l='225' type='void llvm::mca::Scheduler::cycleEvent(SmallVectorImpl&lt;llvm::mca::ResourceRef&gt; &amp; Freed, SmallVectorImpl&lt;llvm::mca::InstRef&gt; &amp; Executed, SmallVectorImpl&lt;llvm::mca::InstRef&gt; &amp; Pending, SmallVectorImpl&lt;llvm::mca::InstRef&gt; &amp; Ready)'/>
<doc f='llvm/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h' l='213'>/// This routine notifies the Scheduler that a new cycle just started.
  ///
  /// It notifies the underlying ResourceManager that a new cycle just started.
  /// Vector `Freed` is populated with resourceRef related to resources that
  /// have changed in state, and that are now available to new instructions.
  /// Instructions executed are added to vector Executed, while vector Ready is
  /// populated with instructions that have become ready in this new cycle.
  /// Vector Pending is popluated by instructions that have transitioned through
  /// the pending stat during this cycle. The Pending and Ready sets may not be
  /// disjoint. An instruction is allowed to transition from the WAIT state to
  /// the READY state (going through the PENDING state) within a single cycle.
  /// That means, instructions may appear in both the Pending and Ready set.</doc>
<def f='llvm/llvm/lib/MCA/HardwareUnits/Scheduler.cpp' l='264' ll='288' type='void llvm::mca::Scheduler::cycleEvent(SmallVectorImpl&lt;llvm::mca::ResourceRef&gt; &amp; Freed, SmallVectorImpl&lt;llvm::mca::InstRef&gt; &amp; Executed, SmallVectorImpl&lt;llvm::mca::InstRef&gt; &amp; Pending, SmallVectorImpl&lt;llvm::mca::InstRef&gt; &amp; Ready)'/>
<use f='llvm/llvm/lib/MCA/Stages/ExecuteStage.cpp' l='99' u='c' c='_ZN4llvm3mca12ExecuteStage10cycleStartEv'/>
