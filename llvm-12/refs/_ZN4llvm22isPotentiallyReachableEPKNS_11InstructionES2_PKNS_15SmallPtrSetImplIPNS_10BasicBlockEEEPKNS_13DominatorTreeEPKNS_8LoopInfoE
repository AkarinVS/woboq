<dec f='llvm/llvm/include/llvm/Analysis/CFG.h' l='69' type='bool llvm::isPotentiallyReachable(const llvm::Instruction * From, const llvm::Instruction * To, const SmallPtrSetImpl&lt;llvm::BasicBlock *&gt; * ExclusionSet = nullptr, const llvm::DominatorTree * DT = nullptr, const llvm::LoopInfo * LI = nullptr)'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='903' u='c' c='_ZN4llvm16InformationCache23getPotentiallyReachableERKNS_11InstructionES3_'/>
<doc f='llvm/llvm/include/llvm/Analysis/CFG.h' l='54'>/// Determine whether instruction &apos;To&apos; is reachable from &apos;From&apos;, without passing
/// through any blocks in ExclusionSet, returning true if uncertain.
///
/// Determine whether there is a path from From to To within a single function.
/// Returns false only if we can prove that once &apos;From&apos; has been executed then
/// &apos;To&apos; can not be executed. Conservatively returns true.
///
/// This function is linear with respect to the number of blocks in the CFG,
/// walking down successors from From to reach To, with a fixed threshold.
/// Using DT or LI allows us to answer more quickly. LI reduces the cost of
/// an entire loop of any number of blocks to be the same as the cost of a
/// single block. DT reduces the cost by allowing the search to terminate when
/// we find a block that dominates the block containing &apos;To&apos;. DT is most useful
/// on branchy code but not loops, and LI is most useful on code with loops but
/// does not help on branchy code outside loops.</doc>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1723' u='c' c='_ZN4llvm13BasicAAResult29isValueEqualInPotentialCyclesEPKNS_5ValueES3_'/>
<def f='llvm/llvm/lib/Analysis/CFG.cpp' l='223' ll='284' type='bool llvm::isPotentiallyReachable(const llvm::Instruction * A, const llvm::Instruction * B, const SmallPtrSetImpl&lt;llvm::BasicBlock *&gt; * ExclusionSet = nullptr, const llvm::DominatorTree * DT = nullptr, const llvm::LoopInfo * LI = nullptr)'/>
<use f='llvm/llvm/lib/Analysis/CaptureTracking.cpp' l='148' u='c' c='_ZN12_GLOBAL__N_114CapturesBefore13isSafeToPruneEPN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/CodeGen/DwarfEHPrepare.cpp' l='132' u='c' c='_ZN12_GLOBAL__N_114DwarfEHPrepare23pruneUnreachableResumesERN4llvm15SmallVectorImplIPNS1_10ResumeInstEEERNS2_IPNS1_14LandingPadInstEEE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64StackTagging.cpp' l='673' u='c' c='_ZN12_GLOBAL__N_119AArch64StackTagging13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='102' u='c' c='_ZZN12_GLOBAL__N_126IsPotentiallyReachableTest10ExpectPathEbEN30IsPotentiallyReachableTestPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='102' u='c' c='_ZZN12_GLOBAL__N_126IsPotentiallyReachableTest10ExpectPathEbEN30IsPotentiallyReachableTestPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='104' u='c' c='_ZZN12_GLOBAL__N_126IsPotentiallyReachableTest10ExpectPathEbEN30IsPotentiallyReachableTestPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='104' u='c' c='_ZZN12_GLOBAL__N_126IsPotentiallyReachableTest10ExpectPathEbEN30IsPotentiallyReachableTestPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='106' u='c' c='_ZZN12_GLOBAL__N_126IsPotentiallyReachableTest10ExpectPathEbEN30IsPotentiallyReachableTestPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='106' u='c' c='_ZZN12_GLOBAL__N_126IsPotentiallyReachableTest10ExpectPathEbEN30IsPotentiallyReachableTestPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='108' u='c' c='_ZZN12_GLOBAL__N_126IsPotentiallyReachableTest10ExpectPathEbEN30IsPotentiallyReachableTestPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='108' u='c' c='_ZZN12_GLOBAL__N_126IsPotentiallyReachableTest10ExpectPathEbEN30IsPotentiallyReachableTestPass13runOnFunctionERN4llvm8FunctionE'/>
