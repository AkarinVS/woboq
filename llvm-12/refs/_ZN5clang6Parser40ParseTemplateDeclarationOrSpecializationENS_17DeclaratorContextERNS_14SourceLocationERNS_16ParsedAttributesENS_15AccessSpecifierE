<dec f='llvm/clang/include/clang/Parse/Parser.h' l='3288' type='clang::Decl * clang::Parser::ParseTemplateDeclarationOrSpecialization(clang::DeclaratorContext Context, clang::SourceLocation &amp; DeclEnd, clang::ParsedAttributes &amp; AccessAttrs, clang::AccessSpecifier AS)'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='2575' u='c' c='_ZN5clang6Parser30ParseCXXClassMemberDeclarationENS_15AccessSpecifierERNS_16ParsedAttributesERKNS0_18ParsedTemplateInfoEPNS_21ParsingDeclRAIIObjectE'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='46' u='c' c='_ZN5clang6Parser36ParseDeclarationStartingWithTemplateENS_17DeclaratorContextERNS_14SourceLocationERNS_16ParsedAttributesENS_15AccessSpecifierE'/>
<def f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='74' ll='173' type='clang::Decl * clang::Parser::ParseTemplateDeclarationOrSpecialization(clang::DeclaratorContext Context, clang::SourceLocation &amp; DeclEnd, clang::ParsedAttributes &amp; AccessAttrs, clang::AccessSpecifier AS)'/>
<doc f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='50'>/// Parse a template declaration or an explicit specialization.
///
/// Template declarations include one or more template parameter lists
/// and either the function or class template declaration. Explicit
/// specializations contain one or more &apos;template &lt; &gt;&apos; prefixes
/// followed by a (possibly templated) declaration. Since the
/// syntactic form of both features is nearly identical, we parse all
/// of the template headers together and let semantic analysis sort
/// the declarations from the explicit specializations.
///
///       template-declaration: [C++ temp]
///         &apos;export&apos;[opt] &apos;template&apos; &apos;&lt;&apos; template-parameter-list &apos;&gt;&apos; declaration
///
///       template-declaration: [C++2a]
///         template-head declaration
///         template-head concept-definition
///
///       TODO: requires-clause
///       template-head: [C++2a]
///         &apos;template&apos; &apos;&lt;&apos; template-parameter-list &apos;&gt;&apos;
///             requires-clause[opt]
///
///       explicit-specialization: [ C++ temp.expl.spec]
///         &apos;template&apos; &apos;&lt;&apos; &apos;&gt;&apos; declaration</doc>
