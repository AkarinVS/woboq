<dec f='llvm/llvm/include/llvm/Transforms/IPO.h' l='138' type='llvm::ModulePass * llvm::createInternalizePass(std::function&lt;bool (const GlobalValue &amp;)&gt; MustPreserveGV)'/>
<doc f='llvm/llvm/include/llvm/Transforms/IPO.h' l='125'>//===----------------------------------------------------------------------===//
/// createInternalizePass - This pass loops over all of the functions in the
/// input module, internalizing all globals (functions and variables) it can.
////
/// Before internalizing a symbol, the callback \p MustPreserveGV is invoked and
/// gives to the client the ability to prevent internalizing specific symbols.
///
/// The symbol in DSOList are internalized if it is safe to drop them from
/// the symbol table.
///
/// Note that commandline options that are used with the above function are not
/// used now!</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp' l='439' u='c' c='_ZN4llvm19AMDGPUTargetMachine17adjustPassManagerERNS_18PassManagerBuilderE'/>
<use f='llvm/llvm/lib/Transforms/IPO/IPO.cpp' l='124' u='c' c='LLVMAddInternalizePass'/>
<use f='llvm/llvm/lib/Transforms/IPO/IPO.cpp' l='131' u='c' c='LLVMAddInternalizePassWithMustPreservePredicate'/>
<def f='llvm/llvm/lib/Transforms/IPO/Internalize.cpp' l='288' ll='291' type='llvm::ModulePass * llvm::createInternalizePass(std::function&lt;bool (const GlobalValue &amp;)&gt; MustPreserveGV)'/>
