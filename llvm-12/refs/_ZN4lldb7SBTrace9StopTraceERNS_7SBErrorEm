<dec f='llvm/lldb/include/lldb/API/SBTrace.h' l='78' type='void lldb::SBTrace::StopTrace(lldb::SBError &amp; error, lldb::tid_t thread_id = 0)'/>
<use f='llvm/build/tools/lldb/bindings/python/LLDBWrapPython.cpp' l='64532' u='c' c='_ZL23_wrap_SBTrace_StopTraceP7_objectS0_'/>
<doc f='llvm/lldb/include/lldb/API/SBTrace.h' l='58'>/// Stop the tracing instance. Stopping the trace will also
  /// lead to deletion of any gathered trace data.
  ///
  /// \param[out] error
  ///     An error explaining what went wrong.
  ///
  /// \param[in] thread_id
  ///     The trace id could map to a tracing instance for a thread
  ///     or could also map to a group of threads being traced with
  ///     the same trace options. A thread_id is normally optional
  ///     except in the case of tracing a complete process and tracing
  ///     needs to switched off on a particular thread.
  ///     A situation could occur where initially a thread (lets say
  ///     thread A) is being individually traced with a particular
  ///     trace id and then tracing is started on the complete
  ///     process, in this case thread A will continue without any
  ///     change. All newly spawned threads would be traced with the
  ///     trace id of the process.
  ///     Now if the StopTrace API is called for the whole process,
  ///     thread A will not be stopped and must be stopped separately.</doc>
<def f='llvm/lldb/source/API/SBTrace.cpp' l='65' ll='77' type='void lldb::SBTrace::StopTrace(lldb::SBError &amp; error, lldb::tid_t thread_id = 0)'/>
<use f='llvm/lldb/source/API/SBTrace.cpp' l='66' u='a' c='_ZN4lldb7SBTrace9StopTraceERNS_7SBErrorEm'/>
<use f='llvm/lldb/source/API/SBTrace.cpp' l='66' u='a' c='_ZN4lldb7SBTrace9StopTraceERNS_7SBErrorEm'/>
<use f='llvm/lldb/source/API/SBTrace.cpp' l='136' u='a' c='_ZN12lldb_private5repro15RegisterMethodsERNS0_8RegistryE'/>
