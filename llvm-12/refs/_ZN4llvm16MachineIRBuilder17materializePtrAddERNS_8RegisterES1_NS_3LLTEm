<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='482' type='Optional&lt;llvm::MachineInstrBuilder&gt; llvm::MachineIRBuilder::materializePtrAdd(llvm::Register &amp; Res, llvm::Register Op0, const llvm::LLT ValueTy, uint64_t Value)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='466'>/// Materialize and insert \p Res = G_PTR_ADD \p Op0, (G_CONSTANT \p Value)
  ///
  /// G_PTR_ADD adds \p Value bytes to the pointer specified by \p Op0,
  /// storing the resulting pointer in \p Res. If \p Value is zero then no
  /// G_PTR_ADD or G_CONSTANT will be created and \pre Op0 will be assigned to
  /// \p Res.
  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p Op0 must be a generic virtual register with pointer type.
  /// \pre \p ValueTy must be a scalar type.
  /// \pre \p Res must be 0. This is to detect confusion between
  ///      materializePtrAdd() and buildPtrAdd().
  /// \post \p Res will either be a new generic virtual register of the same
  ///       type as \p Op0 or \p Op0 itself.
  ///
  /// \return a MachineInstrBuilder for the newly created instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp' l='471' u='c' c='_ZNK4llvm12CallLowering15insertSRetLoadsERNS_16MachineIRBuilderEPNS_4TypeENS_8ArrayRefINS_8RegisterEEES6_i'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp' l='502' u='c' c='_ZNK4llvm12CallLowering16insertSRetStoresERNS_16MachineIRBuilderEPNS_4TypeENS_8ArrayRefINS_8RegisterEEES6_'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='1303' u='c' c='_ZN4llvm12IRTranslator13translateLoadERKNS_4UserERNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='1345' u='c' c='_ZN4llvm12IRTranslator14translateStoreERKNS_4UserERNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='3800' u='c' c='_ZN4llvm15LegalizerHelper20reduceLoadStoreWidthERNS_12MachineInstrEjNS_3LLTE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp' l='192' ll='206' type='Optional&lt;llvm::MachineInstrBuilder&gt; llvm::MachineIRBuilder::materializePtrAdd(llvm::Register &amp; Res, llvm::Register Op0, const llvm::LLT ValueTy, uint64_t Value)'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='1758' u='c' c='_ZNK4llvm19AMDGPULegalizerInfo18getSegmentApertureEjRNS_19MachineRegisterInfoERNS_16MachineIRBuilderE'/>
