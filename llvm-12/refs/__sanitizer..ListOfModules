<def f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='818' ll='848'/>
<size>32</size>
<doc f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_common.h' l='816'>// List of LoadedModules. OS-dependent implementation is responsible for
// filling this information.</doc>
<fun r='__sanitizer::ListOfModules::ListOfModules'/>
<fun r='__sanitizer::ListOfModules::~ListOfModules'/>
<fun r='__sanitizer::ListOfModules::init'/>
<fun r='__sanitizer::ListOfModules::fallbackInit'/>
<fun r='__sanitizer::ListOfModules::begin'/>
<fun r='__sanitizer::ListOfModules::begin'/>
<fun r='__sanitizer::ListOfModules::end'/>
<fun r='__sanitizer::ListOfModules::end'/>
<fun r='__sanitizer::ListOfModules::size'/>
<fun r='__sanitizer::ListOfModules::operator[]'/>
<fun r='__sanitizer::ListOfModules::clear'/>
<fun r='__sanitizer::ListOfModules::clearOrInit'/>
<mbr r='__sanitizer::ListOfModules::modules_' o='0' t='InternalMmapVectorNoCtor&lt;__sanitizer::LoadedModule&gt;'/>
<smbr r='__sanitizer::ListOfModules::kInitialCapacity' t='const __sanitizer::uptr'/>
<mbr r='__sanitizer::ListOfModules::initialized' o='192' t='bool'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.h' l='181'/>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.h' l='182'/>
<size>32</size>
<use f='llvm/compiler-rt/lib/lsan/lsan_common_linux.cpp' l='54' c='__lsan::InitializePlatformSpecificModules'/>
<size>32</size>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp' l='53' c='__sanitizer::LibIgnore::OnLibraryLoaded'/>
<size>16</size>
<use f='llvm/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cpp' l='194' c='__sanitizer::SearchForModule'/>
<size>32</size>
