<def f='llvm/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h' l='229' ll='248' type='bool llvm::SCEVExpander::isHighCostExpansion(const llvm::SCEV * Expr, llvm::Loop * L, unsigned int Budget, const llvm::TargetTransformInfo * TTI, const llvm::Instruction * At)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h' l='223'>/// Return true for expressions that can&apos;t be evaluated at runtime
  /// within given \b Budget.
  ///
  /// At is a parameter which specifies point in code where user is going to
  /// expand this expression. Sometimes this knowledge can lead to
  /// a less pessimistic cost estimation.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp' l='1844' u='c' c='_ZN12_GLOBAL__N_114IndVarSimplify3runEPN4llvm4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='664' u='c' c='_ZN4llvm26UnrollRuntimeLoopRemainderEPNS_4LoopEjbbbbPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPKNS_19TargetTransformInfoEbPS1_'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='1391' u='c' c='_ZN4llvm21rewriteLoopExitValuesEPNS_4LoopEPNS_8LoopInfoEPNS_17TargetLibraryInfoEPNS_15ScalarEvolutionEPKNS_19TargetTransformInfoERNS_12SCEVExpanderEPN10378857'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp' l='673' u='c' c='_ZN12_GLOBAL__N_114SimplifyIndvar30replaceIVUserWithLoopInvariantEPN4llvm11InstructionE'/>
