<dec f='llvm/polly/lib/External/isl/include/isl/schedule_node.h' l='226' type='isl_union_pw_multi_aff * isl_schedule_node_get_prefix_schedule_union_pw_multi_aff(isl_schedule_node * node)'/>
<use f='llvm/polly/lib/External/isl/include/isl/isl-noexceptions.h' l='14234' u='c' c='_ZNK3isl12noexceptions13schedule_node38get_prefix_schedule_union_pw_multi_affEv'/>
<def f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='734' ll='776' type='isl_union_pw_multi_aff * isl_schedule_node_get_prefix_schedule_union_pw_multi_aff(isl_schedule_node * node)'/>
<use f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='787' u='c' c='isl_schedule_node_get_prefix_schedule_union_map'/>
<doc f='llvm/polly/lib/External/isl/isl_schedule_node.c' l='715'>/* Return the concatenation of the partial schedules of all outer band
 * nodes of &quot;node&quot; interesected with all outer filters
 * as an isl_union_pw_multi_aff.
 * None of the ancestors of &quot;node&quot; may be an extension node, unless
 * there is also a filter ancestor that filters out all the extended
 * domain elements.
 *
 * If &quot;node&quot; is pointing at the root of the schedule tree, then
 * there are no domain elements reaching the current node, so
 * we return an empty result.
 *
 * We collect all the filters and partial schedules in collect_filter_prefix.
 * The partial schedules are collected as an isl_multi_union_pw_aff.
 * If this isl_multi_union_pw_aff is zero-dimensional, then it does not
 * contain any domain information, so we construct the isl_union_pw_multi_aff
 * result as a zero-dimensional function on the collected filter.
 * Otherwise, we convert the isl_multi_union_pw_aff to
 * an isl_multi_union_pw_aff and intersect the domain with the filter.
 */</doc>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='10333' u='c' c='test_schedule_tree_group_1'/>
<use f='llvm/polly/lib/External/isl/isl_test.c' l='10340' u='c' c='test_schedule_tree_group_1'/>
<use f='llvm/polly/lib/External/ppcg/gpu.c' l='3956' u='c' c='gpu_create_kernel'/>
