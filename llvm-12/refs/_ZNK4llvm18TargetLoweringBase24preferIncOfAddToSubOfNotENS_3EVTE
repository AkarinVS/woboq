<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='764' ll='767' type='bool llvm::TargetLoweringBase::preferIncOfAddToSubOfNot(llvm::EVT VT) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='759'>/// These two forms are equivalent:
  ///   sub %y, (xor %x, -1)
  ///   add (add %x, 1), %y
  /// The variant with two add&apos;s is IR-canonical.
  /// Some targets may prefer one to the other.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='2444' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner12visitADDLikeEPN4llvm6SDNodeE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='2630' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner23visitADDLikeCommutativeEN4llvm7SDValueES2_PNS1_6SDNodeE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='3357' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner8visitSUBEPN4llvm6SDNodeE'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='16641' c='_ZNK4llvm21AArch64TargetLowering24preferIncOfAddToSubOfNotENS_3EVTE'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='12517' c='_ZNK4llvm17ARMTargetLowering24preferIncOfAddToSubOfNotENS_3EVTE'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='1464' c='_ZNK4llvm17PPCTargetLowering24preferIncOfAddToSubOfNotENS_3EVTE'/>
