<dec f='llvm/polly/include/polly/CodeGen/IslNodeBuilder.h' l='63' type='void addReferencesFromStmt(const polly::ScopStmt * Stmt, void * UserPtr, bool CreateScalarRefs = true)'/>
<doc f='llvm/polly/include/polly/CodeGen/IslNodeBuilder.h' l='47'>/// Extract the out-of-scop values and SCEVs referenced from a ScopStmt.
///
/// This includes the SCEVUnknowns referenced by the SCEVs used in the
/// statement and the base pointers of the memory accesses. For scalar
/// statements we force the generation of alloca memory locations and list
/// these locations in the set of out-of-scop values as well.
///
/// We also collect an isl::space that includes all parameter dimensions
/// used in the statement&apos;s memory accesses, in case the ParamSpace pointer
/// is non-null.
///
/// @param Stmt             The statement for which to extract the information.
/// @param UserPtr          A void pointer that can be casted to a
///                         SubtreeReferences structure.
/// @param CreateScalarRefs Should the result include allocas of scalar
///                         references?</doc>
<def f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='228' ll='262' type='void addReferencesFromStmt(const polly::ScopStmt * Stmt, void * UserPtr, bool CreateScalarRefs = true)'/>
<use f='llvm/polly/lib/CodeGen/IslNodeBuilder.cpp' l='279' u='c' c='_ZL24addReferencesFromStmtSetN3isl12noexceptions3setEP17SubtreeReferences'/>
