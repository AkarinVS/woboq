<dec f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.h' l='117' type='lldb_private::Status lldb_private::ClangExpressionParser::PrepareForExecution(lldb::addr_t &amp; func_addr, lldb::addr_t &amp; func_end, lldb::IRExecutionUnitSP &amp; execution_unit_sp, lldb_private::ExecutionContext &amp; exe_ctx, bool &amp; can_interpret, lldb_private::ExecutionPolicy execution_policy)'/>
<inh f='llvm/lldb/include/lldb/Expression/ExpressionParser.h' l='123' c='_ZN12lldb_private16ExpressionParser19PrepareForExecutionERmS1_RSt10shared_ptrINS_15IRExecutionUnitEERNS_16ExecutionContextERbNS_15ExecutionPolicyE'/>
<def f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpp' l='1319' ll='1496' type='lldb_private::Status lldb_private::ClangExpressionParser::PrepareForExecution(lldb::addr_t &amp; func_addr, lldb::addr_t &amp; func_end, lldb::IRExecutionUnitSP &amp; execution_unit_sp, lldb_private::ExecutionContext &amp; exe_ctx, bool &amp; can_interpret, lldb_private::ExecutionPolicy execution_policy)'/>
<doc f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.h' l='90'>/// Ready an already-parsed expression for execution, possibly evaluating it
  /// statically.
  ///
  /// \param[out] func_addr
  ///     The address to which the function has been written.
  ///
  /// \param[out] func_end
  ///     The end of the function&apos;s allocated memory region.  (func_addr
  ///     and func_end do not delimit an allocated region; the allocated
  ///     region may begin before func_addr.)
  ///
  /// \param[in] execution_unit_sp
  ///     After parsing, ownership of the execution unit for
  ///     for the expression is handed to this shared pointer.
  ///
  /// \param[in] exe_ctx
  ///     The execution context to write the function into.
  ///
  /// \param[in] execution_policy
  ///     Determines whether the expression must be JIT-compiled, must be
  ///     evaluated statically, or whether this decision may be made
  ///     opportunistically.
  ///
  /// \return
  ///     An error code indicating the success or failure of the operation.
  ///     Test with Success().</doc>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangUserExpression.cpp' l='609' u='c' c='_ZN12lldb_private19ClangUserExpression8TryParseERNS_17DiagnosticManagerEPNS_21ExecutionContextScopeERNS_16ExecutionContextENS_15ExecutionPolicyEbb'/>
<use f='llvm/lldb/source/Plugins/ExpressionParser/Clang/ClangUtilityFunction.cpp' l='122' u='c' c='_ZN12lldb_private20ClangUtilityFunction7InstallERNS_17DiagnosticManagerERNS_16ExecutionContextE'/>
