<def f='llvm/polly/lib/Transform/ScheduleOptimizer.cpp' l='1044' ll='1052' type='isl::map getMatMulAccRel(isl::map MapOldIndVar, unsigned int FirstDim, unsigned int SecondDim)'/>
<use f='llvm/polly/lib/Transform/ScheduleOptimizer.cpp' l='1105' u='c' c='_ZL32optimizeDataLayoutMatrMulPatternN3isl12noexceptions13schedule_nodeENS0_3mapE19MicroKernelParamsTy19MacroKernelParamsTyRN5polly12MatMulInfoTyE'/>
<use f='llvm/polly/lib/Transform/ScheduleOptimizer.cpp' l='1134' u='c' c='_ZL32optimizeDataLayoutMatrMulPatternN3isl12noexceptions13schedule_nodeENS0_3mapE19MicroKernelParamsTy19MacroKernelParamsTyRN5polly12MatMulInfoTyE'/>
<doc f='llvm/polly/lib/Transform/ScheduleOptimizer.cpp' l='1018'>/// Create an access relation that is specific to
///        the matrix multiplication pattern.
///
/// Create an access relation of the following form:
/// [O0, O1, O2, O3, O4, O5, O6, O7, O8] -&gt; [OI, O5, OJ]
/// where I is @p FirstDim, J is @p SecondDim.
///
/// It can be used, for example, to create relations that helps to consequently
/// access elements of operands of a matrix multiplication after creation of
/// the BLIS micro and macro kernels.
///
/// @see ScheduleTreeOptimizer::createMicroKernel
/// @see ScheduleTreeOptimizer::createMacroKernel
///
/// Subsequently, the described access relation is applied to the range of
/// @p MapOldIndVar, that is used to map original induction variables to
/// the ones, which are produced by schedule transformations. It helps to
/// define relations using a new space and, at the same time, keep them
/// in the original one.
///
/// @param MapOldIndVar The relation, which maps original induction variables
///                     to the ones, which are produced by schedule
///                     transformations.
/// @param FirstDim, SecondDim The input dimensions that are used to define
///        the specified access relation.
/// @return The specified access relation.</doc>
