<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='411' type='bool llvm::cannotBeMinInLoop(const llvm::SCEV * S, const llvm::Loop * L, llvm::ScalarEvolution &amp; SE, bool Signed)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='410'>/// Returns true if \p S is defined and never is equal to signed/unsigned min.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='905' u='c' c='_ZN12_GLOBAL__N_113LoopStructure18parseLoopStructureERN4llvm15ScalarEvolutionERNS1_4LoopERPKc'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='910' u='c' c='_ZN12_GLOBAL__N_113LoopStructure18parseLoopStructureERN4llvm15ScalarEvolutionERNS1_4LoopERPKc'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='1446' u='c' c='_ZN12_GLOBAL__N_115LoopConstrainer3runEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='1473' u='c' c='_ZN12_GLOBAL__N_115LoopConstrainer3runEv'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='1121' ll='1130' type='bool llvm::cannotBeMinInLoop(const llvm::SCEV * S, const llvm::Loop * L, llvm::ScalarEvolution &amp; SE, bool Signed)'/>
