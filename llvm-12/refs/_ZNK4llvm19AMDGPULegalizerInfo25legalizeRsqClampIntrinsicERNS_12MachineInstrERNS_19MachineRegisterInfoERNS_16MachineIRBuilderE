<dec f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.h' l='137' type='bool llvm::AMDGPULegalizerInfo::legalizeRsqClampIntrinsic(llvm::MachineInstr &amp; MI, llvm::MachineRegisterInfo &amp; MRI, llvm::MachineIRBuilder &amp; B) const'/>
<def f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='3385' ll='3426' type='bool llvm::AMDGPULegalizerInfo::legalizeRsqClampIntrinsic(llvm::MachineInstr &amp; MI, llvm::MachineRegisterInfo &amp; MRI, llvm::MachineIRBuilder &amp; B) const'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='4823' u='c' c='_ZNK4llvm19AMDGPULegalizerInfo17legalizeIntrinsicERNS_15LegalizerHelperERNS_12MachineInstrE'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp' l='3379'>// Expand llvm.amdgcn.rsq.clamp on targets that don&apos;t support the instruction.
// FIXME: Why do we handle this one but not other removed instructions?
//
// Reciprocal square root.  The clamp prevents infinite results, clamping
// infinities to max_float.  D.f = 1.0 / sqrt(S0.f), result clamped to
// +-max_float.</doc>
