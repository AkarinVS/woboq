<def f='llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp' l='208' ll='210'/>
<use f='llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp' l='212'/>
<use f='llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp' l='212' c='mallinfo'/>
<use f='llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp' l='212' c='__interceptor_mallinfo'/>
<use f='llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp' l='213' c='__interceptor_mallinfo'/>
<size>40</size>
<doc f='llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp' l='204'>// We avoid including malloc.h for portability reasons.
// man mallinfo says the fields are &quot;long&quot;, but the implementation uses int.
// It doesn&apos;t matter much -- we just need to make sure that the libc&apos;s mallinfo
// is not called.</doc>
<def f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='158' ll='160'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='162'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='162' c='mallinfo'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='162' c='__interceptor_mallinfo'/>
<use f='llvm/compiler-rt/lib/lsan/lsan_interceptors.cpp' l='163' c='__interceptor_mallinfo'/>
<size>40</size>
<def f='llvm/compiler-rt/lib/memprof/memprof_malloc_linux.cpp' l='190' ll='192'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_malloc_linux.cpp' l='194'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_malloc_linux.cpp' l='194' c='mallinfo'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_malloc_linux.cpp' l='194' c='__interceptor_mallinfo'/>
<use f='llvm/compiler-rt/lib/memprof/memprof_malloc_linux.cpp' l='195' c='__interceptor_mallinfo'/>
<size>40</size>
<doc f='llvm/compiler-rt/lib/memprof/memprof_malloc_linux.cpp' l='186'>// We avoid including malloc.h for portability reasons.
// man mallinfo says the fields are &quot;long&quot;, but the implementation uses int.
// It doesn&apos;t matter much -- we just need to make sure that the libc&apos;s mallinfo
// is not called.</doc>
