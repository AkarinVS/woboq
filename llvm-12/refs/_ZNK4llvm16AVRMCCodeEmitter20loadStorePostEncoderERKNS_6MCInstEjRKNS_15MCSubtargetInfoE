<dec f='llvm/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.h' l='46' type='unsigned int llvm::AVRMCCodeEmitter::loadStorePostEncoder(const llvm::MCInst &amp; MI, unsigned int EncodedValue, const llvm::MCSubtargetInfo &amp; STI) const'/>
<def f='llvm/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.cpp' l='67' ll='89' type='unsigned int llvm::AVRMCCodeEmitter::loadStorePostEncoder(const llvm::MCInst &amp; MI, unsigned int EncodedValue, const llvm::MCSubtargetInfo &amp; STI) const'/>
<use f='llvm/build/lib/Target/AVR/AVRGenMCCodeEmitter.inc' l='610' u='c' c='_ZNK4llvm16AVRMCCodeEmitter21getBinaryCodeForInstrERKNS_6MCInstERNS_15SmallVectorImplINS_7MCFixupEEERKNS_15MCSubtargetInfoE'/>
<use f='llvm/build/lib/Target/AVR/AVRGenMCCodeEmitter.inc' l='624' u='c' c='_ZNK4llvm16AVRMCCodeEmitter21getBinaryCodeForInstrERKNS_6MCInstERNS_15SmallVectorImplINS_7MCFixupEEERKNS_15MCSubtargetInfoE'/>
<use f='llvm/build/lib/Target/AVR/AVRGenMCCodeEmitter.inc' l='639' u='c' c='_ZNK4llvm16AVRMCCodeEmitter21getBinaryCodeForInstrERKNS_6MCInstERNS_15SmallVectorImplINS_7MCFixupEEERKNS_15MCSubtargetInfoE'/>
<use f='llvm/build/lib/Target/AVR/AVRGenMCCodeEmitter.inc' l='654' u='c' c='_ZNK4llvm16AVRMCCodeEmitter21getBinaryCodeForInstrERKNS_6MCInstERNS_15SmallVectorImplINS_7MCFixupEEERKNS_15MCSubtargetInfoE'/>
<doc f='llvm/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.cpp' l='39'>/// Performs a post-encoding step on a `LD` or `ST` instruction.
///
/// The encoding of the LD/ST family of instructions is inconsistent w.r.t
/// the pointer register and the addressing mode.
///
/// The permutations of the format are as followed:
/// ld Rd, X    `1001 000d dddd 1100`
/// ld Rd, X+   `1001 000d dddd 1101`
/// ld Rd, -X   `1001 000d dddd 1110`
///
/// ld Rd, Y    `1000 000d dddd 1000`
/// ld Rd, Y+   `1001 000d dddd 1001`
/// ld Rd, -Y   `1001 000d dddd 1010`
///
/// ld Rd, Z    `1000 000d dddd 0000`
/// ld Rd, Z+   `1001 000d dddd 0001`
/// ld Rd, -Z   `1001 000d dddd 0010`
///                 ^
///                 |
/// Note this one inconsistent bit - it is 1 sometimes and 0 at other times.
/// There is no logical pattern. Looking at a truth table, the following
/// formula can be derived to fit the pattern:
//
/// ```
/// inconsistent_bit = is_predec OR is_postinc OR is_reg_x
/// ```
//
/// We manually set this bit in this post encoder method.</doc>
<doc f='llvm/llvm/lib/Target/AVR/MCTargetDesc/AVRMCCodeEmitter.h' l='43'>/// Finishes up encoding an LD/ST instruction.
  /// The purpose of this function is to set an bit in the instruction
  /// which follows no logical pattern. See the implementation for details.</doc>
