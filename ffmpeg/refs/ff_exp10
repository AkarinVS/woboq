<def f='ffmpeg/libavutil/ffmath.h' l='42' ll='45' type='double ff_exp10(double x)'/>
<doc f='ffmpeg/libavutil/ffmath.h' l='32'>/**
 * Compute 10^x for floating point values. Note: this function is by no means
 * &quot;correctly rounded&quot;, and is meant as a fast, reasonably accurate approximation.
 * For instance, maximum relative error for the double precision variant is
 * ~ 1e-13 for very small and very large values.
 * This is ~2x faster than GNU libm&apos;s approach, which is still off by 2ulp on
 * some inputs.
 * @param x exponent
 * @return 10^x
 */</doc>
<use f='ffmpeg/libavcodec/aacpsy.c' l='352' u='c' c='psy_3gpp_init'/>
<use f='ffmpeg/libavcodec/aacpsy.c' l='353' u='c' c='psy_3gpp_init'/>
<use f='ffmpeg/libavcodec/aacpsy.c' l='354' u='c' c='psy_3gpp_init'/>
<use f='ffmpeg/libavcodec/aacpsy.c' l='355' u='c' c='psy_3gpp_init'/>
<use f='ffmpeg/libavcodec/acelp_pitch_delay.c' l='80' u='c' c='ff_acelp_decode_gain_code'/>
<use f='ffmpeg/libavcodec/acelp_pitch_delay.c' l='94' u='c' c='ff_amr_set_fixed_gain'/>
<use f='ffmpeg/libavcodec/cngdec.c' l='116' u='c' c='cng_decode_frame'/>
<use f='ffmpeg/libavcodec/dcaenc.c' l='261' u='c' c='encode_init'/>
<use f='ffmpeg/libavcodec/dcaenc.c' l='286' u='c' c='encode_init'/>
<use f='ffmpeg/libavcodec/imc.c' l='140' u='c' c='iac_generate_tabs'/>
<use f='ffmpeg/libavcodec/imc.c' l='141' u='c' c='iac_generate_tabs'/>
<use f='ffmpeg/libavcodec/on2avc.c' l='935' u='c' c='on2avc_decode_init'/>
<use f='ffmpeg/libavcodec/on2avc.c' l='937' u='c' c='on2avc_decode_init'/>
<use f='ffmpeg/libavcodec/opus.c' l='341' u='c' c='ff_opus_parse_extradata'/>
<use f='ffmpeg/libavcodec/wmadec.c' l='626' u='c' c='wma_decode_block'/>
<use f='ffmpeg/libavcodec/wmadec.c' l='674' u='c' c='wma_decode_block'/>
<use f='ffmpeg/libavcodec/wmaenc.c' l='144' u='c' c='init_exp'/>
<use f='ffmpeg/libavcodec/wmaenc.c' l='239' u='c' c='encode_block'/>
<use f='ffmpeg/libavcodec/wmaprodec.c' l='1389' u='c' c='decode_subframe'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='315' u='c' c='butterworth_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='316' u='c' c='butterworth_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='317' u='c' c='butterworth_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='384' u='c' c='chebyshev1_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='385' u='c' c='chebyshev1_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='386' u='c' c='chebyshev1_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='457' u='c' c='chebyshev2_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='458' u='c' c='chebyshev2_bp_filter'/>
<use f='ffmpeg/libavfilter/af_anequalizer.c' l='459' u='c' c='chebyshev2_bp_filter'/>
<use f='ffmpeg/libavfilter/af_biquads.c' l='458' u='c' c='config_filter'/>
<use f='ffmpeg/libavfilter/af_biquads.c' l='518' u='c' c='config_filter'/>
<use f='ffmpeg/libavfilter/af_biquads.c' l='544' u='c' c='config_filter'/>
<use f='ffmpeg/libavfilter/af_compand.c' l='519' u='c' c='config_output'/>
<use f='ffmpeg/libavfilter/af_crossfeed.c' l='61' u='c' c='config_input'/>
<use f='ffmpeg/libavfilter/af_volume.c' l='377' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/f_ebur128.c' l='477' u='c' c='get_histogram'/>
<use f='ffmpeg/libavfilter/vaf_spectrumsynth.c' l='240' u='c' c='read16_fft_bin'/>
<use f='ffmpeg/libavfilter/vaf_spectrumsynth.c' l='265' u='c' c='read8_fft_bin'/>
<use f='ffmpeg/libavfilter/vsrc_testsrc.c' l='627' u='c' c='test_fill_picture'/>
<use f='ffmpeg/libavutil/eval.c' l='118' u='c' c='av_strtod'/>
