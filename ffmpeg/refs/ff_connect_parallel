<dec f='ffmpeg/libavformat/network.h' l='336' type='int ff_connect_parallel(struct addrinfo * addrs, int timeout_ms_per_address, int parallel, URLContext * h, int * fd, void (*)(void *, int) customize_fd, void * customize_ctx)'/>
<doc f='ffmpeg/libavformat/network.h' l='312'>/**
 * Connect to any of the given addrinfo addresses, with multiple attempts
 * running in parallel.
 *
 * @param addrs    The list of addresses to try to connect to.
 *                 This list will be mutated internally, but the list head
 *                 will remain as such, so this doesn&apos;t affect the caller
 *                 freeing the list afterwards.
 * @param timeout_ms_per_address The number of milliseconds to wait for each
 *                 connection attempt. Since multiple addresses are tried,
 *                 some of them in parallel, the total run time will at most
 *                 be timeout_ms_per_address*ceil(nb_addrs/parallel) +
 *                 (parallel - 1) * NEXT_ATTEMPT_DELAY_MS.
 * @param parallel The maximum number of connections to attempt in parallel.
 *                 This is limited to an internal maximum capacity.
 * @param h        URLContext providing interrupt check
 *                 callback and logging context.
 * @param fd       If successful, the connected socket is returned here.
 * @param customize_fd Function that will be called for each socket created,
 *                 to allow the caller to set socket options before calling
 *                 connect() on it, may be NULL.
 * @param customize_ctx Context parameter passed to customize_fd.
 * @return         0 on success, AVERROR on failure.
 */</doc>
<def f='ffmpeg/libavformat/network.c' l='403' ll='525' type='int ff_connect_parallel(struct addrinfo * addrs, int timeout_ms_per_address, int parallel, URLContext * h, int * fd, void (*)(void *, int) customize_fd, void * customize_ctx)'/>
<use f='ffmpeg/libavformat/tcp.c' l='198' u='c' c='tcp_open'/>
