<dec f='ffmpeg/libavutil/mem.h' l='382' type='void * av_fast_realloc(void * ptr, unsigned int * size, size_t min_size)'/>
<doc f='ffmpeg/libavutil/mem.h' l='350'>/**
 * Reallocate the given buffer if it is not large enough, otherwise do nothing.
 *
 * If the given buffer is `NULL`, then a new uninitialized buffer is allocated.
 *
 * If the given buffer is not large enough, and reallocation fails, `NULL` is
 * returned and `*size` is set to 0, but the original buffer is not changed or
 * freed.
 *
 * A typical use pattern follows:
 *
 * @code{.c}
 * uint8_t *buf = ...;
 * uint8_t *new_buf = av_fast_realloc(buf, &amp;current_size, size_needed);
 * if (!new_buf) {
 *     // Allocation failed; clean up original buffer
 *     av_freep(&amp;buf);
 *     return AVERROR(ENOMEM);
 * }
 * @endcode
 *
 * @param[in,out] ptr      Already allocated buffer, or `NULL`
 * @param[in,out] size     Pointer to the size of buffer `ptr`. `*size` is
 *                         updated to the new allocated size, in particular 0
 *                         in case of failure.
 * @param[in]     min_size Desired minimal size of buffer `ptr`
 * @return `ptr` if the buffer is large enough, a pointer to newly reallocated
 *         buffer if the buffer was not large enough, or `NULL` in case of
 *         error
 * @see av_realloc()
 * @see av_fast_malloc()
 */</doc>
<use f='ffmpeg/libavcodec/4xm.c' l='897' u='c' c='decode_frame'/>
<use f='ffmpeg/libavcodec/audio_frame_queue.c' l='46' u='c' c='ff_af_queue_add'/>
<use f='ffmpeg/libavcodec/av1_parse.c' l='73' u='c' c='ff_av1_packet_split'/>
<use f='ffmpeg/libavcodec/dirac_parser.c' l='159' u='c' c='dirac_combine_frame'/>
<use f='ffmpeg/libavcodec/dirac_parser.c' l='171' u='c' c='dirac_combine_frame'/>
<use f='ffmpeg/libavcodec/flac_parser.c' l='128' u='c' c='flac_fifo_read_wrap'/>
<use f='ffmpeg/libavcodec/h2645_parse.c' l='462' u='c' c='ff_h2645_packet_split'/>
<use f='ffmpeg/libavcodec/movtextenc.c' l='359' u='c' c='mov_text_style_start'/>
<use f='ffmpeg/libavcodec/parser.c' l='263' u='c' c='ff_combine_frame'/>
<use f='ffmpeg/libavcodec/parser.c' l='285' u='c' c='ff_combine_frame'/>
<use f='ffmpeg/libavcodec/shorten.c' l='534' u='c' c='shorten_decode_frame'/>
<use f='ffmpeg/libavcodec/shorten.c' l='584' u='c' c='shorten_decode_frame'/>
<use f='ffmpeg/libavfilter/asrc_afirsrc.c' l='166' u='c' c='parse_string'/>
<use f='ffmpeg/libavfilter/asrc_afirsrc.c' l='177' u='c' c='parse_string'/>
<use f='ffmpeg/libavfilter/f_drawgraph.c' l='113' u='c' c='init'/>
<use f='ffmpeg/libavfilter/f_drawgraph.c' l='114' u='c' c='init'/>
<use f='ffmpeg/libavfilter/f_drawgraph.c' l='115' u='c' c='init'/>
<use f='ffmpeg/libavfilter/f_drawgraph.c' l='116' u='c' c='init'/>
<use f='ffmpeg/libavfilter/f_drawgraph.c' l='173' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/f_drawgraph.c' l='178' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/f_drawgraph.c' l='183' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/f_drawgraph.c' l='188' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/f_reverse.c' l='42' u='c' c='init'/>
<use f='ffmpeg/libavfilter/f_reverse.c' l='47' u='c' c='init'/>
<use f='ffmpeg/libavfilter/f_reverse.c' l='77' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/f_reverse.c' l='84' u='c' c='filter_frame'/>
<use f='ffmpeg/libavformat/bethsoftvid.c' l='156' u='c' c='read_frame'/>
<use f='ffmpeg/libavformat/cafenc.c' l='220' u='c' c='caf_write_packet'/>
<use f='ffmpeg/libavformat/hls.c' l='1182' u='c' c='intercept_id3'/>
<use f='ffmpeg/libavformat/matroskadec.c' l='1294' u='c' c='ebml_parse'/>
<use f='ffmpeg/libavformat/mms.c' l='105' u='c' c='ff_mms_asf_header_parser'/>
<use f='ffmpeg/libavformat/mov.c' l='1346' u='c' c='update_frag_index'/>
<use f='ffmpeg/libavformat/mov.c' l='2958' u='c' c='mov_read_stts'/>
<use f='ffmpeg/libavformat/mov.c' l='3069' u='c' c='mov_read_ctts'/>
<use f='ffmpeg/libavformat/mov.c' l='3318' u='c' c='add_index_entry'/>
<use f='ffmpeg/libavformat/mov.c' l='3369' u='c' c='add_ctts_entry'/>
<use f='ffmpeg/libavformat/mov.c' l='3884' u='c' c='mov_build_index'/>
<use f='ffmpeg/libavformat/mov.c' l='4881' u='c' c='mov_read_trun'/>
<use f='ffmpeg/libavformat/mov.c' l='4890' u='c' c='mov_read_trun'/>
<use f='ffmpeg/libavformat/mov.c' l='6098' u='c' c='mov_read_senc'/>
<use f='ffmpeg/libavformat/mov.c' l='6152' u='c' c='mov_parse_auxiliary_info'/>
<use f='ffmpeg/libavformat/mov.c' l='6200' u='c' c='mov_try_read_block'/>
<use f='ffmpeg/libavformat/mov.c' l='6352' u='c' c='mov_read_saio'/>
<use f='ffmpeg/libavformat/mov.c' l='6423' u='c' c='mov_read_pssh'/>
<use f='ffmpeg/libavformat/mxg.c' l='112' u='c' c='mxg_update_cache'/>
<use f='ffmpeg/libavformat/spdifenc.c' l='131' u='c' c='spdif_header_eac3'/>
<use f='ffmpeg/libavformat/subtitles.c' l='130' u='c' c='ff_subtitles_queue_insert'/>
<use f='ffmpeg/libavformat/utils.c' l='1980' u='c' c='ff_add_index_entry'/>
<use f='ffmpeg/libavformat/wavenc.c' l='201' u='c' c='peak_write_frame'/>
<def f='ffmpeg/libavutil/mem.c' l='478' ll='500' type='void * av_fast_realloc(void * ptr, unsigned int * size, size_t min_size)'/>
