<dec f='ffmpeg/libswscale/swscale.h' l='217' type='int sws_scale(struct SwsContext * c, const uint8_t *const * srcSlice, const int * srcStride, int srcSliceY, int srcSliceH, uint8_t *const * dst, const int * dstStride)'/>
<doc f='ffmpeg/libswscale/swscale.h' l='191'>/**
 * Scale the image slice in srcSlice and put the resulting scaled
 * slice in the image in dst. A slice is a sequence of consecutive
 * rows in an image.
 *
 * Slices have to be provided in sequential order, either in
 * top-bottom or bottom-top order. If slices are provided in
 * non-sequential order the behavior of the function is undefined.
 *
 * @param c         the scaling context previously created with
 *                  sws_getContext()
 * @param srcSlice  the array containing the pointers to the planes of
 *                  the source slice
 * @param srcStride the array containing the strides for each plane of
 *                  the source image
 * @param srcSliceY the position in the source image of the slice to
 *                  process, that is the number (counted starting from
 *                  zero) in the image of the first row of the slice
 * @param srcSliceH the height of the source slice, that is the number
 *                  of rows in the slice
 * @param dst       the array containing the pointers to the planes of
 *                  the destination image
 * @param dstStride the array containing the strides for each plane of
 *                  the destination image
 * @return          the height of the output slice
 */</doc>
<use f='ffmpeg/libavfilter/dnn/dnn_io_proc.c' l='52' u='c' c='ff_proc_from_dnn_to_frame'/>
<use f='ffmpeg/libavfilter/dnn/dnn_io_proc.c' l='83' u='c' c='ff_proc_from_dnn_to_frame'/>
<use f='ffmpeg/libavfilter/dnn/dnn_io_proc.c' l='122' u='c' c='proc_from_frame_to_dnn_frameprocessing'/>
<use f='ffmpeg/libavfilter/dnn/dnn_io_proc.c' l='154' u='c' c='proc_from_frame_to_dnn_frameprocessing'/>
<use f='ffmpeg/libavfilter/dnn/dnn_io_proc.c' l='200' u='c' c='proc_from_frame_to_dnn_analytics'/>
<use f='ffmpeg/libavfilter/lswsutils.c' l='45' u='c' c='ff_scale_image'/>
<use f='ffmpeg/libavfilter/vf_dnn_processing.c' l='233' u='c' c='copy_uv_planes'/>
<use f='ffmpeg/libavfilter/vf_dnn_processing.c' l='236' u='c' c='copy_uv_planes'/>
<use f='ffmpeg/libavfilter/vf_dnn_processing.c' l='238' u='c' c='copy_uv_planes'/>
<use f='ffmpeg/libavfilter/vf_sab.c' l='237' u='c' c='blur'/>
<use f='ffmpeg/libavfilter/vf_scale.c' l='646' u='c' c='scale_slice'/>
<use f='ffmpeg/libavfilter/vf_smartblur.c' l='191' u='c' c='blur'/>
<use f='ffmpeg/libavfilter/vf_sr.c' l='143' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_sr.c' l='159' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_sr.c' l='161' u='c' c='filter_frame'/>
<use f='ffmpeg/libavfilter/vf_zoompan.c' l='229' u='c' c='output_single_frame'/>
<def f='ffmpeg/libswscale/swscale.c' l='745' ll='985' type='int sws_scale(struct SwsContext * c, const uint8_t *const * srcSlice, const int * srcStride, int srcSliceY, int srcSliceH, uint8_t *const * dst, const int * dstStride)'/>
<use f='ffmpeg/libswscale/swscale.c' l='779' u='c' c='sws_scale'/>
<use f='ffmpeg/libswscale/swscale.c' l='787' u='c' c='sws_scale'/>
<use f='ffmpeg/libswscale/swscale.c' l='789' u='c' c='sws_scale'/>
<use f='ffmpeg/libswscale/swscale.c' l='795' u='c' c='sws_scale'/>
<use f='ffmpeg/libswscale/swscale.c' l='803' u='c' c='sws_scale'/>
<use f='ffmpeg/libswscale/swscale.c' l='808' u='c' c='sws_scale'/>
<doc f='ffmpeg/libswscale/swscale.c' l='741'>/**
 * swscale wrapper, so we don&apos;t need to export the SwsContext.
 * Assumes planar YUV to be in YUV order instead of YVU.
 */</doc>
