<dec f='ffmpeg/libavcodec/mjpegenc_huffman.h' l='74' type='void ff_mjpegenc_huffman_compute_bits(PTable * prob_table, HuffTable * distincts, int size, int max_length)'/>
<def f='ffmpeg/libavcodec/mjpegenc_huffman.c' l='80' ll='146' type='void ff_mjpegenc_huffman_compute_bits(PTable * prob_table, HuffTable * distincts, int size, int max_length)'/>
<use f='ffmpeg/libavcodec/mjpegenc_huffman.c' l='184' u='c' c='ff_mjpeg_encode_huffman_close'/>
<doc f='ffmpeg/libavcodec/mjpegenc_huffman.c' l='59'>/**
 * Computes the length of the Huffman encoding for each distinct input value.
 * Uses package merge algorithm as follows:
 * 1. start with an empty list, lets call it list(0), set i = 0
 * 2. add 1 entry to list(i) for each symbol we have and give each a score equal to the probability of the respective symbol
 * 3. merge the 2 symbols of least score and put them in list(i+1), and remove them from list(i). The new score will be the sum of the 2 scores
 * 4. if there is more than 1 symbol left in the current list(i), then goto 3
 * 5. i++
 * 6. if i &lt; 16 goto 2
 * 7. select the n-1 elements in the last list with the lowest score (n = the number of symbols)
 * 8. the length of the huffman code for symbol s will be equal to the number of times the symbol occurs in the select elements
 * Go to guru.multimedia.cx/small-tasks-for-ffmpeg/ for more details
 *
 * All probabilities should be positive integers. The output is sorted by code,
 * not by length.
 *
 * @param prob_table input array of a PTable for each distinct input value
 * @param distincts  output array of a HuffTable that will be populated by this function
 * @param size       size of the prob_table array
 * @param max_length max length of an encoding
 */</doc>
