<dec f='ffmpeg/libavutil/crc.h' l='77' type='int av_crc_init(AVCRC * ctx, int le, int bits, uint32_t poly, int ctx_size)'/>
<doc f='ffmpeg/libavutil/crc.h' l='61'>/**
 * Initialize a CRC table.
 * @param ctx must be an array of size sizeof(AVCRC)*257 or sizeof(AVCRC)*1024
 * @param le If 1, the lowest bit represents the coefficient for the highest
 *           exponent of the corresponding polynomial (both for poly and
 *           actual CRC).
 *           If 0, you must swap the CRC parameter and the result of av_crc
 *           if you need the standard representation (can be simplified in
 *           most cases to e.g. bswap16):
 *           av_bswap32(crc &lt;&lt; (32-bits))
 * @param bits number of bits for the CRC
 * @param poly generator polynomial without the x**bits coefficient, in the
 *             representation as specified by le
 * @param ctx_size size of ctx in bytes
 * @return &lt;0 on failure
 */</doc>
<use f='ffmpeg/libavcodec/mlp.c' l='77' u='c' c='mlp_init_crc'/>
<use f='ffmpeg/libavcodec/mlp.c' l='78' u='c' c='mlp_init_crc'/>
<use f='ffmpeg/libavcodec/mlp.c' l='79' u='c' c='mlp_init_crc'/>
<use f='ffmpeg/libavutil/crc.c' l='326' u='c' c='AV_CRC_8_ATM_init_table_once'/>
<use f='ffmpeg/libavutil/crc.c' l='326' u='c' c='AV_CRC_8_EBU_init_table_once'/>
<use f='ffmpeg/libavutil/crc.c' l='326' u='c' c='AV_CRC_16_ANSI_init_table_once'/>
<use f='ffmpeg/libavutil/crc.c' l='326' u='c' c='AV_CRC_16_CCITT_init_table_once'/>
<use f='ffmpeg/libavutil/crc.c' l='326' u='c' c='AV_CRC_24_IEEE_init_table_once'/>
<use f='ffmpeg/libavutil/crc.c' l='326' u='c' c='AV_CRC_32_IEEE_init_table_once'/>
<use f='ffmpeg/libavutil/crc.c' l='326' u='c' c='AV_CRC_32_IEEE_LE_init_table_once'/>
<use f='ffmpeg/libavutil/crc.c' l='326' u='c' c='AV_CRC_16_ANSI_LE_init_table_once'/>
<def f='ffmpeg/libavutil/crc.c' l='341' ll='372' type='int av_crc_init(AVCRC * ctx, int le, int bits, uint32_t poly, int ctx_size)'/>
