<def f='include/linux/videodev2.h' l='822' ll='832'/>
<use f='include/linux/videodev2.h' l='879'/>
<use f='ffmpeg/libavcodec/v4l2_buffers.h' l='61'/>
<size>64</size>
<doc f='include/linux/videodev2.h' l='802'>/**
 * struct v4l2_plane - plane info for multi-planar buffers
 * @bytesused:		number of bytes occupied by data in the plane (payload)
 * @length:		size of this plane (NOT the payload) in bytes
 * @mem_offset:		when memory in the associated struct v4l2_buffer is
 *			V4L2_MEMORY_MMAP, equals the offset from the start of
 *			the device memory for this plane (or is a &quot;cookie&quot; that
 *			should be passed to mmap() called on the video node)
 * @userptr:		when memory is V4L2_MEMORY_USERPTR, a userspace pointer
 *			pointing to this plane
 * @fd:			when memory is V4L2_MEMORY_DMABUF, a userspace file
 *			descriptor associated with this plane
 * @data_offset:	offset in the plane to the start of data; usually 0,
 *			unless there is a header in front of the data
 *
 * Multi-planar buffers consist of one or more planes, e.g. an YCbCr buffer
 * with two planes can have one plane for Y, and another for interleaved CbCr
 * components. Each plane can reside in a separate memory buffer, or even in
 * a completely separate memory node (e.g. in embedded devices).
 */</doc>
<mbr r='v4l2_plane::bytesused' o='0' t='__u32'/>
<mbr r='v4l2_plane::length' o='32' t='__u32'/>
<mbr r='v4l2_plane::m' o='64' t='union (anonymous union at /usr/include/linux/videodev2.h:825:2)'/>
<mbr r='v4l2_plane::data_offset' o='128' t='__u32'/>
<mbr r='v4l2_plane::reserved' o='160' t='__u32 [11]'/>
<use f='ffmpeg/libavcodec/v4l2_context.c' l='285' c='v4l2_dequeue_v4l2buf'/>
<size>64</size>
