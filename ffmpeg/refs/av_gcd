<dec f='ffmpeg/libavutil/mathematics.h' l='118' type='int64_t av_gcd(int64_t a, int64_t b)'/>
<doc f='ffmpeg/libavutil/mathematics.h' l='111'>/**
 * Compute the greatest common divisor of two integer operands.
 *
 * @param a,b Operands
 * @return GCD of a and b up to sign; if a &gt;= 0 and b &gt;= 0, return value is &gt;= 0;
 * if a == 0 and b == 0, returns 0.
 */</doc>
<use f='ffmpeg/libavcodec/avcodec.c' l='769' u='c' c='avcodec_string'/>
<use f='ffmpeg/libavcodec/avcodec.c' l='815' u='c' c='avcodec_string'/>
<use f='ffmpeg/libavcodec/ituh263dec.c' l='1181' u='c' c='ff_h263_decode_picture_header'/>
<use f='ffmpeg/libavcodec/mpeg12enc.c' l='122' u='c' c='find_frame_rate_index'/>
<use f='ffmpeg/libavcodec/mpegvideo_enc.c' l='744' u='c' c='ff_mpv_encode_init'/>
<use f='ffmpeg/libavfilter/vf_framerate.c' l='397' u='c' c='config_output'/>
<use f='ffmpeg/libavformat/mpsubdec.c' l='138' u='c' c='mpsub_read_header'/>
<use f='ffmpeg/libavformat/mpsubdec.c' l='139' u='c' c='mpsub_read_header'/>
<use f='ffmpeg/libavformat/mpsubdec.c' l='148' u='c' c='mpsub_read_header'/>
<use f='ffmpeg/libavformat/nutdec.c' l='230' u='c' c='decode_main_header'/>
<use f='ffmpeg/libavformat/riffenc.c' l='127' u='c' c='ff_put_wav_header'/>
<use f='ffmpeg/libavformat/riffenc.c' l='297' u='c' c='ff_parse_specific_params'/>
<use f='ffmpeg/libavformat/rtpenc.c' l='361' u='c' c='rtp_send_samples'/>
<use f='ffmpeg/libavformat/utils.c' l='3405' u='c' c='ff_rfps_add_frame'/>
<use f='ffmpeg/libavutil/eval.c' l='310' u='c' c='eval_expr'/>
<def f='ffmpeg/libavutil/mathematics.c' l='37' ll='56' type='int64_t av_gcd(int64_t a, int64_t b)'/>
<doc f='ffmpeg/libavutil/mathematics.c' l='35'>/* Stein&apos;s binary GCD algorithm:
 * https://en.wikipedia.org/wiki/Binary_GCD_algorithm */</doc>
<use f='ffmpeg/libavutil/rational.c' l='40' u='c' c='av_reduce'/>
<use f='ffmpeg/libavutil/rational.c' l='190' u='c' c='av_gcd_q'/>
<use f='ffmpeg/libavutil/rational.c' l='192' u='c' c='av_gcd_q'/>
