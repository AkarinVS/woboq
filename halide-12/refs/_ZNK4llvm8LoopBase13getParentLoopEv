<def f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='113' type='LoopT * llvm::LoopBase::getParentLoop() const'/>
<use f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='168' u='c' c='_ZNK4llvm8LoopBase11isOutermostEv'/>
<doc f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='105'>/// Return the parent loop if it exists or nullptr for top
  /// level loops.

  /// A loop is either top-level in a function (that is, it is not
  /// contained in any other loop) or it is entirely enclosed in
  /// some other loop.
  /// If a loop is top-level, it has no parent, otherwise its
  /// parent is the innermost loop in which it is enclosed.</doc>
