<inh f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='50' c='llvm::MemoryBuffer'/>
<def f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='161' ll='214'/>
<use f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='182' c='_ZN4llvm20WritableMemoryBuffer7getFileERKNS_5TwineElb'/>
<use f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='187' c='_ZN4llvm20WritableMemoryBuffer12getFileSliceERKNS_5TwineEmmb'/>
<use f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='194' c='_ZN4llvm20WritableMemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE'/>
<use f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='200' c='_ZN4llvm20WritableMemoryBuffer15getNewMemBufferEmRKNS_5TwineE'/>
<size>24</size>
<doc f='halide/llvm-install/include/llvm/Support/MemoryBuffer.h' l='157'>/// This class is an extension of MemoryBuffer, which allows copy-on-write
/// access to the underlying contents.  It only supports creation methods that
/// are guaranteed to produce a writable buffer.  For example, mapping a file
/// read-only is not supported.</doc>
<fun r='_ZN4llvm20WritableMemoryBufferC1Ev'/>
<fun r='_ZN4llvm20WritableMemoryBuffer14getBufferStartEv'/>
<fun r='_ZN4llvm20WritableMemoryBuffer12getBufferEndEv'/>
<fun r='_ZN4llvm20WritableMemoryBuffer9getBufferEv'/>
<fun r='_ZN4llvm20WritableMemoryBuffer7getFileERKNS_5TwineElb'/>
<fun r='_ZN4llvm20WritableMemoryBuffer12getFileSliceERKNS_5TwineEmmb'/>
<fun r='_ZN4llvm20WritableMemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE'/>
<fun r='_ZN4llvm20WritableMemoryBuffer15getNewMemBufferEmRKNS_5TwineE'/>
