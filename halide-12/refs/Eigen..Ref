<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='1005'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='1006'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/CoreEvaluators.h' l='1008'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/StableNorm.h' l='69' c='_ZN5Eigen8internal27stable_norm_impl_inner_stepERKT_RT0_S5_S5_'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Ref.h' l='18'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/Ref.h' l='195' ll='234'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Ref.h' l='196'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/Ref.h' l='237' ll='282'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Ref.h' l='238'/>
<use f='halide/build-apps/eigen/Eigen/src/LU/PartialPivLU.h' l='37'/>
<use f='halide/build-apps/eigen/Eigen/src/LU/PartialPivLU.h' l='344'/>
<use f='halide/build-apps/eigen/Eigen/src/LU/PartialPivLU.h' l='345'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/UpperBidiagonalization.h' l='156' c='_ZN5Eigen8internal37upperbidiagonalization_blocked_helperERT_PNS1_10RealScalarES4_lNS_3RefINS_6MatrixINS1_6ScalarELin1ELin1EXansr6traitsIS1_EE5FlagsL_2476613'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/UpperBidiagonalization.h' l='158' c='_ZN5Eigen8internal37upperbidiagonalization_blocked_helperERT_PNS1_10RealScalarES4_lNS_3RefINS_6MatrixINS1_6ScalarELin1ELin1EXansr6traitsIS1_EE5FlagsL_2476613'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/UpperBidiagonalization.h' l='167' c='_ZN5Eigen8internal37upperbidiagonalization_blocked_helperERT_PNS1_10RealScalarES4_lNS_3RefINS_6MatrixINS1_6ScalarELin1ELin1EXansr6traitsIS1_EE5FlagsL_2476613'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/UpperBidiagonalization.h' l='168' c='_ZN5Eigen8internal37upperbidiagonalization_blocked_helperERT_PNS1_10RealScalarES4_lNS_3RefINS_6MatrixINS1_6ScalarELin1ELin1EXansr6traitsIS1_EE5FlagsL_2476613'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/UpperBidiagonalization.h' l='169' c='_ZN5Eigen8internal37upperbidiagonalization_blocked_helperERT_PNS1_10RealScalarES4_lNS_3RefINS_6MatrixINS1_6ScalarELin1ELin1EXansr6traitsIS1_EE5FlagsL_2476613'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/BDCSVD.h' l='106'/>
<use f='halide/build-apps/eigen/Eigen/src/SVD/BDCSVD.h' l='107'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='614' c='_ZN5Eigen8internal30direct_selfadjoint_eigenvaluesIT_Li3ELb0EE14extract_kernelERNS2_10MatrixTypeENS_3RefINS2_14RealVectorTypeELi0ENS0_11conditionalIXs1095904'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='614' c='_ZN5Eigen8internal30direct_selfadjoint_eigenvaluesIT_Li3ELb0EE14extract_kernelERNS2_10MatrixTypeENS_3RefINS2_14RealVectorTypeELi0ENS0_11conditionalIXs1095904'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='24'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='44'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='45'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='53'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='72'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='73'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='122' ll='173'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='124'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='176' ll='239'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='178'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='253' ll='291'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='255'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='294' ll='347'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='296'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='354'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='355'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='357'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='358'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='364'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='365'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='367'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='368'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='374'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='375'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='377'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='378'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='384'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='385'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='387'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='388'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseBlock.h' l='128' c='_ZN5Eigen8internal24sparse_matrix_block_implaSERKNS_16SparseMatrixBaseITL0__EE'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='28'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='29'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='47' c='_ZN5Eigen8internal12SparseLUImpl10dfs_kernelET0_RNS_6MatrixIS2_Lin1ELi1ELi0ELin1ELi1EEERlS5_S5_NS_3RefIS4_Li0ENS0_11conditionalIXsrS4_21IsVectorAtComp6353350'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLUImpl.h' l='47' c='_ZN5Eigen8internal12SparseLUImpl10dfs_kernelET0_RNS_6MatrixIS2_Lin1ELi1ELi0ELin1ELi1EEERlS5_S5_NS_3RefIS4_Li0ENS0_11conditionalIXsrS4_21IsVectorAtComp6353350'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_panel_dfs.h' l='64' c='_ZN5Eigen8internal12SparseLUImpl10dfs_kernelET0_RNS_6MatrixIS2_Lin1ELi1ELi0ELin1ELi1EEERlS5_S5_NS_3RefIS4_Li0ENS0_11conditionalIXsrS4_21IsVectorAtComp6353350'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseLU/SparseLU_panel_dfs.h' l='64' c='_ZN5Eigen8internal12SparseLUImpl10dfs_kernelET0_RNS_6MatrixIS2_Lin1ELi1ELi0ELin1ELi1EEERlS5_S5_NS_3RefIS4_Li0ENS0_11conditionalIXsrS4_21IsVectorAtComp6353350'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h' l='31' c='_ZN5Eigen8internal22is_ref_compatible_impl4testERKNS_3RefIKTL0__Li0ENS0_11conditionalIXsrS4_21IsVectorAtCompileTimeENS_11InnerStrideILi1EEENS_11OuterS11497362'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h' l='54'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h' l='81' c='_ZN5Eigen8internal22generic_matrix_wrapperIT_Lb0EE4grabERKNS_9EigenBaseITL0__EE'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h' l='84' c='_ZN5Eigen8internal22generic_matrix_wrapperIT_Lb0EE4grabERKNS_3RefIKS2_Li0ENS0_11conditionalIXsrS2_21IsVectorAtCompileTimeENS_11InnerStrideILi1EEENS_1116117842'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h' l='89' c='_ZN5Eigen8internal22generic_matrix_wrapperIT_Lb0EE4grabERKNS_3RefIKS2_Li0ENS0_11conditionalIXsrS2_21IsVectorAtCompileTimeENS_11InnerStrideILi1EEENS_1116117842'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h' l='181' c='_ZN5Eigen18IncompleteCholesky10updateListENS_3RefIKNS_6MatrixINT1_15PermutationType12StorageIndexELin1ELi1ELi0ELin1ELi1EEELi0ENS_8internal11conditiona12525874'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h' l='181' c='_ZN5Eigen18IncompleteCholesky10updateListENS_3RefIKNS_6MatrixINT1_15PermutationType12StorageIndexELin1ELi1ELi0ELin1ELi1EEELi0ENS_8internal11conditiona12525874'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h' l='181' c='_ZN5Eigen18IncompleteCholesky10updateListENS_3RefIKNS_6MatrixINT1_15PermutationType12StorageIndexELin1ELi1ELi0ELin1ELi1EEELi0ENS_8internal11conditiona12525874'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h' l='346' c='_ZN5Eigen18IncompleteCholesky9factorizeERKTL0__'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h' l='347' c='_ZN5Eigen18IncompleteCholesky9factorizeERKTL0__'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h' l='373' c='_ZN5Eigen18IncompleteCholesky10updateListENS_3RefIKNS_6MatrixINT1_15PermutationType12StorageIndexELin1ELi1ELi0ELin1ELi1EEELi0ENS_8internal11conditiona12525874'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h' l='373' c='_ZN5Eigen18IncompleteCholesky10updateListENS_3RefIKNS_6MatrixINT1_15PermutationType12StorageIndexELin1ELi1ELi0ELin1ELi1EEELi0ENS_8internal11conditiona12525874'/>
<use f='halide/build-apps/eigen/Eigen/src/IterativeLinearSolvers/IncompleteCholesky.h' l='373' c='_ZN5Eigen18IncompleteCholesky10updateListENS_3RefIKNS_6MatrixINT1_15PermutationType12StorageIndexELin1ELi1ELi0ELin1ELi1EEELi0ENS_8internal11conditiona12525874'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Ref.h' l='124'>/** \class Ref
  * \ingroup Core_Module
  *
  * \brief A matrix or vector expression mapping an existing expression
  *
  * \tparam PlainObjectType the equivalent matrix type of the mapped data
  * \tparam Options specifies the pointer alignment in bytes. It can be: \c #Aligned128, , \c #Aligned64, \c #Aligned32, \c #Aligned16, \c #Aligned8 or \c #Unaligned.
  *                 The default is \c #Unaligned.
  * \tparam StrideType optionally specifies strides. By default, Ref implies a contiguous storage along the inner dimension (inner stride==1),
  *                   but accepts a variable outer stride (leading dimension).
  *                   This can be overridden by specifying strides.
  *                   The type passed here must be a specialization of the Stride template, see examples below.
  *
  * This class provides a way to write non-template functions taking Eigen objects as parameters while limiting the number of copies.
  * A Ref&lt;&gt; object can represent either a const expression or a l-value:
  * \code
  * // in-out argument:
  * void foo1(Ref&lt;VectorXf&gt; x);
  *
  * // read-only const argument:
  * void foo2(const Ref&lt;const VectorXf&gt;&amp; x);
  * \endcode
  *
  * In the in-out case, the input argument must satisfy the constraints of the actual Ref&lt;&gt; type, otherwise a compilation issue will be triggered.
  * By default, a Ref&lt;VectorXf&gt; can reference any dense vector expression of float having a contiguous memory layout.
  * Likewise, a Ref&lt;MatrixXf&gt; can reference any column-major dense matrix expression of float whose column&apos;s elements are contiguously stored with
  * the possibility to have a constant space in-between each column, i.e. the inner stride must be equal to 1, but the outer stride (or leading dimension)
  * can be greater than the number of rows.
  *
  * In the const case, if the input expression does not match the above requirement, then it is evaluated into a temporary before being passed to the function.
  * Here are some examples:
  * \code
  * MatrixXf A;
  * VectorXf a;
  * foo1(a.head());             // OK
  * foo1(A.col());              // OK
  * foo1(A.row());              // Compilation error because here innerstride!=1
  * foo2(A.row());              // Compilation error because A.row() is a 1xN object while foo2 is expecting a Nx1 object
  * foo2(A.row().transpose());  // The row is copied into a contiguous temporary
  * foo2(2*a);                  // The expression is evaluated into a temporary
  * foo2(A.col().segment(2,4)); // No temporary
  * \endcode
  *
  * The range of inputs that can be referenced without temporary can be enlarged using the last two template parameters.
  * Here is an example accepting an innerstride!=1:
  * \code
  * // in-out argument:
  * void foo3(Ref&lt;VectorXf,0,InnerStride&lt;&gt; &gt; x);
  * foo3(A.row());              // OK
  * \endcode
  * The downside here is that the function foo3 might be significantly slower than foo1 because it won&apos;t be able to exploit vectorization, and will involve more
  * expensive address computations even if the input is contiguously stored in memory. To overcome this issue, one might propose to overload internally calling a
  * template function, e.g.:
  * \code
  * // in the .h:
  * void foo(const Ref&lt;MatrixXf&gt;&amp; A);
  * void foo(const Ref&lt;MatrixXf,0,Stride&lt;&gt; &gt;&amp; A);
  *
  * // in the .cpp:
  * template&lt;typename TypeOfA&gt; void foo_impl(const TypeOfA&amp; A) {
  *     ... // crazy code goes here
  * }
  * void foo(const Ref&lt;MatrixXf&gt;&amp; A) { foo_impl(A); }
  * void foo(const Ref&lt;MatrixXf,0,Stride&lt;&gt; &gt;&amp; A) { foo_impl(A); }
  * \endcode
  *
  * See also the following stackoverflow questions for further references:
  *  - &lt;a href=&quot;http://stackoverflow.com/questions/21132538/correct-usage-of-the-eigenref-class&quot;&gt;Correct usage of the Eigen::Ref&lt;&gt; class&lt;/a&gt;
  *
  * \sa PlainObjectBase::Map(), \ref TopicStorageOrders
  */</doc>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Ref.h' l='236'>// this is the const ref version</doc>
<doc f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='175'>// this is the const ref version</doc>
<doc f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseRef.h' l='293'>// this is the const ref version</doc>
<fun r='_ZN5Eigen3RefC1ERKNS_15PlainObjectBaseITL0__EEPNS_8internal9enable_ifIXcvbsr6Traits5matchIS2_EE18MatchAtCompileTimeES2_E4typeE'/>
<fun r='_ZN5Eigen3RefC1ERNS_15PlainObjectBaseITL0__EEPNS_8internal9enable_ifIXcvbsr6Traits5matchIS2_EE18MatchAtCompileTimeES2_E4typeE'/>
<fun r='_ZN5Eigen3RefC1ERKNS_9DenseBaseITL0__EEPNS_8internal9enable_ifIXcvbsr6Traits5matchIS2_EE18MatchAtCompileTimeES2_E4typeE'/>
<fun r='_ZN5Eigen3RefC1ERKNS_3RefIT_XT0_ET1_EE'/>
<fun r='_ZN5Eigen3RefIKT_XT0_ET1_EC1ERKNS_9DenseBaseITL0__EEPNS_8internal9enable_ifIXcvbsr6Traits5matchIS6_EE15ScalarTypeMatchES6_E4typeE'/>
<fun r='_ZN5Eigen3RefIKT_XT0_ET1_EC1ERKNS0_IS2_XT0_ES3_EE'/>
<fun r='_ZN5Eigen3RefIKT_XT0_ET1_EC1ERKNS_7RefBaseITL0__EE'/>
<fun r='_ZN5Eigen3RefIKT_XT0_ET1_E9constructERKTL0__NS_8internal9true_typeE'/>
<fun r='_ZN5Eigen3RefIKT_XT0_ET1_E9constructERKTL0__NS_8internal10false_typeE'/>
<mbr r='Eigen::Ref::m_object' t='TPlainObjectType'/>
<fun r='_ZN5Eigen3RefINS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_EC1ERKNS1_IS2_XTL0__ES3_EE'/>
<fun r='_ZN5Eigen3RefINS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_EC1ERKNS_18MappedSparseMatrixIS2_XTL0__ES3_EE'/>
<fun r='_ZN5Eigen3RefINS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_EC1ERNS1_IS2_XTL0__ES3_EE'/>
<fun r='_ZN5Eigen3RefINS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_EC1ERNS_18MappedSparseMatrixIS2_XTL0__ES3_EE'/>
<fun r='_ZN5Eigen3RefINS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_EC1ERKNS_20SparseCompressedBaseITL0__EE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_EC1ERKNS_16SparseMatrixBaseITL0__EE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_EC1ERKNS0_IS5_XT2_ES6_EE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_EC1ERKNS_7RefBaseITL0__EE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_ED1Ev'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_E9constructERKTL0__NS_8internal9true_typeE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseMatrixIT_XT0_ET1_EEXT2_ET3_E9constructERKTL0__NS_8internal10false_typeE'/>
<mbr r='Eigen::Ref::m_storage' t='typename internal::aligned_storage&lt;sizeof(TPlainObjectType), alignof(TPlainObjectType)&gt;::type'/>
<mbr r='Eigen::Ref::m_hasCopy' t='bool'/>
<fun r='_ZN5Eigen3RefINS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_EC1ERKNS1_IS2_XTL0__ES3_EE'/>
<fun r='_ZN5Eigen3RefINS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_EC1ERNS1_IS2_XTL0__ES3_EE'/>
<fun r='_ZN5Eigen3RefINS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_EC1ERKNS_20SparseCompressedBaseITL0__EE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_EC1ERKNS_16SparseMatrixBaseITL0__EE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_EC1ERKNS0_IS5_XT2_ES6_EE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_EC1ERKNS_7RefBaseITL0__EE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_ED1Ev'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_E9constructERKTL0__NS_8internal9true_typeE'/>
<fun r='_ZN5Eigen3RefIKNS_12SparseVectorIT_XT0_ET1_EEXT2_ET3_E9constructERKTL0__NS_8internal10false_typeE'/>
<mbr r='Eigen::Ref::m_storage' t='typename internal::aligned_storage&lt;sizeof(TPlainObjectType), alignof(TPlainObjectType)&gt;::type'/>
<mbr r='Eigen::Ref::m_hasCopy' t='bool'/>
