<def f='halide/halide-install/include/Halide.h' l='13575' ll='13580' type='bool Halide::ExternalCode::is_for_cpu_target(const Halide::Target &amp; host) const'/>
<doc f='halide/halide-install/include/Halide.h' l='13563'>/** Return true if this container holds llvm bitcode linkable with
     * code generated for the target argument. The matching is done
     * on the architecture, bit width, and operating system
     * only. Features are ignored. If the container is for
     * Target::ArchUnkonwn, it applies to all architectures -- meaning
     * it is generic llvm bitcode. If the OS is OSUnknown, it applies
     * to all operationg systems. The bit width must match.
     *
     * Ignoring feature flags isn&apos;t too important since generally
     * ExternalCode will be constructed in a Generator which has
     * access to the feature flags in effect and can select code
     * appropriately. */</doc>
<def f='halide/build/include/Halide.h' l='13575' ll='13580' type='bool Halide::ExternalCode::is_for_cpu_target(const Halide::Target &amp; host) const'/>
<doc f='halide/build/include/Halide.h' l='13563'>/** Return true if this container holds llvm bitcode linkable with
     * code generated for the target argument. The matching is done
     * on the architecture, bit width, and operating system
     * only. Features are ignored. If the container is for
     * Target::ArchUnkonwn, it applies to all architectures -- meaning
     * it is generic llvm bitcode. If the OS is OSUnknown, it applies
     * to all operationg systems. The bit width must match.
     *
     * Ignoring feature flags isn&apos;t too important since generally
     * ExternalCode will be constructed in a Generator which has
     * access to the feature flags in effect and can select code
     * appropriately. */</doc>
<def f='halide/src/ExternalCode.h' l='102' ll='107' type='bool Halide::ExternalCode::is_for_cpu_target(const Halide::Target &amp; host) const'/>
<doc f='halide/src/ExternalCode.h' l='90'>/** Return true if this container holds llvm bitcode linkable with
     * code generated for the target argument. The matching is done
     * on the architecture, bit width, and operating system
     * only. Features are ignored. If the container is for
     * Target::ArchUnkonwn, it applies to all architectures -- meaning
     * it is generic llvm bitcode. If the OS is OSUnknown, it applies
     * to all operationg systems. The bit width must match.
     *
     * Ignoring feature flags isn&apos;t too important since generally
     * ExternalCode will be constructed in a Generator which has
     * access to the feature flags in effect and can select code
     * appropriately. */</doc>
<use f='halide/src/CodeGen_LLVM.cpp' l='326' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM17add_external_codeERKNS_6ModuleE'/>
