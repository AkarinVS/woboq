<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/tensor_utils_common.h' l='123' type='void tflite::tensor_utils::MatrixBatchVectorMultiplyAccumulate(const int8_t *__restrict matrix, const int m_rows, const int m_cols, const int8_t *__restrict vectors, const float *__restrict scaling_factors, int n_batch, float *__restrict result)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/tensor_utils_common.h' l='116'>// Same as the function above, but for values quantized using symmetric
// quantization (e.g. by calling SymmetricQuantizeFloats).
// The passed scaling factors is a buffer of the quantization scaling factors
// that will be used to dequentize the products into the final result buffer.
// These scaling factors are the multiplication of the matrix scaling factor
// by the vector&apos;s scaling factor, one per batch (i.e. this allows quantizing
// each batch in the batch-vector matrix independently).</doc>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/reference/portable_tensor_utils.h' l='65' ll='73' type='void tflite::tensor_utils::MatrixBatchVectorMultiplyAccumulate(const int8_t *__restrict matrix, const int m_rows, const int m_cols, const int8_t *__restrict vector, const float * scaling_factors, int n_batch, float *__restrict result)'/>
