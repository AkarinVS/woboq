<dec f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.h' l='217' type='int absl::lts_2020_02_25::DefaultStackUnwinder(void ** pcs, int * sizes, int max_depth, int skip_count, const void * uc, int * min_dropped_frames)'/>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.h' l='192'>// DefaultStackUnwinder()
//
// Records program counter values of up to `max_depth` frames, skipping the most
// recent `skip_count` stack frames, and stores their corresponding values in
// `pcs`. (Note that the frame generated for this call itself is also skipped.)
// This function acts as a generic stack-unwinder; prefer usage of the more
// specific `GetStack{Trace,Frames}{,WithContext}()` functions above.
//
// If you have set your own stack unwinder (with the `SetStackUnwinder()`
// function above, you can still get the default stack unwinder by calling
// `DefaultStackUnwinder()`, which will ignore any previously set stack unwinder
// and use the default one instead.
//
// Because this function is generic, only `pcs` is guaranteed to be non-null
// upon return. It is legal for `sizes`, `uc`, and `min_dropped_frames` to all
// be null when called.
//
// The semantics are the same as the corresponding `GetStack*()` function in the
// case where `absl::SetStackUnwinder()` was never called. Equivalents are:
//
//                       null sizes         |        non-nullptr sizes
//             |==========================================================|
//     null uc | GetStackTrace()            | GetStackFrames()            |
// non-null uc | GetStackTraceWithContext() | GetStackFramesWithContext() |
//             |==========================================================|</doc>
<def f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.cc' l='116' ll='137' type='int absl::lts_2020_02_25::DefaultStackUnwinder(void ** pcs, int * sizes, int depth, int skip, const void * uc, int * min_dropped_frames)'/>
