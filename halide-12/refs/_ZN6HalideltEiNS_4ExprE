<dec f='halide/halide-install/include/Halide.h' l='7357' type='Halide::Expr Halide::operator&lt;(int a, Halide::Expr b)'/>
<doc f='halide/halide-install/include/Halide.h' l='7353'>/** Return a boolean expression that tests whether a constant integer is
 * less than an expression. Coerces the integer to the type of
 * the expression. Errors if the integer is not representable in that
 * type. */</doc>
<dec f='halide/build/include/Halide.h' l='7357' type='Halide::Expr Halide::operator&lt;(int a, Halide::Expr b)'/>
<doc f='halide/build/include/Halide.h' l='7353'>/** Return a boolean expression that tests whether a constant integer is
 * less than an expression. Coerces the integer to the type of
 * the expression. Errors if the integer is not representable in that
 * type. */</doc>
<dec f='halide/src/IROperator.h' l='552' type='Halide::Expr Halide::operator&lt;(int a, Halide::Expr b)'/>
<doc f='halide/src/IROperator.h' l='548'>/** Return a boolean expression that tests whether a constant integer is
 * less than an expression. Coerces the integer to the type of
 * the expression. Errors if the integer is not representable in that
 * type. */</doc>
<def f='halide/src/IROperator.cpp' l='1702' ll='1707' type='Halide::Expr Halide::operator&lt;(int a, Halide::Expr b)'/>
<use f='halide/src/Monotonic.cpp' l='742' u='c' c='_ZN6Halide8Internal17is_monotonic_testEv'/>
<use f='halide/src/Simplify_Stmts.cpp' l='144' u='c' c='_ZN6Halide8Internal8Simplify5visitEPKNS0_10IfThenElseE'/>
<use f='halide/src/Simplify_Stmts.cpp' l='228' u='c' c='_ZN6Halide8Internal8Simplify5visitEPKNS0_3ForE'/>
<use f='halide/src/Simplify_Stmts.cpp' l='261' u='c' c='_ZN6Halide8Internal8Simplify5visitEPKNS0_3ForE'/>
<use f='halide/src/Solve.cpp' l='1374' u='c' c='_ZN6Halide8Internal10solve_testEv'/>
<use f='halide/src/UnrollLoops.cpp' l='91' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111UnrollLoops5visitEPKNS0_3ForE'/>
