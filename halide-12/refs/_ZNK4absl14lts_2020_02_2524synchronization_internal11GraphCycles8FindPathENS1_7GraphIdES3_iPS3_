<dec f='halide/build-apps/abseil-cpp/absl/synchronization/internal/graphcycles.h' l='110' type='int absl::lts_2020_02_25::synchronization_internal::GraphCycles::FindPath(absl::lts_2020_02_25::synchronization_internal::GraphId source, absl::lts_2020_02_25::synchronization_internal::GraphId dest, int max_path_len, absl::lts_2020_02_25::synchronization_internal::GraphId * path) const'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/internal/graphcycles.cc' l='624' ll='666' type='int absl::lts_2020_02_25::synchronization_internal::GraphCycles::FindPath(absl::lts_2020_02_25::synchronization_internal::GraphId idx, absl::lts_2020_02_25::synchronization_internal::GraphId idy, int max_path_len, absl::lts_2020_02_25::synchronization_internal::GraphId * path) const'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/graphcycles.cc' l='669' u='c' c='_ZNK4absl14lts_2020_02_2524synchronization_internal11GraphCycles11IsReachableENS1_7GraphIdES3_'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/internal/graphcycles.h' l='98'>// Find a path from &quot;source&quot; to &quot;dest&quot;.  If such a path exists,
  // place the nodes on the path in the array path[], and return
  // the number of nodes on the path.  If the path is longer than
  // max_path_len nodes, only the first max_path_len nodes are placed
  // in path[].  The client should compare the return value with
  // max_path_len&quot; to see when this occurs.  If no path exists, return
  // 0.  Any valid path stored in path[] will start with &quot;source&quot; and
  // end with &quot;dest&quot;.  There is no guarantee that the path is the
  // shortest, but no node will appear twice in the path, except the
  // source and destination node if they are identical; therefore, the
  // return value is at most one greater than the number of nodes in
  // the graph.</doc>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1368' u='c' c='_ZN4absl14lts_2020_02_25L13DeadlockCheckEPNS0_5MutexE'/>
