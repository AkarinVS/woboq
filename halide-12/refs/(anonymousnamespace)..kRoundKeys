<def f='halide/build-apps/abseil-cpp/absl/random/internal/randen-keys.inc' l='67' type='const size_t'/>
<use f='halide/build-apps/abseil-cpp/absl/random/internal/randen-keys.inc' l='69'/>
<use f='halide/build-apps/abseil-cpp/absl/random/internal/randen_hwaes.cc' l='388' u='r'/>
<doc f='halide/build-apps/abseil-cpp/absl/random/internal/randen-keys.inc' l='27'>/*
python &lt;&lt; EOF
&quot;&quot;&quot;Generates Randen round keys array from pi-hex.62500.txt file.&quot;&quot;&quot;
import binascii

KEYS = 136

def chunks(l, n):
    &quot;&quot;&quot;Yield successive n-sized chunks from l.&quot;&quot;&quot;
    for i in range(0, len(l), n):
        yield l[i:i + n]

def pairwise(t):
    &quot;&quot;&quot;Transforms sequence into sequence of pairs.&quot;&quot;&quot;
    it = iter(t)
    return zip(it,it)

def digits_from_pi():
  &quot;&quot;&quot;Reads digits from hexpi.sourceforge.net file.&quot;&quot;&quot;
  with open(&quot;pi-hex.62500.txt&quot;) as file:
    return file.read()

def digits_from_urandom():
  &quot;&quot;&quot;Reads digits from /dev/urandom.&quot;&quot;&quot;
  with open(&quot;/dev/urandom&quot;) as file:
    return binascii.hexlify(file.read(KEYS * 16))

digits = digits_from_pi()
print(&quot;static constexpr const size_t kRoundKeys = {0};\n&quot;.format(KEYS))
print(&quot;alignas(16) constexpr const u64x2 round_keys[kRoundKeys] = {&quot;)

for i, (hi, lo) in zip(range(KEYS), pairwise(chunks(digits, 16))):
  hi = &quot;0x{0}ull&quot;.format(hi)
  lo = &quot;0x{0}ull&quot;.format(lo)
  print(&quot;  u64x2({0}, {1}){2}&quot;.format(hi, lo, &apos;,&apos; if i+1 &lt; KEYS else &apos;&apos;))

print(&quot;};&quot;)
EOF
*/</doc>
<use f='halide/build-apps/abseil-cpp/absl/random/internal/randen_slow.cc' l='359' u='r'/>
