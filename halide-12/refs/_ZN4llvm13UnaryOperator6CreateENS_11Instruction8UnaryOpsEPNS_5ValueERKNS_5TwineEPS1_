<dec f='halide/llvm-install/include/llvm/IR/InstrTypes.h' l='124' type='static llvm::UnaryOperator * llvm::UnaryOperator::Create(llvm::Instruction::UnaryOps Op, llvm::Value * S, const llvm::Twine &amp; Name = llvm::Twine(), llvm::Instruction * InsertBefore = nullptr)'/>
<use f='halide/llvm-install/include/llvm/IR/Instruction.def' l='142' macro='1' u='c' c='_ZN4llvm13UnaryOperator10CreateFNegEPNS_5ValueERKNS_5TwineE'/>
<use f='halide/llvm-install/include/llvm/IR/Instruction.def' l='142' macro='1' u='c' c='_ZN4llvm13UnaryOperator10CreateFNegEPNS_5ValueERKNS_5TwineEPNS_11InstructionE'/>
<use f='halide/llvm-install/include/llvm/IR/InstrTypes.h' l='161' u='c' c='_ZN4llvm13UnaryOperator21CreateWithCopiedFlagsENS_11Instruction8UnaryOpsEPNS_5ValueEPS1_RKNS_5TwineES5_'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='1676' u='c' c='_ZN4llvm13IRBuilderBase10CreateUnOpENS_11Instruction8UnaryOpsEPNS_5ValueERKNS_5TwineEPNS_6MDNodeE'/>
<doc f='halide/llvm-install/include/llvm/IR/InstrTypes.h' l='119'>/// Construct a unary instruction, given the opcode and an operand.
  /// Optionally (if InstBefore is specified) insert the instruction
  /// into a BasicBlock right before the specified instruction.  The specified
  /// Instruction is allowed to be a dereferenced end iterator.
  ///</doc>
