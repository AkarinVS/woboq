<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/NonBlockingThreadPool.h' l='290' u='c' c='_ZN14EigenForTFLite15ThreadPoolTempl10WorkerLoopEi'/>
<use f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/NonBlockingThreadPool.h' l='318' u='c' c='_ZN14EigenForTFLite15ThreadPoolTempl10WorkerLoopEi'/>
<def f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/NonBlockingThreadPool.h' l='382' ll='427' type='bool EigenForTFLite::ThreadPoolTempl::WaitForWork(EventCount::Waiter * waiter, EigenForTFLite::ThreadPoolTempl::Task * t)'/>
<doc f='halide/build-apps/eigen/unsupported/Eigen/CXX11/src/ThreadPool/NonBlockingThreadPool.h' l='379'>// WaitForWork blocks until new work is available (returns true), or if it is
  // time to exit (returns false). Can optionally return a task to execute in t
  // (in such case t.f != nullptr on return).</doc>
