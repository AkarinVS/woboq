<dec f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrixBase.h' l='383' type='const SparseView&lt;Derived&gt; Eigen::SparseMatrixBase::pruned(const Eigen::SparseMatrixBase::Scalar &amp; reference = Eigen::SparseMatrixBase::Scalar(0), const Eigen::SparseMatrixBase::RealScalar &amp; epsilon = NumTraits&lt;Scalar&gt;::dummy_precision()) const'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseView.h' l='244' ll='250' type='const SparseView&lt;Derived&gt; Eigen::SparseMatrixBase::pruned(const Eigen::SparseMatrixBase::Scalar &amp; reference = Eigen::SparseMatrixBase::Scalar(0), const Eigen::SparseMatrixBase::RealScalar &amp; epsilon = NumTraits&lt;Scalar&gt;::dummy_precision()) const'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseView.h' l='232'>/** \returns an expression of \c *this with values smaller than
  * \a reference * \a epsilon removed.
  *
  * This method is typically used in conjunction with the product of two sparse matrices
  * to automatically prune the smallest values as follows:
  * \code
  * C = (A*B).pruned();             // suppress numerical zeros (exact)
  * C = (A*B).pruned(ref);
  * C = (A*B).pruned(ref,epsilon);
  * \endcode
  * where \c ref is a meaningful non zero reference value.
  * */</doc>
