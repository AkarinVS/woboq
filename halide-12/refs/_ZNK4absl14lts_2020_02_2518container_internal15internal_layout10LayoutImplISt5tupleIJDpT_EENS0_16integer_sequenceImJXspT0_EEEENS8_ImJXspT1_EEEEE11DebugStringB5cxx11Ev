<def f='halide/build-apps/abseil-cpp/absl/container/internal/layout.h' l='644' ll='661' type='std::string absl::lts_2020_02_25::container_internal::internal_layout::LayoutImpl&lt;tuple&lt;type-parameter-0-0...&gt;, integer_sequence&lt;unsigned long, I...&gt;, integer_sequence&lt;unsigned long, Indexes...&gt; &gt;::DebugString() const'/>
<doc f='halide/build-apps/abseil-cpp/absl/container/internal/layout.h' l='628'>// Human-readable description of the memory layout. Useful for debugging.
  // Slow.
  //
  //   // char[5], 3 bytes of padding, int[3], 4 bytes of padding, followed
  //   // by an unknown number of doubles.
  //   auto x = Layout&lt;char, int, double&gt;::Partial(5, 3);
  //   assert(x.DebugString() ==
  //          &quot;@0&lt;char&gt;(1)[5]; @8&lt;int&gt;(4)[3]; @24&lt;double&gt;(8)&quot;);
  //
  // Each field is in the following format: @offset&lt;type&gt;(sizeof)[size] (&lt;type&gt;
  // may be missing depending on the target platform). For example,
  // @8&lt;int&gt;(4)[3] means that at offset 8 we have an array of ints, where each
  // int is 4 bytes, and we have 3 of those ints. The size of the last field may
  // be missing (as in the example above). Only fields with known offsets are
  // described. Type names may differ across platforms: one compiler might
  // produce &quot;unsigned*&quot; where another produces &quot;unsigned int *&quot;.</doc>
