<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1092' ll='1095' type='static typename std::enable_if&lt;std::is_floating_point&lt;U&gt;::value, handle&gt;::type pybind11::detail::type_caster&lt;type-parameter-0-0, typename enable_if&lt;std::is_arithmetic&lt;T&gt;::value &amp;&amp; !is_std_char_type&lt;T&gt;::value, void&gt;::type&gt;::cast(U src, pybind11::return_value_policy , pybind11::handle )'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1098' ll='1101' type='static typename std::enable_if&lt;!std::is_floating_point&lt;U&gt;::value &amp;&amp; std::is_signed&lt;U&gt;::value &amp;&amp; (sizeof(U) &lt;= sizeof(long)), handle&gt;::type pybind11::detail::type_caster&lt;type-parameter-0-0, typename enable_if&lt;std::is_arithmetic&lt;T&gt;::value &amp;&amp; !is_std_char_type&lt;T&gt;::value, void&gt;::type&gt;::cast(U src, pybind11::return_value_policy , pybind11::handle )'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1104' ll='1107' type='static typename std::enable_if&lt;!std::is_floating_point&lt;U&gt;::value &amp;&amp; std::is_unsigned&lt;U&gt;::value &amp;&amp; (sizeof(U) &lt;= sizeof(unsigned long)), handle&gt;::type pybind11::detail::type_caster&lt;type-parameter-0-0, typename enable_if&lt;std::is_arithmetic&lt;T&gt;::value &amp;&amp; !is_std_char_type&lt;T&gt;::value, void&gt;::type&gt;::cast(U src, pybind11::return_value_policy , pybind11::handle )'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1110' ll='1113' type='static typename std::enable_if&lt;!std::is_floating_point&lt;U&gt;::value &amp;&amp; std::is_signed&lt;U&gt;::value &amp;&amp; (sizeof(U) &gt; sizeof(long)), handle&gt;::type pybind11::detail::type_caster&lt;type-parameter-0-0, typename enable_if&lt;std::is_arithmetic&lt;T&gt;::value &amp;&amp; !is_std_char_type&lt;T&gt;::value, void&gt;::type&gt;::cast(U src, pybind11::return_value_policy , pybind11::handle )'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1116' ll='1119' type='static typename std::enable_if&lt;!std::is_floating_point&lt;U&gt;::value &amp;&amp; std::is_unsigned&lt;U&gt;::value &amp;&amp; (sizeof(U) &gt; sizeof(unsigned long)), handle&gt;::type pybind11::detail::type_caster&lt;type-parameter-0-0, typename enable_if&lt;std::is_arithmetic&lt;T&gt;::value &amp;&amp; !is_std_char_type&lt;T&gt;::value, void&gt;::type&gt;::cast(U src, pybind11::return_value_policy , pybind11::handle )'/>
