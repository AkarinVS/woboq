<use f='halide/llvm-install/include/llvm/Target/TargetMachine.h' l='319' c='_ZN4llvm13TargetMachine19getTargetIRAnalysisEv'/>
<inh f='halide/llvm-install/include/llvm/IR/PassManager.h' l='391' c='llvm::AnalysisInfoMixin'/>
<def f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2231' ll='2281'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2231'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2248' c='_ZN4llvm16TargetIRAnalysisC1ERKS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2250' c='_ZN4llvm16TargetIRAnalysisC1EOS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2252' c='_ZN4llvm16TargetIRAnalysisaSERKS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2252' c='_ZN4llvm16TargetIRAnalysisaSERKS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2256' c='_ZN4llvm16TargetIRAnalysisaSEOS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2256' c='_ZN4llvm16TargetIRAnalysisaSEOS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2264'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2288'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2302' c='_ZN4llvm30TargetTransformInfoWrapperPassC1ENS_16TargetIRAnalysisE'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2311' c='_ZN4llvm36createTargetTransformInfoWrapperPassENS_16TargetIRAnalysisE'/>
<size>32</size>
<doc f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2220'>/// Analysis pass providing the \c TargetTransformInfo.
///
/// The core idea of the TargetIRAnalysis is to expose an interface through
/// which LLVM targets can analyze and provide information about the middle
/// end&apos;s target-independent IR. This supports use cases such as target-aware
/// cost modeling of IR constructs.
///
/// This is a function analysis because much of the cost modeling for targets
/// is done in a subtarget specific way and LLVM supports compiling different
/// functions targeting different subtargets in order to support runtime
/// dispatch according to the observed subtarget.</doc>
<fun r='_ZN4llvm16TargetIRAnalysisC1Ev'/>
<fun r='_ZN4llvm16TargetIRAnalysisC1ESt8functionIFNS_19TargetTransformInfoERKNS_8FunctionEEE'/>
<fun r='_ZN4llvm16TargetIRAnalysisC1ERKS0_'/>
<fun r='_ZN4llvm16TargetIRAnalysisC1EOS0_'/>
<fun r='_ZN4llvm16TargetIRAnalysisaSERKS0_'/>
<fun r='_ZN4llvm16TargetIRAnalysisaSEOS0_'/>
<fun r='_ZN4llvm16TargetIRAnalysis3runERKNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<smbr r='llvm::TargetIRAnalysis::Key' t='llvm::AnalysisKey'/>
<mbr r='llvm::TargetIRAnalysis::TTICallback' o='0' t='std::function&lt;Result (const Function &amp;)&gt;'/>
<fun r='_ZN4llvm16TargetIRAnalysis13getDefaultTTIERKNS_8FunctionE'/>
