<dec f='halide/llvm-install/include/llvm/Analysis/OptimizationRemarkEmitter.h' l='49' type='void llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(const llvm::Function * F)'/>
<doc f='halide/llvm-install/include/llvm/Analysis/OptimizationRemarkEmitter.h' l='38'>/// This variant can be used to generate ORE on demand (without the
  /// analysis pass).
  ///
  /// Note that this ctor has a very different cost depending on whether
  /// F-&gt;getContext().getDiagnosticsHotnessRequested() is on or not.  If it&apos;s off
  /// the operation is free.
  ///
  /// Whereas if DiagnosticsHotnessRequested is on, it is fairly expensive
  /// operation since BFI and all its required analyses are computed.  This is
  /// for example useful for CGSCC passes that can&apos;t use function analyses
  /// passes in the old PM.</doc>
