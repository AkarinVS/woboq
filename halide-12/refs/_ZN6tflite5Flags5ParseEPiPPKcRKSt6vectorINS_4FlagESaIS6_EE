<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/tools/command_line_flags.h' l='136' type='static bool tflite::Flags::Parse(int * argc, const char ** argv, const std::vector&lt;Flag&gt; &amp; flag_list)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/tools/command_line_flags.h' l='123'>// Parse the command line represented by argv[0, ..., (*argc)-1] to find flag
  // instances matching flags in flaglist[].  Update the variables associated
  // with matching flags, and remove the matching arguments from (*argc, argv).
  // Return true iff all recognized flag values were parsed correctly, and the
  // first remaining argument is not &quot;--help&quot;.
  // Note:
  // 1. when there are duplicate args in argv for the same flag, the flag value
  // and the parse result will be based on the 1st arg.
  // 2. when there are duplicate flags in flag_list (i.e. two flags having the
  // same name), all of them will be checked against the arg list and the parse
  // result will be false if any of the parsing fails.
  // See *Duplicate* unit tests in command_line_flags_test.cc for the
  // illustration of such behaviors.</doc>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/examples/label_image/label_image.cc' l='84' u='c' c='_ZN6tflite11label_image17DelegateProviders19InitFromCmdlineArgsEPiPPKc'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/tools/benchmark/benchmark_model.cc' l='248' u='c' c='_ZN6tflite9benchmark14BenchmarkModel10ParseFlagsEPiPPc'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/tools/benchmark/benchmark_performance_options.cc' l='158' u='c' c='_ZN6tflite9benchmark27BenchmarkPerformanceOptions10ParseFlagsEPiPPc'/>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/tools/command_line_flags.cc' l='166' ll='269' type='static bool tflite::Flags::Parse(int * argc, const char ** argv, const std::vector&lt;Flag&gt; &amp; flag_list)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/tools/command_line_flags.cc' l='166'>/*static*/</doc>
