<dec f='halide/build-apps/eigen/Eigen/src/Core/VectorwiseOp.h' l='554' type='const Eigen::VectorwiseOp::ReplicateReturnType Eigen::VectorwiseOp::replicate(Eigen::VectorwiseOp::Index factor) const'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/VectorwiseOp.h' l='566' ll='572' type='const Replicate&lt;ExpressionType, isVertical * Factor + isHorizontal, isHorizontal * Factor + isVertical&gt; Eigen::VectorwiseOp::replicate(Eigen::VectorwiseOp::Index factor = Factor) const'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/Replicate.h' l='132' ll='138' type='const typename VectorwiseOp&lt;ExpressionType, Direction&gt;::ReplicateReturnType Eigen::VectorwiseOp::replicate(Eigen::VectorwiseOp::Index factor) const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/VectorwiseOp.h' l='556'>/**
      * \return an expression of the replication of each column (or row) of \c *this
      *
      * Example: \include DirectionWise_replicate.cpp
      * Output: \verbinclude DirectionWise_replicate.out
      *
      * \sa VectorwiseOp::replicate(Index), DenseBase::replicate(), class Replicate
      */
    // NOTE implemented here because of sunstudio&apos;s compilation errors
    // isVertical*Factor+isHorizontal instead of (isVertical?Factor:1) to handle CUDA bug with ternary operator</doc>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Replicate.h' l='124'>/**
  * \return an expression of the replication of each column (or row) of \c *this
  *
  * Example: \include DirectionWise_replicate_int.cpp
  * Output: \verbinclude DirectionWise_replicate_int.out
  *
  * \sa VectorwiseOp::replicate(), DenseBase::replicate(), class Replicate
  */</doc>
