<def f='halide/build-apps/abseil-cpp/absl/random/internal/randen.h' l='34' ll='96'/>
<use f='halide/build-apps/abseil-cpp/absl/random/internal/pool_urbg.cc' l='80'/>
<size>16</size>
<doc f='halide/build-apps/abseil-cpp/absl/random/internal/randen.h' l='29'>// RANDen = RANDom generator or beetroots in Swiss German.
// &apos;Strong&apos; (well-distributed, unpredictable, backtracking-resistant) random
// generator, faster in some benchmarks than std::mt19937_64 and pcg64_c32.
//
// Randen implements the basic state manipulation methods.</doc>
<smbr r='absl::lts_2020_02_25::random_internal::Randen::kStateBytes' t='const size_t'/>
<smbr r='absl::lts_2020_02_25::random_internal::Randen::kCapacityBytes' t='const size_t'/>
<smbr r='absl::lts_2020_02_25::random_internal::Randen::kSeedBytes' t='const size_t'/>
<fun r='_ZN4absl14lts_2020_02_2515random_internal6RandenD1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2515random_internal6RandenC1Ev'/>
<fun r='_ZNK4absl14lts_2020_02_2515random_internal6Randen8GenerateERAT0__T_'/>
<fun r='_ZNK4absl14lts_2020_02_2515random_internal6Randen6AbsorbERAT0__KT_RAT2__T1_'/>
<mbr r='absl::lts_2020_02_25::random_internal::Randen::keys_' o='0' t='const void *'/>
<mbr r='absl::lts_2020_02_25::random_internal::Randen::has_crypto_' o='64' t='bool'/>
