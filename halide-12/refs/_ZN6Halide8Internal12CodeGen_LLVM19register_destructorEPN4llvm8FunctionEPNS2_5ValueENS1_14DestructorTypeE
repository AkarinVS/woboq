<dec f='halide/halide-install/include/Halide.h' l='19984' type='llvm::Value * Halide::Internal::CodeGen_LLVM::register_destructor(llvm::Function * destructor_fn, llvm::Value * obj, Halide::Internal::CodeGen_LLVM::DestructorType when)'/>
<doc f='halide/halide-install/include/Halide.h' l='19974'>/* Call this at the location of object creation to register how an
     * object should be destroyed. This does three things:
     * 1) Emits code here that puts the object in a unique
     * null-initialized stack slot
     * 2) Adds an instruction to the destructor block that calls the
     * destructor on that stack slot if it&apos;s not null.
     * 3) Returns that stack slot, so you can neuter the destructor
     * (by storing null to the stack slot) or destroy the object early
     * (by calling trigger_destructor).
     */</doc>
<dec f='halide/build/include/Halide.h' l='19984' type='llvm::Value * Halide::Internal::CodeGen_LLVM::register_destructor(llvm::Function * destructor_fn, llvm::Value * obj, Halide::Internal::CodeGen_LLVM::DestructorType when)'/>
<doc f='halide/build/include/Halide.h' l='19974'>/* Call this at the location of object creation to register how an
     * object should be destroyed. This does three things:
     * 1) Emits code here that puts the object in a unique
     * null-initialized stack slot
     * 2) Adds an instruction to the destructor block that calls the
     * destructor on that stack slot if it&apos;s not null.
     * 3) Returns that stack slot, so you can neuter the destructor
     * (by storing null to the stack slot) or destroy the object early
     * (by calling trigger_destructor).
     */</doc>
<dec f='halide/src/CodeGen_LLVM.h' l='245' type='llvm::Value * Halide::Internal::CodeGen_LLVM::register_destructor(llvm::Function * destructor_fn, llvm::Value * obj, Halide::Internal::CodeGen_LLVM::DestructorType when)'/>
<doc f='halide/src/CodeGen_LLVM.h' l='235'>/* Call this at the location of object creation to register how an
     * object should be destroyed. This does three things:
     * 1) Emits code here that puts the object in a unique
     * null-initialized stack slot
     * 2) Adds an instruction to the destructor block that calls the
     * destructor on that stack slot if it&apos;s not null.
     * 3) Returns that stack slot, so you can neuter the destructor
     * (by storing null to the stack slot) or destroy the object early
     * (by calling trigger_destructor).
     */</doc>
<use f='halide/src/CodeGen_Hexagon.cpp' l='2241' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_115CodeGen_Hexagon5visitEPKNS0_8AllocateE'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='638' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM12compile_funcERKNS0_11LoweredFuncERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_'/>
<def f='halide/src/CodeGen_LLVM.cpp' l='683' ll='738' type='llvm::Value * Halide::Internal::CodeGen_LLVM::register_destructor(llvm::Function * destructor_fn, llvm::Value * obj, Halide::Internal::CodeGen_LLVM::DestructorType when)'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='2987' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM5visitEPKNS0_4CallE'/>
<use f='halide/src/CodeGen_Posix.cpp' l='219' u='c' c='_ZN6Halide8Internal13CodeGen_Posix17create_allocationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeENS_10MemoryTypeERKSt6vectorINS_4E15349718'/>
<use f='halide/src/CodeGen_Posix.cpp' l='289' u='c' c='_ZN6Halide8Internal13CodeGen_Posix17create_allocationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeENS_10MemoryTypeERKSt6vectorINS_4E15349718'/>
