<dec f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.h' l='133' type='int absl::lts_2020_02_25::GetStackTrace(void ** result, int max_depth, int skip_count)'/>
<use f='halide/build-apps/abseil-cpp/absl/container/internal/hashtablez_sampler.cc' l='79' u='c' c='_ZN4absl14lts_2020_02_2518container_internal14HashtablezInfo18PrepareForSamplingEv'/>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.h' l='109'>// GetStackTrace()
//
// Records program counter values for up to `max_depth` frames, skipping the
// most recent `skip_count` stack frames, stores their corresponding values
// in `results`, and returns the number of frames
// stored. Note that this function is similar to `absl::GetStackFrames()`
// except that it returns the stack trace only, and not stack frame sizes.
//
// Example:
//
//      main() { foo(); }
//      foo() { bar(); }
//      bar() {
//        void* result[10];
//        int depth = absl::GetStackTrace(result, 10, 1);
//      }
//
// This produces:
//
//      result[0]       foo
//      result[1]       main
//           ....       ...
//
// `result` must not be null.</doc>
<def f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.cc' l='99' ll='103' macro='1' type='int absl::lts_2020_02_25::GetStackTrace(void ** result, int max_depth, int skip_count)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='414' u='c' c='_ZN4absl14lts_2020_02_25L14PostSynchEventEPvi'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1281' u='c' c='_ZN4absl14lts_2020_02_25L18CurrentStackStringEPcib'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1306' u='c' c='_ZN4absl14lts_2020_02_2512_GLOBAL__N_18GetStackEPPvi'/>
