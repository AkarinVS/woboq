<dec f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='350' type='llvm::ModulePassManager llvm::PassBuilder::buildModuleSimplificationPipeline(llvm::PassBuilder::OptimizationLevel Level, llvm::ThinOrFullLTOPhase Phase)'/>
<doc f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='335'>/// Construct the core LLVM module canonicalization and simplification
  /// pipeline.
  ///
  /// This pipeline focuses on canonicalizing and simplifying the entire module
  /// of IR. Much like the function simplification pipeline above, it is
  /// suitable to run repeatedly over the IR and is not expected to destroy
  /// important information. It does, however, perform inlining and other
  /// heuristic based simplifications that are not strictly reversible.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.
  ///
  /// \p Phase indicates the current ThinLTO phase.</doc>
