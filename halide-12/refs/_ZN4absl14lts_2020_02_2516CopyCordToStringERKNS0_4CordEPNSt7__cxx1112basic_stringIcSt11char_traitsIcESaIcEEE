<dec f='halide/build-apps/abseil-cpp/absl/strings/cord.h' l='63' type='void absl::lts_2020_02_25::CopyCordToString(const absl::lts_2020_02_25::Cord &amp; src, std::string * dst)'/>
<dec f='halide/build-apps/abseil-cpp/absl/strings/cord.h' l='217' type='void absl::lts_2020_02_25::CopyCordToString(const absl::lts_2020_02_25::Cord &amp; src, std::string * dst)'/>
<doc f='halide/build-apps/abseil-cpp/absl/strings/cord.h' l='210'>// Copies the contents from `src` to `*dst`.
  //
  // This function optimizes the case of reusing the destination std::string since it
  // can reuse previously allocated capacity. However, this function does not
  // guarantee that pointers previously returned by `dst-&gt;data()` remain valid
  // even if `*dst` had enough capacity to hold `src`. If `*dst` is a new
  // object, prefer to simply use the conversion operator to `std::string`.</doc>
<use f='halide/build-apps/abseil-cpp/absl/strings/cord.cc' l='1482' u='c' c='_ZNK4absl14lts_2020_02_254CordcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEv'/>
<def f='halide/build-apps/abseil-cpp/absl/strings/cord.cc' l='1486' ll='1493' type='void absl::lts_2020_02_25::CopyCordToString(const absl::lts_2020_02_25::Cord &amp; src, std::string * dst)'/>
