<dec f='halide/build-apps/abseil-cpp/absl/base/internal/cycleclock.h' l='87' type='static void absl::lts_2020_02_25::base_internal::CycleClockSource::Register(absl::lts_2020_02_25::base_internal::CycleClockSourceFunc source)'/>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/cycleclock.cc' l='86' ll='89' type='static void absl::lts_2020_02_25::base_internal::CycleClockSource::Register(absl::lts_2020_02_25::base_internal::CycleClockSourceFunc source)'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/cycleclock.h' l='80'>// CycleClockSource::Register()
  //
  // Register a function that provides an alternate source for the unscaled CPU
  // cycle count value. The source function must be async signal safe, must not
  // call CycleClock::Now(), and must have a frequency that matches that of the
  // unscaled clock used by CycleClock. A nullptr value resets CycleClock to use
  // the default source.</doc>
