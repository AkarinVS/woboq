<dec f='halide/build-apps/eigen/Eigen/src/Cholesky/LDLT.h' l='213' type='bool Eigen::LDLT::solveInPlace(MatrixBase&lt;Derived&gt; &amp; bAndX) const'/>
<def f='halide/build-apps/eigen/Eigen/src/Cholesky/LDLT.h' l='627' ll='637' type='bool Eigen::LDLT::solveInPlace(MatrixBase&lt;Derived&gt; &amp; bAndX) const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Cholesky/LDLT.h' l='614'>/** \internal use x = ldlt_object.solve(x);
  *
  * This is the \em in-place version of solve().
  *
  * \param bAndX represents both the right-hand side matrix b and result x.
  *
  * \returns true always! If you need to check for existence of solutions, use another decomposition like LU, QR, or SVD.
  *
  * This version avoids a copy when the right hand side matrix b is not
  * needed anymore.
  *
  * \sa LDLT::solve(), MatrixBase::ldlt()
  */</doc>
