<dec f='halide/build-apps/abseil-cpp/absl/strings/internal/str_format/parser.h' l='78' type='const char * absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(const char * p, const char * end, absl::lts_2020_02_25::str_format_internal::UnboundConversion * conv, int * next_arg)'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/internal/str_format/parser.h' l='166' u='c' c='_ZN4absl14lts_2020_02_2519str_format_internal17ParseFormatStringENS0_11string_viewET_'/>
<doc f='halide/build-apps/abseil-cpp/absl/strings/internal/str_format/parser.h' l='73'>// Consume conversion spec prefix (not including &apos;%&apos;) of [p, end) if valid.
// Examples of valid specs would be e.g.: &quot;s&quot;, &quot;d&quot;, &quot;-12.6f&quot;.
// If valid, it returns the first character following the conversion spec,
// and the spec part is broken down and returned in &apos;conv&apos;.
// If invalid, returns nullptr.</doc>
<def f='halide/build-apps/abseil-cpp/absl/strings/internal/str_format/parser.cc' l='258' ll='262' type='const char * absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(const char * p, const char * end, absl::lts_2020_02_25::str_format_internal::UnboundConversion * conv, int * next_arg)'/>
