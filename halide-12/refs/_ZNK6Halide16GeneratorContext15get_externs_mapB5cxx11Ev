<def f='halide/halide-install/include/Halide.h' l='25845' ll='25847' type='std::shared_ptr&lt;ExternsMap&gt; Halide::GeneratorContext::get_externs_map() const'/>
<doc f='halide/halide-install/include/Halide.h' l='25830'>/** Generators can register ExternalCode objects onto
     * themselves. The Generator infrastructure will arrange to have
     * this ExternalCode appended to the Module that is finally
     * compiled using the Generator. This allows encapsulating
     * functionality that depends on external libraries or handwritten
     * code for various targets. The name argument should match the
     * name of the ExternalCode block and is used to ensure the same
     * code block is not duplicated in the output. Halide does not do
     * anything other than to compare names for equality. To guarantee
     * uniqueness in public code, we suggest using a Java style
     * inverted domain name followed by organization specific
     * naming. E.g.:
     *     com.yoyodyne.overthruster.0719acd19b66df2a9d8d628a8fefba911a0ab2b7
     *
     * See test/generator/external_code_generator.cpp for example use. */</doc>
<def f='halide/build/include/Halide.h' l='25845' ll='25847' type='std::shared_ptr&lt;ExternsMap&gt; Halide::GeneratorContext::get_externs_map() const'/>
<doc f='halide/build/include/Halide.h' l='25830'>/** Generators can register ExternalCode objects onto
     * themselves. The Generator infrastructure will arrange to have
     * this ExternalCode appended to the Module that is finally
     * compiled using the Generator. This allows encapsulating
     * functionality that depends on external libraries or handwritten
     * code for various targets. The name argument should match the
     * name of the ExternalCode block and is used to ensure the same
     * code block is not duplicated in the output. Halide does not do
     * anything other than to compare names for equality. To guarantee
     * uniqueness in public code, we suggest using a Java style
     * inverted domain name followed by organization specific
     * naming. E.g.:
     *     com.yoyodyne.overthruster.0719acd19b66df2a9d8d628a8fefba911a0ab2b7
     *
     * See test/generator/external_code_generator.cpp for example use. */</doc>
<def f='halide/src/Generator.h' l='2911' ll='2913' type='std::shared_ptr&lt;ExternsMap&gt; Halide::GeneratorContext::get_externs_map() const'/>
<use f='halide/src/Generator.cpp' l='30' u='c' c='_ZN6Halide16GeneratorContext17init_from_contextERKS0_'/>
<use f='halide/src/Generator.cpp' l='1478' u='c' c='_ZN6Halide8Internal13GeneratorBase12build_moduleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_11LinkageTypeE'/>
<use f='halide/src/Generator.cpp' l='1653' u='c' c='_ZN6Halide8Internal13GeneratorBase21build_gradient_moduleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='halide/src/Generator.h' l='2896'>/** Generators can register ExternalCode objects onto
     * themselves. The Generator infrastructure will arrange to have
     * this ExternalCode appended to the Module that is finally
     * compiled using the Generator. This allows encapsulating
     * functionality that depends on external libraries or handwritten
     * code for various targets. The name argument should match the
     * name of the ExternalCode block and is used to ensure the same
     * code block is not duplicated in the output. Halide does not do
     * anything other than to compare names for equality. To guarantee
     * uniqueness in public code, we suggest using a Java style
     * inverted domain name followed by organization specific
     * naming. E.g.:
     *     com.yoyodyne.overthruster.0719acd19b66df2a9d8d628a8fefba911a0ab2b7
     *
     * See test/generator/external_code_generator.cpp for example use. */</doc>
<use f='halide/test/generator/external_code_generator.cpp' l='36' u='c' c='_ZN12_GLOBAL__N_112ExternalCode8generateEv'/>
<use f='halide/test/generator/external_code_generator.cpp' l='42' u='c' c='_ZN12_GLOBAL__N_112ExternalCode8generateEv'/>
