<dec f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='270' type='uint64_t llvm::DataExtractor::getUnsigned(uint64_t * offset_ptr, uint32_t byte_size, llvm::Error * Err = nullptr) const'/>
<use f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='277' u='c' c='_ZNK4llvm13DataExtractor11getUnsignedERNS0_6CursorEj'/>
<use f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='323' u='c' c='_ZNK4llvm13DataExtractor10getAddressEPm'/>
<doc f='halide/llvm-install/include/llvm/Support/DataExtractor.h' l='240'>/// Extract an unsigned integer of size \a byte_size from \a
  /// *offset_ptr.
  ///
  /// Extract a single unsigned integer value and update the offset
  /// pointed to by \a offset_ptr. The size of the extracted integer
  /// is specified by the \a byte_size argument. \a byte_size should
  /// have a value greater than or equal to one and less than or equal
  /// to eight since the return value is 64 bits wide. Any
  /// \a byte_size values less than 1 or greater than 8 will result in
  /// nothing being extracted, and zero being returned.
  ///
  /// @param[in,out] offset_ptr
  ///     A pointer to an offset within the data that will be advanced
  ///     by the appropriate number of bytes if the value is extracted
  ///     correctly. If the offset is out of bounds or there are not
  ///     enough bytes to extract this value, the offset will be left
  ///     unmodified.
  ///
  /// @param[in] byte_size
  ///     The size in byte of the integer to extract.
  ///
  /// @param[in,out] Err
  ///     A pointer to an Error object. Upon return the Error object is set to
  ///     indicate the result (success/failure) of the function. If the Error
  ///     object is already set when calling this function, no extraction is
  ///     performed.
  ///
  /// @return
  ///     The unsigned integer value that was extracted, or zero on
  ///     failure.</doc>
