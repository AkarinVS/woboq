<dec f='halide/halide-install/include/Halide.h' l='17727' type='Halide::Stage Halide::Func::specialize(const Halide::Expr &amp; condition)'/>
<use f='halide/halide-install/include/Halide.h' l='25207' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase10specializeEDpOT_'/>
<use f='halide/halide-install/include/Halide.h' l='25207' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase10specializeEDpOT_'/>
<doc f='halide/halide-install/include/Halide.h' l='17563'>/** Specialize a Func. This creates a special-case version of the
     * Func where the given condition is true. The most effective
     * conditions are those of the form param == value, and boolean
     * Params. Consider a simple example:
     \code
     f(x) = x + select(cond, 0, 1);
     f.compute_root();
     \endcode
     * This is equivalent to:
     \code
     for (int x = 0; x &lt; width; x++) {
       f[x] = x + (cond ? 0 : 1);
     }
     \endcode
     * Adding the scheduling directive:
     \code
     f.specialize(cond)
     \endcode
     * makes it equivalent to:
     \code
     if (cond) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x;
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + 1;
       }
     }
     \endcode
     * Note that the inner loops have been simplified. In the first
     * path Halide knows that cond is true, and in the second path
     * Halide knows that it is false.
     *
     * The specialized version gets its own schedule, which inherits
     * every directive made about the parent Func&apos;s schedule so far
     * except for its specializations. This method returns a handle to
     * the new schedule. If you wish to retrieve the specialized
     * sub-schedule again later, you can call this method with the
     * same condition. Consider the following example of scheduling
     * the specialized version:
     *
     \code
     f(x) = x;
     f.compute_root();
     f.specialize(width &gt; 1).unroll(x, 2);
     \endcode
     * Assuming for simplicity that width is even, this is equivalent to:
     \code
     if (width &gt; 1) {
       for (int x = 0; x &lt; width/2; x++) {
         f[2*x] = 2*x;
         f[2*x + 1] = 2*x + 1;
       }
     } else {
       for (int x = 0; x &lt; width/2; x++) {
         f[x] = x;
       }
     }
     \endcode
     * For this case, it may be better to schedule the un-specialized
     * case instead:
     \code
     f(x) = x;
     f.compute_root();
     f.specialize(width == 1); // Creates a copy of the schedule so far.
     f.unroll(x, 2); // Only applies to the unspecialized case.
     \endcode
     * This is equivalent to:
     \code
     if (width == 1) {
       f[0] = 0;
     } else {
       for (int x = 0; x &lt; width/2; x++) {
         f[2*x] = 2*x;
         f[2*x + 1] = 2*x + 1;
       }
     }
     \endcode
     * This can be a good way to write a pipeline that splits,
     * vectorizes, or tiles, but can still handle small inputs.
     *
     * If a Func has several specializations, the first matching one
     * will be used, so the order in which you define specializations
     * is significant. For example:
     *
     \code
     f(x) = x + select(cond1, a, b) - select(cond2, c, d);
     f.specialize(cond1);
     f.specialize(cond2);
     \endcode
     * is equivalent to:
     \code
     if (cond1) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + a - (cond2 ? c : d);
       }
     } else if (cond2) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - c;
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - d;
       }
     }
     \endcode
     *
     * Specializations may in turn be specialized, which creates a
     * nested if statement in the generated code.
     *
     \code
     f(x) = x + select(cond1, a, b) - select(cond2, c, d);
     f.specialize(cond1).specialize(cond2);
     \endcode
     * This is equivalent to:
     \code
     if (cond1) {
       if (cond2) {
         for (int x = 0; x &lt; width; x++) {
           f[x] = x + a - c;
         }
       } else {
         for (int x = 0; x &lt; width; x++) {
           f[x] = x + a - d;
         }
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - (cond2 ? c : d);
       }
     }
     \endcode
     * To create a 4-way if statement that simplifies away all of the
     * ternary operators above, you could say:
     \code
     f.specialize(cond1).specialize(cond2);
     f.specialize(cond2);
     \endcode
     * or
     \code
     f.specialize(cond1 &amp;&amp; cond2);
     f.specialize(cond1);
     f.specialize(cond2);
     \endcode
     *
     * Any prior Func which is compute_at some variable of this Func
     * gets separately included in all paths of the generated if
     * statement. The Var in the compute_at call to must exist in all
     * paths, but it may have been generated via a different path of
     * splits, fuses, and renames. This can be used somewhat
     * creatively. Consider the following code:
     \code
     g(x, y) = 8*x;
     f(x, y) = g(x, y) + 1;
     f.compute_root().specialize(cond);
     Var g_loop;
     f.specialize(cond).rename(y, g_loop);
     f.rename(x, g_loop);
     g.compute_at(f, g_loop);
     \endcode
     * When cond is true, this is equivalent to g.compute_at(f,y).
     * When it is false, this is equivalent to g.compute_at(f,x).
     */</doc>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='233' u='c' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='256' u='c' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/conv_generator.cpp' l='263' u='c' c='_ZN5hannk4Conv8generateEv'/>
<use f='halide/apps/hannk/halide/copy_generator.cpp' l='58' u='c' c='_ZN5hannk4Copy8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='148' u='c' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/depthwise_conv_generator.cpp' l='197' u='c' c='_ZN5hannk13DepthwiseConv8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='112' u='c' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/hannk/halide/fully_connected_generator.cpp' l='139' u='c' c='_ZN5hannk14FullyConnected8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='73' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='81' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='114' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='117' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='140' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='149' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l2_generators.cpp' l='158' u='c' c='_ZN12_GLOBAL__N_113GEMVGenerator8generateEv'/>
<use f='halide/apps/linear_algebra/src/blas_l3_generators.cpp' l='131' u='c' c='_ZN12_GLOBAL__N_113GEMMGenerator8generateEv'/>
<dec f='halide/build/include/Halide.h' l='17727' type='Halide::Stage Halide::Func::specialize(const Halide::Expr &amp; condition)'/>
<use f='halide/build/include/Halide.h' l='25207' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase10specializeEDpOT_'/>
<use f='halide/build/include/Halide.h' l='25207' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase10specializeEDpOT_'/>
<doc f='halide/build/include/Halide.h' l='17563'>/** Specialize a Func. This creates a special-case version of the
     * Func where the given condition is true. The most effective
     * conditions are those of the form param == value, and boolean
     * Params. Consider a simple example:
     \code
     f(x) = x + select(cond, 0, 1);
     f.compute_root();
     \endcode
     * This is equivalent to:
     \code
     for (int x = 0; x &lt; width; x++) {
       f[x] = x + (cond ? 0 : 1);
     }
     \endcode
     * Adding the scheduling directive:
     \code
     f.specialize(cond)
     \endcode
     * makes it equivalent to:
     \code
     if (cond) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x;
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + 1;
       }
     }
     \endcode
     * Note that the inner loops have been simplified. In the first
     * path Halide knows that cond is true, and in the second path
     * Halide knows that it is false.
     *
     * The specialized version gets its own schedule, which inherits
     * every directive made about the parent Func&apos;s schedule so far
     * except for its specializations. This method returns a handle to
     * the new schedule. If you wish to retrieve the specialized
     * sub-schedule again later, you can call this method with the
     * same condition. Consider the following example of scheduling
     * the specialized version:
     *
     \code
     f(x) = x;
     f.compute_root();
     f.specialize(width &gt; 1).unroll(x, 2);
     \endcode
     * Assuming for simplicity that width is even, this is equivalent to:
     \code
     if (width &gt; 1) {
       for (int x = 0; x &lt; width/2; x++) {
         f[2*x] = 2*x;
         f[2*x + 1] = 2*x + 1;
       }
     } else {
       for (int x = 0; x &lt; width/2; x++) {
         f[x] = x;
       }
     }
     \endcode
     * For this case, it may be better to schedule the un-specialized
     * case instead:
     \code
     f(x) = x;
     f.compute_root();
     f.specialize(width == 1); // Creates a copy of the schedule so far.
     f.unroll(x, 2); // Only applies to the unspecialized case.
     \endcode
     * This is equivalent to:
     \code
     if (width == 1) {
       f[0] = 0;
     } else {
       for (int x = 0; x &lt; width/2; x++) {
         f[2*x] = 2*x;
         f[2*x + 1] = 2*x + 1;
       }
     }
     \endcode
     * This can be a good way to write a pipeline that splits,
     * vectorizes, or tiles, but can still handle small inputs.
     *
     * If a Func has several specializations, the first matching one
     * will be used, so the order in which you define specializations
     * is significant. For example:
     *
     \code
     f(x) = x + select(cond1, a, b) - select(cond2, c, d);
     f.specialize(cond1);
     f.specialize(cond2);
     \endcode
     * is equivalent to:
     \code
     if (cond1) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + a - (cond2 ? c : d);
       }
     } else if (cond2) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - c;
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - d;
       }
     }
     \endcode
     *
     * Specializations may in turn be specialized, which creates a
     * nested if statement in the generated code.
     *
     \code
     f(x) = x + select(cond1, a, b) - select(cond2, c, d);
     f.specialize(cond1).specialize(cond2);
     \endcode
     * This is equivalent to:
     \code
     if (cond1) {
       if (cond2) {
         for (int x = 0; x &lt; width; x++) {
           f[x] = x + a - c;
         }
       } else {
         for (int x = 0; x &lt; width; x++) {
           f[x] = x + a - d;
         }
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - (cond2 ? c : d);
       }
     }
     \endcode
     * To create a 4-way if statement that simplifies away all of the
     * ternary operators above, you could say:
     \code
     f.specialize(cond1).specialize(cond2);
     f.specialize(cond2);
     \endcode
     * or
     \code
     f.specialize(cond1 &amp;&amp; cond2);
     f.specialize(cond1);
     f.specialize(cond2);
     \endcode
     *
     * Any prior Func which is compute_at some variable of this Func
     * gets separately included in all paths of the generated if
     * statement. The Var in the compute_at call to must exist in all
     * paths, but it may have been generated via a different path of
     * splits, fuses, and renames. This can be used somewhat
     * creatively. Consider the following code:
     \code
     g(x, y) = 8*x;
     f(x, y) = g(x, y) + 1;
     f.compute_root().specialize(cond);
     Var g_loop;
     f.specialize(cond).rename(y, g_loop);
     f.rename(x, g_loop);
     g.compute_at(f, g_loop);
     \endcode
     * When cond is true, this is equivalent to g.compute_at(f,y).
     * When it is false, this is equivalent to g.compute_at(f,x).
     */</doc>
<use f='halide/python_bindings/correctness/complexstub_generator.cpp' l='79' u='c' c='_ZN12_GLOBAL__N_111ComplexStub8scheduleEv'/>
<dec f='halide/src/Func.h' l='1847' type='Halide::Stage Halide::Func::specialize(const Halide::Expr &amp; condition)'/>
<doc f='halide/src/Func.h' l='1683'>/** Specialize a Func. This creates a special-case version of the
     * Func where the given condition is true. The most effective
     * conditions are those of the form param == value, and boolean
     * Params. Consider a simple example:
     \code
     f(x) = x + select(cond, 0, 1);
     f.compute_root();
     \endcode
     * This is equivalent to:
     \code
     for (int x = 0; x &lt; width; x++) {
       f[x] = x + (cond ? 0 : 1);
     }
     \endcode
     * Adding the scheduling directive:
     \code
     f.specialize(cond)
     \endcode
     * makes it equivalent to:
     \code
     if (cond) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x;
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + 1;
       }
     }
     \endcode
     * Note that the inner loops have been simplified. In the first
     * path Halide knows that cond is true, and in the second path
     * Halide knows that it is false.
     *
     * The specialized version gets its own schedule, which inherits
     * every directive made about the parent Func&apos;s schedule so far
     * except for its specializations. This method returns a handle to
     * the new schedule. If you wish to retrieve the specialized
     * sub-schedule again later, you can call this method with the
     * same condition. Consider the following example of scheduling
     * the specialized version:
     *
     \code
     f(x) = x;
     f.compute_root();
     f.specialize(width &gt; 1).unroll(x, 2);
     \endcode
     * Assuming for simplicity that width is even, this is equivalent to:
     \code
     if (width &gt; 1) {
       for (int x = 0; x &lt; width/2; x++) {
         f[2*x] = 2*x;
         f[2*x + 1] = 2*x + 1;
       }
     } else {
       for (int x = 0; x &lt; width/2; x++) {
         f[x] = x;
       }
     }
     \endcode
     * For this case, it may be better to schedule the un-specialized
     * case instead:
     \code
     f(x) = x;
     f.compute_root();
     f.specialize(width == 1); // Creates a copy of the schedule so far.
     f.unroll(x, 2); // Only applies to the unspecialized case.
     \endcode
     * This is equivalent to:
     \code
     if (width == 1) {
       f[0] = 0;
     } else {
       for (int x = 0; x &lt; width/2; x++) {
         f[2*x] = 2*x;
         f[2*x + 1] = 2*x + 1;
       }
     }
     \endcode
     * This can be a good way to write a pipeline that splits,
     * vectorizes, or tiles, but can still handle small inputs.
     *
     * If a Func has several specializations, the first matching one
     * will be used, so the order in which you define specializations
     * is significant. For example:
     *
     \code
     f(x) = x + select(cond1, a, b) - select(cond2, c, d);
     f.specialize(cond1);
     f.specialize(cond2);
     \endcode
     * is equivalent to:
     \code
     if (cond1) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + a - (cond2 ? c : d);
       }
     } else if (cond2) {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - c;
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - d;
       }
     }
     \endcode
     *
     * Specializations may in turn be specialized, which creates a
     * nested if statement in the generated code.
     *
     \code
     f(x) = x + select(cond1, a, b) - select(cond2, c, d);
     f.specialize(cond1).specialize(cond2);
     \endcode
     * This is equivalent to:
     \code
     if (cond1) {
       if (cond2) {
         for (int x = 0; x &lt; width; x++) {
           f[x] = x + a - c;
         }
       } else {
         for (int x = 0; x &lt; width; x++) {
           f[x] = x + a - d;
         }
       }
     } else {
       for (int x = 0; x &lt; width; x++) {
         f[x] = x + b - (cond2 ? c : d);
       }
     }
     \endcode
     * To create a 4-way if statement that simplifies away all of the
     * ternary operators above, you could say:
     \code
     f.specialize(cond1).specialize(cond2);
     f.specialize(cond2);
     \endcode
     * or
     \code
     f.specialize(cond1 &amp;&amp; cond2);
     f.specialize(cond1);
     f.specialize(cond2);
     \endcode
     *
     * Any prior Func which is compute_at some variable of this Func
     * gets separately included in all paths of the generated if
     * statement. The Var in the compute_at call to must exist in all
     * paths, but it may have been generated via a different path of
     * splits, fuses, and renames. This can be used somewhat
     * creatively. Consider the following code:
     \code
     g(x, y) = 8*x;
     f(x, y) = g(x, y) + 1;
     f.compute_root().specialize(cond);
     Var g_loop;
     f.specialize(cond).rename(y, g_loop);
     f.rename(x, g_loop);
     g.compute_at(f, g_loop);
     \endcode
     * When cond is true, this is equivalent to g.compute_at(f,y).
     * When it is false, this is equivalent to g.compute_at(f,x).
     */</doc>
<def f='halide/src/Func.cpp' l='2170' ll='2173' type='Halide::Stage Halide::Func::specialize(const Halide::Expr &amp; c)'/>
<use f='halide/src/Generator.h' l='2273' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase10specializeEDpOT_'/>
<use f='halide/src/Generator.h' l='2273' u='c' c='_ZN6Halide8Internal19GeneratorOutputBase10specializeEDpOT_'/>
<use f='halide/test/generator/pyramid_generator.cpp' l='33' u='c' c='_ZN12_GLOBAL__N_17Pyramid8generateEv'/>
