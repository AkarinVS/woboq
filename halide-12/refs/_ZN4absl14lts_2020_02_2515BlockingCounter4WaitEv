<dec f='halide/build-apps/abseil-cpp/absl/synchronization/blocking_counter.h' l='88' type='void absl::lts_2020_02_25::BlockingCounter::Wait()'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/blocking_counter.cc' l='39' ll='54' type='void absl::lts_2020_02_25::BlockingCounter::Wait()'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/blocking_counter.h' l='79'>// BlockingCounter::Wait()
  //
  // Blocks until the counter reaches zero. This function may be called at most
  // once. On return, `DecrementCount()` will have been called &quot;initial_count&quot;
  // times and the blocking counter may be destroyed.
  //
  // Memory ordering: For any threads X and Y, any action taken by X
  // before X calls `DecrementCount()` is visible to Y after Y returns
  // from `Wait()`.</doc>
