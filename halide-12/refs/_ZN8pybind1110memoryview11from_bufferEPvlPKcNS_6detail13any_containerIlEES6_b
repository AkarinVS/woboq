<dec f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='1450' type='static pybind11::memoryview pybind11::memoryview::from_buffer(void * ptr, pybind11::ssize_t itemsize, const char * format, detail::any_container&lt;ssize_t&gt; shape, detail::any_container&lt;ssize_t&gt; strides, bool readonly = false)'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='1459' u='c' c='_ZN8pybind1110memoryview11from_bufferEPKvlPKcNS_6detail13any_containerIlEES7_'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='1510' ll='1536' type='static pybind11::memoryview pybind11::memoryview::from_buffer(void * ptr, pybind11::ssize_t itemsize, const char * format, detail::any_container&lt;ssize_t&gt; shape, detail::any_container&lt;ssize_t&gt; strides, bool readonly = false)'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='1427'>/** \rst
        Creates ``memoryview`` from static buffer.

        This method is meant for providing a ``memoryview`` for C/C++ buffer not
        managed by Python. The caller is responsible for managing the lifetime
        of ``ptr`` and ``format``, which MUST outlive the memoryview constructed
        here.

        See also: Python C API documentation for `PyMemoryView_FromBuffer`_.

        .. _PyMemoryView_FromBuffer: https://docs.python.org/c-api/memoryview.html#c.PyMemoryView_FromBuffer

        :param ptr: Pointer to the buffer.
        :param itemsize: Byte size of an element.
        :param format: Pointer to the null-terminated format string. For
            homogeneous Buffers, this should be set to
            ``format_descriptor&lt;T&gt;::value``.
        :param shape: Shape of the tensor (1 entry per dimension).
        :param strides: Number of bytes between adjacent entries (for each
            per dimension).
        :param readonly: Flag to indicate if the underlying storage may be
            written to.
     \endrst */</doc>
