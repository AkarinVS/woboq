<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='384' type='bool absl::lts_2020_02_25::Mutex::LockWhenWithDeadline(const absl::lts_2020_02_25::Condition &amp; cond, absl::Time deadline)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='390' u='c' c='_ZN4absl14lts_2020_02_255Mutex26WriterLockWhenWithDeadlineERKNS0_9ConditionENS0_4TimeE'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='373'>// Mutex::LockWhenWithDeadline()
  // Mutex::ReaderLockWhenWithDeadline()
  // Mutex::WriterLockWhenWithDeadline()
  //
  // Blocks until simultaneously both:
  //   - either `cond` is `true` or the deadline has been passed, and
  //   - this `Mutex` can be acquired,
  // then atomically acquires this Mutex, returning `true` iff `cond` is `true`
  // on return.
  //
  // Deadlines in the past are equivalent to an immediate deadline.</doc>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1500' u='c' c='_ZN4absl14lts_2020_02_255Mutex19LockWhenWithTimeoutERKNS0_9ConditionENS0_8DurationE'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1503' ll='1511' type='bool absl::lts_2020_02_25::Mutex::LockWhenWithDeadline(const absl::lts_2020_02_25::Condition &amp; cond, absl::Time deadline)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/notification.cc' l='70' u='c' c='_ZNK4absl14lts_2020_02_2512Notification31WaitForNotificationWithDeadlineENS0_4TimeE'/>
