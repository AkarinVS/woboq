<dec f='halide/build-apps/abseil-cpp/absl/strings/str_replace.h' l='68' type='std::string absl::lts_2020_02_25::StrReplaceAll(absl::string_view s, std::initializer_list&lt;std::pair&lt;absl::string_view, absl::string_view&gt; &gt; replacements)'/>
<def f='halide/build-apps/abseil-cpp/absl/strings/str_replace.cc' l='71' ll='74' type='std::string absl::lts_2020_02_25::StrReplaceAll(absl::string_view s, strings_internal::FixedMapping replacements)'/>
<doc f='halide/build-apps/abseil-cpp/absl/strings/str_replace.cc' l='63'>// We can implement this in terms of the generic StrReplaceAll, but
// we must specify the template overload because C++ cannot deduce the type
// of an initializer_list parameter to a function, and also if we don&apos;t specify
// the type, we just call ourselves.
//
// Note that we implement them here, rather than in the header, so that they
// aren&apos;t inlined.</doc>
