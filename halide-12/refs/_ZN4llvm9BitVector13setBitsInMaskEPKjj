<def f='halide/llvm-install/include/llvm/ADT/BitVector.h' l='762' ll='764' type='void llvm::BitVector::setBitsInMask(const uint32_t * Mask, unsigned int MaskWords = ~0U)'/>
<doc f='halide/llvm-install/include/llvm/ADT/BitVector.h' l='748'>//===--------------------------------------------------------------------===//
  // Portable bit mask operations.
  //===--------------------------------------------------------------------===//
  //
  // These methods all operate on arrays of uint32_t, each holding 32 bits. The
  // fixed word size makes it easier to work with literal bit vector constants
  // in portable code.
  //
  // The LSB in each word is the lowest numbered bit.  The size of a portable
  // bit mask is always a whole multiple of 32 bits.  If no bit mask size is
  // given, the bit mask is assumed to cover the entire BitVector.

  /// setBitsInMask - Add &apos;1&apos; bits from Mask to this vector. Don&apos;t resize.
  /// This computes &quot;*this |= Mask&quot;.</doc>
