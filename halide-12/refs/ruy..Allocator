<use f='halide/build-apps/ruy/ruy/ctx.h' l='77' c='_ZNK3ruy3Ctx26GetThreadSpecificAllocatorEi'/>
<use f='halide/build-apps/ruy/ruy/ctx.h' l='78' c='_ZN3ruy3Ctx16GetMainAllocatorEv'/>
<def f='halide/build-apps/ruy/ruy/allocator.h' l='59' ll='96'/>
<use f='halide/build-apps/ruy/ruy/allocator.h' l='87' c='_ZN3ruy9AllocatoraSERKS0_'/>
<use f='halide/build-apps/ruy/ruy/create_trmul_params.h' l='281' c='_ZN3ruy6detail38EnsurePerChannelBuffersLargeEnoughImpl3RunERKNS_11TrMulParamsEPNS_9AllocatorEPNS_9MulParamsIT_T0_EE'/>
<use f='halide/build-apps/ruy/ruy/create_trmul_params.h' l='325' c='_ZN3ruy6detail38EnsurePerChannelBuffersLargeEnoughImplIT_T0_Lb0EE3RunERKNS_11TrMulParamsEPNS_9AllocatorEPNS_9MulParamsIS2_S3_EE'/>
<size>56</size>
<doc f='halide/build-apps/ruy/ruy/allocator.h' l='26'>// Specialized allocator designed to converge to a steady-state where all
// allocations are bump-ptr allocations from an already-allocated buffer.
//
// To support these constraints, this allocator only supports two
// operations.
// - AllocateBytes/Allocate&lt;Pointer&gt;: allocates a pointer to storage of a
// specified size, which will be aligned to kMinimumBlockAlignment.
// - FreeAll: frees all previous allocations (but retains the internal
// buffer to minimize future calls into the system allocator).
//
// This class is specialized for supporting just those two operations
// under this specific steady-state usage pattern. Extending this class
// with new allocation interfaces that don&apos;t fit that pattern is probably not
// the right choice. Instead, build a new class on top of
// SystemAlignedAlloc/SystemAlignedFree.
//
// All operations happen on aligned blocks for simplicity.
//
// Theory of operation:
//
// - ptr_, current_, and size_ implement a basic bump-ptr allocator.
//
// - in AllocateBytes, the fast path is just a bump-ptr
// allocation. If our bump-ptr allocator doesn&apos;t have enough space for an
// allocation, then we allocate a block from the system allocator to
// service the allocation request. We save that block in fallback_blocks_
// and track the total size of the fallback blocks in
// fallback_blocks_total_size_.
//
// - in FreeAll, the fast path just resets the bump-ptr allocator. If
// there are any fallback blocks, we free them and reallocate the
// bump-ptr allocator&apos;s buffer so that the next sequence of allocations
// will hopefully not need any fallback blocks.</doc>
<fun r='_ZN3ruy9AllocatorD1Ev'/>
<fun r='_ZN3ruy9Allocator13AllocateBytesEl'/>
<fun r='_ZN3ruy9Allocator33AllocateBytesAvoidingAliasingWithElPKv'/>
<fun r='_ZN3ruy9Allocator8AllocateEl'/>
<fun r='_ZN3ruy9Allocator8AllocateElPT_'/>
<fun r='_ZN3ruy9Allocator7FreeAllEv'/>
<fun r='_ZN3ruy9AllocatoraSERKS0_'/>
<fun r='_ZN3ruy9Allocator12AllocateFastEl'/>
<fun r='_ZN3ruy9Allocator12AllocateSlowEl'/>
<mbr r='ruy::Allocator::ptr_' o='0' t='void *'/>
<mbr r='ruy::Allocator::current_' o='64' t='std::ptrdiff_t'/>
<mbr r='ruy::Allocator::size_' o='128' t='std::ptrdiff_t'/>
<mbr r='ruy::Allocator::fallback_blocks_' o='192' t='std::vector&lt;void *&gt;'/>
<mbr r='ruy::Allocator::fallback_blocks_total_size_' o='384' t='std::ptrdiff_t'/>
<use f='halide/build-apps/ruy/ruy/ctx_impl.h' l='44'/>
<use f='halide/build-apps/ruy/ruy/ctx_impl.h' l='70'/>
<size>56</size>
<use f='halide/build-apps/ruy/ruy/ctx.cc' l='187' c='_ZNK3ruy3Ctx26GetThreadSpecificAllocatorEi'/>
<use f='halide/build-apps/ruy/ruy/ctx.cc' l='193' c='_ZN3ruy3Ctx16GetMainAllocatorEv'/>
<use f='halide/build-apps/ruy/ruy/ctx.cc' l='195' c='_ZN3ruy3Ctx16GetMainAllocatorEv'/>
<size>56</size>
<use f='halide/build-apps/ruy/ruy/prepare_packed_matrices.cc' l='86' c='_ZN3ruy21PreparePackedMatricesEPNS_3CtxEPNS_11TrMulParamsE'/>
<size>56</size>
<use f='halide/build-apps/ruy/ruy/trmul.cc' l='62' c='_ZN3ruy12_GLOBAL__N_19TrMulTaskC1EPNS_11TrMulParamsERKNS_8BlockMapEPSt6atomicIiEibNS_8SidePairIPS7_INS0_13PackingStatusEEEEPNS_14TuningResolverEPNS_9A5522035'/>
<use f='halide/build-apps/ruy/ruy/trmul.cc' l='242'/>
<use f='halide/build-apps/ruy/ruy/trmul.cc' l='342' c='_ZN3ruy5TrMulEPNS_3CtxEPNS_11TrMulParamsE'/>
<size>56</size>
