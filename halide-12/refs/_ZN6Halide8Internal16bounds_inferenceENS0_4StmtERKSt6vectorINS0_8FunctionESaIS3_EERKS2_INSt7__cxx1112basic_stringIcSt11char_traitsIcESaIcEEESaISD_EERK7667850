<dec f='halide/halide-install/include/Halide.h' l='18781' type='Halide::Internal::Stmt Halide::Internal::bounds_inference(Halide::Internal::Stmt , const std::vector&lt;Function&gt; &amp; outputs, const std::vector&lt;std::string&gt; &amp; realization_order, const std::vector&lt;std::vector&lt;std::string&gt; &gt; &amp; fused_groups, const std::map&lt;std::string, Function&gt; &amp; environment, const std::map&lt;std::pair&lt;std::string, int&gt;, Interval&gt; &amp; func_bounds, const Halide::Target &amp; target)'/>
<doc f='halide/halide-install/include/Halide.h' l='18777'>/** Take a partially lowered statement that includes symbolic
 * representations of the bounds over which things should be realized,
 * and inject expressions defining those bounds.
 */</doc>
<dec f='halide/build/include/Halide.h' l='18781' type='Halide::Internal::Stmt Halide::Internal::bounds_inference(Halide::Internal::Stmt , const std::vector&lt;Function&gt; &amp; outputs, const std::vector&lt;std::string&gt; &amp; realization_order, const std::vector&lt;std::vector&lt;std::string&gt; &gt; &amp; fused_groups, const std::map&lt;std::string, Function&gt; &amp; environment, const std::map&lt;std::pair&lt;std::string, int&gt;, Interval&gt; &amp; func_bounds, const Halide::Target &amp; target)'/>
<doc f='halide/build/include/Halide.h' l='18777'>/** Take a partially lowered statement that includes symbolic
 * representations of the bounds over which things should be realized,
 * and inject expressions defining those bounds.
 */</doc>
<dec f='halide/src/BoundsInference.h' l='27' type='Halide::Internal::Stmt Halide::Internal::bounds_inference(Halide::Internal::Stmt , const std::vector&lt;Function&gt; &amp; outputs, const std::vector&lt;std::string&gt; &amp; realization_order, const std::vector&lt;std::vector&lt;std::string&gt; &gt; &amp; fused_groups, const std::map&lt;std::string, Function&gt; &amp; environment, const std::map&lt;std::pair&lt;std::string, int&gt;, Interval&gt; &amp; func_bounds, const Halide::Target &amp; target)'/>
<def f='halide/src/BoundsInference.cpp' l='1279' ll='1336' type='Halide::Internal::Stmt Halide::Internal::bounds_inference(Halide::Internal::Stmt s, const vector&lt;Halide::Internal::Function&gt; &amp; outputs, const vector&lt;std::string&gt; &amp; order, const vector&lt;vector&lt;std::string&gt; &gt; &amp; fused_groups, const map&lt;std::string, Halide::Internal::Function&gt; &amp; env, const Halide::Internal::FuncValueBounds &amp; func_bounds, const Halide::Target &amp; target)'/>
<doc f='halide/src/BoundsInference.h' l='23'>/** Take a partially lowered statement that includes symbolic
 * representations of the bounds over which things should be realized,
 * and inject expressions defining those bounds.
 */</doc>
<use f='halide/src/Lower.cpp' l='179' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
<use f='halide/src/PrintLoopNest.cpp' l='219' u='c' c='_ZN6Halide8Internal15print_loop_nestB5cxx11ERKSt6vectorINS0_8FunctionESaIS2_EE'/>
