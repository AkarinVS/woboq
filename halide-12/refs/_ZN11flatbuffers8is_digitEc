<def f='halide/build-apps/flatbuffers/include/flatbuffers/util.h' l='65' type='bool flatbuffers::is_digit(char c)'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/util.h' l='69' u='c' c='_ZN11flatbuffers9is_xdigitEc'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/util.h' l='73' u='c' c='_ZN11flatbuffers8is_alnumEc'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/util.h' l='289' u='c' c='_ZN11flatbuffers19StringToIntegerImplEPT_PKcib'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/util.h' l='363' u='c' c='_ZN11flatbuffers14StringToNumberEPKcPT_'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/util.h' l='60'>// https://en.cppreference.com/w/cpp/string/byte/isxdigit
// isdigit and isxdigit are the only standard narrow character classification
// functions that are not affected by the currently installed C locale. although
// some implementations (e.g. Microsoft in 1252 codepage) may classify
// additional single-byte characters as digits.</doc>
<use f='halide/build-apps/flatbuffers/src/idl_parser.cpp' l='443' u='c' c='_ZN11flatbuffers6Parser4NextEv'/>
<use f='halide/build-apps/flatbuffers/src/idl_parser.cpp' l='451' u='c' c='_ZN11flatbuffers6Parser4NextEv'/>
<use f='halide/build-apps/flatbuffers/src/idl_parser.cpp' l='453' u='c' c='_ZN11flatbuffers6Parser4NextEv'/>
<use f='halide/build-apps/flatbuffers/src/idl_parser.cpp' l='455' u='c' c='_ZN11flatbuffers6Parser4NextEv'/>
<use f='halide/build-apps/flatbuffers/src/idl_parser.cpp' l='456' u='c' c='_ZN11flatbuffers6Parser4NextEv'/>
<use f='halide/build-apps/flatbuffers/src/idl_parser.cpp' l='456' u='c' c='_ZN11flatbuffers6Parser4NextEv'/>
<use f='halide/build-apps/flatbuffers/src/idl_parser.cpp' l='468' u='c' c='_ZN11flatbuffers6Parser4NextEv'/>
<use f='halide/build-apps/flatbuffers/src/idl_parser.cpp' l='482' u='c' c='_ZN11flatbuffers6Parser4NextEv'/>
