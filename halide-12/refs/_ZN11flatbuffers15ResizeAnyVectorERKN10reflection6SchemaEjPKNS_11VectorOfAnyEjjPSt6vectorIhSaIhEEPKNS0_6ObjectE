<dec f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='408' type='uint8_t * flatbuffers::ResizeAnyVector(const reflection::Schema &amp; schema, flatbuffers::uoffset_t newsize, const flatbuffers::VectorOfAny * vec, flatbuffers::uoffset_t num_elems, flatbuffers::uoffset_t elem_size, std::vector&lt;uint8_t&gt; * flatbuf, const reflection::Object * root_table = nullptr)'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='403'>// Resizes a flatbuffers::Vector inside a FlatBuffer. FlatBuffer must
// live inside a std::vector so we can resize the buffer if needed.
// &quot;vec&quot; must live inside &quot;flatbuf&quot; and may be invalidated after this call.
// If your FlatBuffer&apos;s root table is not the schema&apos;s root table, you should
// pass in your root_table type as well.</doc>
<def f='halide/build-apps/flatbuffers/src/reflection.cpp' l='329' ll='354' type='uint8_t * flatbuffers::ResizeAnyVector(const reflection::Schema &amp; schema, flatbuffers::uoffset_t newsize, const flatbuffers::VectorOfAny * vec, flatbuffers::uoffset_t num_elems, flatbuffers::uoffset_t elem_size, std::vector&lt;uint8_t&gt; * flatbuf, const reflection::Object * root_table = nullptr)'/>
