<def f='halide/build-apps/eigen/Eigen/src/SVD/SVDBase.h' l='98' ll='103' type='const Eigen::SVDBase::MatrixUType &amp; Eigen::SVDBase::matrixU() const'/>
<doc f='halide/build-apps/eigen/Eigen/src/SVD/SVDBase.h' l='89'>/** \returns the \a U matrix.
   *
   * For the SVD decomposition of a n-by-p matrix, letting \a m be the minimum of \a n and \a p,
   * the U matrix is n-by-n if you asked for \link Eigen::ComputeFullU ComputeFullU \endlink, and is n-by-m if you asked for \link Eigen::ComputeThinU ComputeThinU \endlink.
   *
   * The \a m first columns of \a U are the left singular vectors of the matrix being decomposed.
   *
   * This method asserts that you asked for \a U to be computed.
   */</doc>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='62' u='c' c='zgesdd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='67' u='c' c='zgesdd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='72' u='c' c='zgesdd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='77' u='c' c='zgesdd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='128' u='c' c='zgesvd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='129' u='c' c='zgesvd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='130' u='c' c='zgesvd_'/>
