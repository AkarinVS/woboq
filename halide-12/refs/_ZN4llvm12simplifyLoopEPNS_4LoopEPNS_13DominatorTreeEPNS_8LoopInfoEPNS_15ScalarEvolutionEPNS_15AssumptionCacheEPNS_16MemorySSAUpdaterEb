<dec f='halide/llvm-install/include/llvm/Transforms/Utils/LoopSimplify.h' l='64' type='bool llvm::simplifyLoop(llvm::Loop * L, llvm::DominatorTree * DT, llvm::LoopInfo * LI, llvm::ScalarEvolution * SE, llvm::AssumptionCache * AC, llvm::MemorySSAUpdater * MSSAU, bool PreserveLCSSA)'/>
<doc f='halide/llvm-install/include/llvm/Transforms/Utils/LoopSimplify.h' l='58'>/// Simplify each loop in a loop nest recursively.
///
/// This takes a potentially un-simplified loop L (and its children) and turns
/// it into a simplified loop nest with preheaders and single backedges. It will
/// update \c DominatorTree, \c LoopInfo, \c ScalarEvolution and \c MemorySSA
/// analyses if they&apos;re non-null, and LCSSA if \c PreserveLCSSA is true.</doc>
