<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMap.h' l='245' ll='248' type='void Eigen::Map&lt;SparseMatrix&lt;type-parameter-0-0, _Flags, type-parameter-0-2&gt;, Options, type-parameter-0-4&gt;::Map&lt;SparseMatrix&lt;type-parameter-0-0, _Flags, type-parameter-0-2&gt;, Options, type-parameter-0-4&gt;(Eigen::Index rows, Eigen::Index cols, Eigen::Index nnz, Eigen::Map&lt;SparseMatrix&lt;type-parameter-0-0, _Flags, type-parameter-0-2&gt;, Options, type-parameter-0-4&gt;::StorageIndex * outerIndexPtr, Eigen::Map&lt;SparseMatrix&lt;type-parameter-0-0, _Flags, type-parameter-0-2&gt;, Options, type-parameter-0-4&gt;::StorageIndex * innerIndexPtr, Eigen::Map&lt;SparseMatrix&lt;type-parameter-0-0, _Flags, type-parameter-0-2&gt;, Options, type-parameter-0-4&gt;::Scalar * valuePtr, Eigen::Map&lt;SparseMatrix&lt;type-parameter-0-0, _Flags, type-parameter-0-2&gt;, Options, type-parameter-0-4&gt;::StorageIndex * innerNonZerosPtr = 0)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMap.h' l='237'>/** Constructs a read-write Map to a sparse matrix of size \a rows x \a cols, containing \a nnz non-zero coefficients,
      * stored as a sparse format as defined by the pointers \a outerIndexPtr, \a innerIndexPtr, and \a valuePtr.
      * If the optional parameter \a innerNonZerosPtr is the null pointer, then a standard compressed format is assumed.
      *
      * This constructor is available only if \c SparseMatrixType is non-const.
      *
      * More details on the expected storage schemes are given in the \ref TutorialSparse &quot;manual pages&quot;.
      */</doc>
