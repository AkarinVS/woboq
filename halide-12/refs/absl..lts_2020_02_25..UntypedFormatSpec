<def f='halide/build-apps/abseil-cpp/absl/strings/str_format.h' l='98' ll='113'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_format.h' l='101' c='_ZN4absl14lts_2020_02_2517UntypedFormatSpecC1ERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_format.h' l='102' c='_ZN4absl14lts_2020_02_2517UntypedFormatSpecaSERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_format.h' l='102' c='_ZN4absl14lts_2020_02_2517UntypedFormatSpecaSERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/strings/str_format.h' l='527' c='_ZN4absl14lts_2020_02_2513FormatUntypedENS0_13FormatRawSinkERKNS0_17UntypedFormatSpecENS0_4SpanIKNS0_19str_format_internal13FormatArgImplEEE'/>
<size>16</size>
<doc f='halide/build-apps/abseil-cpp/absl/strings/str_format.h' l='87'>// UntypedFormatSpec
//
// A type-erased class that can be used directly within untyped API entry
// points. An `UntypedFormatSpec` is specifically used as an argument to
// `FormatUntyped()`.
//
// Example:
//
//   absl::UntypedFormatSpec format(&quot;%d&quot;);
//   std::string out;
//   CHECK(absl::FormatUntyped(&amp;out, format, {absl::FormatArg(1)}));</doc>
<fun r='_ZN4absl14lts_2020_02_2517UntypedFormatSpecC1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2517UntypedFormatSpecC1ERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_2517UntypedFormatSpecaSERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_2517UntypedFormatSpecC1ENS0_11string_viewE'/>
<fun r='_ZN4absl14lts_2020_02_2517UntypedFormatSpecC1EPKNS0_19str_format_internal16ParsedFormatBaseE'/>
<mbr r='absl::lts_2020_02_25::UntypedFormatSpec::spec_' o='0' t='str_format_internal::UntypedFormatSpecImpl'/>
