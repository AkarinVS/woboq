<def f='halide/halide-install/include/Halide.h' l='6629' ll='6632'/>
<size>1</size>
<doc f='halide/halide-install/include/Halide.h' l='6627'>/** A compare struct suitable for use in std::map and std::set that
 * computes a lexical ordering on IR nodes. */</doc>
<fun r='_ZNK6Halide8Internal13IRDeepCompareclERKNS_4ExprES4_'/>
<fun r='_ZNK6Halide8Internal13IRDeepCompareclERKNS0_4StmtES4_'/>
<def f='halide/build/include/Halide.h' l='6629' ll='6632'/>
<size>1</size>
<doc f='halide/build/include/Halide.h' l='6627'>/** A compare struct suitable for use in std::map and std::set that
 * computes a lexical ordering on IR nodes. */</doc>
<fun r='_ZNK6Halide8Internal13IRDeepCompareclERKNS_4ExprES4_'/>
<fun r='_ZNK6Halide8Internal13IRDeepCompareclERKNS0_4StmtES4_'/>
<def f='halide/src/IREquality.h' l='15' ll='18'/>
<size>1</size>
<doc f='halide/src/IREquality.h' l='13'>/** A compare struct suitable for use in std::map and std::set that
 * computes a lexical ordering on IR nodes. */</doc>
<fun r='_ZNK6Halide8Internal13IRDeepCompareclERKNS_4ExprES4_'/>
<fun r='_ZNK6Halide8Internal13IRDeepCompareclERKNS0_4StmtES4_'/>
<use f='halide/src/Simplify_Internal.h' l='242'/>
<use f='halide/src/Simplify_Internal.h' l='242'/>
<size>1</size>
<use f='halide/src/LICM.cpp' l='176'/>
<size>1</size>
<use f='halide/src/PartitionLoops.cpp' l='657' c='_ZN6Halide8Internal12_GLOBAL__N_114PartitionLoops5visitEPKNS0_3ForE'/>
<use f='halide/src/PartitionLoops.cpp' l='668' c='_ZN6Halide8Internal12_GLOBAL__N_114PartitionLoops5visitEPKNS0_3ForE'/>
<size>1</size>
<use f='halide/src/Solve.cpp' l='967'/>
<use f='halide/src/Solve.cpp' l='967'/>
<size>1</size>
<use f='halide/src/UnifyDuplicateLets.cpp' l='17'/>
<size>1</size>
<use f='halide/src/VectorizeLoops.cpp' l='1495'/>
<size>1</size>
