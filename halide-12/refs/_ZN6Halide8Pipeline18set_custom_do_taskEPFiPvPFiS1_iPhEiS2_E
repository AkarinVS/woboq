<dec f='halide/halide-install/include/Halide.h' l='15050' type='void Halide::Pipeline::set_custom_do_task(int (*)(void *, int (*)(void *, int, uint8_t *), int, uint8_t *) custom_do_task)'/>
<doc f='halide/halide-install/include/Halide.h' l='15032'>/** Set a custom task handler to be called by the parallel for
     * loop. It is useful to set this if you want to do some
     * additional bookkeeping at the granularity of parallel
     * tasks. The default implementation does this:
     \code
     extern &quot;C&quot; int halide_do_task(void *user_context,
                                   int (*f)(void *, int, uint8_t *),
                                   int idx, uint8_t *state) {
         return f(user_context, idx, state);
     }
     \endcode
     * If you are statically compiling, you can also just define your
     * own version of the above function, and it will clobber Halide&apos;s
     * version.
     *
     * If you&apos;re trying to use a custom parallel runtime, you probably
     * don&apos;t want to call this. See instead \ref Func::set_custom_do_par_for .
    */</doc>
<dec f='halide/build/include/Halide.h' l='15050' type='void Halide::Pipeline::set_custom_do_task(int (*)(void *, int (*)(void *, int, uint8_t *), int, uint8_t *) custom_do_task)'/>
<doc f='halide/build/include/Halide.h' l='15032'>/** Set a custom task handler to be called by the parallel for
     * loop. It is useful to set this if you want to do some
     * additional bookkeeping at the granularity of parallel
     * tasks. The default implementation does this:
     \code
     extern &quot;C&quot; int halide_do_task(void *user_context,
                                   int (*f)(void *, int, uint8_t *),
                                   int idx, uint8_t *state) {
         return f(user_context, idx, state);
     }
     \endcode
     * If you are statically compiling, you can also just define your
     * own version of the above function, and it will clobber Halide&apos;s
     * version.
     *
     * If you&apos;re trying to use a custom parallel runtime, you probably
     * don&apos;t want to call this. See instead \ref Func::set_custom_do_par_for .
    */</doc>
<dec f='halide/src/Pipeline.h' l='394' type='void Halide::Pipeline::set_custom_do_task(int (*)(void *, int (*)(void *, int, uint8_t *), int, uint8_t *) custom_do_task)'/>
<doc f='halide/src/Pipeline.h' l='376'>/** Set a custom task handler to be called by the parallel for
     * loop. It is useful to set this if you want to do some
     * additional bookkeeping at the granularity of parallel
     * tasks. The default implementation does this:
     \code
     extern &quot;C&quot; int halide_do_task(void *user_context,
                                   int (*f)(void *, int, uint8_t *),
                                   int idx, uint8_t *state) {
         return f(user_context, idx, state);
     }
     \endcode
     * If you are statically compiling, you can also just define your
     * own version of the above function, and it will clobber Halide&apos;s
     * version.
     *
     * If you&apos;re trying to use a custom parallel runtime, you probably
     * don&apos;t want to call this. See instead \ref Func::set_custom_do_par_for .
    */</doc>
<use f='halide/src/Func.cpp' l='3277' u='c' c='_ZN6Halide4Func18set_custom_do_taskEPFiPvPFiS1_iPhEiS2_E'/>
<def f='halide/src/Pipeline.cpp' l='660' ll='663' type='void Halide::Pipeline::set_custom_do_task(int (*)(void *, int (*)(void *, int, uint8_t *), int, uint8_t *) cust_do_task)'/>
