<use f='halide/build-apps/abseil-cpp/absl/base/internal/thread_identity.h' l='83'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='485' c='_ZN4absl14lts_2020_02_255Mutex12LockSlowLoopEPNS0_15SynchWaitParamsEi'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='493' c='_ZN4absl14lts_2020_02_255Mutex10UnlockSlowEPNS0_15SynchWaitParamsE'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='465' ll='494'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='852' c='_ZN4absl14lts_2020_02_25L14CondVarEnqueueEPNS0_15SynchWaitParamsE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='874' c='_ZN4absl14lts_2020_02_25L7EnqueueEPNS0_13base_internal14PerThreadSynchEPNS0_15SynchWaitParamsEli'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1571' c='_ZN4absl14lts_2020_02_255Mutex11AwaitCommonERKNS0_9ConditionENS0_24synchronization_internal13KernelTimeoutE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1851' c='_ZN4absl14lts_2020_02_255Mutex20LockSlowWithDeadlineEPKNS0_6MuHowSEPKNS0_9ConditionENS0_24synchronization_internal13KernelTimeoutEi'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1901' c='_ZN4absl14lts_2020_02_255Mutex12LockSlowLoopEPNS0_15SynchWaitParamsEi'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2020' c='_ZN4absl14lts_2020_02_255Mutex10UnlockSlowEPNS0_15SynchWaitParamsE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2479' c='_ZN4absl14lts_2020_02_25L14CondVarEnqueueEPNS0_15SynchWaitParamsE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2528' c='_ZN4absl14lts_2020_02_257CondVar10WaitCommonEPNS0_5MutexENS0_24synchronization_internal13KernelTimeoutE'/>
<size>56</size>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='449'>//------------------------------------------------------------------

// The SynchWaitParams struct encapsulates the way in which a thread is waiting:
// whether it has a timeout, the condition, exclusive/shared, and whether a
// condition variable wait has an associated Mutex (as opposed to another
// type of lock).  It also points to the PerThreadSynch struct of its thread.
// cv_word tells Enqueue() to enqueue on a CondVar using CondVarEnqueue().
//
// This structure is held on the stack rather than directly in
// PerThreadSynch because a thread can be waiting on multiple Mutexes if,
// while waiting on one Mutex, the implementation calls a client callback
// (such as a Condition function) that acquires another Mutex. We don&apos;t
// strictly need to allow this, but programmers become confused if we do not
// allow them to use functions such a LOG() within Condition functions.  The
// PerThreadSynch struct points at the most recent SynchWaitParams struct when
// the thread is on a Mutex&apos;s waiter queue.</doc>
<fun r='_ZN4absl14lts_2020_02_2515SynchWaitParamsC1EPKNS0_6MuHowSEPKNS0_9ConditionENS0_24synchronization_internal13KernelTimeoutEPNS0_5MutexEPNS0_13base_inter806914'/>
<mbr r='absl::lts_2020_02_25::SynchWaitParams::how' o='0' t='const Mutex::MuHow'/>
<mbr r='absl::lts_2020_02_25::SynchWaitParams::cond' o='64' t='const absl::lts_2020_02_25::Condition *'/>
<mbr r='absl::lts_2020_02_25::SynchWaitParams::timeout' o='128' t='absl::lts_2020_02_25::synchronization_internal::KernelTimeout'/>
<mbr r='absl::lts_2020_02_25::SynchWaitParams::cvmu' o='192' t='absl::lts_2020_02_25::Mutex *const'/>
<mbr r='absl::lts_2020_02_25::SynchWaitParams::thread' o='256' t='absl::lts_2020_02_25::base_internal::PerThreadSynch *const'/>
<mbr r='absl::lts_2020_02_25::SynchWaitParams::cv_word' o='320' t='std::atomic&lt;intptr_t&gt; *'/>
<mbr r='absl::lts_2020_02_25::SynchWaitParams::contention_start_cycles' o='384' t='int64_t'/>
