<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='783' type='void absl::lts_2020_02_25::CondVar::Wait(absl::lts_2020_02_25::Mutex * mu)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='776'>// CondVar::Wait()
  //
  // Atomically releases a `Mutex` and blocks on this condition variable.
  // Waits until awakened by a call to `Signal()` or `SignalAll()` (or a
  // spurious wakeup), then reacquires the `Mutex` and returns.
  //
  // Requires and ensures that the current thread holds the `Mutex`.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2572' ll='2574' type='void absl::lts_2020_02_25::CondVar::Wait(absl::lts_2020_02_25::Mutex * mu)'/>
