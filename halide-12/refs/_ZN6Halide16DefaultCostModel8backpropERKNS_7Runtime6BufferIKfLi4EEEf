<dec f='halide/src/autoschedulers/adams2019/DefaultCostModel.h' l='57' type='float Halide::DefaultCostModel::backprop(const Runtime::Buffer&lt;const float&gt; &amp; true_runtimes, float learning_rate)'/>
<doc f='halide/src/autoschedulers/adams2019/DefaultCostModel.h' l='56'>// Update model weights using true measured runtimes.</doc>
<def f='halide/src/autoschedulers/adams2019/DefaultCostModel.cpp' l='173' ll='268' type='float Halide::DefaultCostModel::backprop(const Runtime::Buffer&lt;const float&gt; &amp; true_runtimes, float learning_rate)'/>
<doc f='halide/src/autoschedulers/adams2019/DefaultCostModel.cpp' l='167'>// Backprop state. To run ADAM we need a running average of the
// gradients and gradients squared. We add an outer dimension of
// size 3 to the new weight outputs to track this state. So buf(_,
// 0) is the new weight, buf(_, 1) is the ADAM running average of
// the first moment, and buf(_, 2) is the ADAM running average of
// the second moment.</doc>
<use f='halide/src/autoschedulers/adams2019/retrain_cost_model.cpp' l='476' u='c' c='main'/>
