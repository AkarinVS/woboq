<dec f='halide/halide-install/include/Halide.h' l='1084' type='int halide_msan_annotate_buffer_is_initialized(void * user_context, struct halide_buffer_t * buffer)'/>
<doc f='halide/halide-install/include/Halide.h' l='1073'>/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/halide-install/include/HalideRuntime.h' l='986' type='int halide_msan_annotate_buffer_is_initialized(void * user_context, struct halide_buffer_t * buffer)'/>
<doc f='halide/halide-install/include/HalideRuntime.h' l='975'>/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='1146' type='int halide_msan_annotate_buffer_is_initialized(void * user_context, struct halide_buffer_t * buffer)'/>
<doc f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='1135'>/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='1146' type='int halide_msan_annotate_buffer_is_initialized(void * user_context, struct halide_buffer_t * buffer)'/>
<doc f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='1135'>/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/build/include/HalideRuntime.h' l='986' type='int halide_msan_annotate_buffer_is_initialized(void * user_context, struct halide_buffer_t * buffer)'/>
<doc f='halide/build/include/HalideRuntime.h' l='975'>/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/build/include/Halide.h' l='1084' type='int halide_msan_annotate_buffer_is_initialized(void * user_context, struct halide_buffer_t * buffer)'/>
<doc f='halide/build/include/Halide.h' l='1073'>/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='986' type='int halide_msan_annotate_buffer_is_initialized(void * user_context, struct halide_buffer_t * buffer)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='975'>/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */</doc>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='1058' type='int halide_msan_annotate_buffer_is_initialized(void * user_context, struct halide_buffer_t * buffer)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='1047'>/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */</doc>
