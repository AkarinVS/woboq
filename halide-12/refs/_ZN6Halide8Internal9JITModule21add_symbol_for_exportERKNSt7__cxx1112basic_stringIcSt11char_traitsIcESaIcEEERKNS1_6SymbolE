<dec f='halide/halide-install/include/Halide.h' l='13376' type='void Halide::Internal::JITModule::add_symbol_for_export(const std::string &amp; name, const Halide::Internal::JITModule::Symbol &amp; extern_symbol)'/>
<doc f='halide/halide-install/include/Halide.h' l='13372'>/** Registers a single Symbol as available to modules which depend
     * on this one. The Symbol structure provides both the address and
     * the LLVM type for the function, which allows type safe linkage of
     * extenal routines. */</doc>
<dec f='halide/build/include/Halide.h' l='13376' type='void Halide::Internal::JITModule::add_symbol_for_export(const std::string &amp; name, const Halide::Internal::JITModule::Symbol &amp; extern_symbol)'/>
<doc f='halide/build/include/Halide.h' l='13372'>/** Registers a single Symbol as available to modules which depend
     * on this one. The Symbol structure provides both the address and
     * the LLVM type for the function, which allows type safe linkage of
     * extenal routines. */</doc>
<dec f='halide/src/JITModule.h' l='109' type='void Halide::Internal::JITModule::add_symbol_for_export(const std::string &amp; name, const Halide::Internal::JITModule::Symbol &amp; extern_symbol)'/>
<doc f='halide/src/JITModule.h' l='105'>/** Registers a single Symbol as available to modules which depend
     * on this one. The Symbol structure provides both the address and
     * the LLVM type for the function, which allows type safe linkage of
     * extenal routines. */</doc>
<def f='halide/src/JITModule.cpp' l='434' ll='436' type='void Halide::Internal::JITModule::add_symbol_for_export(const std::string &amp; name, const Halide::Internal::JITModule::Symbol &amp; extern_symbol)'/>
<use f='halide/src/Pipeline.cpp' l='1024' u='c' c='_ZN6Halide8Pipeline23make_externs_jit_moduleERKNS_6TargetERSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_9JITExternESt4lessISA_ESaISt4pairIKSA_SB_EEE'/>
