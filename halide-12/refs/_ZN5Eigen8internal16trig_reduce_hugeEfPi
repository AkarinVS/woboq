<def f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/GenericPacketMathFunctions.h' l='321' ll='373' type='float Eigen::internal::trig_reduce_huge(float xf, int * quadrant)'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/arch/Default/GenericPacketMathFunctions.h' l='312'>// The following code is inspired by the following stack-overflow answer:
//   https://stackoverflow.com/questions/30463616/payne-hanek-algorithm-implementation-in-c/30465751#30465751
// It has been largely optimized:
//  - By-pass calls to frexp.
//  - Aligned loads of required 96 bits of 2/pi. This is accomplished by
//    (1) balancing the mantissa and exponent to the required bits of 2/pi are
//    aligned on 8-bits, and (2) replicating the storage of the bits of 2/pi.
//  - Avoid a branch in rounding and extraction of the remaining fractional part.
// Overall, I measured a speed up higher than x2 on x86-64.</doc>
