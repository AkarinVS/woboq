<dec f='halide/build/_deps/pybind11-src/include/pybind11/detail/common.h' l='387' type='6'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='574' c='_ZN8pybind116detail19type_caster_generic4castEPKvNS_19return_value_policyENS_6handleEPKNS0_9type_infoEPFPvS3_ESB_S3_'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='1400' c='_ZN8pybind116class_13def_readwriteEPKcMTL0__TL0_0_DpRKTL0_1_'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='1408' c='_ZN8pybind116class_12def_readonlyEPKcMTL0__KTL0_0_DpRKTL0_1_'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='1431' c='_ZN8pybind116class_21def_property_readonlyEPKcRKTL0__DpRKTL0_0_'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='1460' c='_ZN8pybind116class_12def_propertyEPKcRKTL0__RKNS_12cpp_functionEDpRKTL0_0_'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='1890'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='1919'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='1948'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='1955'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/detail/common.h' l='377'>/** This policy only applies to methods and properties. It references the
        object without taking ownership similar to the above
        return_value_policy::reference policy. In contrast to that policy, the
        function or propertyâ€™s implicit this argument (called the parent) is
        considered to be the the owner of the return value (the child).
        pybind11 then couples the lifetime of the parent to the child via a
        reference relationship that ensures that the parent cannot be garbage
        collected while Python is still using the child. More advanced
        variations of this scheme are also possible using combinations of
        return_value_policy::reference and the keep_alive call policy */</doc>
