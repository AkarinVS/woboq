<dec f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='661' type='llvm::CallInst * llvm::IRBuilderBase::CreateElementUnorderedAtomicMemCpy(llvm::Value * Dst, llvm::Align DstAlign, llvm::Value * Src, llvm::Align SrcAlign, llvm::Value * Size, uint32_t ElementSize, llvm::MDNode * TBAATag = nullptr, llvm::MDNode * TBAAStructTag = nullptr, llvm::MDNode * ScopeTag = nullptr, llvm::MDNode * NoAliasTag = nullptr)'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='675' u='c' c='_ZN4llvm13IRBuilderBase34CreateElementUnorderedAtomicMemCpyEPNS_5ValueEjS2_jmjPNS_6MDNodeES4_S4_S4_'/>
<use f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='688' u='c' c='_ZN4llvm13IRBuilderBase34CreateElementUnorderedAtomicMemCpyEPNS_5ValueEjS2_jS2_jPNS_6MDNodeES4_S4_S4_'/>
<doc f='halide/llvm-install/include/llvm/IR/IRBuilder.h' l='653'>/// Create and insert an element unordered-atomic memcpy between the
  /// specified pointers.
  ///
  /// DstAlign/SrcAlign are the alignments of the Dst/Src pointers, respectively.
  ///
  /// If the pointers aren&apos;t i8*, they will be converted.  If a TBAA tag is
  /// specified, it will be added to the instruction. Likewise with alias.scope
  /// and noalias tags.</doc>
