<dec f='halide/build-apps/abseil-cpp/absl/flags/parse.h' l='56' type='std::vector&lt;char *&gt; absl::lts_2020_02_25::ParseCommandLine(int argc, char ** argv)'/>
<def f='halide/build-apps/abseil-cpp/absl/flags/parse.cc' l='760' ll='765' type='std::vector&lt;char *&gt; absl::lts_2020_02_25::ParseCommandLine(int argc, char ** argv)'/>
<doc f='halide/build-apps/abseil-cpp/absl/flags/parse.cc' l='758'>// --------------------------------------------------------------------</doc>
<doc f='halide/build-apps/abseil-cpp/absl/flags/parse.h' l='35'>// ParseCommandLine()
//
// Parses the set of command-line arguments passed in the `argc` (argument
// count) and `argv[]` (argument vector) parameters from `main()`, assigning
// values to any defined Abseil flags. (Any arguments passed after the
// flag-terminating delimiter (`--`) are treated as positional arguments and
// ignored.)
//
// Any command-line flags (and arguments to those flags) are parsed into Abseil
// Flag values, if those flags are defined. Any undefined flags will either
// return an error, or be ignored if that flag is designated using `undefok` to
// indicate &quot;undefined is OK.&quot;
//
// Any command-line positional arguments not part of any command-line flag (or
// arguments to a flag) are returned in a vector, with the program invocation
// name at position 0 of that vector. (Note that this includes positional
// arguments after the flag-terminating delimiter `--`.)
//
// After all flags and flag arguments are parsed, this function looks for any
// built-in usage flags (e.g. `--help`), and if any were specified, it reports
// help messages and then exits the program.</doc>
