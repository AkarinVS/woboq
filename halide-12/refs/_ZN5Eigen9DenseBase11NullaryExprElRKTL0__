<dec f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='355' type='static const CwiseNullaryOp&lt;CustomNullaryOp, Eigen::DenseBase::PlainObject&gt; Eigen::DenseBase::NullaryExpr(Eigen::Index size, const CustomNullaryOp &amp; func)'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/CwiseNullaryOp.h' l='137' ll='150' type='static const CwiseNullaryOp&lt;CustomNullaryOp, typename DenseBase&lt;Derived&gt;::PlainObject&gt; Eigen::DenseBase::NullaryExpr(Eigen::Index size, const CustomNullaryOp &amp; func)'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/CwiseNullaryOp.h' l='119'>/** \returns an expression of a matrix defined by a custom functor \a func
  *
  * The parameter \a size is the size of the returned vector.
  * Must be compatible with this MatrixBase type.
  *
  * \only_for_vectors
  *
  * This variant is meant to be used for dynamic-size vector types. For fixed-size types,
  * it is redundant to pass \a size as argument, so Zero() should be used
  * instead.
  *
  * The template parameter \a CustomNullaryOp is the type of the functor.
  *
  * Here is an example with C++11 random generators: \include random_cpp11.cpp
  * Output: \verbinclude random_cpp11.out
  * 
  * \sa class CwiseNullaryOp
  */</doc>
