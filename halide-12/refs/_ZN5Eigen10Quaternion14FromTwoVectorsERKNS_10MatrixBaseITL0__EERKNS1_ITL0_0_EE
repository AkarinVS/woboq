<dec f='halide/build-apps/eigen/Eigen/src/Geometry/Quaternion.h' l='338' type='static Quaternion&lt;Scalar, Options&gt; Eigen::Quaternion::FromTwoVectors(const MatrixBase&lt;Derived1&gt; &amp; a, const MatrixBase&lt;Derived2&gt; &amp; b)'/>
<def f='halide/build-apps/eigen/Eigen/src/Geometry/Quaternion.h' l='703' ll='710' type='static Quaternion&lt;Scalar, Options&gt; Eigen::Quaternion::FromTwoVectors(const MatrixBase&lt;Derived1&gt; &amp; a, const MatrixBase&lt;Derived2&gt; &amp; b)'/>
<doc f='halide/build-apps/eigen/Eigen/src/Geometry/Quaternion.h' l='693'>/** Returns a quaternion representing a rotation between
  * the two arbitrary vectors \a a and \a b. In other words, the built
  * rotation represent a rotation sending the line of direction \a a
  * to the line of direction \a b, both lines passing through the origin.
  *
  * \returns resulting quaternion
  *
  * Note that the two input vectors do \b not have to be normalized, and
  * do not need to have the same norm.
  */</doc>
