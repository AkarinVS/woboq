<inh f='halide/llvm-install/include/llvm/IR/PassManager.h' l='374' c='llvm::PassInfoMixin'/>
<def f='halide/llvm-install/include/llvm/IR/PassManager.h' l='1231' ll='1246'/>
<use f='halide/llvm-install/include/llvm/IR/PassManager.h' l='1232'/>
<use f='halide/llvm-install/include/llvm/IR/PassManager.h' l='1251' c='_ZN4llvm33createModuleToFunctionPassAdaptorET_'/>
<use f='halide/llvm-install/include/llvm/IR/PassManager.h' l='1257' c='_ZN4llvm33createModuleToFunctionPassAdaptorET_'/>
<size>8</size>
<doc f='halide/llvm-install/include/llvm/IR/PassManager.h' l='1208'>/// Trivial adaptor that maps from a module to its functions.
///
/// Designed to allow composition of a FunctionPass(Manager) and
/// a ModulePassManager, by running the FunctionPass(Manager) over every
/// function in the module.
///
/// Function passes run within this adaptor can rely on having exclusive access
/// to the function they are run over. They should not read or modify any other
/// functions! Other threads or systems may be manipulating other functions in
/// the module, and so their state should never be relied on.
/// FIXME: Make the above true for all of LLVM&apos;s actual passes, some still
/// violate this principle.
///
/// Function passes can also read the module containing the function, but they
/// should not modify that module outside of the use lists of various globals.
/// For example, a function pass is not permitted to add functions to the
/// module.
/// FIXME: Make the above true for all of LLVM&apos;s actual passes, some still
/// violate this principle.
///
/// Note that although function passes can access module analyses, module
/// analyses are not invalidated while the function passes are running, so they
/// may be stale.  Function analyses will not be stale.</doc>
<fun r='_ZN4llvm27ModuleToFunctionPassAdaptorC1ESt10unique_ptrINS_6detail11PassConceptINS_8FunctionENS_15AnalysisManagerIS4_JEEEJEEESt14default_deleteIS7_EE'/>
<fun r='_ZN4llvm27ModuleToFunctionPassAdaptor3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<fun r='_ZN4llvm27ModuleToFunctionPassAdaptor10isRequiredEv'/>
<mbr r='llvm::ModuleToFunctionPassAdaptor::Pass' o='0' t='std::unique_ptr&lt;PassConceptT&gt;'/>
