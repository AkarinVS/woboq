<def f='halide/llvm-install/include/llvm/Support/Threading.h' l='193' ll='199' type='llvm::ThreadPoolStrategy llvm::heavyweight_hardware_concurrency(unsigned int ThreadCount = 0)'/>
<use f='halide/llvm-install/include/llvm/Support/Threading.h' l='207' u='c' c='_ZN4llvm32heavyweight_hardware_concurrencyENS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/Support/Threading.h' l='210' u='c' c='_ZN4llvm32heavyweight_hardware_concurrencyENS_9StringRefE'/>
<doc f='halide/llvm-install/include/llvm/Support/Threading.h' l='187'>/// Returns a thread strategy for tasks requiring significant memory or other
  /// resources. To be used for workloads where hardware_concurrency() proves to
  /// be less efficient. Avoid this strategy if doing lots of I/O. Currently
  /// based on physical cores, if available for the host system, otherwise falls
  /// back to hardware_concurrency(). Returns 1 when LLVM is configured with
  /// LLVM_ENABLE_THREADS = OFF.</doc>
