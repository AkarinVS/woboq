<def f='halide/build-apps/gemmlowp/public/output_stages.h' l='40' ll='44'/>
<use f='halide/build-apps/gemmlowp/public/output_stages.h' l='210' c='_ZN8gemmlowp26MakeStandardOutputPipelineEiii'/>
<use f='halide/build-apps/gemmlowp/public/output_stages.h' l='215' c='_ZN8gemmlowp26MakeStandardOutputPipelineEiii'/>
<use f='halide/build-apps/gemmlowp/internal/output.h' l='66'/>
<use f='halide/build-apps/gemmlowp/internal/output.h' l='71'/>
<size>12</size>
<doc f='halide/build-apps/gemmlowp/public/output_stages.h' l='29'>// This output stage takes int32 values and returns still int32 values,
// but &quot;quantized down&quot; to the uint8 scale; in other words, its output
// is typically what one would then clamp to [0..255] and cast to uint8
// (see OutputStageSaturatingCastToUint8).
//
// This &quot;quantization down&quot; process depends on 3 parameters,
//   result_offset, result_mult_int, result_shift,
// and the result is:
//   ((input + result_offset) * result_mult_int + rounding) &gt;&gt; result_shift
// where
//   rounding = (result_shift &lt; 1) ? 0 : (1 &lt;&lt; (result_shift - 1));</doc>
<mbr r='gemmlowp::OutputStageQuantizeDownInt32ToUint8Scale::result_offset' o='0' t='std::int32_t'/>
<mbr r='gemmlowp::OutputStageQuantizeDownInt32ToUint8Scale::result_mult_int' o='32' t='std::int32_t'/>
<mbr r='gemmlowp::OutputStageQuantizeDownInt32ToUint8Scale::result_shift' o='64' t='std::int32_t'/>
