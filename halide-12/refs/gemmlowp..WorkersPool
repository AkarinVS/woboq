<def f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='365' ll='456'/>
<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='440' c='_ZN8gemmlowp11WorkersPoolC1ERKS0_'/>
<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='568' c='_ZN8gemmlowp22MultiThreadGemmContext12workers_poolEv'/>
<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='574'/>
<size>120</size>
<doc f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='358'>// A very simple pool of workers, that only allows the very
// specific parallelization pattern that we use here:
// a fixed number of workers can be given work, and one then
// waits for all of them to finish.
//
// See MultiThreadGemmContextBase for how other WorkersPool implementations can
// be used.</doc>
<fun r='_ZN8gemmlowp11WorkersPoolC1Ev'/>
<fun r='_ZN8gemmlowp11WorkersPoolD1Ev'/>
<fun r='_ZN8gemmlowp11WorkersPool7ExecuteEiPT_'/>
<fun r='_ZN8gemmlowp11WorkersPool28LegacyExecuteAndDestroyTasksERKSt6vectorIPNS_4TaskESaIS3_EE'/>
<fun r='_ZN8gemmlowp11WorkersPool7ExecuteERKSt6vectorIPNS_4TaskESaIS3_EE'/>
<fun r='_ZN8gemmlowp11WorkersPool13CreateWorkersEm'/>
<fun r='_ZN8gemmlowp11WorkersPoolC1ERKS0_'/>
<mbr r='gemmlowp::WorkersPool::workers_' o='0' t='std::vector&lt;Worker *&gt;'/>
<mbr r='gemmlowp::WorkersPool::counter_to_decrement_when_ready_' o='192' t='gemmlowp::BlockingCounter'/>
<mbr r='gemmlowp::WorkersPool::main_thread_task_allocator_' o='256' t='gemmlowp::Allocator'/>
