<dec f='halide/halide-install/include/Halide.h' l='16888' type='void Halide::Func::compile_to(const std::map&lt;Output, std::string&gt; &amp; output_files, const std::vector&lt;Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/halide-install/include/Halide.h' l='16884'>/** Compile and generate multiple target files with single call.
     * Deduces target files based on filenames specified in
     * output_files map.
     */</doc>
<dec f='halide/build/include/Halide.h' l='16888' type='void Halide::Func::compile_to(const std::map&lt;Output, std::string&gt; &amp; output_files, const std::vector&lt;Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/build/include/Halide.h' l='16884'>/** Compile and generate multiple target files with single call.
     * Deduces target files based on filenames specified in
     * output_files map.
     */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='214' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='1008' type='void Halide::Func::compile_to(const std::map&lt;Output, std::string&gt; &amp; output_files, const std::vector&lt;Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
<doc f='halide/src/Func.h' l='1004'>/** Compile and generate multiple target files with single call.
     * Deduces target files based on filenames specified in
     * output_files map.
     */</doc>
<def f='halide/src/Func.cpp' l='3167' ll='3172' type='void Halide::Func::compile_to(const map&lt;Halide::Output, std::string&gt; &amp; output_files, const vector&lt;Halide::Argument&gt; &amp; args, const std::string &amp; fn_name, const Halide::Target &amp; target = get_target_from_environment())'/>
