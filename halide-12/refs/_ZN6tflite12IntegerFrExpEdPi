<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.h' l='215' type='int64_t tflite::IntegerFrExp(double input, int * shift)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.h' l='198'>// Splits a double input value into a returned fraction, and a shift value from
// the exponent, using only bitwise and integer operations to support
// microcontrollers and other environments without floating-point support.
//
// This is designed to be a replacement for how std::frexp() is used within the
// QuantizeMultiplier() function, and so has a different signature than the
// standard version, returning a 64-bit integer rather than a double. This
// result has a maximum value of 1&lt;&lt;31, with the fraction expressed as a
// proportion of that maximum.
//
// std::frexp() returns NaNs and infinities unmodified, but since we&apos;re
// returning integers that can&apos;t represent those values, instead we return
// a shift of std::numeric_limits&lt;int&gt;::max() for all bad numbers, with an int64
// result of 0 for NaNs, std:numeric_limits&lt;int64_t&gt;::max() for +INFINITY, and
// std::numeric_limits&lt;int64_t&gt;::min() for -INFINITY. Denormalized inputs will
// result in return values that end up truncating some bits at the end,
// reflecting the loss of precision inherent in denormalization.</doc>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.cc' l='112' ll='176' type='int64_t tflite::IntegerFrExp(double input, int * shift)'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.cc' l='227' u='c' c='_ZN6tflite21IntegerDoubleMultiplyEdd'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.cc' l='229' u='c' c='_ZN6tflite21IntegerDoubleMultiplyEdd'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.cc' l='242' u='c' c='_ZN6tflite20IntegerDoubleCompareEdd'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/quantization_util.cc' l='244' u='c' c='_ZN6tflite20IntegerDoubleCompareEdd'/>
