<dec f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='529' type='static const Eigen::DenseBase::RandomReturnType Eigen::DenseBase::Random(Eigen::Index size)'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/Random.h' l='85' ll='90' type='static const typename DenseBase&lt;Derived&gt;::RandomReturnType Eigen::DenseBase::Random(Eigen::Index size)'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Random.h' l='61'>/** \returns a random vector expression
  *
  * Numbers are uniformly spread through their whole definition range for integer types,
  * and in the [-1:1] range for floating point scalar types.
  *
  * The parameter \a size is the size of the returned vector.
  * Must be compatible with this MatrixBase type.
  *
  * \only_for_vectors
  * \not_reentrant
  *
  * This variant is meant to be used for dynamic-size vector types. For fixed-size types,
  * it is redundant to pass \a size as argument, so Random() should be used
  * instead.
  *
  * Example: \include MatrixBase_random_int.cpp
  * Output: \verbinclude MatrixBase_random_int.out
  *
  * This expression has the &quot;evaluate before nesting&quot; flag so that it will be evaluated into
  * a temporary vector whenever it is nested in a larger expression. This prevents unexpected
  * behavior with expressions involving random matrices.
  *
  * \sa DenseBase::setRandom(), DenseBase::Random(Index,Index), DenseBase::Random()
  */</doc>
