<def f='halide/build-apps/abseil-cpp/absl/debugging/leak_check.h' l='88' ll='94'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/leak_check.h' l='91' c='_ZN4absl14lts_2020_02_2517LeakCheckDisablerC1ERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/leak_check.h' l='92' c='_ZN4absl14lts_2020_02_2517LeakCheckDisableraSERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/leak_check.h' l='92' c='_ZN4absl14lts_2020_02_2517LeakCheckDisableraSERKS1_'/>
<size>1</size>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/leak_check.h' l='73'>// LeakCheckDisabler
//
// This helper class indicates that any heap allocations done in the code block
// covered by the scoped object, which should be allocated on the stack, will
// not be reported as leaks. Leak check disabling will occur within the code
// block and any nested function calls within the code block.
//
// Example:
//
//   void Foo() {
//     LeakCheckDisabler disabler;
//     ... code that allocates objects whose leaks should be ignored ...
//   }
//
// REQUIRES: Destructor runs in same thread as constructor</doc>
<fun r='_ZN4absl14lts_2020_02_2517LeakCheckDisablerC1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2517LeakCheckDisablerC1ERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_2517LeakCheckDisableraSERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_2517LeakCheckDisablerD1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2517LeakCheckDisablerC1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2517LeakCheckDisablerD1Ev'/>
