<dec f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.h' l='41' type='void absl::lts_2020_02_25::synchronization_internal::ReclaimThreadIdentity(void * v)'/>
<dec f='halide/build-apps/abseil-cpp/absl/synchronization/internal/per_thread_sem.h' l='85' type='void absl::lts_2020_02_25::synchronization_internal::ReclaimThreadIdentity(void * v)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.h' l='39'>// A per-thread destructor for reclaiming associated ThreadIdentity objects.
// For private use only.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.cc' l='41' ll='66' type='void absl::lts_2020_02_25::synchronization_internal::ReclaimThreadIdentity(void * v)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.cc' l='132' u='r' c='_ZN4absl14lts_2020_02_2524synchronization_internal20CreateThreadIdentityEv'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.cc' l='39'>// A per-thread destructor for reclaiming associated ThreadIdentity objects.
// Since we must preserve their storage we cache them for re-use.</doc>
