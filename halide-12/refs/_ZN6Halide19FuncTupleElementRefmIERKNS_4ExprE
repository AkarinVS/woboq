<dec f='halide/halide-install/include/Halide.h' l='16502' type='Halide::Stage Halide::FuncTupleElementRef::operator-=(const Halide::Expr &amp; e)'/>
<doc f='halide/halide-install/include/Halide.h' l='16496'>/** Define a stage that adds the negative of the given expression to Tuple
     * component &apos;idx&apos; of this Func. The other Tuple components are unchanged.
     * If the expression refers to some RDom, this performs a sum reduction of
     * the negative of the expression over the domain. The function must already
     * have an initial definition.
     */</doc>
<dec f='halide/build/include/Halide.h' l='16502' type='Halide::Stage Halide::FuncTupleElementRef::operator-=(const Halide::Expr &amp; e)'/>
<doc f='halide/build/include/Halide.h' l='16496'>/** Define a stage that adds the negative of the given expression to Tuple
     * component &apos;idx&apos; of this Func. The other Tuple components are unchanged.
     * If the expression refers to some RDom, this performs a sum reduction of
     * the negative of the expression over the domain. The function must already
     * have an initial definition.
     */</doc>
<dec f='halide/src/Func.h' l='622' type='Halide::Stage Halide::FuncTupleElementRef::operator-=(const Halide::Expr &amp; e)'/>
<doc f='halide/src/Func.h' l='616'>/** Define a stage that adds the negative of the given expression to Tuple
     * component &apos;idx&apos; of this Func. The other Tuple components are unchanged.
     * If the expression refers to some RDom, this performs a sum reduction of
     * the negative of the expression over the domain. The function must already
     * have an initial definition.
     */</doc>
<def f='halide/src/Func.cpp' l='3072' ll='3074' type='Halide::Stage Halide::FuncTupleElementRef::operator-=(const Halide::Expr &amp; e)'/>
