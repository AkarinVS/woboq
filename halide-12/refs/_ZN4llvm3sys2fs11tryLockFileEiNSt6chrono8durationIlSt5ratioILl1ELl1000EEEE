<dec f='halide/llvm-install/include/llvm/Support/FileSystem.h' l='1136' type='std::error_code llvm::sys::fs::tryLockFile(int FD, std::chrono::milliseconds Timeout = std::chrono::milliseconds(0))'/>
<doc f='halide/llvm-install/include/llvm/Support/FileSystem.h' l='1114'>/// Try to locks the file during the specified time.
///
/// This function implements advisory locking on entire file. If it returns
/// &lt;em&gt;errc::success&lt;/em&gt;, the file is locked by the calling process. Until the
/// process unlocks the file by calling \a unlockFile, all attempts to lock the
/// same file will fail/block. The process that locked the file may assume that
/// none of other processes read or write this file, provided that all processes
/// lock the file prior to accessing its content.
///
/// @param FD      The descriptor representing the file to lock.
/// @param Timeout Time in milliseconds that the process should wait before
///                reporting lock failure. Zero value means try to get lock only
///                once.
/// @returns errc::success if lock is successfully obtained,
/// errc::no_lock_available if the file cannot be locked, or platform-specific
/// error_code otherwise.
///
/// @note Care should be taken when using this function in a multithreaded
/// context, as it may not prevent other threads in the same process from
/// obtaining a lock on the same file, even if they are using a different file
/// descriptor.</doc>
