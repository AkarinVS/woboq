<dec f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='399' type='void flatbuffers::SetString(const reflection::Schema &amp; schema, const std::string &amp; val, const flatbuffers::String * str, std::vector&lt;uint8_t&gt; * flatbuf, const reflection::Object * root_table = nullptr)'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='394'>// Changes the contents of a string inside a FlatBuffer. FlatBuffer must
// live inside a std::vector so we can resize the buffer if needed.
// &quot;str&quot; must live inside &quot;flatbuf&quot; and may be invalidated after this call.
// If your FlatBuffer&apos;s root table is not the schema&apos;s root table, you should
// pass in your root_table type as well.</doc>
<def f='halide/build-apps/flatbuffers/src/reflection.cpp' l='309' ll='327' type='void flatbuffers::SetString(const reflection::Schema &amp; schema, const std::string &amp; val, const flatbuffers::String * str, std::vector&lt;uint8_t&gt; * flatbuf, const reflection::Object * root_table = nullptr)'/>
