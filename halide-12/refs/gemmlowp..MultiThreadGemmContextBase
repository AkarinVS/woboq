<inh f='halide/build-apps/gemmlowp/internal/single_thread_gemm.h' l='41' c='gemmlowp::SingleThreadGemmContext'/>
<def f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='542' ll='564'/>
<ovr f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='566' c='gemmlowp::MultiThreadGemmContext'/>
<use f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='566'/>
<size>104</size>
<doc f='halide/build-apps/gemmlowp/internal/multi_thread_gemm.h' l='538'>// This base class for multi-threading allows subclasses to implement their own
// workers_pool() method.  See MultiThreadGemmContext below for an example;
// any other implementation of workers_pool() must return an object with the
// same public methods as WorkersPool.</doc>
<fun r='_ZN8gemmlowp26MultiThreadGemmContextBase19set_max_num_threadsEi'/>
<fun r='_ZNK8gemmlowp26MultiThreadGemmContextBase15max_num_threadsEv'/>
<mbr r='gemmlowp::MultiThreadGemmContextBase::max_num_threads_' o='800' t='int'/>
