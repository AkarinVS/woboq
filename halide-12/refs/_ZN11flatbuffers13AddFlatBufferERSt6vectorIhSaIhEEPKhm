<dec f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='441' type='const uint8_t * flatbuffers::AddFlatBuffer(std::vector&lt;uint8_t&gt; &amp; flatbuf, const uint8_t * newbuf, size_t newlen)'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='433'>// Adds any new data (in the form of a new FlatBuffer) to an existing
// FlatBuffer. This can be used when any of the above methods are not
// sufficient, in particular for adding new tables and new fields.
// This is potentially slightly less efficient than a FlatBuffer constructed
// in one piece, since the new FlatBuffer doesn&apos;t share any vtables with the
// existing one.
// The return value can now be set using Vector::MutateOffset or SetFieldT
// below.</doc>
<def f='halide/build-apps/flatbuffers/src/reflection.cpp' l='356' ll='369' type='const uint8_t * flatbuffers::AddFlatBuffer(std::vector&lt;uint8_t&gt; &amp; flatbuf, const uint8_t * newbuf, size_t newlen)'/>
