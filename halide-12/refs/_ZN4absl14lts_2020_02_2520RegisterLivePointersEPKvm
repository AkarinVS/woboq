<dec f='halide/build-apps/abseil-cpp/absl/debugging/leak_check.h' l='102' type='void absl::lts_2020_02_25::RegisterLivePointers(const void * ptr, size_t size)'/>
<def f='halide/build-apps/abseil-cpp/absl/debugging/leak_check.cc' l='27' type='void absl::lts_2020_02_25::RegisterLivePointers(const void * , size_t )'/>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/leak_check.h' l='96'>// RegisterLivePointers()
//
// Registers `ptr[0,size-1]` as pointers to memory that is still actively being
// referenced and for which leak checking should be ignored. This function is
// useful if you store pointers in mapped memory, for memory ranges that we know
// are correct but for which normal analysis would flag as leaked code.</doc>
