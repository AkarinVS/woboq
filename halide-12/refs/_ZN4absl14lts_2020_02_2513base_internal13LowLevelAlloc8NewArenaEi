<dec f='halide/build-apps/abseil-cpp/absl/base/internal/low_level_alloc.h' l='106' type='static absl::lts_2020_02_25::base_internal::LowLevelAlloc::Arena * absl::lts_2020_02_25::base_internal::LowLevelAlloc::NewArena(int32_t flags)'/>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/low_level_alloc.cc' l='367' ll='380' type='static LowLevelAlloc::Arena * absl::lts_2020_02_25::base_internal::LowLevelAlloc::NewArena(int32_t flags)'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/low_level_alloc.cc' l='366'>// L &lt; meta_data_arena-&gt;mu</doc>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/low_level_alloc.h' l='102'>// Construct a new arena.  The allocation of the underlying metadata honors
  // the provided flags.  For example, the call NewArena(kAsyncSignalSafe)
  // is itself async-signal-safe, as well as generatating an arena that provides
  // async-signal-safe Alloc/Free.</doc>
<use f='halide/build-apps/abseil-cpp/absl/debugging/symbolize_elf.inc' l='217' u='c' c='_ZN4absl14lts_2020_02_2518debugging_internal12_GLOBAL__N_116InitSigSafeArenaEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/graphcycles.cc' l='61' u='c' c='_ZN4absl14lts_2020_02_2524synchronization_internal12_GLOBAL__N_120InitArenaIfNecessaryEv'/>
