<dec f='halide/halide-install/include/Halide.h' l='18636' type='Halide::Func Halide::BoundaryConditions::repeat_edge(const Halide::Func &amp; source, const Halide::Region &amp; bounds)'/>
<doc f='halide/halide-install/include/Halide.h' l='18623'>/** Impose a boundary condition such that the nearest edge sample is returned
 *  everywhere outside the given region.
 *
 *  An ImageParam, Buffer&lt;T&gt;, or similar can be passed instead of a Func. If this
 *  is done and no bounds are given, the boundaries will be taken from the
 *  min and extent methods of the passed object.
 *
 *  (This is similar to setting GL_TEXTURE_WRAP_* to GL_CLAMP_TO_EDGE.)
 *
 *  You may pass undefined Exprs for dimensions that you do not wish
 *  to bound.
 */
// @{</doc>
<use f='halide/apps/fft/fft.cpp' l='908' u='c' c='_Z9fft2d_c2r5FuncTI11ComplexExprESt6vectorIiSaIiEES4_RKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/fft/fft.cpp' l='1023' u='c' c='_Z9fft2d_c2r5FuncTI11ComplexExprESt6vectorIiSaIiEES4_RKN6Halide6TargetERK9Fft2dDesc'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='63' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<dec f='halide/build/include/Halide.h' l='18636' type='Halide::Func Halide::BoundaryConditions::repeat_edge(const Halide::Func &amp; source, const Halide::Region &amp; bounds)'/>
<doc f='halide/build/include/Halide.h' l='18623'>/** Impose a boundary condition such that the nearest edge sample is returned
 *  everywhere outside the given region.
 *
 *  An ImageParam, Buffer&lt;T&gt;, or similar can be passed instead of a Func. If this
 *  is done and no bounds are given, the boundaries will be taken from the
 *  min and extent methods of the passed object.
 *
 *  (This is similar to setting GL_TEXTURE_WRAP_* to GL_CLAMP_TO_EDGE.)
 *
 *  You may pass undefined Exprs for dimensions that you do not wish
 *  to bound.
 */
// @{</doc>
<use f='halide/python_bindings/src/PyBoundaryConditions.cpp' l='67' u='c' c='_ZN6Halide14PythonBindings26define_boundary_conditionsERN8pybind117module_E'/>
<use f='halide/python_bindings/src/PyBoundaryConditions.cpp' l='72' u='c' c='_ZN6Halide14PythonBindings26define_boundary_conditionsERN8pybind117module_E'/>
<dec f='halide/src/BoundaryConditions.h' l='153' type='Halide::Func Halide::BoundaryConditions::repeat_edge(const Halide::Func &amp; source, const Halide::Region &amp; bounds)'/>
<def f='halide/src/BoundaryConditions.cpp' l='7' ll='38' type='Halide::Func Halide::BoundaryConditions::repeat_edge(const Halide::Func &amp; source, const Halide::Region &amp; bounds)'/>
<use f='halide/src/BoundaryConditions.cpp' l='69' u='c' c='_ZN6Halide18BoundaryConditions17constant_exteriorERKNS_4FuncERKNS_5TupleERKSt6vectorINS_5RangeESaIS8_EE'/>
<use f='halide/src/BoundaryConditions.cpp' l='73' u='c' c='_ZN6Halide18BoundaryConditions17constant_exteriorERKNS_4FuncERKNS_5TupleERKSt6vectorINS_5RangeESaIS8_EE'/>
<doc f='halide/src/BoundaryConditions.h' l='140'>/** Impose a boundary condition such that the nearest edge sample is returned
 *  everywhere outside the given region.
 *
 *  An ImageParam, Buffer&lt;T&gt;, or similar can be passed instead of a Func. If this
 *  is done and no bounds are given, the boundaries will be taken from the
 *  min and extent methods of the passed object.
 *
 *  (This is similar to setting GL_TEXTURE_WRAP_* to GL_CLAMP_TO_EDGE.)
 *
 *  You may pass undefined Exprs for dimensions that you do not wish
 *  to bound.
 */
// @{</doc>
<use f='halide/src/autoschedulers/adams2019/test.cpp' l='793' u='c' c='main'/>
