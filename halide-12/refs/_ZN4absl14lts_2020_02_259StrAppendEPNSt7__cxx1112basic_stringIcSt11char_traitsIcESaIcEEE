<def f='halide/build-apps/abseil-cpp/absl/strings/str_cat.h' l='376' type='void absl::lts_2020_02_25::StrAppend(std::string * )'/>
<doc f='halide/build-apps/abseil-cpp/absl/strings/str_cat.h' l='349'>// -----------------------------------------------------------------------------
// StrAppend()
// -----------------------------------------------------------------------------
//
// Appends a string or set of strings to an existing string, in a similar
// fashion to `StrCat()`.
//
// WARNING: `StrAppend(&amp;str, a, b, c, ...)` requires that none of the
// a, b, c, parameters be a reference into str. For speed, `StrAppend()` does
// not try to check each of its input arguments to be sure that they are not
// a subset of the string being appended to. That is, while this will work:
//
//   std::string s = &quot;foo&quot;;
//   s += s;
//
// This output is undefined:
//
//   std::string s = &quot;foo&quot;;
//   StrAppend(&amp;s, s);
//
// This output is undefined as well, since `absl::string_view` does not own its
// data:
//
//   std::string s = &quot;foobar&quot;;
//   absl::string_view p = s;
//   StrAppend(&amp;s, p);</doc>
