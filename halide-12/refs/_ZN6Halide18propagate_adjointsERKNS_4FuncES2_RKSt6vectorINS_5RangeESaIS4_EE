<dec f='halide/halide-install/include/Halide.h' l='21046' type='Halide::Derivative Halide::propagate_adjoints(const Halide::Func &amp; output, const Halide::Func &amp; adjoint, const Halide::Region &amp; output_bounds)'/>
<doc f='halide/halide-install/include/Halide.h' l='21038'>/**
 *  Given a Func and a corresponding adjoint, (back)propagate the
 *  adjoint to all dependent Funcs, buffers, and parameters.
 *  The bounds of output and adjoint need to be specified with pair {min, extent}
 *  For each Func the output depends on, and for the pure definition and
 *  each update of that Func, it generates a derivative Func stored in
 *  the Derivative.
 */</doc>
<dec f='halide/build/include/Halide.h' l='21046' type='Halide::Derivative Halide::propagate_adjoints(const Halide::Func &amp; output, const Halide::Func &amp; adjoint, const Halide::Region &amp; output_bounds)'/>
<doc f='halide/build/include/Halide.h' l='21038'>/**
 *  Given a Func and a corresponding adjoint, (back)propagate the
 *  adjoint to all dependent Funcs, buffers, and parameters.
 *  The bounds of output and adjoint need to be specified with pair {min, extent}
 *  For each Func the output depends on, and for the pure definition and
 *  each update of that Func, it generates a derivative Func stored in
 *  the Derivative.
 */</doc>
<use f='halide/python_bindings/src/PyDerivative.cpp' l='29' u='a' c='_ZN6Halide14PythonBindings17define_derivativeERN8pybind117module_E'/>
<dec f='halide/src/Derivative.h' l='51' type='Halide::Derivative Halide::propagate_adjoints(const Halide::Func &amp; output, const Halide::Func &amp; adjoint, const Halide::Region &amp; output_bounds)'/>
<def f='halide/src/Derivative.cpp' l='1949' ll='1962' type='Halide::Derivative Halide::propagate_adjoints(const Halide::Func &amp; output, const Halide::Func &amp; adjoint, const Halide::Region &amp; output_bounds)'/>
<use f='halide/src/Derivative.cpp' l='1972' u='c' c='_ZN6Halide18propagate_adjointsERKNS_4FuncERKNS_6BufferIfEE'/>
<use f='halide/src/Derivative.cpp' l='1983' u='c' c='_ZN6Halide18propagate_adjointsERKNS_4FuncE'/>
<doc f='halide/src/Derivative.h' l='43'>/**
 *  Given a Func and a corresponding adjoint, (back)propagate the
 *  adjoint to all dependent Funcs, buffers, and parameters.
 *  The bounds of output and adjoint need to be specified with pair {min, extent}
 *  For each Func the output depends on, and for the pure definition and
 *  each update of that Func, it generates a derivative Func stored in
 *  the Derivative.
 */</doc>
<use f='halide/src/Generator.cpp' l='1596' u='c' c='_ZN6Halide8Internal13GeneratorBase21build_gradient_moduleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
