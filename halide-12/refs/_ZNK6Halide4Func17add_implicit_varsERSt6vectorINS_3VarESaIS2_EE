<dec f='halide/halide-install/include/Halide.h' l='16572' type='std::pair&lt;int, int&gt; Halide::Func::add_implicit_vars(std::vector&lt;Var&gt; &amp; ) const'/>
<doc f='halide/halide-install/include/Halide.h' l='16567'>/** When you make a reference to this function with fewer
     * arguments than it has dimensions, the argument list is bulked
     * up with &apos;implicit&apos; vars with canonical names. This lets you
     * pass around partially applied Halide functions. */
    // @{</doc>
<dec f='halide/build/include/Halide.h' l='16572' type='std::pair&lt;int, int&gt; Halide::Func::add_implicit_vars(std::vector&lt;Var&gt; &amp; ) const'/>
<doc f='halide/build/include/Halide.h' l='16567'>/** When you make a reference to this function with fewer
     * arguments than it has dimensions, the argument list is bulked
     * up with &apos;implicit&apos; vars with canonical names. This lets you
     * pass around partially applied Halide functions. */
    // @{</doc>
<dec f='halide/src/Func.h' l='692' type='std::pair&lt;int, int&gt; Halide::Func::add_implicit_vars(std::vector&lt;Var&gt; &amp; ) const'/>
<doc f='halide/src/Func.h' l='687'>/** When you make a reference to this function with fewer
     * arguments than it has dimensions, the argument list is bulked
     * up with &apos;implicit&apos; vars with canonical names. This lets you
     * pass around partially applied Halide functions. */
    // @{</doc>
<use f='halide/src/Func.cpp' l='215' u='c' c='_ZNK6Halide4FuncclESt6vectorINS_3VarESaIS2_EE'/>
<def f='halide/src/Func.cpp' l='225' ll='251' type='std::pair&lt;int, int&gt; Halide::Func::add_implicit_vars(vector&lt;Halide::Var&gt; &amp; args) const'/>
