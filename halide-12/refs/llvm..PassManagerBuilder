<use f='halide/llvm-install/include/llvm/Target/TargetMachine.h' l='329' c='_ZN4llvm13TargetMachine17adjustPassManagerERNS_18PassManagerBuilderE'/>
<def f='halide/llvm-install/include/llvm/Transforms/IPO/PassManagerBuilder.h' l='59' ll='232'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO/PassManagerBuilder.h' l='63'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO/PassManagerBuilder.h' l='255' c='_ZN4llvm6unwrapEP28LLVMOpaquePassManagerBuilder'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO/PassManagerBuilder.h' l='256' c='_ZN4llvm6unwrapEP28LLVMOpaquePassManagerBuilder'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO/PassManagerBuilder.h' l='259' c='_ZN4llvm4wrapEPNS_18PassManagerBuilderE'/>
<size>192</size>
<doc f='halide/llvm-install/include/llvm/Transforms/IPO/PassManagerBuilder.h' l='35'>/// PassManagerBuilder - This class is used to set up a standard optimization
/// sequence for languages like C and C++, allowing some APIs to customize the
/// pass sequence in various ways. A simple example of using it would be:
///
///  PassManagerBuilder Builder;
///  Builder.OptLevel = 2;
///  Builder.populateFunctionPassManager(FPM);
///  Builder.populateModulePassManager(MPM);
///
/// In addition to setting up the basic passes, PassManagerBuilder allows
/// frontends to vend a plugin API, where plugins are allowed to add extensions
/// to the default pass manager.  They do this by specifying where in the pass
/// pipeline they want to be added, along with a callback function that adds
/// the pass(es).  For example, a plugin that wanted to add a loop optimization
/// could do something like this:
///
/// static void addMyLoopPass(const PMBuilder &amp;Builder, PassManagerBase &amp;PM) {
///   if (Builder.getOptLevel() &gt; 2 &amp;&amp; Builder.getOptSizeLevel() == 0)
///     PM.add(createMyAwesomePass());
/// }
///   ...
///   Builder.addExtension(PassManagerBuilder::EP_LoopOptimizerEnd,
///                        addMyLoopPass);
///   ...</doc>
<mbr r='llvm::PassManagerBuilder::OptLevel' o='0' t='unsigned int'/>
<mbr r='llvm::PassManagerBuilder::SizeLevel' o='32' t='unsigned int'/>
<mbr r='llvm::PassManagerBuilder::LibraryInfo' o='64' t='llvm::TargetLibraryInfoImpl *'/>
<mbr r='llvm::PassManagerBuilder::Inliner' o='128' t='llvm::Pass *'/>
<mbr r='llvm::PassManagerBuilder::ExportSummary' o='192' t='llvm::ModuleSummaryIndex *'/>
<mbr r='llvm::PassManagerBuilder::ImportSummary' o='256' t='const llvm::ModuleSummaryIndex *'/>
<mbr r='llvm::PassManagerBuilder::DisableTailCalls' o='320' t='bool'/>
<mbr r='llvm::PassManagerBuilder::DisableUnrollLoops' o='328' t='bool'/>
<mbr r='llvm::PassManagerBuilder::CallGraphProfile' o='336' t='bool'/>
<mbr r='llvm::PassManagerBuilder::SLPVectorize' o='344' t='bool'/>
<mbr r='llvm::PassManagerBuilder::LoopVectorize' o='352' t='bool'/>
<mbr r='llvm::PassManagerBuilder::LoopsInterleaved' o='360' t='bool'/>
<mbr r='llvm::PassManagerBuilder::RerollLoops' o='368' t='bool'/>
<mbr r='llvm::PassManagerBuilder::NewGVN' o='376' t='bool'/>
<mbr r='llvm::PassManagerBuilder::DisableGVNLoadPRE' o='384' t='bool'/>
<mbr r='llvm::PassManagerBuilder::ForgetAllSCEVInLoopUnroll' o='392' t='bool'/>
<mbr r='llvm::PassManagerBuilder::VerifyInput' o='400' t='bool'/>
<mbr r='llvm::PassManagerBuilder::VerifyOutput' o='408' t='bool'/>
<mbr r='llvm::PassManagerBuilder::MergeFunctions' o='416' t='bool'/>
<mbr r='llvm::PassManagerBuilder::PrepareForLTO' o='424' t='bool'/>
<mbr r='llvm::PassManagerBuilder::PrepareForThinLTO' o='432' t='bool'/>
<mbr r='llvm::PassManagerBuilder::PerformThinLTO' o='440' t='bool'/>
<mbr r='llvm::PassManagerBuilder::DivergentTarget' o='448' t='bool'/>
<mbr r='llvm::PassManagerBuilder::LicmMssaOptCap' o='480' t='unsigned int'/>
<mbr r='llvm::PassManagerBuilder::LicmMssaNoAccForPromotionCap' o='512' t='unsigned int'/>
<mbr r='llvm::PassManagerBuilder::EnablePGOInstrGen' o='544' t='bool'/>
<mbr r='llvm::PassManagerBuilder::EnablePGOCSInstrGen' o='552' t='bool'/>
<mbr r='llvm::PassManagerBuilder::EnablePGOCSInstrUse' o='560' t='bool'/>
<mbr r='llvm::PassManagerBuilder::PGOInstrGen' o='576' t='std::string'/>
<mbr r='llvm::PassManagerBuilder::PGOInstrUse' o='832' t='std::string'/>
<mbr r='llvm::PassManagerBuilder::PGOSampleUse' o='1088' t='std::string'/>
<mbr r='llvm::PassManagerBuilder::Extensions' o='1344' t='std::vector&lt;std::pair&lt;ExtensionPointTy, ExtensionFn&gt; &gt;'/>
<fun r='_ZN4llvm18PassManagerBuilderC1Ev'/>
<fun r='_ZN4llvm18PassManagerBuilderD1Ev'/>
<fun r='_ZN4llvm18PassManagerBuilder18addGlobalExtensionENS0_16ExtensionPointTyESt8functionIFvRKS0_RNS_6legacy15PassManagerBaseEEE'/>
<fun r='_ZN4llvm18PassManagerBuilder21removeGlobalExtensionEi'/>
<fun r='_ZN4llvm18PassManagerBuilder12addExtensionENS0_16ExtensionPointTyESt8functionIFvRKS0_RNS_6legacy15PassManagerBaseEEE'/>
<fun r='_ZNK4llvm18PassManagerBuilder17addExtensionsToPMENS0_16ExtensionPointTyERNS_6legacy15PassManagerBaseE'/>
<fun r='_ZNK4llvm18PassManagerBuilder29addInitialAliasAnalysisPassesERNS_6legacy15PassManagerBaseE'/>
<fun r='_ZN4llvm18PassManagerBuilder24addLTOOptimizationPassesERNS_6legacy15PassManagerBaseE'/>
<fun r='_ZN4llvm18PassManagerBuilder28addLateLTOOptimizationPassesERNS_6legacy15PassManagerBaseE'/>
<fun r='_ZN4llvm18PassManagerBuilder17addPGOInstrPassesERNS_6legacy15PassManagerBaseEb'/>
<fun r='_ZN4llvm18PassManagerBuilder31addFunctionSimplificationPassesERNS_6legacy15PassManagerBaseE'/>
<fun r='_ZN4llvm18PassManagerBuilder27populateFunctionPassManagerERNS_6legacy19FunctionPassManagerE'/>
<fun r='_ZN4llvm18PassManagerBuilder25populateModulePassManagerERNS_6legacy15PassManagerBaseE'/>
<fun r='_ZN4llvm18PassManagerBuilder22populateLTOPassManagerERNS_6legacy15PassManagerBaseE'/>
<fun r='_ZN4llvm18PassManagerBuilder26populateThinLTOPassManagerERNS_6legacy15PassManagerBaseE'/>
<use f='halide/src/CodeGen_PTX_Dev.cpp' l='675' c='_ZN6Halide8Internal12_GLOBAL__N_115CodeGen_PTX_Dev14compile_to_srcEv'/>
<size>192</size>
