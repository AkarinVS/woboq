<def f='halide/halide-install/include/Halide.h' l='13541' ll='13543' type='static Halide::ExternalCode Halide::ExternalCode::device_code_wrapper(Halide::DeviceAPI device_api, const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/halide-install/include/Halide.h' l='13520'>/** Construct an ExternalCode container from GPU &quot;source code.&quot;
     * This container can be used to insert its code into the GPU code
     * generated for a given DeviceAPI. The specific type of code
     * depends on the device API used as follows:
     *     CUDA: llvm bitcode for PTX
     *     OpenCL: OpenCL source code
     *     GLSL: GLSL source code
     *     OpenGLCompute: GLSL source code
     *     Metal: Metal source code
     *     Hexagon: llvm bitcode for Hexagon
     *
     * At present, this API is not fully working. See Issue:
     *     https://github.com/halide/Halide/issues/1971
     *
     * The name is used as a unique identifier for the external code
     * and duplicates will be reduced to a single instance. Halide
     * does not do anything other than to compare names for
     * equality. To guarantee uniqueness in public code, we suggest
     * using a Java style inverted domain name followed by
     * organization specific naming. E.g.:
     *     com.tyrell.nexus-6.53947db86ba97a9ca5ecd5e60052880945bfeb37 */</doc>
<def f='halide/build/include/Halide.h' l='13541' ll='13543' type='static Halide::ExternalCode Halide::ExternalCode::device_code_wrapper(Halide::DeviceAPI device_api, const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/build/include/Halide.h' l='13520'>/** Construct an ExternalCode container from GPU &quot;source code.&quot;
     * This container can be used to insert its code into the GPU code
     * generated for a given DeviceAPI. The specific type of code
     * depends on the device API used as follows:
     *     CUDA: llvm bitcode for PTX
     *     OpenCL: OpenCL source code
     *     GLSL: GLSL source code
     *     OpenGLCompute: GLSL source code
     *     Metal: Metal source code
     *     Hexagon: llvm bitcode for Hexagon
     *
     * At present, this API is not fully working. See Issue:
     *     https://github.com/halide/Halide/issues/1971
     *
     * The name is used as a unique identifier for the external code
     * and duplicates will be reduced to a single instance. Halide
     * does not do anything other than to compare names for
     * equality. To guarantee uniqueness in public code, we suggest
     * using a Java style inverted domain name followed by
     * organization specific naming. E.g.:
     *     com.tyrell.nexus-6.53947db86ba97a9ca5ecd5e60052880945bfeb37 */</doc>
<def f='halide/src/ExternalCode.h' l='68' ll='70' type='static Halide::ExternalCode Halide::ExternalCode::device_code_wrapper(Halide::DeviceAPI device_api, const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/src/ExternalCode.h' l='47'>/** Construct an ExternalCode container from GPU &quot;source code.&quot;
     * This container can be used to insert its code into the GPU code
     * generated for a given DeviceAPI. The specific type of code
     * depends on the device API used as follows:
     *     CUDA: llvm bitcode for PTX
     *     OpenCL: OpenCL source code
     *     GLSL: GLSL source code
     *     OpenGLCompute: GLSL source code
     *     Metal: Metal source code
     *     Hexagon: llvm bitcode for Hexagon
     *
     * At present, this API is not fully working. See Issue:
     *     https://github.com/halide/Halide/issues/1971
     *
     * The name is used as a unique identifier for the external code
     * and duplicates will be reduced to a single instance. Halide
     * does not do anything other than to compare names for
     * equality. To guarantee uniqueness in public code, we suggest
     * using a Java style inverted domain name followed by
     * organization specific naming. E.g.:
     *     com.tyrell.nexus-6.53947db86ba97a9ca5ecd5e60052880945bfeb37 */</doc>
