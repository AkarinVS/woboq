<dec f='halide/build-apps/abseil-cpp/absl/status/status.h' l='161' type='absl::optional&lt;absl::Cord&gt; absl::lts_2020_02_25::Status::GetPayload(absl::string_view type_url) const'/>
<def f='halide/build-apps/abseil-cpp/absl/status/status.cc' l='118' ll='125' type='absl::optional&lt;absl::Cord&gt; absl::lts_2020_02_25::Status::GetPayload(absl::string_view type_url) const'/>
<doc f='halide/build-apps/abseil-cpp/absl/status/status.h' l='147'>// Payload management APIs

  // Type URL should be unique and follow the naming convention below:
  // The idea of type URL comes from `google.protobuf.Any`
  // (https://developers.google.com/protocol-buffers/docs/proto3#any). The
  // type URL should be globally unique and follow the format of URL
  // (https://en.wikipedia.org/wiki/URL). The default type URL for a given
  // protobuf message type is &quot;type.googleapis.com/packagename.messagename&quot;. For
  // other custom wire formats, users should define the format of type URL in a
  // similar practice so as to minimize the chance of conflict between type
  // URLs. Users should make sure that the type URL can be mapped to a concrete
  // C++ type if they want to deserialize the payload and read it effectively.

  // Gets the payload based for `type_url` key, if it is present.</doc>
