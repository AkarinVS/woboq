<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/transpose_utils.h' l='42' type='size_t tflite::transpose_utils::Flatten(const tflite::RuntimeShape &amp; input_shape, const tflite::RuntimeShape &amp; output_shape, const tflite::TransposeParams &amp; params, tflite::RuntimeShape * non_flatten_input_shape, tflite::RuntimeShape * non_flatten_output_shape, tflite::TransposeParams * non_flatten_params)'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/optimized/optimized_ops.h' l='7428' u='c' c='_ZN6tflite13optimized_ops9TransposeERKNS_15TransposeParamsERKNS_12RuntimeShapeEPKT_S6_PS7_'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/transpose_utils.h' l='36'>// Flatten finds the dimensions that can be flatten, shrinks the given shapes
// and the given perm parameter to reflect the non-flatten dimensions, and
// returns the total size of the non-flatten dimensions.
//
// E.g, in perm [0, 1, 3, 2] case, the first two dimensions can be flatten and
// it returns |Dim Size(2)| x |Dim Size(3)|.</doc>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/internal/transpose_utils.cc' l='120' ll='161' type='size_t tflite::transpose_utils::Flatten(const tflite::RuntimeShape &amp; input_shape, const tflite::RuntimeShape &amp; output_shape, const tflite::TransposeParams &amp; params, tflite::RuntimeShape * non_flatten_input_shape, tflite::RuntimeShape * non_flatten_output_shape, tflite::TransposeParams * non_flatten_params)'/>
