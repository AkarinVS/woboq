<use f='halide/llvm-install/include/llvm/Target/TargetMachine.h' l='338' c='_ZN4llvm13TargetMachine28registerDefaultAliasAnalysesERNS_9AAManagerE'/>
<inh f='halide/llvm-install/include/llvm/IR/PassManager.h' l='391' c='llvm::AnalysisInfoMixin'/>
<def f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='1143' ll='1187'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='1143'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='1160'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='1184' c='_ZN4llvm9AAManager21getModuleAAResultImplERNS_8FunctionERNS_15AnalysisManagerIS1_JEEERNS_9AAResultsE'/>
<use f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='456' c='_ZN4llvm11PassBuilder22buildDefaultAAPipelineEv'/>
<use f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='527' c='_ZN4llvm11PassBuilder15parseAAPipelineERNS_9AAManagerENS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='633' c='_ZN4llvm11PassBuilder23registerParseAACallbackERKSt8functionIFbNS_9StringRefERNS_9AAManagerEEE'/>
<use f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='719' c='_ZN4llvm11PassBuilder15parseAAPassNameERNS_9AAManagerENS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/Passes/PassBuilder.h' l='788'/>
<size>48</size>
<doc f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='1126'>/// A manager for alias analyses.
///
/// This class can have analyses registered with it and when run, it will run
/// all of them and aggregate their results into single AA results interface
/// that dispatches across all of the alias analysis results available.
///
/// Note that the order in which analyses are registered is very significant.
/// That is the order in which the results will be aggregated and queried.
///
/// This manager effectively wraps the AnalysisManager for registering alias
/// analyses. When you register your alias analysis with this manager, it will
/// ensure the analysis itself is registered with its AnalysisManager.
///
/// The result of this analysis is only invalidated if one of the particular
/// aggregated AA results end up being invalidated. This removes the need to
/// explicitly preserve the results of `AAManager`. Note that analyses should no
/// longer be registered once the `AAManager` is run.</doc>
<fun r='_ZN4llvm9AAManager24registerFunctionAnalysisEv'/>
<fun r='_ZN4llvm9AAManager22registerModuleAnalysisEv'/>
<fun r='_ZN4llvm9AAManager3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<smbr r='llvm::AAManager::Key' t='llvm::AnalysisKey'/>
<mbr r='llvm::AAManager::ResultGetters' o='0' t='SmallVector&lt;void (*)(llvm::Function &amp;, llvm::FunctionAnalysisManager &amp;, llvm::AAResults &amp;), 4&gt;'/>
<fun r='_ZN4llvm9AAManager23getFunctionAAResultImplERNS_8FunctionERNS_15AnalysisManagerIS1_JEEERNS_9AAResultsE'/>
<fun r='_ZN4llvm9AAManager21getModuleAAResultImplERNS_8FunctionERNS_15AnalysisManagerIS1_JEEERNS_9AAResultsE'/>
<use f='halide/src/CodeGen_LLVM.cpp' l='1112' c='_ZN6Halide8Internal12CodeGen_LLVM15optimize_moduleEv'/>
<size>48</size>
