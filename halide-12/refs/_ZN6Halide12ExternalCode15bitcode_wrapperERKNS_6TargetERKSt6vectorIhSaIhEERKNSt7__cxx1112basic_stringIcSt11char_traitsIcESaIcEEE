<def f='halide/halide-install/include/Halide.h' l='13516' ll='13518' type='static Halide::ExternalCode Halide::ExternalCode::bitcode_wrapper(const Halide::Target &amp; cpu_type, const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/halide-install/include/Halide.h' l='13505'>/** Construct an ExternalCode container from llvm bitcode. The
     * result can be passed to Halide::Module::append to have the
     * contained bitcode linked with that module. The Module&apos;s target
     * must match the target argument here on architecture, bit width,
     * and operating system. The name is used as a unique identifier
     * for the external code and duplicates will be reduced to a
     * single instance. Halide does not do anything other than to
     * compare names for equality. To guarantee uniqueness in public
     * code, we suggest using a Java style inverted domain name
     * followed by organization specific naming. E.g.:
     *     com.initech.y2k.5d2ac80aaf522eec6cb4b40f39fb923f9902bc7e */</doc>
<def f='halide/build/include/Halide.h' l='13516' ll='13518' type='static Halide::ExternalCode Halide::ExternalCode::bitcode_wrapper(const Halide::Target &amp; cpu_type, const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/build/include/Halide.h' l='13505'>/** Construct an ExternalCode container from llvm bitcode. The
     * result can be passed to Halide::Module::append to have the
     * contained bitcode linked with that module. The Module&apos;s target
     * must match the target argument here on architecture, bit width,
     * and operating system. The name is used as a unique identifier
     * for the external code and duplicates will be reduced to a
     * single instance. Halide does not do anything other than to
     * compare names for equality. To guarantee uniqueness in public
     * code, we suggest using a Java style inverted domain name
     * followed by organization specific naming. E.g.:
     *     com.initech.y2k.5d2ac80aaf522eec6cb4b40f39fb923f9902bc7e */</doc>
<def f='halide/src/ExternalCode.h' l='43' ll='45' type='static Halide::ExternalCode Halide::ExternalCode::bitcode_wrapper(const Halide::Target &amp; cpu_type, const std::vector&lt;uint8_t&gt; &amp; code, const std::string &amp; name)'/>
<doc f='halide/src/ExternalCode.h' l='32'>/** Construct an ExternalCode container from llvm bitcode. The
     * result can be passed to Halide::Module::append to have the
     * contained bitcode linked with that module. The Module&apos;s target
     * must match the target argument here on architecture, bit width,
     * and operating system. The name is used as a unique identifier
     * for the external code and duplicates will be reduced to a
     * single instance. Halide does not do anything other than to
     * compare names for equality. To guarantee uniqueness in public
     * code, we suggest using a Java style inverted domain name
     * followed by organization specific naming. E.g.:
     *     com.initech.y2k.5d2ac80aaf522eec6cb4b40f39fb923f9902bc7e */</doc>
<use f='halide/test/generator/external_code_generator.cpp' l='37' u='c' c='_ZN12_GLOBAL__N_112ExternalCode8generateEv'/>
