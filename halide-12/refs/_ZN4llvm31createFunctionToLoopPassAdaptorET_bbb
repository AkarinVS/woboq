<def f='halide/llvm-install/include/llvm/Transforms/Scalar/LoopPassManager.h' l='441' ll='452' type='std::enable_if_t&lt;is_detected&lt;HasRunOnLoopT, LoopPassT&gt;::value, FunctionToLoopPassAdaptor&gt; llvm::createFunctionToLoopPassAdaptor(LoopPassT Pass, bool UseMemorySSA = false, bool UseBlockFrequencyInfo = false, bool DebugLogging = false)'/>
<def f='halide/llvm-install/include/llvm/Transforms/Scalar/LoopPassManager.h' l='457' ll='471' type='std::enable_if_t&lt;!is_detected&lt;HasRunOnLoopT, LoopNestPassT&gt;::value, FunctionToLoopPassAdaptor&gt; llvm::createFunctionToLoopPassAdaptor(LoopNestPassT Pass, bool UseMemorySSA = false, bool UseBlockFrequencyInfo = false, bool DebugLogging = false)'/>
<def f='halide/llvm-install/include/llvm/Transforms/Scalar/LoopPassManager.h' l='475' ll='491' type='llvm::FunctionToLoopPassAdaptor llvm::createFunctionToLoopPassAdaptor(llvm::LoopPassManager LPM, bool UseMemorySSA, bool UseBlockFrequencyInfo, bool DebugLogging)'/>
<doc f='halide/llvm-install/include/llvm/Transforms/Scalar/LoopPassManager.h' l='473'>/// If \p Pass is an instance of \c LoopPassManager, the returned adaptor will
/// be in loop-nest mode if the pass manager contains only loop-nest passes.</doc>
