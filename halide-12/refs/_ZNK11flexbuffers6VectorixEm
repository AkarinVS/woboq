<dec f='halide/build-apps/flatbuffers/include/flatbuffers/flexbuffers.h' l='272' type='flexbuffers::Reference flexbuffers::Vector::operator[](size_t i) const'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/flexbuffers.h' l='577' u='c' c='_ZNK11flexbuffers9Reference8ToStringEbbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<def f='halide/build-apps/flatbuffers/include/flatbuffers/flexbuffers.h' l='815' ll='821' type='flexbuffers::Reference flexbuffers::Vector::operator[](size_t i) const'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/flexbuffers.h' l='857' u='c' c='_ZNK11flexbuffers3MapixEPKc'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/flexbuffers.h' l='808'>// Vector accessors.
// Note: if you try to access outside of bounds, you get a Null value back
// instead. Normally this would be an assert, but since this is &quot;dynamically
// typed&quot; data, you may not want that (someone sends you a 2d vector and you
// wanted 3d).
// The Null converts seamlessly into a default value for any other type.
// TODO(wvo): Could introduce an #ifdef that makes this into an assert?</doc>
