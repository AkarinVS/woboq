<dec f='halide/build-apps/abseil-cpp/absl/base/internal/low_level_alloc.h' l='71' type='static void * absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc(size_t request)'/>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/low_level_alloc.cc' l='605' ll='608' type='static void * absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc(size_t request)'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/low_level_alloc.h' l='65'>// Returns a pointer to a block of at least &quot;request&quot; bytes
  // that have been newly allocated from the specific arena.
  // for Alloc() call the DefaultArena() is used.
  // Returns 0 if passed request==0.
  // Does not return 0 under other circumstances; it crashes if memory
  // is not available.</doc>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.cc' l='113' u='c' c='_ZN4absl14lts_2020_02_2524synchronization_internalL17NewThreadIdentityEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='329' u='c' c='_ZN4absl14lts_2020_02_25L16EnsureSynchEventEPSt6atomicIlEPKcll'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='517' u='c' c='_ZN4absl14lts_2020_02_25L14LocksHeldAllocEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1153' u='c' c='_ZN4absl14lts_2020_02_25L16GetGraphIdLockedEPNS0_5MutexE'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1298' u='c' c='_ZN4absl14lts_2020_02_2512_GLOBAL__N_127ScopedDeadlockReportBuffersC1Ev'/>
