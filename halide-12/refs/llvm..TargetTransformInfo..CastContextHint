<def f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='1077' ll='1084'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='1091' c='_ZN4llvm19TargetTransformInfo18getCastContextHintEPKNS_11InstructionE'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='1097' c='_ZNK4llvm19TargetTransformInfo16getCastInstrCostEjPNS_4TypeES2_NS0_15CastContextHintENS0_14TargetCostKindEPKNS_11InstructionE'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='1569' c='_ZN4llvm19TargetTransformInfo7Concept16getCastInstrCostEjPNS_4TypeES3_NS0_15CastContextHintENS0_14TargetCostKindEPKNS_11InstructionE'/>
<use f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='2027' c='_ZN4llvm19TargetTransformInfo5Model16getCastInstrCostEjPNS_4TypeES3_NS0_15CastContextHintENS0_14TargetCostKindEPKNS_11InstructionE'/>
<doc f='halide/llvm-install/include/llvm/Analysis/TargetTransformInfo.h' l='1057'>/// Represents a hint about the context in which a cast is used.
  ///
  /// For zext/sext, the context of the cast is the operand, which must be a
  /// load of some kind. For trunc, the context is of the cast is the single
  /// user of the instruction, which must be a store of some kind.
  ///
  /// This enum allows the vectorizer to give getCastInstrCost an idea of the
  /// type of cast it&apos;s dealing with, as not every cast is equal. For instance,
  /// the zext of a load may be free, but the zext of an interleaving load can
  //// be (very) expensive!
  ///
  /// See \c getCastContextHint to compute a CastContextHint from a cast
  /// Instruction*. Callers can use it if they don&apos;t need to override the
  /// context and just want it to be calculated from the instruction.
  ///
  /// FIXME: This handles the types of load/store that the vectorizer can
  /// produce, which are the cases where the context instruction is most
  /// likely to be incorrect. There are other situations where that can happen
  /// too, which might be handled here but in the long run a more general
  /// solution of costing multiple instructions at the same times may be better.</doc>
