<dec f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='414' type='llvm::AliasResult llvm::AAResults::alias(const llvm::MemoryLocation &amp; LocA, const llvm::MemoryLocation &amp; LocB)'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='419' u='c' c='_ZN4llvm9AAResults5aliasEPKNS_5ValueENS_12LocationSizeES3_S4_'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='424' u='c' c='_ZN4llvm9AAResults5aliasEPKNS_5ValueES3_'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='431' u='c' c='_ZN4llvm9AAResults9isNoAliasERKNS_14MemoryLocationES3_'/>
<use f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='449' u='c' c='_ZN4llvm9AAResults11isMustAliasERKNS_14MemoryLocationES3_'/>
<doc f='halide/llvm-install/include/llvm/Analysis/AliasAnalysis.h' l='406'>//===--------------------------------------------------------------------===//
  /// \name Alias Queries
  /// @{

  /// The main low level interface to the alias analysis implementation.
  /// Returns an AliasResult indicating whether the two pointers are aliased to
  /// each other. This is the interface that must be implemented by specific
  /// alias analysis implementations.</doc>
