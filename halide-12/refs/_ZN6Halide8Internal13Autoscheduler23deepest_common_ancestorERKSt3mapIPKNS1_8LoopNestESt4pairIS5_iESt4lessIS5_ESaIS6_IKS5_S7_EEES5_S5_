<dec f='halide/src/autoschedulers/adams2019/LoopNest.h' l='303' type='const Halide::Internal::Autoscheduler::LoopNest * Halide::Internal::Autoscheduler::deepest_common_ancestor(const std::map&lt;const LoopNest *, std::pair&lt;const LoopNest *, int&gt; &gt; &amp; parents, const Halide::Internal::Autoscheduler::LoopNest * a, const Halide::Internal::Autoscheduler::LoopNest * b)'/>
<doc f='halide/src/autoschedulers/adams2019/LoopNest.h' l='300'>// Find the deepest common ancestor of `a` and `b`.
// `parents` is a map from loop nest to (parent, depth) tuples.
// Assumes that `a` and `b` are found in `parents`, otherwise errors.</doc>
<def f='halide/src/autoschedulers/adams2019/LoopNest.cpp' l='2134' ll='2173' type='const Halide::Internal::Autoscheduler::LoopNest * Halide::Internal::Autoscheduler::deepest_common_ancestor(const map&lt;const Halide::Internal::Autoscheduler::LoopNest *, pair&lt;const Halide::Internal::Autoscheduler::LoopNest *, int&gt; &gt; &amp; parents, const Halide::Internal::Autoscheduler::LoopNest * a, const Halide::Internal::Autoscheduler::LoopNest * b)'/>
<use f='halide/src/autoschedulers/adams2019/State.cpp' l='63' u='c' c='_ZN6Halide8Internal13Autoscheduler5State21compute_featurizationERKNS1_11FunctionDAGERKNS_13MachineParamsEP14PerfectHashMapINS3_4Node5StageENS0_16Sched11298370'/>
