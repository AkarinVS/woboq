<dec f='halide/build-apps/abseil-cpp/absl/debugging/failure_signal_handler.h' l='100' type='void (*)(const char *)'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/failure_signal_handler.cc' l='351' u='r' c='_ZN4absl14lts_2020_02_25L24AbslFailureSignalHandlerEiP9siginfo_tPv'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/failure_signal_handler.cc' l='352' u='r' c='_ZN4absl14lts_2020_02_25L24AbslFailureSignalHandlerEiP9siginfo_tPv'/>
<offset>128</offset>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/failure_signal_handler.h' l='90'>// If non-null, indicates a pointer to a callback function that will be called
  // upon failure, with a std::string argument containing failure data. This function
  // may be used as a hook to write failure data to a secondary location, such
  // as a log file. This function may also be called with null data, as a hint
  // to flush any buffered data before the program may be terminated. Consider
  // flushing any buffered data in all calls to this function.
  //
  // Since this function runs within a signal handler, it should be
  // async-signal-safe if possible.
  // See http://man7.org/linux/man-pages/man7/signal-safety.7.html</doc>
