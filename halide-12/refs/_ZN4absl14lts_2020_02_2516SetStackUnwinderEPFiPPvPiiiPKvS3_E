<dec f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.h' l='187' type='void absl::lts_2020_02_25::SetStackUnwinder(int (*)(void **, int *, int, int, const void *, int *) unwinder)'/>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.h' l='159'>// SetStackUnwinder()
//
// Provides a custom function for unwinding stack frames that will be used in
// place of the default stack unwinder when invoking the static
// GetStack{Frames,Trace}{,WithContext}() functions above.
//
// The arguments passed to the unwinder function will match the
// arguments passed to `absl::GetStackFramesWithContext()` except that sizes
// will be non-null iff the caller is interested in frame sizes.
//
// If unwinder is set to null, we revert to the default stack-tracing behavior.
//
// *****************************************************************************
// WARNING
// *****************************************************************************
//
// absl::SetStackUnwinder is not suitable for general purpose use.  It is
// provided for custom runtimes.
// Some things to watch out for when calling `absl::SetStackUnwinder()`:
//
// (a) The unwinder may be called from within signal handlers and
// therefore must be async-signal-safe.
//
// (b) Even after a custom stack unwinder has been unregistered, other
// threads may still be in the process of using that unwinder.
// Therefore do not clean up any state that may be needed by an old
// unwinder.
// *****************************************************************************</doc>
<def f='halide/build-apps/abseil-cpp/absl/debugging/stacktrace.cc' l='112' ll='114' type='void absl::lts_2020_02_25::SetStackUnwinder(absl::lts_2020_02_25::(anonymous namespace)::Unwinder w)'/>
