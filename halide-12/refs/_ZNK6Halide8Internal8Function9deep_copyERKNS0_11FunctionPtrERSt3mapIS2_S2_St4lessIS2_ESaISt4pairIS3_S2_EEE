<dec f='halide/halide-install/include/Halide.h' l='13681' type='void Halide::Internal::Function::deep_copy(const Halide::Internal::FunctionPtr &amp; copy, std::map&lt;FunctionPtr, FunctionPtr&gt; &amp; copied_map) const'/>
<doc f='halide/halide-install/include/Halide.h' l='13672'>/** Deep copy this Function into &apos;copy&apos;. It recursively deep copies all called
     * functions, schedules, update definitions, extern func arguments, specializations,
     * and reduction domains. This method does not deep-copy the Parameter objects.
     * This method also takes a map of &lt;old Function, deep-copied version&gt; as input
     * and would use the deep-copied Function from the map if exists instead of
     * creating a new deep-copy to avoid creating deep-copies of the same Function
     * multiple times. If &apos;name&apos; is specified, copy&apos;s name will be set to that.
     */
    // @{</doc>
<dec f='halide/build/include/Halide.h' l='13681' type='void Halide::Internal::Function::deep_copy(const Halide::Internal::FunctionPtr &amp; copy, std::map&lt;FunctionPtr, FunctionPtr&gt; &amp; copied_map) const'/>
<doc f='halide/build/include/Halide.h' l='13672'>/** Deep copy this Function into &apos;copy&apos;. It recursively deep copies all called
     * functions, schedules, update definitions, extern func arguments, specializations,
     * and reduction domains. This method does not deep-copy the Parameter objects.
     * This method also takes a map of &lt;old Function, deep-copied version&gt; as input
     * and would use the deep-copied Function from the map if exists instead of
     * creating a new deep-copy to avoid creating deep-copies of the same Function
     * multiple times. If &apos;name&apos; is specified, copy&apos;s name will be set to that.
     */
    // @{</doc>
<dec f='halide/src/Function.h' l='78' type='void Halide::Internal::Function::deep_copy(const Halide::Internal::FunctionPtr &amp; copy, std::map&lt;FunctionPtr, FunctionPtr&gt; &amp; copied_map) const'/>
<doc f='halide/src/Function.h' l='69'>/** Deep copy this Function into &apos;copy&apos;. It recursively deep copies all called
     * functions, schedules, update definitions, extern func arguments, specializations,
     * and reduction domains. This method does not deep-copy the Parameter objects.
     * This method also takes a map of &lt;old Function, deep-copied version&gt; as input
     * and would use the deep-copied Function from the map if exists instead of
     * creating a new deep-copy to avoid creating deep-copies of the same Function
     * multiple times. If &apos;name&apos; is specified, copy&apos;s name will be set to that.
     */
    // @{</doc>
<def f='halide/src/Function.cpp' l='333' ll='379' type='void Halide::Internal::Function::deep_copy(const Halide::Internal::FunctionPtr &amp; copy, Halide::Internal::DeepCopyMap &amp; copied_map) const'/>
<use f='halide/src/Function.cpp' l='382' u='c' c='_ZNK6Halide8Internal8Function9deep_copyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_11FunctionPtrERSt3mapIS8_S8_St4lessIS8_ESaISt4pairIS9_S8_EEE'/>
<use f='halide/src/Function.cpp' l='1093' u='c' c='_ZN6Halide8Internal9deep_copyERKSt6vectorINS0_8FunctionESaIS2_EERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES2_St4lessISD_ESaISt4pairIKSD_S2_EEE'/>
