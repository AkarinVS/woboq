<def f='halide/halide-install/include/Halide.h' l='218' ll='220'/>
<use f='halide/halide-install/include/Halide.h' l='231' c='halide_mutex_lock'/>
<use f='halide/halide-install/include/Halide.h' l='232' c='halide_mutex_unlock'/>
<use f='halide/halide-install/include/Halide.h' l='235' c='halide_cond_wait'/>
<use f='halide/halide-install/include/Halide.h' l='1888'/>
<size>8</size>
<doc f='halide/halide-install/include/Halide.h' l='215'>/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */</doc>
<mbr r='halide_mutex::_private' o='0' t='uintptr_t [1]'/>
<def f='halide/halide-install/include/HalideRuntime.h' l='120' ll='122'/>
<use f='halide/halide-install/include/HalideRuntime.h' l='133' c='halide_mutex_lock'/>
<use f='halide/halide-install/include/HalideRuntime.h' l='134' c='halide_mutex_unlock'/>
<use f='halide/halide-install/include/HalideRuntime.h' l='137' c='halide_cond_wait'/>
<use f='halide/halide-install/include/HalideRuntime.h' l='1790'/>
<size>8</size>
<doc f='halide/halide-install/include/HalideRuntime.h' l='117'>/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */</doc>
<mbr r='halide_mutex::_private' o='0' t='uintptr_t [1]'/>
<def f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='280' ll='282'/>
<use f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='293' c='halide_mutex_lock'/>
<use f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='294' c='halide_mutex_unlock'/>
<use f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='297' c='halide_cond_wait'/>
<use f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='1950'/>
<size>8</size>
<doc f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='277'>/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */</doc>
<def f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='280' ll='282'/>
<use f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='293' c='halide_mutex_lock'/>
<use f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='294' c='halide_mutex_unlock'/>
<use f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='297' c='halide_cond_wait'/>
<use f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='1950'/>
<size>8</size>
<doc f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='277'>/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */</doc>
<def f='halide/build/include/HalideRuntime.h' l='120' ll='122'/>
<use f='halide/build/include/HalideRuntime.h' l='133' c='halide_mutex_lock'/>
<use f='halide/build/include/HalideRuntime.h' l='134' c='halide_mutex_unlock'/>
<use f='halide/build/include/HalideRuntime.h' l='137' c='halide_cond_wait'/>
<use f='halide/build/include/HalideRuntime.h' l='1790'/>
<size>8</size>
<doc f='halide/build/include/HalideRuntime.h' l='117'>/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */</doc>
<mbr r='halide_mutex::_private' o='0' t='uintptr_t [1]'/>
<def f='halide/build/include/Halide.h' l='218' ll='220'/>
<use f='halide/build/include/Halide.h' l='231' c='halide_mutex_lock'/>
<use f='halide/build/include/Halide.h' l='232' c='halide_mutex_unlock'/>
<use f='halide/build/include/Halide.h' l='235' c='halide_cond_wait'/>
<use f='halide/build/include/Halide.h' l='1888'/>
<size>8</size>
<doc f='halide/build/include/Halide.h' l='215'>/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */</doc>
<mbr r='halide_mutex::_private' o='0' t='uintptr_t [1]'/>
<def f='halide/src/runtime/HalideRuntime.h' l='120' ll='122'/>
<use f='halide/src/runtime/HalideRuntime.h' l='133' c='halide_mutex_lock'/>
<use f='halide/src/runtime/HalideRuntime.h' l='134' c='halide_mutex_unlock'/>
<use f='halide/src/runtime/HalideRuntime.h' l='137' c='halide_cond_wait'/>
<use f='halide/src/runtime/HalideRuntime.h' l='1790'/>
<size>8</size>
<doc f='halide/src/runtime/HalideRuntime.h' l='117'>/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */</doc>
<mbr r='halide_mutex::_private' o='0' t='uintptr_t [1]'/>
<def f='halide/build/tutorial/lesson_10_halide.h' l='192' ll='194'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='205' c='halide_mutex_lock'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='206' c='halide_mutex_unlock'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='209' c='halide_cond_wait'/>
<use f='halide/build/tutorial/lesson_10_halide.h' l='1862'/>
<size>8</size>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='189'>/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */</doc>
<mbr r='halide_mutex::_private' o='0' t='uintptr_t [1]'/>
