<def f='halide/build-apps/eigen/Eigen/src/SparseQR/SparseQR.h' l='156' type='const Eigen::SparseQR::QRMatrixType &amp; Eigen::SparseQR::matrixR() const'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseQR/SparseQR.h' l='143'>/** \returns a const reference to the \b sparse upper triangular matrix R of the QR factorization.
      * \warning The entries of the returned matrix are not sorted. This means that using it in algorithms
      *          expecting sorted entries will fail. This include random coefficient accesses (SpaseMatrix::coeff()),
      *          and coefficient-wise operations. Matrix products and triangular solves are fine though.
      *
      * To sort the entries, you can assign it to a row-major matrix, and if a column-major matrix
      * is required, you can copy it again:
      * \code
      * SparseMatrix&lt;double&gt;          R  = qr.matrixR();  // column-major, not sorted!
      * SparseMatrix&lt;double,RowMajor&gt; Rr = qr.matrixR();  // row-major, sorted
      * SparseMatrix&lt;double&gt;          Rc = Rr;            // column-major, sorted
      * \endcode
      */</doc>
