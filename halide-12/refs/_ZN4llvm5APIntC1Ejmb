<def f='halide/llvm-install/include/llvm/ADT/APInt.h' l='278' ll='287' type='void llvm::APInt::APInt(unsigned int numBits, uint64_t val, bool isSigned = false)'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='547' u='c' c='_ZN4llvm5APInt11getMinValueEj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='551' u='c' c='_ZN4llvm5APInt17getSignedMinValueEj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='568' u='c' c='_ZN4llvm5APInt15getAllOnesValueEj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='574' u='c' c='_ZN4llvm5APInt12getNullValueEj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='594' u='c' c='_ZN4llvm5APInt12getOneBitSetEjj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='614' u='c' c='_ZN4llvm5APInt10getBitsSetEjjj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='627' u='c' c='_ZN4llvm5APInt18getBitsSetWithWrapEjjj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='644' u='c' c='_ZN4llvm5APInt14getBitsSetFromEjj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='656' u='c' c='_ZN4llvm5APInt14getHighBitsSetEjj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='668' u='c' c='_ZN4llvm5APInt13getLowBitsSetEjj'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='1800' u='c' c='_ZN4llvm5APInt12doubleToBitsEd'/>
<use f='halide/llvm-install/include/llvm/ADT/APInt.h' l='1808' u='c' c='_ZN4llvm5APInt11floatToBitsEf'/>
<use f='halide/llvm-install/include/llvm/ADT/APSInt.h' l='31' u='c' c='_ZN4llvm6APSIntC1Ejb'/>
<use f='halide/llvm-install/include/llvm/ADT/APSInt.h' l='331' u='c' c='_ZN4llvm6APSInt3getEl'/>
<use f='halide/llvm-install/include/llvm/ADT/APSInt.h' l='332' u='c' c='_ZN4llvm6APSInt11getUnsignedEm'/>
<use f='halide/llvm-install/include/llvm/ADT/APFloat.h' l='909' u='c' c='_ZN4llvm7APFloat6getNaNERKNS_12fltSemanticsEbm'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='417' u='c' c='_ZN4llvm12DIEnumeratorC1ERNS_11LLVMContextENS_8Metadata11StorageTypeElbNS_8ArrayRefIPS3_EE'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='438' u='c' c='_ZN4llvm12DIEnumerator3getERNS_11LLVMContextElbNS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='438' u='c' c='_ZN4llvm12DIEnumerator11getIfExistsERNS_11LLVMContextElbNS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='438' u='c' c='_ZN4llvm12DIEnumerator11getDistinctERNS_11LLVMContextElbNS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='438' u='c' c='_ZN4llvm12DIEnumerator12getTemporaryERNS_11LLVMContextElbNS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='441' u='c' c='_ZN4llvm12DIEnumerator3getERNS_11LLVMContextElbPNS_8MDStringE'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='441' u='c' c='_ZN4llvm12DIEnumerator11getIfExistsERNS_11LLVMContextElbPNS_8MDStringE'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='441' u='c' c='_ZN4llvm12DIEnumerator11getDistinctERNS_11LLVMContextElbPNS_8MDStringE'/>
<use f='halide/llvm-install/include/llvm/IR/DebugInfoMetadata.h' l='441' u='c' c='_ZN4llvm12DIEnumerator12getTemporaryERNS_11LLVMContextElbPNS_8MDStringE'/>
<doc f='halide/llvm-install/include/llvm/ADT/APInt.h' l='265'>/// \name Constructors
  /// @{

  /// Create a new APInt of numBits width, initialized as val.
  ///
  /// If isSigned is true then val is treated as if it were a signed value
  /// (i.e. as an int64_t) and the appropriate sign extension to the bit width
  /// will be done. Otherwise, no sign extension occurs (high order bits beyond
  /// the range of val are zero filled).
  ///
  /// \param numBits the bit width of the constructed APInt
  /// \param val the initial value of the APInt
  /// \param isSigned how to treat signedness of val</doc>
