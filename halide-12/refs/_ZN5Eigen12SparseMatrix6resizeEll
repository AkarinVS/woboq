<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='561' u='c' c='_ZN5Eigen12SparseMatrix18conservativeResizeEll'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='623' ll='642' type='void Eigen::SparseMatrix::resize(Eigen::Index rows, Eigen::Index cols)'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='665' u='c' c='_ZN5Eigen12SparseMatrixC1Ev'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='673' u='c' c='_ZN5Eigen12SparseMatrixC1Ell'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='857' u='c' c='_ZN5Eigen12SparseMatrix14initAssignmentERKTL0__'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='616'>/** Resizes the matrix to a \a rows x \a cols matrix and initializes it to zero.
      * 
      * This function does not free the currently allocated memory. To release as much as memory as possible,
      * call \code mat.data().squeeze(); \endcode after resizing it.
      * 
      * \sa reserve(), setZero()
      */</doc>
