<def f='halide/src/autoschedulers/adams2019/FunctionDAG.h' l='78' ll='87' type='bool Halide::Internal::Autoscheduler::OptionalRational::operator&lt;(int x) const'/>
<use f='halide/src/autoschedulers/adams2019/FunctionDAG.h' l='111' u='c' c='_ZNK6Halide8Internal13Autoscheduler16OptionalRationalgeEi'/>
<doc f='halide/src/autoschedulers/adams2019/FunctionDAG.h' l='74'>// Because this type is optional (exists may be false), we don&apos;t
    // have a total ordering. These methods all return false when the
    // operators are not comparable, so a &lt; b is not the same as !(a
    // &gt;= b).</doc>
