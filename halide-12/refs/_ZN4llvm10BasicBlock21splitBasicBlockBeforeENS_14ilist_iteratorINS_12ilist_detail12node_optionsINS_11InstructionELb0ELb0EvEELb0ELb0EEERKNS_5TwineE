<dec f='halide/llvm-install/include/llvm/IR/BasicBlock.h' l='441' type='llvm::BasicBlock * llvm::BasicBlock::splitBasicBlockBefore(llvm::BasicBlock::iterator I, const llvm::Twine &amp; BBName = &quot;&quot;)'/>
<use f='halide/llvm-install/include/llvm/IR/BasicBlock.h' l='443' u='c' c='_ZN4llvm10BasicBlock21splitBasicBlockBeforeEPNS_11InstructionERKNS_5TwineE'/>
<doc f='halide/llvm-install/include/llvm/IR/BasicBlock.h' l='424'>/// Split the basic block into two basic blocks at the specified instruction
  /// and insert the new basic blocks as the predecessor of the current block.
  ///
  /// This function ensures all instructions AFTER and including the specified
  /// iterator \p I are part of the original basic block. All Instructions
  /// BEFORE the iterator \p I are moved to the new BB and an unconditional
  /// branch is added to the new BB. The new basic block is returned.
  ///
  /// Note that this only works on well formed basic blocks (must have a
  /// terminator), and \p &apos;I&apos; must not be the end of instruction list (which
  /// would cause a degenerate basic block to be formed, having a terminator
  /// inside of the basic block).  \p &apos;I&apos; cannot be a iterator for a PHINode
  /// with multiple incoming blocks.
  ///
  /// Also note that this doesn&apos;t preserve any passes. To split blocks while
  /// keeping loop information consistent, use the SplitBlockBefore utility
  /// function.</doc>
