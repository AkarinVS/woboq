<dec f='halide/llvm-install/include/llvm/ADT/STLExtras.h' l='895' type='std::tuple&lt;IterTs...&gt;'/>
<use f='halide/llvm-install/include/llvm/ADT/STLExtras.h' l='903' c='_ZN4llvm15concat_iterator15incrementHelperEv'/>
<use f='halide/llvm-install/include/llvm/ADT/STLExtras.h' l='932' c='_ZNK4llvm15concat_iterator9getHelperEv'/>
<use f='halide/llvm-install/include/llvm/ADT/STLExtras.h' l='964' u='w' c='_ZN4llvm15concat_iteratorC1EDpOTL0__'/>
<use f='halide/llvm-install/include/llvm/ADT/STLExtras.h' l='978' c='_ZNK4llvm15concat_iteratoreqERKNS_15concat_iteratorIT_JDpT0_EEE'/>
<doc f='halide/llvm-install/include/llvm/ADT/STLExtras.h' l='889'>/// We store both the current and end iterators for each concatenated
  /// sequence in a tuple of pairs.
  ///
  /// Note that something like iterator_range seems nice at first here, but the
  /// range properties are of little benefit and end up getting in the way
  /// because we need to do mutation on the current iterators.</doc>
