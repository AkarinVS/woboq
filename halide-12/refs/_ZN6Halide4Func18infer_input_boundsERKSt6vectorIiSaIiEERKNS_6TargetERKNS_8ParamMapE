<dec f='halide/halide-install/include/Halide.h' l='16748' type='void Halide::Func::infer_input_bounds(const std::vector&lt;int32_t&gt; &amp; sizes, const Halide::Target &amp; target = get_jit_target_from_environment(), const Halide::ParamMap &amp; param_map = ParamMap::empty_map())'/>
<doc f='halide/halide-install/include/Halide.h' l='16724'>/** For a given size of output, or a given output buffer,
     * determine the bounds required of all unbound ImageParams
     * referenced. Communicates the result by allocating new buffers
     * of the appropriate size and binding them to the unbound
     * ImageParams.
     *
     * Set the documentation for Func::realize regarding the
     * ParamMap. There is one difference in that input Buffer&lt;&gt;
     * arguments that are being inferred are specified as a pointer to
     * the Buffer&lt;&gt; in the ParamMap. E.g.
     *
     \code
     Param&lt;int32&gt; p(42);
     ImageParam img(Int(32), 1);
     f(x) = img(x) + p;

     Target t = get_jit_target_from_environment();
     Buffer&lt;&gt; in;
     f.infer_input_bounds({10, 10}, t, { { img, &amp;in } });
     \endcode
     * On return, in will be an allocated buffer of the correct size
     * to evaulate f over a 10x10 region.
     */
    // @{</doc>
<dec f='halide/build/include/Halide.h' l='16748' type='void Halide::Func::infer_input_bounds(const std::vector&lt;int32_t&gt; &amp; sizes, const Halide::Target &amp; target = get_jit_target_from_environment(), const Halide::ParamMap &amp; param_map = ParamMap::empty_map())'/>
<doc f='halide/build/include/Halide.h' l='16724'>/** For a given size of output, or a given output buffer,
     * determine the bounds required of all unbound ImageParams
     * referenced. Communicates the result by allocating new buffers
     * of the appropriate size and binding them to the unbound
     * ImageParams.
     *
     * Set the documentation for Func::realize regarding the
     * ParamMap. There is one difference in that input Buffer&lt;&gt;
     * arguments that are being inferred are specified as a pointer to
     * the Buffer&lt;&gt; in the ParamMap. E.g.
     *
     \code
     Param&lt;int32&gt; p(42);
     ImageParam img(Int(32), 1);
     f(x) = img(x) + p;

     Target t = get_jit_target_from_environment();
     Buffer&lt;&gt; in;
     f.infer_input_bounds({10, 10}, t, { { img, &amp;in } });
     \endcode
     * On return, in will be an allocated buffer of the correct size
     * to evaulate f over a 10x10 region.
     */
    // @{</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='304' u='c' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='868' type='void Halide::Func::infer_input_bounds(const std::vector&lt;int32_t&gt; &amp; sizes, const Halide::Target &amp; target = get_jit_target_from_environment(), const Halide::ParamMap &amp; param_map = ParamMap::empty_map())'/>
<doc f='halide/src/Func.h' l='844'>/** For a given size of output, or a given output buffer,
     * determine the bounds required of all unbound ImageParams
     * referenced. Communicates the result by allocating new buffers
     * of the appropriate size and binding them to the unbound
     * ImageParams.
     *
     * Set the documentation for Func::realize regarding the
     * ParamMap. There is one difference in that input Buffer&lt;&gt;
     * arguments that are being inferred are specified as a pointer to
     * the Buffer&lt;&gt; in the ParamMap. E.g.
     *
     \code
     Param&lt;int32&gt; p(42);
     ImageParam img(Int(32), 1);
     f(x) = img(x) + p;

     Target t = get_jit_target_from_environment();
     Buffer&lt;&gt; in;
     f.infer_input_bounds({10, 10}, t, { { img, &amp;in } });
     \endcode
     * On return, in will be an allocated buffer of the correct size
     * to evaulate f over a 10x10 region.
     */
    // @{</doc>
<def f='halide/src/Func.cpp' l='3109' ll='3120' type='void Halide::Func::infer_input_bounds(const std::vector&lt;int32_t&gt; &amp; sizes, const Halide::Target &amp; target = get_jit_target_from_environment(), const Halide::ParamMap &amp; param_map = ParamMap::empty_map())'/>
