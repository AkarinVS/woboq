<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='384' u='w' c='_ZN4absl14lts_2020_02_2514flags_internal8FlagImplC1EPKcS4_PFPvNS1_6FlagOpEPKvS5_S5_ENS1_11FlagHelpArgEPFS5_vE'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='461' u='a' c='_ZNK4absl14lts_2020_02_2514flags_internal8FlagImpl9DataGuardEv'/>
<dec f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='544' type='char [8]'/>
<offset>704</offset>
<doc f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='537'>// This is reserved space for an absl::Mutex to guard flag data. It will be
  // initialized in FlagImpl::Init via placement new.
  // We can&apos;t use &quot;absl::Mutex data_guard_&quot;, since this class is not literal.
  // We do not want to use &quot;absl::Mutex* data_guard_&quot;, since this would require
  // heap allocation during initialization, which is both slows program startup
  // and can fail. Using reserved space + placement new allows us to avoid both
  // problems.</doc>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='78' u='a' c='_ZN4absl14lts_2020_02_2514flags_internal8FlagImpl4InitEv'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='80' u='a' c='_ZN4absl14lts_2020_02_2514flags_internal8FlagImpl4InitEv'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='93' u='a' c='_ZNK4absl14lts_2020_02_2514flags_internal8FlagImpl9DataGuardEv'/>
