<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseDenseProduct.h' l='26' ll='72'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseDenseProduct.h' l='85' ll='107'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseDenseProduct.h' l='109' ll='147'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseDenseProduct.h' l='149' ll='166'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseDenseProduct.h' l='171' c='_ZN5Eigen8internal25sparse_time_dense_productERKT_RKT0_RT1_RKT2_'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseDenseProduct.h' l='74'>// FIXME: what is the purpose of the following specialization? Is it for the BlockedSparse format?
// -&gt; let&apos;s disable it for now as it is conflicting with generic scalar*matrix and matrix*scalar operators
// template&lt;typename T1, typename T2/*, int _Options, typename _StrideType*/&gt;
// struct ScalarBinaryOpTraits&lt;T1, Ref&lt;T2/*, _Options, _StrideType*/&gt; &gt;
// {
//   enum {
//     Defined = 1
//   };
//   typedef typename CwiseUnaryOp&lt;scalar_multiple2_op&lt;T1, typename T2::Scalar&gt;, T2&gt;::PlainObject ReturnType;
// };</doc>
<fun r='_ZN5Eigen8internal30sparse_time_dense_product_implIT_T0_T1_NS4_6ScalarELi1ELb1EE3runERKS2_RKS3_RS4_RKNS0_10remove_allIS4_E4type6ScalarE'/>
<fun r='_ZN5Eigen8internal30sparse_time_dense_product_implIT_T0_T1_NS4_6ScalarELi1ELb1EE10processRowERKNS0_9evaluatorINS0_10remove_allIS2_E4typeEEERKS3_RS4_RK6061363'/>
<fun r='_ZN5Eigen8internal30sparse_time_dense_product_implIT_T0_T1_T2_Li0ELb1EE3runERKS2_RKS3_RS4_RKS5_'/>
<fun r='_ZN5Eigen8internal30sparse_time_dense_product_implIT_T0_T1_NS4_6ScalarELi1ELb0EE3runERKS2_RKS3_RS4_RKNS0_10remove_allIS4_E4type6ScalarE'/>
<fun r='_ZN5Eigen8internal30sparse_time_dense_product_implIT_T0_T1_NS4_6ScalarELi1ELb0EE10processRowERKNS0_9evaluatorINS0_10remove_allIS2_E4typeEEERKS3_RNS8_I15374166'/>
<fun r='_ZN5Eigen8internal30sparse_time_dense_product_implIT_T0_T1_NS4_6ScalarELi0ELb0EE3runERKS2_RKS3_RS4_RKNS0_10remove_allIS4_E4type6ScalarE'/>
