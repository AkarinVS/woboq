<dec f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/include/cctz/time_zone.h' l='278' type='std::string absl::lts_2020_02_25::time_internal::cctz::detail::format(const std::string &amp; , const time_point&lt;absl::lts_2020_02_25::time_internal::cctz::seconds&gt; &amp; , const absl::lts_2020_02_25::time_internal::cctz::detail::femtoseconds &amp; , const absl::lts_2020_02_25::time_internal::cctz::time_zone &amp; )'/>
<use f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/include/cctz/time_zone.h' l='317' u='c' c='_ZN4absl14lts_2020_02_2513time_internal4cctz6formatERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt6chrono10time_pointINSB_3_V212system_cl1884423'/>
<use f='halide/build-apps/abseil-cpp/absl/time/format.cc' l='79' u='c' c='_ZN4absl14lts_2020_02_2510FormatTimeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_4TimeENS0_8TimeZoneE'/>
<def f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_format.cc' l='305' ll='526' type='std::string absl::lts_2020_02_25::time_internal::cctz::detail::format(const std::string &amp; format, const time_point&lt;absl::lts_2020_02_25::time_internal::cctz::seconds&gt; &amp; tp, const detail::femtoseconds &amp; fs, const absl::lts_2020_02_25::time_internal::cctz::time_zone &amp; tz)'/>
<doc f='halide/build-apps/abseil-cpp/absl/time/internal/cctz/src/time_zone_format.cc' l='285'>// Uses strftime(3) to format the given Time.  The following extended format
// specifiers are also supported:
//
//   - %Ez  - RFC3339-compatible numeric UTC offset (+hh:mm or -hh:mm)
//   - %E*z - Full-resolution numeric UTC offset (+hh:mm:ss or -hh:mm:ss)
//   - %E#S - Seconds with # digits of fractional precision
//   - %E*S - Seconds with full fractional precision (a literal &apos;*&apos;)
//   - %E4Y - Four-character years (-999 ... -001, 0000, 0001 ... 9999)
//
// The standard specifiers from RFC3339_* (%Y, %m, %d, %H, %M, and %S) are
// handled internally for performance reasons.  strftime(3) is slow due to
// a POSIX requirement to respect changes to ${TZ}.
//
// The TZ/GNU %s extension is handled internally because strftime() has
// to use mktime() to generate it, and that assumes the local time zone.
//
// We also handle the %z and %Z specifiers to accommodate platforms that do
// not support the tm_gmtoff and tm_zone extensions to std::tm.
//
// Requires that zero() &lt;= fs &lt; seconds(1).</doc>
