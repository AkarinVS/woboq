<dec f='halide/build-apps/abseil-cpp/absl/time/time.h' l='908' type='absl::lts_2020_02_25::TimeZone::CivilInfo absl::lts_2020_02_25::TimeZone::At(absl::lts_2020_02_25::Time t) const'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1077' u='c' c='_ZN4absl14lts_2020_02_2513ToCivilSecondENS0_4TimeENS0_8TimeZoneE'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1080' u='c' c='_ZN4absl14lts_2020_02_2513ToCivilMinuteENS0_4TimeENS0_8TimeZoneE'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1083' u='c' c='_ZN4absl14lts_2020_02_2511ToCivilHourENS0_4TimeENS0_8TimeZoneE'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1086' u='c' c='_ZN4absl14lts_2020_02_2510ToCivilDayENS0_4TimeENS0_8TimeZoneE'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1089' u='c' c='_ZN4absl14lts_2020_02_2512ToCivilMonthENS0_4TimeENS0_8TimeZoneE'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1092' u='c' c='_ZN4absl14lts_2020_02_2511ToCivilYearENS0_4TimeENS0_8TimeZoneE'/>
<doc f='halide/build-apps/abseil-cpp/absl/time/time.h' l='894'>// TimeZone::At(Time)
  //
  // Returns the civil time for this TimeZone at a certain `absl::Time`.
  // If the input time is infinite, the output civil second will be set to
  // CivilSecond::max() or min(), and the subsecond will be infinite.
  //
  // Example:
  //
  //   const auto epoch = lax.At(absl::UnixEpoch());
  //   // epoch.cs == 1969-12-31 16:00:00
  //   // epoch.subsecond == absl::ZeroDuration()
  //   // epoch.offset == -28800
  //   // epoch.is_dst == false
  //   // epoch.abbr == &quot;PST&quot;</doc>
<def f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='350' ll='365' type='absl::TimeZone::CivilInfo absl::lts_2020_02_25::TimeZone::At(absl::lts_2020_02_25::Time t) const'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='451' u='c' c='_ZN4absl14lts_2020_02_254ToTMENS0_4TimeENS0_8TimeZoneE'/>
<doc f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='346'>//
// TimeZone
//</doc>
