<def f='halide/build-apps/abseil-cpp/absl/time/time.h' l='997' ll='1000'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1001' c='_ZNK4absl14lts_2020_02_258TimeZone14NextTransitionENS0_4TimeEPNS1_15CivilTransitionE'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.h' l='1002' c='_ZNK4absl14lts_2020_02_258TimeZone14PrevTransitionENS0_4TimeEPNS1_15CivilTransitionE'/>
<size>32</size>
<doc f='halide/build-apps/abseil-cpp/absl/time/time.h' l='966'>// TimeZone::NextTransition()
  // TimeZone::PrevTransition()
  //
  // Finds the time of the next/previous offset change in this time zone.
  //
  // By definition, `NextTransition(t, &amp;trans)` returns false when `t` is
  // `InfiniteFuture()`, and `PrevTransition(t, &amp;trans)` returns false
  // when `t` is `InfinitePast()`. If the zone has no transitions, the
  // result will also be false no matter what the argument.
  //
  // Otherwise, when `t` is `InfinitePast()`, `NextTransition(t, &amp;trans)`
  // returns true and sets `trans` to the first recorded transition. Chains
  // of calls to `NextTransition()/PrevTransition()` will eventually return
  // false, but it is unspecified exactly when `NextTransition(t, &amp;trans)`
  // jumps to false, or what time is set by `PrevTransition(t, &amp;trans)` for
  // a very distant `t`.
  //
  // Note: Enumeration of time-zone transitions is for informational purposes
  // only. Modern time-related code should not care about when offset changes
  // occur.
  //
  // Example:
  //   absl::TimeZone nyc;
  //   if (!absl::LoadTimeZone(&quot;America/New_York&quot;, &amp;nyc)) { ... }
  //   const auto now = absl::Now();
  //   auto t = absl::InfinitePast();
  //   absl::TimeZone::CivilTransition trans;
  //   while (t &lt;= now &amp;&amp; nyc.NextTransition(t, &amp;trans)) {
  //     // transition: trans.from -&gt; trans.to
  //     t = nyc.At(trans.to).trans;
  //   }</doc>
<mbr r='absl::lts_2020_02_25::TimeZone::CivilTransition::from' o='0' t='absl::lts_2020_02_25::CivilSecond'/>
<mbr r='absl::lts_2020_02_25::TimeZone::CivilTransition::to' o='128' t='absl::lts_2020_02_25::CivilSecond'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='189' c='_ZN4absl14lts_2020_02_2512_GLOBAL__N_114FindTransitionERKNS0_13time_internal4cctz9time_zoneEMS4_KFbRKNSt6chrono10time_pointINS7_3_V212system_clockENS74597826'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='389' c='_ZNK4absl14lts_2020_02_258TimeZone14NextTransitionENS0_4TimeEPNS1_15CivilTransitionE'/>
<use f='halide/build-apps/abseil-cpp/absl/time/time.cc' l='393' c='_ZNK4absl14lts_2020_02_258TimeZone14PrevTransitionENS0_4TimeEPNS1_15CivilTransitionE'/>
<size>32</size>
