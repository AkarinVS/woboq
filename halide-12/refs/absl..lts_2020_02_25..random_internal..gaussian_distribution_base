<def f='halide/build-apps/abseil-cpp/absl/random/gaussian_distribution.h' l='47' ll='80'/>
<ovr f='halide/build-apps/abseil-cpp/absl/random/gaussian_distribution.h' l='87' c='absl::lts_2020_02_25::gaussian_distribution'/>
<use f='halide/build-apps/abseil-cpp/absl/random/gaussian_distribution.h' l='87'/>
<size>1</size>
<doc f='halide/build-apps/abseil-cpp/absl/random/gaussian_distribution.h' l='40'>// absl::gaussian_distribution_base implements the underlying ziggurat algorithm
// using the ziggurat tables generated by the gaussian_distribution_gentables
// binary.
//
// The specific algorithm has some of the improvements suggested by the
// 2005 paper, &quot;An Improved Ziggurat Method to Generate Normal Random Samples&quot;,
// Jurgen A Doornik.  (https://www.doornik.com/research/ziggurat.pdf)</doc>
<fun r='_ZN4absl14lts_2020_02_2515random_internal26gaussian_distribution_base6zignorERT_'/>
<fun r='_ZN4absl14lts_2020_02_2515random_internal26gaussian_distribution_base15zignor_fallbackERT_b'/>
<smbr r='absl::lts_2020_02_25::random_internal::gaussian_distribution_base::kR' t='const double'/>
<smbr r='absl::lts_2020_02_25::random_internal::gaussian_distribution_base::kRInv' t='const double'/>
<smbr r='absl::lts_2020_02_25::random_internal::gaussian_distribution_base::kV' t='const double'/>
<smbr r='absl::lts_2020_02_25::random_internal::gaussian_distribution_base::kMask' t='const uint64_t'/>
<smbr r='absl::lts_2020_02_25::random_internal::gaussian_distribution_base::zg_' t='const absl::lts_2020_02_25::random_internal::gaussian_distribution_base::Tables'/>
<mbr r='absl::lts_2020_02_25::random_internal::gaussian_distribution_base::fast_u64_' o='0' t='random_internal::FastUniformBits&lt;uint64_t&gt;'/>
<fun r='_ZN4absl14lts_2020_02_2515random_internal26gaussian_distribution_base15zignor_fallbackERT_b'/>
<fun r='_ZN4absl14lts_2020_02_2515random_internal26gaussian_distribution_base6zignorERT_'/>
<smbr r='absl::lts_2020_02_25::random_internal::gaussian_distribution_base::zg_' t='const gaussian_distribution_base::Tables'/>
