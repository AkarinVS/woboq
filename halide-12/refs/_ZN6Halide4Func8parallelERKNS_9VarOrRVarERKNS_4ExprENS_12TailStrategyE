<dec f='halide/halide-install/include/Halide.h' l='17374' type='Halide::Func &amp; Halide::Func::parallel(const Halide::VarOrRVar &amp; var, const Halide::Expr &amp; task_size, Halide::TailStrategy tail = TailStrategy::Auto)'/>
<doc f='halide/halide-install/include/Halide.h' l='17368'>/** Split a dimension by the given task_size, and the parallelize the
     * outer dimension. This creates parallel tasks that have size
     * task_size. After this call, var refers to the outer dimension of
     * the split. The inner dimension has a new anonymous name. If you
     * wish to mutate it, or schedule with respect to it, do the split
     * manually. */</doc>
<use f='halide/apps/hist/hist_generator.cpp' l='187' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='206' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='218' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='247' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/lens_blur/lens_blur_generator.cpp' l='252' u='c' c='_ZN12_GLOBAL__N_18LensBlur8generateEv'/>
<use f='halide/apps/local_laplacian/local_laplacian_generator.cpp' l='136' u='c' c='_ZN12_GLOBAL__N_114LocalLaplacian8generateEv'/>
<use f='halide/apps/local_laplacian/local_laplacian_generator.cpp' l='140' u='c' c='_ZN12_GLOBAL__N_114LocalLaplacian8generateEv'/>
<use f='halide/apps/local_laplacian/local_laplacian_generator.cpp' l='146' u='c' c='_ZN12_GLOBAL__N_114LocalLaplacian8generateEv'/>
<dec f='halide/build/include/Halide.h' l='17374' type='Halide::Func &amp; Halide::Func::parallel(const Halide::VarOrRVar &amp; var, const Halide::Expr &amp; task_size, Halide::TailStrategy tail = TailStrategy::Auto)'/>
<doc f='halide/build/include/Halide.h' l='17368'>/** Split a dimension by the given task_size, and the parallelize the
     * outer dimension. This creates parallel tasks that have size
     * task_size. After this call, var refers to the outer dimension of
     * the split. The inner dimension has a new anonymous name. If you
     * wish to mutate it, or schedule with respect to it, do the split
     * manually. */</doc>
<dec f='halide/src/Func.h' l='1494' type='Halide::Func &amp; Halide::Func::parallel(const Halide::VarOrRVar &amp; var, const Halide::Expr &amp; task_size, Halide::TailStrategy tail = TailStrategy::Auto)'/>
<doc f='halide/src/Func.h' l='1488'>/** Split a dimension by the given task_size, and the parallelize the
     * outer dimension. This creates parallel tasks that have size
     * task_size. After this call, var refers to the outer dimension of
     * the split. The inner dimension has a new anonymous name. If you
     * wish to mutate it, or schedule with respect to it, do the split
     * manually. */</doc>
<def f='halide/src/Func.cpp' l='2204' ll='2208' type='Halide::Func &amp; Halide::Func::parallel(const Halide::VarOrRVar &amp; var, const Halide::Expr &amp; factor, Halide::TailStrategy tail = TailStrategy::Auto)'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_generator.cpp' l='517' u='c' c='_ZN9CostModel8generateEv'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_generator.cpp' l='524' u='c' c='_ZN9CostModel8generateEv'/>
