<inh f='halide/halide-install/include/Halide.h' l='12801' c='Halide::Internal::IRVisitor'/>
<def f='halide/halide-install/include/Halide.h' l='12865' ll='12931'/>
<ovr f='halide/halide-install/include/Halide.h' l='21994' c='Halide::Internal::ExprUsesVars'/>
<use f='halide/halide-install/include/Halide.h' l='21994'/>
<size>56</size>
<doc f='halide/halide-install/include/Halide.h' l='12862'>/** A base class for algorithms that walk recursively over the IR
 * without visiting the same node twice. This is for passes that are
 * capable of interpreting the IR as a DAG instead of a tree. */</doc>
<fun r='_ZN6Halide8Internal14IRGraphVisitor7includeERKNS_4ExprE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor7includeERKNS0_4StmtE'/>
<mbr r='Halide::Internal::IRGraphVisitor::visited' o='64' t='std::set&lt;IRHandle&gt;'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6IntImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7UIntImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8FloatImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_9StringImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4CastE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8VariableE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3AddE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3SubE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MulE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3DivE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3ModE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MinE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MaxE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2EQE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2NEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2LTE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2LEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2GTE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2GEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3AndE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2OrE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3NotE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6SelectE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4LoadE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4RampE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_9BroadcastE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4CallE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3LetE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7LetStmtE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_10AssertStmtE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_16ProducerConsumerE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3ForE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_5StoreE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7ProvideE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8AllocateE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4FreeE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7RealizeE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_5BlockE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_10IfThenElseE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8EvaluateE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7ShuffleE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_12VectorReduceE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8PrefetchE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7AcquireE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4ForkE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6AtomicE'/>
<inh f='halide/build/include/Halide.h' l='12801' c='Halide::Internal::IRVisitor'/>
<def f='halide/build/include/Halide.h' l='12865' ll='12931'/>
<ovr f='halide/build/include/Halide.h' l='21994' c='Halide::Internal::ExprUsesVars'/>
<use f='halide/build/include/Halide.h' l='21994'/>
<size>56</size>
<doc f='halide/build/include/Halide.h' l='12862'>/** A base class for algorithms that walk recursively over the IR
 * without visiting the same node twice. This is for passes that are
 * capable of interpreting the IR as a DAG instead of a tree. */</doc>
<fun r='_ZN6Halide8Internal14IRGraphVisitor7includeERKNS_4ExprE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor7includeERKNS0_4StmtE'/>
<mbr r='Halide::Internal::IRGraphVisitor::visited' o='64' t='std::set&lt;IRHandle&gt;'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6IntImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7UIntImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8FloatImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_9StringImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4CastE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8VariableE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3AddE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3SubE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MulE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3DivE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3ModE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MinE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MaxE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2EQE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2NEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2LTE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2LEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2GTE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2GEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3AndE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2OrE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3NotE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6SelectE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4LoadE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4RampE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_9BroadcastE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4CallE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3LetE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7LetStmtE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_10AssertStmtE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_16ProducerConsumerE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3ForE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_5StoreE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7ProvideE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8AllocateE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4FreeE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7RealizeE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_5BlockE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_10IfThenElseE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8EvaluateE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7ShuffleE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_12VectorReduceE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8PrefetchE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7AcquireE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4ForkE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6AtomicE'/>
<inh f='halide/src/IRVisitor.h' l='19' c='Halide::Internal::IRVisitor'/>
<def f='halide/src/IRVisitor.h' l='83' ll='149'/>
<ovr f='halide/src/ExprUsesVar.h' l='16' c='Halide::Internal::ExprUsesVars'/>
<use f='halide/src/ExprUsesVar.h' l='16'/>
<ovr f='halide/src/AddAtomicMutex.cpp' l='21' c='Halide::Internal::(anonymousnamespace)::CollectProducerStoreNames'/>
<use f='halide/src/AddAtomicMutex.cpp' l='21'/>
<ovr f='halide/src/AddAtomicMutex.cpp' l='45' c='Halide::Internal::(anonymousnamespace)::FindProducerStoreIndex'/>
<use f='halide/src/AddAtomicMutex.cpp' l='45'/>
<ovr f='halide/src/AddAtomicMutex.cpp' l='97' c='Halide::Internal::(anonymousnamespace)::CheckAtomicValidity'/>
<use f='halide/src/AddAtomicMutex.cpp' l='97'/>
<ovr f='halide/src/AddAtomicMutex.cpp' l='124' c='Halide::Internal::(anonymousnamespace)::FindAtomicLetBindings'/>
<use f='halide/src/AddAtomicMutex.cpp' l='124'/>
<ovr f='halide/src/AddAtomicMutex.cpp' l='210' c='Halide::Internal::(anonymousnamespace)::FindStoreInAtomicMutex'/>
<use f='halide/src/AddAtomicMutex.cpp' l='210'/>
<size>56</size>
<doc f='halide/src/IRVisitor.h' l='80'>/** A base class for algorithms that walk recursively over the IR
 * without visiting the same node twice. This is for passes that are
 * capable of interpreting the IR as a DAG instead of a tree. */</doc>
<fun r='_ZN6Halide8Internal14IRGraphVisitor7includeERKNS_4ExprE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor7includeERKNS0_4StmtE'/>
<mbr r='Halide::Internal::IRGraphVisitor::visited' o='64' t='std::set&lt;IRHandle&gt;'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6IntImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7UIntImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8FloatImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_9StringImmE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4CastE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8VariableE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3AddE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3SubE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MulE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3DivE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3ModE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MinE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3MaxE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2EQE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2NEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2LTE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2LEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2GTE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2GEE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3AndE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_2OrE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3NotE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6SelectE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4LoadE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4RampE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_9BroadcastE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4CallE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3LetE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7LetStmtE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_10AssertStmtE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_16ProducerConsumerE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_3ForE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_5StoreE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7ProvideE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8AllocateE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4FreeE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7RealizeE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_5BlockE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_10IfThenElseE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8EvaluateE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7ShuffleE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_12VectorReduceE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_8PrefetchE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_7AcquireE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_4ForkE'/>
<fun r='_ZN6Halide8Internal14IRGraphVisitor5visitEPKNS0_6AtomicE'/>
<ovr f='halide/src/AddImageChecks.cpp' l='22' c='Halide::Internal::(anonymousnamespace)::FindBuffers'/>
<use f='halide/src/AddImageChecks.cpp' l='22'/>
<size>56</size>
<ovr f='halide/src/AddParameterChecks.cpp' l='18' c='Halide::Internal::(anonymousnamespace)::FindParameters'/>
<use f='halide/src/AddParameterChecks.cpp' l='18'/>
<size>56</size>
<ovr f='halide/src/Bounds.cpp' l='1919' c='Halide::Internal::(anonymousnamespace)::CollectVars'/>
<use f='halide/src/Bounds.cpp' l='1919'/>
<ovr f='halide/src/Bounds.cpp' l='1939' c='Halide::Internal::(anonymousnamespace)::BoxesTouched'/>
<use f='halide/src/Bounds.cpp' l='1939'/>
<size>56</size>
<ovr f='halide/src/CSE.cpp' l='148' c='Halide::Internal::(anonymousnamespace)::ComputeUseCounts'/>
<use f='halide/src/CSE.cpp' l='148'/>
<size>56</size>
<ovr f='halide/src/CodeGen_C.cpp' l='223' c='Halide::Internal::(anonymousnamespace)::TypeInfoGatherer'/>
<use f='halide/src/CodeGen_C.cpp' l='223'/>
<ovr f='halide/src/CodeGen_C.cpp' l='1312' c='Halide::Internal::(anonymousnamespace)::ExternCallPrototypes'/>
<use f='halide/src/CodeGen_C.cpp' l='1312'/>
<size>56</size>
<ovr f='halide/src/DerivativeUtils.cpp' l='46' c='GatherVariables'/>
<use f='halide/src/DerivativeUtils.cpp' l='46' c='_ZN6Halide8Internal16gather_variablesERKNS_4ExprERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EE'/>
<ovr f='halide/src/DerivativeUtils.cpp' l='82' c='GatherRVars'/>
<use f='halide/src/DerivativeUtils.cpp' l='82' c='_ZN6Halide8Internal17gather_rvariablesB5cxx11ERKNS_5TupleE'/>
<ovr f='halide/src/DerivativeUtils.cpp' l='141' c='Halide::Internal::(anonymousnamespace)::ExpressionSorter'/>
<use f='halide/src/DerivativeUtils.cpp' l='141'/>
<ovr f='halide/src/DerivativeUtils.cpp' l='343' c='Halide::Internal::(anonymousnamespace)::RDomExtractor'/>
<use f='halide/src/DerivativeUtils.cpp' l='343'/>
<ovr f='halide/src/DerivativeUtils.cpp' l='400' c='Halide::Internal::(anonymousnamespace)::BufferDimensionsFinder'/>
<use f='halide/src/DerivativeUtils.cpp' l='400'/>
<ovr f='halide/src/DerivativeUtils.cpp' l='455' c='Halide::Internal::(anonymousnamespace)::ImplicitVariablesFinder'/>
<use f='halide/src/DerivativeUtils.cpp' l='455'/>
<ovr f='halide/src/DerivativeUtils.cpp' l='502' c='Halide::Internal::(anonymousnamespace)::FunctionCallFinder'/>
<use f='halide/src/DerivativeUtils.cpp' l='502'/>
<size>56</size>
<ovr f='halide/src/Func.cpp' l='1199' c='Halide::Internal::CheckForFreeVars'/>
<use f='halide/src/Func.cpp' l='1199'/>
<ovr f='halide/src/Func.cpp' l='2736' c='Halide::(anonymousnamespace)::CountImplicitVars'/>
<use f='halide/src/Func.cpp' l='2736'/>
<size>56</size>
<ovr f='halide/src/Function.cpp' l='184' c='Halide::Internal::(anonymousnamespace)::CheckVars'/>
<use f='halide/src/Function.cpp' l='184'/>
<ovr f='halide/src/Function.cpp' l='263' c='Halide::Internal::(anonymousnamespace)::FreezeFunctions'/>
<use f='halide/src/Function.cpp' l='263'/>
<size>56</size>
<ovr f='halide/src/IROperator.cpp' l='126' c='Halide::Internal::(anonymousnamespace)::ExprIsPure'/>
<use f='halide/src/IROperator.cpp' l='126'/>
<size>56</size>
<ovr f='halide/src/InferArguments.cpp' l='21' c='Halide::Internal::(anonymousnamespace)::InferArguments'/>
<use f='halide/src/InferArguments.cpp' l='21'/>
<size>56</size>
<ovr f='halide/src/LoopCarry.cpp' l='86' c='Halide::Internal::(anonymousnamespace)::FindLoads'/>
<use f='halide/src/LoopCarry.cpp' l='86'/>
<size>56</size>
<ovr f='halide/src/Memoization.cpp' l='19' c='Halide::Internal::(anonymousnamespace)::FindParameterDependencies'/>
<use f='halide/src/Memoization.cpp' l='19'/>
<size>56</size>
<ovr f='halide/src/Pipeline.cpp' l='406' c='Halide::FindExterns'/>
<use f='halide/src/Pipeline.cpp' l='406'/>
<ovr f='halide/src/Pipeline.cpp' l='772' c='Checker'/>
<use f='halide/src/Pipeline.cpp' l='772' c='_ZN6Halide8Pipeline15add_requirementERKNS_4ExprERSt6vectorIS1_SaIS1_EE'/>
<size>56</size>
<ovr f='halide/src/RDom.cpp' l='98' c='Halide::(anonymousnamespace)::CheckRDomBounds'/>
<use f='halide/src/RDom.cpp' l='98'/>
<size>56</size>
