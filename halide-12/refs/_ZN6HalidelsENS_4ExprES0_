<dec f='halide/halide-install/include/Halide.h' l='7917' type='Halide::Expr Halide::operator&lt;&lt;(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/halide-install/include/Halide.h' l='28580' u='c' c='_ZNK6Halide8Internal9IRMatcher6Intrin4makeERNS1_12MatcherStateE13halide_type_t'/>
<doc f='halide/halide-install/include/Halide.h' l='7909'>/** Shift the bits of an integer value left. This is actually less
 * efficient than multiplying by 2^n, because Halide&apos;s optimization
 * passes understand multiplication, and will compile it to
 * shifting. This operator is only for if you really really need bit
 * shifting (e.g. because the exponent is a run-time parameter). The
 * type of the result is equal to the type of the first argument. Both
 * arguments must have integer type. */
// @{</doc>
<use f='halide/apps/hannk/halide/common_halide.cpp' l='90' u='c' c='_ZN5hannk11approx_log2EiRKN6Halide4ExprEiRKNS0_4TypeE'/>
<use f='halide/apps/hannk/halide/common_halide.cpp' l='121' u='c' c='_ZN5hannk11approx_exp2EiRKN6Halide4ExprES3_RKNS0_4TypeE'/>
<use f='halide/apps/hannk/halide/common_halide.cpp' l='137' u='c' c='_ZN5hannk11approx_exp2EiRKN6Halide4ExprES3_RKNS0_4TypeE'/>
<use f='halide/apps/hannk/halide/common_halide.cpp' l='137' u='c' c='_ZN5hannk11approx_exp2EiRKN6Halide4ExprES3_RKNS0_4TypeE'/>
<use f='halide/apps/max_filter/max_filter_generator.cpp' l='31' u='c' c='_ZN12_GLOBAL__N_13Max8generateEv'/>
<use f='halide/apps/max_filter/max_filter_generator.cpp' l='45' u='c' c='_ZN12_GLOBAL__N_13Max8generateEv'/>
<dec f='halide/build/include/Halide.h' l='7917' type='Halide::Expr Halide::operator&lt;&lt;(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/build/include/Halide.h' l='28580' u='c' c='_ZNK6Halide8Internal9IRMatcher6Intrin4makeERNS1_12MatcherStateE13halide_type_t'/>
<doc f='halide/build/include/Halide.h' l='7909'>/** Shift the bits of an integer value left. This is actually less
 * efficient than multiplying by 2^n, because Halide&apos;s optimization
 * passes understand multiplication, and will compile it to
 * shifting. This operator is only for if you really really need bit
 * shifting (e.g. because the exponent is a run-time parameter). The
 * type of the result is equal to the type of the first argument. Both
 * arguments must have integer type. */
// @{</doc>
<dec f='halide/src/IROperator.h' l='1112' type='Halide::Expr Halide::operator&lt;&lt;(Halide::Expr x, Halide::Expr y)'/>
<doc f='halide/src/IROperator.h' l='1104'>/** Shift the bits of an integer value left. This is actually less
 * efficient than multiplying by 2^n, because Halide&apos;s optimization
 * passes understand multiplication, and will compile it to
 * shifting. This operator is only for if you really really need bit
 * shifting (e.g. because the exponent is a run-time parameter). The
 * type of the result is equal to the type of the first argument. Both
 * arguments must have integer type. */
// @{</doc>
<use f='halide/src/IRMatch.h' l='1466' u='c' c='_ZNK6Halide8Internal9IRMatcher6Intrin4makeERNS1_12MatcherStateE13halide_type_t'/>
<use f='halide/src/Bounds.cpp' l='1269' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1294' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1308' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1318' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1340' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1349' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1350' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1357' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1366' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='1367' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16Bounds5visitEPKNS0_4CallE'/>
<use f='halide/src/Bounds.cpp' l='3212' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3213' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3214' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3225' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3231' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3238' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3238' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3244' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3250' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/Bounds.cpp' l='3381' u='c' c='_ZN6Halide8Internal11bounds_testEv'/>
<use f='halide/src/CodeGen_ARM.cpp' l='1084' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_111CodeGen_ARM5visitEPKNS0_4CallE'/>
<use f='halide/src/CodeGen_Internal.cpp' l='423' u='c' c='_ZN6Halide8Internal35unsigned_long_div_mod_round_to_zeroERNS_4ExprERKS1_PKm'/>
<use f='halide/src/CodeGen_Internal.cpp' l='426' u='c' c='_ZN6Halide8Internal35unsigned_long_div_mod_round_to_zeroERNS_4ExprERKS1_PKm'/>
<use f='halide/src/CodeGen_Internal.cpp' l='583' u='c' c='_ZN6Halide8Internal23lower_signed_shift_leftERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='592' u='c' c='_ZN6Halide8Internal23lower_signed_shift_leftERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='606' u='c' c='_ZN6Halide8Internal24lower_signed_shift_rightERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_Internal.cpp' l='613' u='c' c='_ZN6Halide8Internal24lower_signed_shift_rightERKNS_4ExprES3_'/>
<use f='halide/src/CodeGen_X86.cpp' l='260' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_122should_use_dot_productERKNS_4ExprES4_RSt6vectorIS2_SaIS2_EE'/>
<use f='halide/src/CodeGen_X86.cpp' l='262' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_122should_use_dot_productERKNS_4ExprES4_RSt6vectorIS2_SaIS2_EE'/>
<use f='halide/src/FindIntrinsics.cpp' l='133' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_117to_rounding_shiftEPKNS0_4CallE'/>
<use f='halide/src/FindIntrinsics.cpp' l='273' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_114FindIntrinsics5visitEPKNS0_3MulE'/>
<use f='halide/src/FindIntrinsics.cpp' l='275' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_114FindIntrinsics5visitEPKNS0_3MulE'/>
<use f='halide/src/FindIntrinsics.cpp' l='599' u='c' c='_ZN6Halide8Internal25lower_widening_shift_leftERKNS_4ExprES3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='610' u='c' c='_ZN6Halide8Internal25lower_rounding_shift_leftERKNS_4ExprES3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='610' u='c' c='_ZN6Halide8Internal25lower_rounding_shift_leftERKNS_4ExprES3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='675' u='c' c='_ZN6Halide8Internal21lower_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='679' u='c' c='_ZN6Halide8Internal21lower_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='716' u='c' c='_ZN6Halide8Internal30lower_rounding_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/FindIntrinsics.cpp' l='720' u='c' c='_ZN6Halide8Internal30lower_rounding_mul_shift_rightERKNS_4ExprES3_S3_'/>
<use f='halide/src/HexagonOptimize.cpp' l='137' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_16as_mulERKNS_4ExprE'/>
<use f='halide/src/HexagonOptimize.cpp' l='737' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3AddE'/>
<use f='halide/src/HexagonOptimize.cpp' l='738' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3AddE'/>
<use f='halide/src/HexagonOptimize.cpp' l='739' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3AddE'/>
<use f='halide/src/HexagonOptimize.cpp' l='740' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3AddE'/>
<use f='halide/src/HexagonOptimize.cpp' l='742' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3AddE'/>
<use f='halide/src/HexagonOptimize.cpp' l='743' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116OptimizePatterns5visitEPKNS0_3AddE'/>
<def f='halide/src/IROperator.cpp' l='2390' ll='2395' type='Halide::Expr Halide::operator&lt;&lt;(Halide::Expr x, Halide::Expr y)'/>
<use f='halide/src/IROperator.cpp' l='2401' u='c' c='_ZN6HalidelsENS_4ExprEi'/>
<use f='halide/src/IROperator.cpp' l='2422' u='c' c='_ZN6HalidersENS_4ExprEi'/>
<use f='halide/src/Lerp.cpp' l='142' u='c' c='_ZN6Halide8Internal10lower_lerpENS_4ExprES1_RKS1_'/>
<use f='halide/src/Lerp.cpp' l='143' u='c' c='_ZN6Halide8Internal10lower_lerpENS_4ExprES1_RKS1_'/>
