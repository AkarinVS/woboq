<def f='halide/llvm-install/include/llvm/ADT/fallible_iterator.h' l='84' ll='87' type='static fallible_iterator&lt;Underlying&gt; llvm::fallible_iterator::itr(Underlying I, llvm::Error &amp; Err)'/>
<doc f='halide/llvm-install/include/llvm/ADT/fallible_iterator.h' l='76'>/// Construct a fallible iterator that *cannot* be used as an end-of-range
  /// value.
  ///
  /// A value created by this method can be dereferenced, incremented,
  /// decremented and compared, providing the underlying type supports it.
  ///
  /// The error that is passed in will be initially marked as checked, so if the
  /// iterator is not used at all the Error need not be checked.</doc>
