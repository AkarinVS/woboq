<def f='halide/halide-install/include/Halide.h' l='10440' ll='10447' type='static Buffer&lt;void, D&gt; Halide::Runtime::Buffer::make_interleaved(halide_type_t t, int width, int height, int channels)'/>
<use f='halide/halide-install/include/Halide.h' l='11406' u='c' c='_ZN6Halide6Buffer16make_interleavedENS_4TypeEiiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='halide/halide-install/include/Halide.h' l='10434'>/** If you use the (x, y, c) indexing convention, then Halide
     * Buffers are stored planar by default. This function constructs
     * an interleaved RGB or RGBA image that can still be indexed
     * using (x, y, c). Passing it to a generator requires that the
     * generator has been compiled with support for interleaved (also
     * known as packed or chunky) memory layouts. */</doc>
<def f='halide/halide-install/include/HalideBuffer.h' l='1678' ll='1685' type='static Buffer&lt;void, D&gt; Halide::Runtime::Buffer::make_interleaved(halide_type_t t, int width, int height, int channels)'/>
<doc f='halide/halide-install/include/HalideBuffer.h' l='1672'>/** If you use the (x, y, c) indexing convention, then Halide
     * Buffers are stored planar by default. This function constructs
     * an interleaved RGB or RGBA image that can still be indexed
     * using (x, y, c). Passing it to a generator requires that the
     * generator has been compiled with support for interleaved (also
     * known as packed or chunky) memory layouts. */</doc>
<use f='halide/apps/resize/resize.cpp' l='159' u='c' c='main'/>
<use f='halide/apps/resize/resize.cpp' l='161' u='c' c='main'/>
<def f='halide/build/include/Halide.h' l='10440' ll='10447' type='static Buffer&lt;void, D&gt; Halide::Runtime::Buffer::make_interleaved(halide_type_t t, int width, int height, int channels)'/>
<use f='halide/build/include/Halide.h' l='11406' u='c' c='_ZN6Halide6Buffer16make_interleavedENS_4TypeEiiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='halide/build/include/Halide.h' l='10434'>/** If you use the (x, y, c) indexing convention, then Halide
     * Buffers are stored planar by default. This function constructs
     * an interleaved RGB or RGBA image that can still be indexed
     * using (x, y, c). Passing it to a generator requires that the
     * generator has been compiled with support for interleaved (also
     * known as packed or chunky) memory layouts. */</doc>
<def f='halide/src/runtime/HalideBuffer.h' l='1678' ll='1685' type='static Buffer&lt;void, D&gt; Halide::Runtime::Buffer::make_interleaved(halide_type_t t, int width, int height, int channels)'/>
<use f='halide/src/Buffer.h' l='319' u='c' c='_ZN6Halide6Buffer16make_interleavedENS_4TypeEiiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='halide/src/runtime/HalideBuffer.h' l='1672'>/** If you use the (x, y, c) indexing convention, then Halide
     * Buffers are stored planar by default. This function constructs
     * an interleaved RGB or RGBA image that can still be indexed
     * using (x, y, c). Passing it to a generator requires that the
     * generator has been compiled with support for interleaved (also
     * known as packed or chunky) memory layouts. */</doc>
