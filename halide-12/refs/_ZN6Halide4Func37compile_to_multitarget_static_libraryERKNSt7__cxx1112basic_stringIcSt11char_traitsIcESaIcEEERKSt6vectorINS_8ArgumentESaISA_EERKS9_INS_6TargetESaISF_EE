<dec f='halide/halide-install/include/Halide.h' l='16857' type='void Halide::Func::compile_to_multitarget_static_library(const std::string &amp; filename_prefix, const std::vector&lt;Argument&gt; &amp; args, const std::vector&lt;Target&gt; &amp; targets)'/>
<doc f='halide/halide-install/include/Halide.h' l='16850'>/** Compile to static-library file and header pair once for each target;
     * each resulting function will be considered (in order) via halide_can_use_target_features()
     * at runtime, with the first appropriate match being selected for subsequent use.
     * This is typically useful for specializations that may vary unpredictably by machine
     * (e.g., SSE4.1/AVX/AVX2 on x86 desktop machines).
     * All targets must have identical arch-os-bits.
     */</doc>
<dec f='halide/build/include/Halide.h' l='16857' type='void Halide::Func::compile_to_multitarget_static_library(const std::string &amp; filename_prefix, const std::vector&lt;Argument&gt; &amp; args, const std::vector&lt;Target&gt; &amp; targets)'/>
<doc f='halide/build/include/Halide.h' l='16850'>/** Compile to static-library file and header pair once for each target;
     * each resulting function will be considered (in order) via halide_can_use_target_features()
     * at runtime, with the first appropriate match being selected for subsequent use.
     * This is typically useful for specializations that may vary unpredictably by machine
     * (e.g., SSE4.1/AVX/AVX2 on x86 desktop machines).
     * All targets must have identical arch-os-bits.
     */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='238' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='977' type='void Halide::Func::compile_to_multitarget_static_library(const std::string &amp; filename_prefix, const std::vector&lt;Argument&gt; &amp; args, const std::vector&lt;Target&gt; &amp; targets)'/>
<doc f='halide/src/Func.h' l='970'>/** Compile to static-library file and header pair once for each target;
     * each resulting function will be considered (in order) via halide_can_use_target_features()
     * at runtime, with the first appropriate match being selected for subsequent use.
     * This is typically useful for specializations that may vary unpredictably by machine
     * (e.g., SSE4.1/AVX/AVX2 on x86 desktop machines).
     * All targets must have identical arch-os-bits.
     */</doc>
<def f='halide/src/Func.cpp' l='3239' ll='3243' type='void Halide::Func::compile_to_multitarget_static_library(const std::string &amp; filename_prefix, const std::vector&lt;Argument&gt; &amp; args, const std::vector&lt;Target&gt; &amp; targets)'/>
