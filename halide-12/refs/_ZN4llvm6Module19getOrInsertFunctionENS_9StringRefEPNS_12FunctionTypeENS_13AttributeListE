<dec f='halide/llvm-install/include/llvm/IR/Module.h' l='349' type='llvm::FunctionCallee llvm::Module::getOrInsertFunction(llvm::StringRef Name, llvm::FunctionType * T, llvm::AttributeList AttributeList)'/>
<doc f='halide/llvm-install/include/llvm/IR/Module.h' l='334'>/// @}
/// @name Function Accessors
/// @{

  /// Look up the specified function in the module symbol table. Four
  /// possibilities:
  ///   1. If it does not exist, add a prototype for the function and return it.
  ///   2. Otherwise, if the existing function has the correct prototype, return
  ///      the existing function.
  ///   3. Finally, the function exists but has the wrong prototype: return the
  ///      function with a constantexpr cast to the right prototype.
  ///
  /// In all cases, the returned value is a FunctionCallee wrapper around the
  /// &apos;FunctionType *T&apos; passed in, as well as a &apos;Value*&apos; either of the Function or
  /// the bitcast to the function.</doc>
