<def f='halide/build-apps/abseil-cpp/absl/debugging/symbolize_elf.inc' l='644' ll='746' type='absl::lts_2020_02_25::debugging_internal::(anonymous namespace)::FindSymbolResult absl::lts_2020_02_25::debugging_internal::FindSymbol(const void *const pc, const int fd, char * out, int out_size, ptrdiff_t relocation, const Elf64_Shdr * strtab, const Elf64_Shdr * symtab, const Elf64_Shdr * opd, char * tmp_buf, int tmp_buf_size)'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/symbolize_elf.inc' l='786' u='c' c='_ZN4absl14lts_2020_02_2518debugging_internal12_GLOBAL__N_110Symbolizer23GetSymbolFromObjectFileERKNS2_7ObjFileEPKvlPciS9_i'/>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/symbolize_elf.inc' l='635'>// Read a symbol table and look for the symbol containing the
// pc. Iterate over symbols in a symbol table and look for the symbol
// containing &quot;pc&quot;.  If the symbol is found, and its name fits in
// out_size, the name is written into out and SYMBOL_FOUND is returned.
// If the name does not fit, truncated name is written into out,
// and SYMBOL_TRUNCATED is returned. Out is NUL-terminated.
// If the symbol is not found, SYMBOL_NOT_FOUND is returned;
// To keep stack consumption low, we would like this function to not get
// inlined.</doc>
