<def f='halide/llvm-install/include/llvm/IR/DebugLoc.h' l='66' type='bool llvm::DebugLoc::operator bool() const'/>
<use f='halide/llvm-install/include/llvm/IR/Instruction.h' l='259' u='c' c='_ZNK4llvm11Instruction11hasMetadataEv'/>
<use f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='547' u='c' c='_ZNK4llvm4Loop8LocRangecvbEv'/>
<use f='halide/llvm-install/include/llvm/Analysis/LoopInfo.h' l='547' u='c' c='_ZNK4llvm4Loop8LocRangecvbEv'/>
<doc f='halide/llvm-install/include/llvm/IR/DebugLoc.h' l='58'>/// @}

    /// Check for null.
    ///
    /// Check for null in a way that is safe with broken debug info.  Unlike
    /// the conversion to \c DILocation, this doesn&apos;t require that \c Loc is of
    /// the right type.  Important for cases like \a llvm::StripDebugInfo() and
    /// \a Instruction::hasMetadata().</doc>
