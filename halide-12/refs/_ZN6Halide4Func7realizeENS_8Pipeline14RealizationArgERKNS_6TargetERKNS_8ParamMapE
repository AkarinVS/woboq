<dec f='halide/halide-install/include/Halide.h' l='16721' type='void Halide::Func::realize(Pipeline::RealizationArg outputs, const Halide::Target &amp; target = Halide::Target(), const Halide::ParamMap &amp; param_map = ParamMap::empty_map())'/>
<doc f='halide/halide-install/include/Halide.h' l='16715'>/** Evaluate this function into an existing allocated buffer or
     * buffers. If the buffer is also one of the arguments to the
     * function, strange things may happen, as the pipeline isn&apos;t
     * necessarily safe to run in-place. If you pass multiple buffers,
     * they must have matching sizes. This form of realize does *not*
     * automatically copy data back from the GPU. */</doc>
<use f='halide/apps/fft/main.cpp' l='166' u='c' c='main'/>
<use f='halide/apps/fft/main.cpp' l='193' u='c' c='main'/>
<use f='halide/apps/fft/main.cpp' l='218' u='c' c='main'/>
<dec f='halide/build/include/Halide.h' l='16721' type='void Halide::Func::realize(Pipeline::RealizationArg outputs, const Halide::Target &amp; target = Halide::Target(), const Halide::ParamMap &amp; param_map = ParamMap::empty_map())'/>
<doc f='halide/build/include/Halide.h' l='16715'>/** Evaluate this function into an existing allocated buffer or
     * buffers. If the buffer is also one of the arguments to the
     * function, strange things may happen, as the pipeline isn&apos;t
     * necessarily safe to run in-place. If you pass multiple buffers,
     * they must have matching sizes. This form of realize does *not*
     * automatically copy data back from the GPU. */</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='120' u='c' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<use f='halide/python_bindings/src/PyFunc.cpp' l='128' u='c' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='841' type='void Halide::Func::realize(Pipeline::RealizationArg outputs, const Halide::Target &amp; target = Halide::Target(), const Halide::ParamMap &amp; param_map = ParamMap::empty_map())'/>
<doc f='halide/src/Func.h' l='835'>/** Evaluate this function into an existing allocated buffer or
     * buffers. If the buffer is also one of the arguments to the
     * function, strange things may happen, as the pipeline isn&apos;t
     * necessarily safe to run in-place. If you pass multiple buffers,
     * they must have matching sizes. This form of realize does *not*
     * automatically copy data back from the GPU. */</doc>
<def f='halide/src/Func.cpp' l='3304' ll='3307' type='void Halide::Func::realize(Pipeline::RealizationArg outputs, const Halide::Target &amp; target = Halide::Target(), const Halide::ParamMap &amp; param_map = ParamMap::empty_map())'/>
<use f='halide/tutorial/lesson_06_realizing_over_shifted_domains.cpp' l='58' u='c' c='main'/>
<use f='halide/tutorial/lesson_06_realizing_over_shifted_domains.cpp' l='83' u='c' c='main'/>
<use f='halide/tutorial/lesson_07_multi_stage_pipelines.cpp' l='88' u='c' c='main'/>
<use f='halide/tutorial/lesson_09_update_definitions.cpp' l='902' u='c' c='main'/>
<use f='halide/tutorial/lesson_12_using_the_gpu.cpp' l='202' u='c' c='_ZN10MyPipeline16test_performanceEv'/>
<use f='halide/tutorial/lesson_12_using_the_gpu.cpp' l='212' u='c' c='_ZN10MyPipeline16test_performanceEv'/>
<use f='halide/tutorial/lesson_12_using_the_gpu.cpp' l='261' u='c' c='main'/>
