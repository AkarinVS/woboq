<dec f='halide/halide-install/include/Halide.h' l='5553' type='void Halide::Internal::Parameter::Parameter(const Halide::Type &amp; t, bool is_buffer, int dimensions)'/>
<doc f='halide/halide-install/include/Halide.h' l='5548'>/** Construct a new parameter of the given type. If the second
     * argument is true, this is a buffer parameter of the given
     * dimensionality, otherwise, it is a scalar parameter (and the
     * dimensionality should be zero). The parameter will be given a
     * unique auto-generated name. */</doc>
<dec f='halide/build/include/Halide.h' l='5553' type='void Halide::Internal::Parameter::Parameter(const Halide::Type &amp; t, bool is_buffer, int dimensions)'/>
<doc f='halide/build/include/Halide.h' l='5548'>/** Construct a new parameter of the given type. If the second
     * argument is true, this is a buffer parameter of the given
     * dimensionality, otherwise, it is a scalar parameter (and the
     * dimensionality should be zero). The parameter will be given a
     * unique auto-generated name. */</doc>
<dec f='halide/src/Parameter.h' l='48' type='void Halide::Internal::Parameter::Parameter(const Halide::Type &amp; t, bool is_buffer, int dimensions)'/>
<doc f='halide/src/Parameter.h' l='43'>/** Construct a new parameter of the given type. If the second
     * argument is true, this is a buffer parameter of the given
     * dimensionality, otherwise, it is a scalar parameter (and the
     * dimensionality should be zero). The parameter will be given a
     * unique auto-generated name. */</doc>
<use f='halide/src/HexagonOffload.cpp' l='812' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_116InjectHexagonRpc5visitEPKNS0_3ForE'/>
<def f='halide/src/Parameter.cpp' l='77' ll='80' type='void Halide::Internal::Parameter::Parameter(const Halide::Type &amp; t, bool is_buffer, int d)'/>
