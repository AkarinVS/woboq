<dec f='halide/build-apps/abseil-cpp/absl/random/discrete_distribution.h' l='177' type='std::vector&lt;std::pair&lt;double, size_t&gt; &gt; absl::lts_2020_02_25::random_internal::InitDiscreteDistribution(std::vector&lt;double&gt; * probabilities)'/>
<use f='halide/build-apps/abseil-cpp/absl/random/discrete_distribution.h' l='189' u='c' c='_ZN4absl14lts_2020_02_2521discrete_distribution10param_type4initEv'/>
<def f='halide/build-apps/abseil-cpp/absl/random/discrete_distribution.cc' l='23' ll='94' type='std::vector&lt;std::pair&lt;double, size_t&gt; &gt; absl::lts_2020_02_25::random_internal::InitDiscreteDistribution(std::vector&lt;double&gt; * probabilities)'/>
<doc f='halide/build-apps/abseil-cpp/absl/random/discrete_distribution.cc' l='21'>// Initializes the distribution table for Walker&apos;s Aliasing algorithm, described
// in Knuth, Vol 2. as well as in https://en.wikipedia.org/wiki/Alias_method</doc>
<doc f='halide/build-apps/abseil-cpp/absl/random/discrete_distribution.h' l='172'>// Using the vector `*probabilities`, whose values are the weights or
// probabilities of an element being selected, constructs the proportional
// probabilities used by the discrete distribution.  `*probabilities` will be
// scaled, if necessary, so that its entries sum to a value sufficiently close
// to 1.0.</doc>
