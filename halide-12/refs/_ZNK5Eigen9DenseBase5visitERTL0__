<dec f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='470' type='void Eigen::DenseBase::visit(Visitor &amp; func) const'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/Visitor.h' l='114' ll='130' type='void Eigen::DenseBase::visit(Visitor &amp; visitor) const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Visitor.h' l='95'>/** Applies the visitor \a visitor to the whole coefficients of the matrix or vector.
  *
  * The template parameter \a Visitor is the type of the visitor and provides the following interface:
  * \code
  * struct MyVisitor {
  *   // called for the first coefficient
  *   void init(const Scalar&amp; value, Index i, Index j);
  *   // called for all other coefficients
  *   void operator() (const Scalar&amp; value, Index i, Index j);
  * };
  * \endcode
  *
  * \note compared to one or two \em for \em loops, visitors offer automatic
  * unrolling for small fixed size matrix.
  * 
  * \note if the matrix is empty, then the visitor is left unchanged.
  *
  * \sa minCoeff(Index*,Index*), maxCoeff(Index*,Index*), DenseBase::redux()
  */</doc>
