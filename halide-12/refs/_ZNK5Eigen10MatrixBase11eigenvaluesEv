<dec f='halide/build-apps/eigen/Eigen/src/Core/MatrixBase.h' l='366' type='Eigen::MatrixBase::EigenvaluesReturnType Eigen::MatrixBase::eigenvalues() const'/>
<def f='halide/build-apps/eigen/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h' l='65' ll='70' type='typename MatrixBase&lt;Derived&gt;::EigenvaluesReturnType Eigen::MatrixBase::eigenvalues() const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/MatrixBase.h' l='364'>/////////// Eigenvalues module ///////////</doc>
<doc f='halide/build-apps/eigen/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h' l='45'>/** \brief Computes the eigenvalues of a matrix 
  * \returns Column vector containing the eigenvalues.
  *
  * \eigenvalues_module
  * This function computes the eigenvalues with the help of the EigenSolver
  * class (for real matrices) or the ComplexEigenSolver class (for complex
  * matrices). 
  *
  * The eigenvalues are repeated according to their algebraic multiplicity,
  * so there are as many eigenvalues as rows in the matrix.
  *
  * The SelfAdjointView class provides a better algorithm for selfadjoint
  * matrices.
  *
  * Example: \include MatrixBase_eigenvalues.cpp
  * Output: \verbinclude MatrixBase_eigenvalues.out
  *
  * \sa EigenSolver::eigenvalues(), ComplexEigenSolver::eigenvalues(),
  *     SelfAdjointView::eigenvalues()
  */</doc>
