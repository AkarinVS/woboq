<dec f='halide/llvm-install/include/llvm/IR/Operator.h' l='568' type='bool llvm::GEPOperator::accumulateConstantOffset(const llvm::DataLayout &amp; DL, llvm::APInt &amp; Offset, function_ref&lt;bool (llvm::Value &amp;, llvm::APInt &amp;)&gt; ExternalAnalysis = nullptr) const'/>
<doc f='halide/llvm-install/include/llvm/IR/Operator.h' l='551'>/// Accumulate the constant address offset of this GEP if possible.
  ///
  /// This routine accepts an APInt into which it will try to accumulate the
  /// constant offset of this GEP.
  ///
  /// If \p ExternalAnalysis is provided it will be used to calculate a offset
  /// when a operand of GEP is not constant.
  /// For example, for a value \p ExternalAnalysis might try to calculate a
  /// lower bound. If \p ExternalAnalysis is successful, it should return true.
  ///
  /// If the \p ExternalAnalysis returns false or the value returned by \p
  /// ExternalAnalysis results in a overflow/underflow, this routine returns
  /// false and the value of the offset APInt is undefined (it is *not*
  /// preserved!).
  ///
  /// The APInt passed into this routine must be at exactly as wide as the
  /// IntPtr type for the address space of the base GEP pointer.</doc>
