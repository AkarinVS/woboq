<def f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='160' ll='191'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='195' c='_ZN4llvm15getInlineParamsEv'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='200' c='_ZN4llvm15getInlineParamsEi'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='208' c='_ZN4llvm15getInlineParamsEjj'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='226' c='_ZN4llvm13getInlineCostERNS_8CallBaseERKNS_12InlineParamsERNS_19TargetTransformInfoENS_12function_refIFRNS_15AssumptionCacheERNS_8FunctionEEEENS7_IFRK1401667'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='240' c='_ZN4llvm13getInlineCostERNS_8CallBaseEPNS_8FunctionERKNS_12InlineParamsERNS_19TargetTransformInfoENS_12function_refIFRNS_15AssumptionCacheERS2_EEENS9_4080712'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='207' c='_ZN4llvm20DefaultInlineAdvisorC1ERNS_6ModuleERNS_15AnalysisManagerINS_8FunctionEJEEENS_12InlineParamsE'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='215'/>
<use f='halide/llvm-install/include/llvm/Analysis/InlineAdvisor.h' l='231' c='_ZN4llvm21InlineAdvisorAnalysis6Result9tryCreateENS_12InlineParamsENS_19InliningAdvisorModeENS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO/Inliner.h' l='122' c='_ZN4llvm24ModuleInlinerWrapperPassC1ENS_12InlineParamsEbbNS_19InliningAdvisorModeEj'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO/Inliner.h' l='140'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO.h' l='117' c='_ZN4llvm26createFunctionInliningPassERNS_12InlineParamsE'/>
<size>64</size>
<doc f='halide/llvm-install/include/llvm/Analysis/InlineCost.h' l='151'>/// Thresholds to tune inline cost analysis. The inline cost analysis decides
/// the condition to apply a threshold and applies it. Otherwise,
/// DefaultThreshold is used. If a threshold is Optional, it is applied only
/// when it has a valid value. Typically, users of inline cost analysis
/// obtain an InlineParams object through one of the \c getInlineParams methods
/// and pass it to \c getInlineCost. Some specialized versions of inliner
/// (such as the pre-inliner) might have custom logic to compute \c InlineParams
/// object.</doc>
<mbr r='llvm::InlineParams::DefaultThreshold' o='0' t='int'/>
<mbr r='llvm::InlineParams::HintThreshold' o='32' t='Optional&lt;int&gt;'/>
<mbr r='llvm::InlineParams::ColdThreshold' o='96' t='Optional&lt;int&gt;'/>
<mbr r='llvm::InlineParams::OptSizeThreshold' o='160' t='Optional&lt;int&gt;'/>
<mbr r='llvm::InlineParams::OptMinSizeThreshold' o='224' t='Optional&lt;int&gt;'/>
<mbr r='llvm::InlineParams::HotCallSiteThreshold' o='288' t='Optional&lt;int&gt;'/>
<mbr r='llvm::InlineParams::LocallyHotCallSiteThreshold' o='352' t='Optional&lt;int&gt;'/>
<mbr r='llvm::InlineParams::ColdCallSiteThreshold' o='416' t='Optional&lt;int&gt;'/>
<mbr r='llvm::InlineParams::ComputeFullInlineCost' o='480' t='Optional&lt;bool&gt;'/>
<mbr r='llvm::InlineParams::EnableDeferral' o='496' t='Optional&lt;bool&gt;'/>
