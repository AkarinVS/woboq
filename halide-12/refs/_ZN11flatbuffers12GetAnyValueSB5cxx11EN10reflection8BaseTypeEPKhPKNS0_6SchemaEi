<dec f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='157' type='std::string flatbuffers::GetAnyValueS(reflection::BaseType type, const uint8_t * data, const reflection::Schema * schema, int type_index)'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='182' u='c' c='_ZN11flatbuffers12GetAnyFieldSB5cxx11ERKNS_5TableERKN10reflection5FieldEPKNS3_6SchemaE'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='202' u='c' c='_ZN11flatbuffers12GetAnyFieldSB5cxx11ERKNS_6StructERKN10reflection5FieldE'/>
<use f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='221' u='c' c='_ZN11flatbuffers17GetAnyVectorElemSB5cxx11EPKNS_11VectorOfAnyEN10reflection8BaseTypeEm'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/reflection.h' l='155'>// All scalars converted using stringstream, strings as-is, and all other
// data types provide some level of debug-pretty-printing.</doc>
<def f='halide/build-apps/flatbuffers/src/reflection.cpp' l='71' ll='121' type='std::string flatbuffers::GetAnyValueS(reflection::BaseType type, const uint8_t * data, const reflection::Schema * schema, int type_index)'/>
