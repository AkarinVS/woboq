<inh f='halide/llvm-install/include/llvm/PassInfo.h' l='30' c='llvm::PassInfo'/>
<def f='halide/llvm-install/include/llvm/PassSupport.h' l='123' ll='127'/>
<ovr f='halide/llvm-install/include/llvm/PassSupport.h' l='130' c='llvm::RegisterAnalysisGroup'/>
<use f='halide/llvm-install/include/llvm/PassSupport.h' l='130'/>
<use f='halide/llvm-install/include/llvm/PassSupport.h' l='132' c='_ZN4llvm21RegisterAnalysisGroupC1ERNS_8PassInfoE'/>
<use f='halide/llvm-install/include/llvm/PassSupport.h' l='136' c='_ZN4llvm21RegisterAnalysisGroupC1EPKc'/>
<size>80</size>
<doc f='halide/llvm-install/include/llvm/PassSupport.h' l='105'>/// RegisterAnalysisGroup - Register a Pass as a member of an analysis _group_.
/// Analysis groups are used to define an interface (which need not derive from
/// Pass) that is required by passes to do their job.  Analysis Groups differ
/// from normal analyses because any available implementation of the group will
/// be used if it is available.
///
/// If no analysis implementing the interface is available, a default
/// implementation is created and added.  A pass registers itself as the default
/// implementation by specifying &apos;true&apos; as the second template argument of this
/// class.
///
/// In addition to registering itself as an analysis group member, a pass must
/// register itself normally as well.  Passes may be members of multiple groups
/// and may still be &quot;required&quot; specifically by name.
///
/// The actual interface may also be registered as well (by not specifying the
/// second template argument).  The interface should be registered to associate
/// a nice name with the interface.</doc>
<fun r='_ZN4llvm14RegisterAGBaseC1ENS_9StringRefEPKvS3_b'/>
