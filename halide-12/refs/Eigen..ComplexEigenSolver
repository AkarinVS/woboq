<def f='halide/build-apps/eigen/Eigen/src/Eigenvalues/ComplexEigenSolver.h' l='45' ll='255'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/ComplexEigenSolver.h' l='261' c='_ZN5Eigen18ComplexEigenSolver7computeERKNS_9EigenBaseITL0__EEb'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/ComplexEigenSolver.h' l='260' c='_ZN5Eigen18ComplexEigenSolver7computeERKNS_9EigenBaseITL0__EEb'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/ComplexEigenSolver.h' l='287' c='_ZN5Eigen18ComplexEigenSolver21doComputeEigenvectorsENS_9NumTraitsINT_6ScalarEE4RealE'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/ComplexEigenSolver.h' l='327' c='_ZN5Eigen18ComplexEigenSolver15sortEigenvaluesEb'/>
<use f='halide/build-apps/eigen/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h' l='27' c='_ZN5Eigen8internal20eigenvalues_selector3runERKNS_10MatrixBaseIT_EE'/>
<doc f='halide/build-apps/eigen/Eigen/src/Eigenvalues/ComplexEigenSolver.h' l='19'>/** \eigenvalues_module \ingroup Eigenvalues_Module
  *
  *
  * \class ComplexEigenSolver
  *
  * \brief Computes eigenvalues and eigenvectors of general complex matrices
  *
  * \tparam _MatrixType the type of the matrix of which we are
  * computing the eigendecomposition; this is expected to be an
  * instantiation of the Matrix class template.
  *
  * The eigenvalues and eigenvectors of a matrix \f$ A \f$ are scalars
  * \f$ \lambda \f$ and vectors \f$ v \f$ such that \f$ Av = \lambda v
  * \f$.  If \f$ D \f$ is a diagonal matrix with the eigenvalues on
  * the diagonal, and \f$ V \f$ is a matrix with the eigenvectors as
  * its columns, then \f$ A V = V D \f$. The matrix \f$ V \f$ is
  * almost always invertible, in which case we have \f$ A = V D V^{-1}
  * \f$. This is called the eigendecomposition.
  *
  * The main function in this class is compute(), which computes the
  * eigenvalues and eigenvectors of a given function. The
  * documentation for that function contains an example showing the
  * main features of the class.
  *
  * \sa class EigenSolver, class SelfAdjointEigenSolver
  */</doc>
<fun r='_ZN5Eigen18ComplexEigenSolverC1Ev'/>
<fun r='_ZN5Eigen18ComplexEigenSolverC1El'/>
<fun r='_ZN5Eigen18ComplexEigenSolverC1ERKNS_9EigenBaseITL0__EEb'/>
<fun r='_ZNK5Eigen18ComplexEigenSolver12eigenvectorsEv'/>
<fun r='_ZNK5Eigen18ComplexEigenSolver11eigenvaluesEv'/>
<fun r='_ZN5Eigen18ComplexEigenSolver7computeERKNS_9EigenBaseITL0__EEb'/>
<fun r='_ZNK5Eigen18ComplexEigenSolver4infoEv'/>
<fun r='_ZN5Eigen18ComplexEigenSolver16setMaxIterationsEl'/>
<fun r='_ZN5Eigen18ComplexEigenSolver16getMaxIterationsEv'/>
<fun r='_ZN5Eigen18ComplexEigenSolver25check_template_parametersEv'/>
<mbr r='Eigen::ComplexEigenSolver::m_eivec' t='Eigen::ComplexEigenSolver::EigenvectorType'/>
<mbr r='Eigen::ComplexEigenSolver::m_eivalues' t='Eigen::ComplexEigenSolver::EigenvalueType'/>
<mbr r='Eigen::ComplexEigenSolver::m_schur' t='ComplexSchur&lt;Eigen::ComplexEigenSolver::MatrixType&gt;'/>
<mbr r='Eigen::ComplexEigenSolver::m_isInitialized' t='bool'/>
<mbr r='Eigen::ComplexEigenSolver::m_eigenvectorsOk' t='bool'/>
<mbr r='Eigen::ComplexEigenSolver::m_matX' t='Eigen::ComplexEigenSolver::EigenvectorType'/>
<fun r='_ZN5Eigen18ComplexEigenSolver21doComputeEigenvectorsENS_9NumTraitsINT_6ScalarEE4RealE'/>
<fun r='_ZN5Eigen18ComplexEigenSolver15sortEigenvaluesEb'/>
<fun r='_ZN5Eigen18ComplexEigenSolver7computeERKNS_9EigenBaseITL0__EEb'/>
<fun r='_ZN5Eigen18ComplexEigenSolver21doComputeEigenvectorsENS_9NumTraitsINT_6ScalarEE4RealE'/>
<fun r='_ZN5Eigen18ComplexEigenSolver15sortEigenvaluesEb'/>
