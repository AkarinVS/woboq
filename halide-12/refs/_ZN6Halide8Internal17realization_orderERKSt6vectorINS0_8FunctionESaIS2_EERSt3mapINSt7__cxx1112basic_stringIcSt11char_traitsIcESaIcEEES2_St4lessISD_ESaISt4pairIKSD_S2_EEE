<dec f='halide/halide-install/include/Halide.h' l='30840' type='std::pair&lt;std::vector&lt;std::string&gt;, std::vector&lt;std::vector&lt;std::string&gt; &gt; &gt; Halide::Internal::realization_order(const std::vector&lt;Function&gt; &amp; outputs, std::map&lt;std::string, Function&gt; &amp; env)'/>
<doc f='halide/halide-install/include/Halide.h' l='30829'>/** Given a bunch of functions that call each other, determine an
 * order in which to do the scheduling. This in turn influences the
 * order in which stages are computed when there&apos;s no strict
 * dependency between them. Currently just some arbitrary depth-first
 * traversal of the call graph. In addition, determine grouping of functions
 * with fused computation loops. The functions within the fused groups
 * are sorted based on realization order. There should not be any dependencies
 * among functions within a fused group. This pass will also populate the
 * &apos;fused_pairs&apos; list in the function&apos;s schedule. Return a pair of
 * the realization order and the fused groups in that order.
 */</doc>
<dec f='halide/build/include/Halide.h' l='30840' type='std::pair&lt;std::vector&lt;std::string&gt;, std::vector&lt;std::vector&lt;std::string&gt; &gt; &gt; Halide::Internal::realization_order(const std::vector&lt;Function&gt; &amp; outputs, std::map&lt;std::string, Function&gt; &amp; env)'/>
<doc f='halide/build/include/Halide.h' l='30829'>/** Given a bunch of functions that call each other, determine an
 * order in which to do the scheduling. This in turn influences the
 * order in which stages are computed when there&apos;s no strict
 * dependency between them. Currently just some arbitrary depth-first
 * traversal of the call graph. In addition, determine grouping of functions
 * with fused computation loops. The functions within the fused groups
 * are sorted based on realization order. There should not be any dependencies
 * among functions within a fused group. This pass will also populate the
 * &apos;fused_pairs&apos; list in the function&apos;s schedule. Return a pair of
 * the realization order and the fused groups in that order.
 */</doc>
<dec f='halide/src/RealizationOrder.h' l='31' type='std::pair&lt;std::vector&lt;std::string&gt;, std::vector&lt;std::vector&lt;std::string&gt; &gt; &gt; Halide::Internal::realization_order(const std::vector&lt;Function&gt; &amp; outputs, std::map&lt;std::string, Function&gt; &amp; env)'/>
<use f='halide/src/Derivative.cpp' l='187' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_126ReverseAccumulationVisitor18propagate_adjointsERKNS_4FuncES5_RKSt6vectorINS_5RangeESaIS7_EE'/>
<doc f='halide/src/RealizationOrder.h' l='20'>/** Given a bunch of functions that call each other, determine an
 * order in which to do the scheduling. This in turn influences the
 * order in which stages are computed when there&apos;s no strict
 * dependency between them. Currently just some arbitrary depth-first
 * traversal of the call graph. In addition, determine grouping of functions
 * with fused computation loops. The functions within the fused groups
 * are sorted based on realization order. There should not be any dependencies
 * among functions within a fused group. This pass will also populate the
 * &apos;fused_pairs&apos; list in the function&apos;s schedule. Return a pair of
 * the realization order and the fused groups in that order.
 */</doc>
<use f='halide/src/DerivativeUtils.cpp' l='243' u='c' c='_ZN6Halide8Internal16inference_boundsB5cxx11ERKSt6vectorINS_4FuncESaIS2_EERKS1_INS0_3BoxESaIS7_EE'/>
<use f='halide/src/Lower.cpp' l='142' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
<use f='halide/src/PrintLoopNest.cpp' l='195' u='c' c='_ZN6Halide8Internal15print_loop_nestB5cxx11ERKSt6vectorINS0_8FunctionESaIS2_EE'/>
<def f='halide/src/RealizationOrder.cpp' l='234' ll='358' type='pair&lt;vector&lt;std::string&gt;, vector&lt;vector&lt;std::string&gt; &gt; &gt; Halide::Internal::realization_order(const vector&lt;Halide::Internal::Function&gt; &amp; outputs, map&lt;std::string, Halide::Internal::Function&gt; &amp; env)'/>
<use f='halide/src/autoschedulers/li2018/GradientAutoscheduler.cpp' l='855' u='c' c='_ZN6Halide8Internal13Autoscheduler17generate_scheduleERKSt6vectorINS0_8FunctionESaIS3_EERKNS_6TargetERKNS_13MachineParamsEPNS_20AutoSchedulerResultsE'/>
<use f='halide/src/autoschedulers/li2018/GradientAutoscheduler.cpp' l='864' u='c' c='_ZN6Halide8Internal13Autoscheduler17generate_scheduleERKSt6vectorINS0_8FunctionESaIS3_EERKNS_6TargetERKNS_13MachineParamsEPNS_20AutoSchedulerResultsE'/>
<use f='halide/src/autoschedulers/mullapudi2016/AutoSchedule.cpp' l='3229' u='c' c='_ZN6Halide8Internal18generate_schedulesB5cxx11ERKSt6vectorINS0_8FunctionESaIS2_EERKNS_6TargetERKNS_13MachineParamsE'/>
<use f='halide/src/autoschedulers/mullapudi2016/AutoSchedule.cpp' l='3252' u='c' c='_ZN6Halide8Internal18generate_schedulesB5cxx11ERKSt6vectorINS0_8FunctionESaIS2_EERKNS_6TargetERKNS_13MachineParamsE'/>
<use f='halide/src/autoschedulers/mullapudi2016/AutoSchedule.cpp' l='3292' u='c' c='_ZN6Halide8Internal18generate_schedulesB5cxx11ERKSt6vectorINS0_8FunctionESaIS2_EERKNS_6TargetERKNS_13MachineParamsE'/>
