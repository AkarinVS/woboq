<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='319' type='void absl::lts_2020_02_25::Mutex::LockWhen(const absl::lts_2020_02_25::Condition &amp; cond)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='324' u='c' c='_ZN4absl14lts_2020_02_255Mutex14WriterLockWhenERKNS0_9ConditionE'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='311'>// Mutex::LockWhen()
  // Mutex::ReaderLockWhen()
  // Mutex::WriterLockWhen()
  //
  // Blocks until simultaneously both `cond` is `true` and this `Mutex` can
  // be acquired, then atomically acquires this `Mutex`. `LockWhen()` is
  // logically equivalent to `*Lock(); Await();` though they may have different
  // performance characteristics.</doc>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='1491' ll='1497' type='void absl::lts_2020_02_25::Mutex::LockWhen(const absl::lts_2020_02_25::Condition &amp; cond)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/notification.cc' l='50' u='c' c='_ZNK4absl14lts_2020_02_2512Notification19WaitForNotificationEv'/>
