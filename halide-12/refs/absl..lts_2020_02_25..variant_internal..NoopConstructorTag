<def f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='958'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='965' c='_ZN4absl14lts_2020_02_2516variant_internal5UnionIJEEC1ENS1_18NoopConstructorTagE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='979' c='_ZN4absl14lts_2020_02_2516variant_internal5UnionIJT_DpT0_EEC1ENS1_18NoopConstructorTagE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='980' c='_ZN4absl14lts_2020_02_2516variant_internal5UnionIJT_DpT0_EEC1ENS1_18NoopConstructorTagE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='1004' c='_ZN4absl14lts_2020_02_2516variant_internal21DestructibleUnionImplIJEEC1ENS1_18NoopConstructorTagE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='1011' c='_ZN4absl14lts_2020_02_2516variant_internal21DestructibleUnionImplIJT_DpT0_EEC1ENS1_18NoopConstructorTagE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='1012' c='_ZN4absl14lts_2020_02_2516variant_internal21DestructibleUnionImplIJT_DpT0_EEC1ENS1_18NoopConstructorTagE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='1053' c='_ZN4absl14lts_2020_02_2516variant_internal16VariantStateBaseC1ENS1_18NoopConstructorTagE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='1054' c='_ZN4absl14lts_2020_02_2516variant_internal16VariantStateBaseC1ENS1_18NoopConstructorTagE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='1348' c='_ZN4absl14lts_2020_02_2516variant_internal25VariantMoveBaseNontrivialC1EONS1_25VariantMoveBaseNontrivialIJDpT_EEE'/>
<use f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='1391' c='_ZN4absl14lts_2020_02_2516variant_internal25VariantCopyBaseNontrivialC1ERKNS1_25VariantCopyBaseNontrivialIJDpT_EEE'/>
<size>1</size>
<doc f='halide/build-apps/abseil-cpp/absl/types/internal/variant.h' l='954'>// We want to allow for variant&lt;&gt; to be trivial. For that, we need the default
// constructor to be trivial, which means we can&apos;t define it ourselves.
// Instead, we use a non-default constructor that takes NoopConstructorTag
// that doesn&apos;t affect the triviality of the types.</doc>
