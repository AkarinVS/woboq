<def f='halide/build-apps/abseil-cpp/absl/types/bad_variant_access.h' l='64' ll='69'/>
<size>8</size>
<doc f='halide/build-apps/abseil-cpp/absl/types/bad_variant_access.h' l='43'>// -----------------------------------------------------------------------------
// bad_variant_access
// -----------------------------------------------------------------------------
//
// An `absl::bad_variant_access` type is an exception type that is thrown in
// the following cases:
//
//   * Calling `absl::get(absl::variant) with an index or type that does not
//     match the currently selected alternative type
//   * Calling `absl::visit on an `absl::variant` that is in the
//     `variant::valueless_by_exception` state.
//
// Example:
//
//   absl::variant&lt;int, std::string&gt; v;
//   v = 1;
//   try {
//     absl::get&lt;std::string&gt;(v);
//   } catch(const absl::bad_variant_access&amp; e) {
//     std::cout &lt;&lt; &quot;Bad variant access: &quot; &lt;&lt; e.what() &lt;&lt; &apos;\n&apos;;
//   }</doc>
<fun r='_ZN4absl14lts_2020_02_2518bad_variant_accessC1Ev'/>
<fun r='_ZN4absl14lts_2020_02_2518bad_variant_accessD1Ev'/>
<fun r='_ZNK4absl14lts_2020_02_2518bad_variant_access4whatEv'/>
<use f='halide/build-apps/abseil-cpp/absl/types/bad_variant_access.cc' l='42' c='_ZN4absl14lts_2020_02_2516variant_internal21ThrowBadVariantAccessEv'/>
<size>8</size>
<fun r='_ZN4absl14lts_2020_02_2518bad_variant_accessD1Ev'/>
<fun r='_ZNK4absl14lts_2020_02_2518bad_variant_access4whatEv'/>
