<dec f='halide/halide-install/include/Halide.h' l='31483' type='Halide::Internal::Stmt Halide::Internal::storage_folding(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env)'/>
<doc f='halide/halide-install/include/Halide.h' l='31470'>/** Fold storage of functions if possible. This means reducing one of
 * the dimensions module something for the purpose of storage, if we
 * can prove that this is safe to do. E.g consider:
 *
 \code
 f(x) = ...
 g(x) = f(x-1) + f(x)
 f.store_root().compute_at(g, x);
 \endcode
 *
 * We can store f as a circular buffer of size two, instead of
 * allocating space for all of it.
 */</doc>
<dec f='halide/build/include/Halide.h' l='31483' type='Halide::Internal::Stmt Halide::Internal::storage_folding(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env)'/>
<doc f='halide/build/include/Halide.h' l='31470'>/** Fold storage of functions if possible. This means reducing one of
 * the dimensions module something for the purpose of storage, if we
 * can prove that this is safe to do. E.g consider:
 *
 \code
 f(x) = ...
 g(x) = f(x-1) + f(x)
 f.store_root().compute_at(g, x);
 \endcode
 *
 * We can store f as a circular buffer of size two, instead of
 * allocating space for all of it.
 */</doc>
<dec f='halide/src/StorageFolding.h' l='31' type='Halide::Internal::Stmt Halide::Internal::storage_folding(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env)'/>
<use f='halide/src/Lower.cpp' l='224' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_110lower_implERKSt6vectorINS0_8FunctionESaIS3_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_6TargetERKS7388887'/>
<doc f='halide/src/StorageFolding.h' l='18'>/** Fold storage of functions if possible. This means reducing one of
 * the dimensions module something for the purpose of storage, if we
 * can prove that this is safe to do. E.g consider:
 *
 \code
 f(x) = ...
 g(x) = f(x-1) + f(x)
 f.store_root().compute_at(g, x);
 \endcode
 *
 * We can store f as a circular buffer of size two, instead of
 * allocating space for all of it.
 */</doc>
<def f='halide/src/StorageFolding.cpp' l='1015' ll='1017' type='Halide::Internal::Stmt Halide::Internal::storage_folding(const Halide::Internal::Stmt &amp; s, const std::map&lt;std::string, Function&gt; &amp; env)'/>
