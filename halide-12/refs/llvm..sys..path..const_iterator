<inh f='halide/llvm-install/include/llvm/ADT/iterator.h' l='67' c='llvm::iterator_facade_base'/>
<def f='halide/llvm-install/include/llvm/Support/Path.h' l='52' ll='71'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='53'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='61' c='_ZN4llvm3sys4path5beginENS_9StringRefENS1_5StyleE'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='62' c='_ZN4llvm3sys4path3endENS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='66' c='_ZN4llvm3sys4path14const_iteratorppEv'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='67' c='_ZNK4llvm3sys4path14const_iteratoreqERKS2_'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='70' c='_ZNK4llvm3sys4path14const_iteratormiERKS2_'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='101' c='_ZN4llvm3sys4path5beginENS_9StringRefENS1_5StyleE'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='106' c='_ZN4llvm3sys4path3endENS_9StringRefE'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='206' c='_ZN4llvm3sys4path6appendERNS_15SmallVectorImplIcEENS1_14const_iteratorES5_NS1_5StyleE'/>
<use f='halide/llvm-install/include/llvm/Support/Path.h' l='207' c='_ZN4llvm3sys4path6appendERNS_15SmallVectorImplIcEENS1_14const_iteratorES5_NS1_5StyleE'/>
<use f='halide/llvm-install/include/llvm/Support/VirtualFileSystem.h' l='716' c='_ZNK4llvm3vfs21RedirectingFileSystem10lookupPathENS_3sys4path14const_iteratorES4_PNS1_5EntryE'/>
<use f='halide/llvm-install/include/llvm/Support/VirtualFileSystem.h' l='717' c='_ZNK4llvm3vfs21RedirectingFileSystem10lookupPathENS_3sys4path14const_iteratorES4_PNS1_5EntryE'/>
<size>48</size>
<doc f='halide/llvm-install/include/llvm/Support/Path.h' l='30'>/// @name Lexical Component Iterator
/// @{

/// Path iterator.
///
/// This is an input iterator that iterates over the individual components in
/// \a path. The traversal order is as follows:
/// * The root-name element, if present.
/// * The root-directory element, if present.
/// * Each successive filename element, if present.
/// * Dot, if one or more trailing non-root slash characters are present.
/// Traversing backwards is possible with \a reverse_iterator
///
/// Iteration examples. Each component is separated by &apos;,&apos;:
/// @code
///   /          =&gt; /
///   /foo       =&gt; /,foo
///   foo/       =&gt; foo,.
///   /foo/bar   =&gt; /,foo,bar
///   ../        =&gt; ..,.
///   C:\foo\bar =&gt; C:,\,foo,bar
/// @endcode</doc>
<mbr r='llvm::sys::path::const_iterator::Path' o='0' t='llvm::StringRef'/>
<mbr r='llvm::sys::path::const_iterator::Component' o='128' t='llvm::StringRef'/>
<mbr r='llvm::sys::path::const_iterator::Position' o='256' t='size_t'/>
<mbr r='llvm::sys::path::const_iterator::S' o='320' t='llvm::sys::path::Style'/>
<fun r='_ZNK4llvm3sys4path14const_iteratordeEv'/>
<fun r='_ZN4llvm3sys4path14const_iteratorppEv'/>
<fun r='_ZNK4llvm3sys4path14const_iteratoreqERKS2_'/>
<fun r='_ZNK4llvm3sys4path14const_iteratormiERKS2_'/>
