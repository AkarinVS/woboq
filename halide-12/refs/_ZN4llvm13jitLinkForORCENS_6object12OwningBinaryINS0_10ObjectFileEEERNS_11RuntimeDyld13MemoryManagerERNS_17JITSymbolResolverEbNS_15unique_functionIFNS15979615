<dec f='halide/llvm-install/include/llvm/ExecutionEngine/RuntimeDyld.h' l='270' type='void llvm::jitLinkForORC(object::OwningBinary&lt;object::ObjectFile&gt; O, RuntimeDyld::MemoryManager &amp; MemMgr, llvm::JITSymbolResolver &amp; Resolver, bool ProcessAllSections, unique_function&lt;llvm::Error (const object::ObjectFile &amp;, llvm::RuntimeDyld::LoadedObjectInfo &amp;, std::map&lt;StringRef, JITEvaluatedSymbol&gt;)&gt; OnLoaded, unique_function&lt;void (object::OwningBinary&lt;object::ObjectFile&gt;, std::unique_ptr&lt;LoadedObjectInfo&gt;, llvm::Error)&gt; OnEmitted)'/>
<dec f='halide/llvm-install/include/llvm/ExecutionEngine/RuntimeDyld.h' l='296' type='void llvm::jitLinkForORC(object::OwningBinary&lt;object::ObjectFile&gt; O, RuntimeDyld::MemoryManager &amp; MemMgr, llvm::JITSymbolResolver &amp; Resolver, bool ProcessAllSections, unique_function&lt;llvm::Error (const object::ObjectFile &amp;, RuntimeDyld::LoadedObjectInfo &amp;, std::map&lt;StringRef, JITEvaluatedSymbol&gt;)&gt; OnLoaded, unique_function&lt;void (object::OwningBinary&lt;object::ObjectFile&gt;, std::unique_ptr&lt;RuntimeDyld::LoadedObjectInfo&gt;, llvm::Error)&gt; OnEmitted)'/>
<doc f='halide/llvm-install/include/llvm/ExecutionEngine/RuntimeDyld.h' l='290'>// Asynchronous JIT link for ORC.
//
// Warning: This API is experimental and probably should not be used by anyone
// but ORC&apos;s RTDyldObjectLinkingLayer2. Internally it constructs a RuntimeDyld
// instance and uses continuation passing to perform the fix-up and finalize
// steps asynchronously.</doc>
