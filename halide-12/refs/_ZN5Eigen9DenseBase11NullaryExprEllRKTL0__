<dec f='halide/build-apps/eigen/Eigen/src/Core/DenseBase.h' l='352' type='static const CwiseNullaryOp&lt;CustomNullaryOp, Eigen::DenseBase::PlainObject&gt; Eigen::DenseBase::NullaryExpr(Eigen::Index rows, Eigen::Index cols, const CustomNullaryOp &amp; func)'/>
<def f='halide/build-apps/eigen/Eigen/src/Core/CwiseNullaryOp.h' l='106' ll='117' type='static const CwiseNullaryOp&lt;CustomNullaryOp, typename DenseBase&lt;Derived&gt;::PlainObject&gt; Eigen::DenseBase::NullaryExpr(Eigen::Index rows, Eigen::Index cols, const CustomNullaryOp &amp; func)'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/CwiseNullaryOp.h' l='93'>/** \returns an expression of a matrix defined by a custom functor \a func
  *
  * The parameters \a rows and \a cols are the number of rows and of columns of
  * the returned matrix. Must be compatible with this MatrixBase type.
  *
  * This variant is meant to be used for dynamic-size matrix types. For fixed-size types,
  * it is redundant to pass \a rows and \a cols as arguments, so Zero() should be used
  * instead.
  *
  * The template parameter \a CustomNullaryOp is the type of the functor.
  *
  * \sa class CwiseNullaryOp
  */</doc>
