<dec f='halide/llvm-install/include/llvm/IR/ConstantRange.h' l='143' type='static llvm::ConstantRange llvm::ConstantRange::makeGuaranteedNoWrapRegion(Instruction::BinaryOps BinOp, const llvm::ConstantRange &amp; Other, unsigned int NoWrapKind)'/>
<doc f='halide/llvm-install/include/llvm/IR/ConstantRange.h' l='127'>/// Produce the largest range containing all X such that &quot;X BinOp Y&quot; is
  /// guaranteed not to wrap (overflow) for *all* Y in Other. However, there may
  /// be *some* Y in Other for which additional X not contained in the result
  /// also do not overflow.
  ///
  /// NoWrapKind must be one of OBO::NoUnsignedWrap or OBO::NoSignedWrap.
  ///
  /// Examples:
  ///  typedef OverflowingBinaryOperator OBO;
  ///  #define MGNR makeGuaranteedNoWrapRegion
  ///  MGNR(Add, [i8 1, 2), OBO::NoSignedWrap) == [-128, 127)
  ///  MGNR(Add, [i8 1, 2), OBO::NoUnsignedWrap) == [0, -1)
  ///  MGNR(Add, [i8 0, 1), OBO::NoUnsignedWrap) == Full Set
  ///  MGNR(Add, [i8 -1, 6), OBO::NoSignedWrap) == [INT_MIN+1, INT_MAX-4)
  ///  MGNR(Sub, [i8 1, 2), OBO::NoSignedWrap) == [-127, 128)
  ///  MGNR(Sub, [i8 1, 2), OBO::NoUnsignedWrap) == [1, 0)</doc>
