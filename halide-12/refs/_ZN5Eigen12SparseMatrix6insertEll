<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='219' u='c' c='_ZN5Eigen12SparseMatrix8coeffRefEll'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='224' u='c' c='_ZN5Eigen12SparseMatrix8coeffRefEll'/>
<dec f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='242' type='Eigen::SparseMatrix::Scalar &amp; Eigen::SparseMatrix::insert(Eigen::Index row, Eigen::Index col)'/>
<use f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='461' u='c' c='_ZN5Eigen12SparseMatrix18insertByOuterInnerEll'/>
<def f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='1240' ll='1358' type='typename SparseMatrix&lt;_Scalar, _Options, _StorageIndex&gt;::Scalar &amp; Eigen::SparseMatrix::insert(Eigen::Index row, Eigen::Index col)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SparseCore/SparseMatrix.h' l='227'>/** \returns a reference to a novel non zero coefficient with coordinates \a row x \a col.
      * The non zero coefficient must \b not already exist.
      *
      * If the matrix \c *this is in compressed mode, then \c *this is turned into uncompressed
      * mode while reserving room for 2 x this-&gt;innerSize() non zeros if reserve(Index) has not been called earlier.
      * In this case, the insertion procedure is optimized for a \e sequential insertion mode where elements are assumed to be
      * inserted by increasing outer-indices.
      * 
      * If that&apos;s not the case, then it is strongly recommended to either use a triplet-list to assemble the matrix, or to first
      * call reserve(const SizesType &amp;) to reserve the appropriate number of non-zero elements per inner vector.
      *
      * Assuming memory has been appropriately reserved, this function performs a sorted insertion in O(1)
      * if the elements of each inner vector are inserted in increasing inner index order, and in O(nnz_j) for a random insertion.
      *
      */</doc>
