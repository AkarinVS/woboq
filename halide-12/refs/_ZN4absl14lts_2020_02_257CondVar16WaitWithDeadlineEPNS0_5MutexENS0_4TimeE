<dec f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='815' type='bool absl::lts_2020_02_25::CondVar::WaitWithDeadline(absl::lts_2020_02_25::Mutex * mu, absl::Time deadline)'/>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='800'>// CondVar::WaitWithDeadline()
  //
  // Atomically releases a `Mutex` and blocks on this condition variable.
  // Waits until awakened by a call to `Signal()` or `SignalAll()` (or a
  // spurious wakeup), or until the deadline has passed, then reacquires
  // the `Mutex` and returns.
  //
  // Deadlines in the past are equivalent to an immediate deadline.
  //
  // Returns true if the deadline has passed without this `CondVar`
  // being signalled in any manner. If both the deadline has passed
  // and this `CondVar` has been signalled, the implementation is free
  // to return `true` or `false`.
  //
  // Requires and ensures that the current thread holds the `Mutex`.</doc>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2565' u='c' c='_ZN4absl14lts_2020_02_257CondVar15WaitWithTimeoutEPNS0_5MutexENS0_8DurationE'/>
<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='2568' ll='2570' type='bool absl::lts_2020_02_25::CondVar::WaitWithDeadline(absl::lts_2020_02_25::Mutex * mu, absl::Time deadline)'/>
