<def f='halide/build-apps/flatbuffers/include/flatbuffers/flatbuffers.h' l='1734' ll='1742' type='Offset&lt;Vector&lt;const T *&gt; &gt; flatbuffers::FlatBufferBuilder::CreateVectorOfStructs(size_t vector_size, const std::function&lt;void (size_t, T *)&gt; &amp; filler)'/>
<doc f='halide/build-apps/flatbuffers/include/flatbuffers/flatbuffers.h' l='1726'>/// @brief Serialize an array of structs into a FlatBuffer `vector`.
  /// @tparam T The data type of the struct array elements.
  /// @param[in] filler A function that takes the current iteration 0..vector_size-1
  /// and a pointer to the struct that must be filled.
  /// @return Returns a typed `Offset` into the serialized data indicating
  /// where the vector is stored.
  /// This is mostly useful when flatbuffers are generated with mutation
  /// accessors.</doc>
