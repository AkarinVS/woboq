<def f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='315' ll='420'/>
<use f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='424' c='_ZN4llvm23SmallVectorTemplateBase4growEm'/>
<use f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='433' c='_ZN4llvm23SmallVectorTemplateBase19moveElementsForGrowEPT_'/>
<use f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='444' c='_ZN4llvm23SmallVectorTemplateBase21takeAllocationForGrowEPT_m'/>
<def f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='458' ll='553'/>
<use f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='558'/>
<use f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='559'/>
<use f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='568'/>
<use f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='573' c='_ZN4llvm15SmallVectorImplC1Ej'/>
<doc f='halide/llvm-install/include/llvm/ADT/SmallVector.h' l='454'>/// SmallVectorTemplateBase&lt;TriviallyCopyable = true&gt; - This is where we put
/// method implementations that are designed to work with trivially copyable
/// T&apos;s. This allows using memcpy in place of copy/move construction and
/// skipping destruction.</doc>
<smbr r='llvm::SmallVectorTemplateBase::TakesParamByValue' t='const bool'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseC1Em'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase13destroy_rangeEPT_S2_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase18uninitialized_moveETL0__S1_TL0_0_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase18uninitialized_copyETL0__S1_TL0_0_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase4growEm'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase13mallocForGrowEmRm'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase19moveElementsForGrowEPT_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase21takeAllocationForGrowEPT_m'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase28reserveForParamAndGetAddressERKT_m'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase28reserveForParamAndGetAddressERT_m'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase19forward_value_paramEOT_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase19forward_value_paramERKT_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase13growAndAssignEmRKT_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase18growAndEmplaceBackEDpOTL0__'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase9push_backERKT_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase9push_backEOT_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase8pop_backEv'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase4growEm'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase19moveElementsForGrowEPT_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBase21takeAllocationForGrowEPT_m'/>
<smbr r='llvm::SmallVectorTemplateBase{type-parameter-0-0,true}::TakesParamByValue' t='const bool'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EEC1Em'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE13destroy_rangeEPS1_S3_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE18uninitialized_moveETL0__S3_TL0_0_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE18uninitialized_copyETL0__S3_TL0_0_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE18uninitialized_copyEPTL0__S4_PTL0_0_PNSt9enable_ifIXsr3std7is_sameINSt12remove_constIS3_E4typeES5_EE5valueEvE4typeE'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE4growEm'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE28reserveForParamAndGetAddressERKS1_m'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE28reserveForParamAndGetAddressERS1_m'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE19forward_value_paramENSt11conditionalIL_ZNS2_17TakesParamByValueEES1_RKS1_E4typeE'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE13growAndAssignEmS1_'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE18growAndEmplaceBackEDpOTL0__'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE9push_backENSt11conditionalIL_ZNS2_17TakesParamByValueEES1_RKS1_E4typeE'/>
<fun r='_ZN4llvm23SmallVectorTemplateBaseIT_Lb1EE8pop_backEv'/>
