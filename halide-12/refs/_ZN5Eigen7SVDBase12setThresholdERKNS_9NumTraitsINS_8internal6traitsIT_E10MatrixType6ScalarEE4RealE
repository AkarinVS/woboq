<def f='halide/build-apps/eigen/Eigen/src/SVD/SVDBase.h' l='170' ll='175' type='Derived &amp; Eigen::SVDBase::setThreshold(const Eigen::SVDBase::RealScalar &amp; threshold)'/>
<doc f='halide/build-apps/eigen/Eigen/src/SVD/SVDBase.h' l='156'>/** Allows to prescribe a threshold to be used by certain methods, such as rank() and solve(),
    * which need to determine when singular values are to be considered nonzero.
    * This is not used for the SVD decomposition itself.
    *
    * When it needs to get the threshold value, Eigen calls threshold().
    * The default is \c NumTraits&lt;Scalar&gt;::epsilon()
    *
    * \param threshold The new value to use as the threshold.
    *
    * A singular value will be considered nonzero if its value is strictly greater than
    *  \f$ \vert singular value \vert \leqslant threshold \times \vert max singular value \vert \f$.
    *
    * If you want to come back to the default behavior, call setThreshold(Default_t)
    */</doc>
