<def f='halide/llvm-install/include/llvm/Transforms/Scalar/LoopPassManager.h' l='251' type='bool llvm::LPMUpdater::skipCurrentLoop() const'/>
<use f='halide/llvm-install/include/llvm/Transforms/Scalar/LoopPassManager.h' l='376' u='c' c='_ZN4llvm11PassManagerINS_4LoopENS_15AnalysisManagerIS1_JRNS_27LoopStandardAnalysisResultsEEEEJS4_RNS_10LPMUpdaterEEE13runSinglePassERT_RT0_RS5_S4_S7_R12518204'/>
<doc f='halide/llvm-install/include/llvm/Transforms/Scalar/LoopPassManager.h' l='245'>/// This can be queried by loop passes which run other loop passes (like pass
  /// managers) to know whether the loop needs to be skipped due to updates to
  /// the loop nest.
  ///
  /// If this returns true, the loop object may have been deleted, so passes
  /// should take care not to touch the object.</doc>
