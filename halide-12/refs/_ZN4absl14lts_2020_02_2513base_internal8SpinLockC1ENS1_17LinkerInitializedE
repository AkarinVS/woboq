<def f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.h' l='69' ll='72' type='void absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(base_internal::LinkerInitialized )'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/spinlock.h' l='58'>// Special constructor for use with static SpinLock objects.  E.g.,
  //
  //    static SpinLock lock(base_internal::kLinkerInitialized);
  //
  // When initialized using this constructor, we depend on the fact
  // that the linker has already initialized the memory appropriately. The lock
  // is initialized in non-cooperative mode.
  //
  // A SpinLock constructed like this can be freely used from global
  // initializers without worrying about the order in which global
  // initializers run.</doc>
<use f='halide/build-apps/abseil-cpp/absl/debugging/symbolize_elf.inc' l='152' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/symbolize_elf.inc' l='158' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.cc' l='35' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/graphcycles.cc' l='54' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='210' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='276' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/time/clock.cc' l='229' u='c'/>
