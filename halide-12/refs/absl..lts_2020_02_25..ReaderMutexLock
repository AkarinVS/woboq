<def f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='560' ll='575'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='566' c='_ZN4absl14lts_2020_02_2515ReaderMutexLockC1ERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='567' c='_ZN4absl14lts_2020_02_2515ReaderMutexLockC1EOS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='568' c='_ZN4absl14lts_2020_02_2515ReaderMutexLockaSERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='568' c='_ZN4absl14lts_2020_02_2515ReaderMutexLockaSERKS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='569' c='_ZN4absl14lts_2020_02_2515ReaderMutexLockaSEOS1_'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='569' c='_ZN4absl14lts_2020_02_2515ReaderMutexLockaSEOS1_'/>
<size>8</size>
<doc f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.h' l='556'>// ReaderMutexLock
//
// The `ReaderMutexLock` is a helper class, like `MutexLock`, which acquires and
// releases a shared lock on a `Mutex` via RAII.</doc>
<fun r='_ZN4absl14lts_2020_02_2515ReaderMutexLockC1EPNS0_5MutexE'/>
<fun r='_ZN4absl14lts_2020_02_2515ReaderMutexLockC1ERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_2515ReaderMutexLockC1EOS1_'/>
<fun r='_ZN4absl14lts_2020_02_2515ReaderMutexLockaSERKS1_'/>
<fun r='_ZN4absl14lts_2020_02_2515ReaderMutexLockaSEOS1_'/>
<fun r='_ZN4absl14lts_2020_02_2515ReaderMutexLockD1Ev'/>
<mbr r='absl::lts_2020_02_25::ReaderMutexLock::mu_' o='0' t='absl::lts_2020_02_25::Mutex *const'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='247' c='_ZNK4absl14lts_2020_02_2514flags_internal8FlagImpl4ReadEPv'/>
<size>8</size>
