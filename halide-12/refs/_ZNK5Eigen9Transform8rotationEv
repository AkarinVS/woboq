<dec f='halide/build-apps/eigen/Eigen/src/Geometry/Transform.h' l='600' type='Eigen::Transform::RotationReturnType Eigen::Transform::rotation() const'/>
<def f='halide/build-apps/eigen/Eigen/src/Geometry/Transform.h' l='1076' ll='1082' type='typename Transform&lt;Scalar, Dim, Mode, Options&gt;::RotationReturnType Eigen::Transform::rotation() const'/>
<doc f='halide/build-apps/eigen/Eigen/src/Geometry/Transform.h' l='1066'>/** \returns the rotation part of the transformation
  *
  * If Mode==Isometry, then this method is an alias for linear(),
  * otherwise it calls computeRotationScaling() to extract the rotation
  * through a SVD decomposition.
  *
  * \svd_module
  *
  * \sa computeRotationScaling(), computeScalingRotation(), class SVD
  */</doc>
