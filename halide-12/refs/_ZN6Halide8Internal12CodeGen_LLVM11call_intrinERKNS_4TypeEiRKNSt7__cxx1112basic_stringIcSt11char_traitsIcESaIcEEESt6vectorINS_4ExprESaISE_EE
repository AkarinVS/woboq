<dec f='halide/halide-install/include/Halide.h' l='20202' type='llvm::Value * Halide::Internal::CodeGen_LLVM::call_intrin(const Halide::Type &amp; t, int intrin_lanes, const std::string &amp; name, std::vector&lt;Expr&gt; )'/>
<doc f='halide/halide-install/include/Halide.h' l='20193'>/** Generate a call to a vector intrinsic or runtime inlined
     * function. The arguments are sliced up into vectors of the width
     * given by &apos;intrin_lanes&apos;, the intrinsic is called on each
     * piece, then the results (if any) are concatenated back together
     * into the original type &apos;t&apos;. For the version that takes an
     * llvm::Type *, the type may be void, so the vector width of the
     * arguments must be specified explicitly as
     * &apos;called_lanes&apos;. */
    // @{</doc>
<dec f='halide/build/include/Halide.h' l='20202' type='llvm::Value * Halide::Internal::CodeGen_LLVM::call_intrin(const Halide::Type &amp; t, int intrin_lanes, const std::string &amp; name, std::vector&lt;Expr&gt; )'/>
<doc f='halide/build/include/Halide.h' l='20193'>/** Generate a call to a vector intrinsic or runtime inlined
     * function. The arguments are sliced up into vectors of the width
     * given by &apos;intrin_lanes&apos;, the intrinsic is called on each
     * piece, then the results (if any) are concatenated back together
     * into the original type &apos;t&apos;. For the version that takes an
     * llvm::Type *, the type may be void, so the vector width of the
     * arguments must be specified explicitly as
     * &apos;called_lanes&apos;. */
    // @{</doc>
<dec f='halide/src/CodeGen_LLVM.h' l='463' type='llvm::Value * Halide::Internal::CodeGen_LLVM::call_intrin(const Halide::Type &amp; t, int intrin_lanes, const std::string &amp; name, std::vector&lt;Expr&gt; )'/>
<doc f='halide/src/CodeGen_LLVM.h' l='454'>/** Generate a call to a vector intrinsic or runtime inlined
     * function. The arguments are sliced up into vectors of the width
     * given by &apos;intrin_lanes&apos;, the intrinsic is called on each
     * piece, then the results (if any) are concatenated back together
     * into the original type &apos;t&apos;. For the version that takes an
     * llvm::Type *, the type may be void, so the vector width of the
     * arguments must be specified explicitly as
     * &apos;called_lanes&apos;. */
    // @{</doc>
<use f='halide/src/CodeGen_LLVM.cpp' l='2836' u='c' c='_ZN6Halide8Internal12CodeGen_LLVM5visitEPKNS0_4CallE'/>
<def f='halide/src/CodeGen_LLVM.cpp' l='4833' ll='4845' type='llvm::Value * Halide::Internal::CodeGen_LLVM::call_intrin(const Halide::Type &amp; result_type, int intrin_lanes, const std::string &amp; name, vector&lt;Halide::Expr&gt; args)'/>
