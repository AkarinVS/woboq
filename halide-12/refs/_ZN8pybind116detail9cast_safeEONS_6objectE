<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1831' ll='1832' type='enable_if_t&lt;!cast_is_temporary_value_reference&lt;T&gt;::value, T&gt; pybind11::detail::cast_safe(pybind11::object &amp;&amp; o)'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1833' ll='1834' type='enable_if_t&lt;cast_is_temporary_value_reference&lt;T&gt;::value, T&gt; pybind11::detail::cast_safe(pybind11::object &amp;&amp; )'/>
<def f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1835' type='void pybind11::detail::cast_safe(pybind11::object &amp;&amp; )'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1828'>// Trampoline use: Having a pybind11::cast with an invalid reference type is going to static_assert, even
// though if it&apos;s in dead code, so we provide a &quot;trampoline&quot; to pybind11::cast that only does anything in
// cases where pybind11::cast is valid.</doc>
