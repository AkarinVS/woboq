<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/core/subgraph.h' l='349' type='TfLiteStatus tflite::Subgraph::SetCustomAllocationForTensor(int tensor_index, const TfLiteCustomAllocation &amp; allocation, int64_t flags = kTfLiteCustomAllocationFlagsNone)'/>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/core/subgraph.h' l='327'>// Assigns (or reassigns) a custom memory allocation for the given tensor.
  // `flags` is a bitmask, see TfLiteCustomAllocationFlags.
  // The runtime does NOT take ownership of the underlying memory.
  //
  // NOTE: User needs to call AllocateTensors() after this. In case of input
  // resizing, buffers will be checked for required data size during
  // AllocateTensors().
  //
  // Parameters should satisfy the following conditions:
  // 1. tensor-&gt;allocation_type == kTfLiteArenaRw or kTfLiteArenaRwPersistent
  //    In general, this is true for I/O tensors &amp; variable tensors.
  // 2. allocation-&gt;data has the appropriate permissions for runtime access
  //    (Read-only for inputs, Read-Write for others), and outlives Interpreter.
  // 3. allocation-&gt;bytes &gt;= tensor-&gt;bytes.
  //    This condition is checked again if any tensors are resized.
  // 4. allocation-&gt;data should be aligned to kDefaultTensorAlignment
  //    defined in lite/util.h. (Currently 64 bytes)
  //    This check is skipped if kTfLiteCustomAllocationFlagsSkipAlignCheck is
  //    set through `flags`.
  // TODO(b/182215910): Expand on this documentation in a g3doc.
  //
  // WARNING: This is an experimental interface that is subject to change.</doc>
<def f='halide/build-apps/_deps/tflite-src/tensorflow/lite/core/subgraph.cc' l='1639' ll='1672' type='TfLiteStatus tflite::Subgraph::SetCustomAllocationForTensor(int tensor_index, const TfLiteCustomAllocation &amp; allocation, int64_t flags = kTfLiteCustomAllocationFlagsNone)'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/interpreter.cc' l='165' u='c' c='_ZN6tflite11Interpreter28SetCustomAllocationForTensorEiRK22TfLiteCustomAllocationl'/>
