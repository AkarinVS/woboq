<dec f='halide/build-apps/abseil-cpp/absl/debugging/symbolize.h' l='94' type='bool absl::lts_2020_02_25::Symbolize(const void * pc, char * out, int out_size)'/>
<use f='halide/build-apps/abseil-cpp/absl/debugging/internal/examine_stack.cc' l='91' u='c' c='_ZN4absl14lts_2020_02_2518debugging_internalL27DumpPCAndFrameSizeAndSymbolEPFvPKcPvES4_S4_S4_iS3_'/>
<doc f='halide/build-apps/abseil-cpp/absl/debugging/symbolize.h' l='74'>//
// Symbolize()
//
// Symbolizes a program counter (instruction pointer value) `pc` and, on
// success, writes the name to `out`. The symbol name is demangled, if possible.
// Note that the symbolized name may be truncated and will be NUL-terminated.
// Demangling is supported for symbols generated by GCC 3.x or newer). Returns
// `false` on failure.
//
// Example:
//
//   // Print a program counter and its symbol name.
//   static void DumpPCAndSymbol(void *pc) {
//     char tmp[1024];
//     const char *symbol = &quot;(unknown)&quot;;
//     if (absl::Symbolize(pc, tmp, sizeof(tmp))) {
//       symbol = tmp;
//     }
//     absl::PrintF(&quot;%p  %s\n&quot;, pc, symbol);
//  }</doc>
<def f='halide/build-apps/abseil-cpp/absl/debugging/symbolize_elf.inc' l='1454' ll='1477' type='bool absl::lts_2020_02_25::Symbolize(const void * pc, char * out, int out_size)'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='121' u='r'/>
