<dec f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.h' l='104' type='static uint64_t absl::lts_2020_02_25::base_internal::ExponentialBiased::NextRandom(uint64_t rnd)'/>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.h' l='117' ll='124' type='static uint64_t absl::lts_2020_02_25::base_internal::ExponentialBiased::NextRandom(uint64_t rnd)'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.cc' l='46' u='c' c='_ZN4absl14lts_2020_02_2513base_internal17ExponentialBiased12GetSkipCountEl'/>
<use f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.cc' l='85' u='c' c='_ZN4absl14lts_2020_02_2513base_internal17ExponentialBiased10InitializeEv'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.h' l='101'>// Computes a random number in the range [0, 1&lt;&lt;(kPrngNumBits+1) - 1]
  //
  // This is public to enable testing.</doc>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/exponential_biased.h' l='114'>// Returns the next prng value.
// pRNG is: aX+b mod c with a = 0x5DEECE66D, b =  0xB, c = 1&lt;&lt;48
// This is the lrand64 generator.</doc>
