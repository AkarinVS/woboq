<dec f='halide/halide-install/include/Halide.h' l='17320' type='Halide::Func Halide::Func::clone_in(const Halide::Func &amp; f)'/>
<doc f='halide/halide-install/include/Halide.h' l='17300'>/** Similar to \ref Func::in; however, instead of replacing the call to
     * this Func with an identity Func that refers to it, this replaces the
     * call with a clone of this Func.
     *
     * For example, f.clone_in(g) would rewrite a pipeline like this:
     \code
     f(x, y) = x + y;
     g(x, y) = f(x, y) + 2;
     h(x, y) = f(x, y) - 3;
     \endcode
     * into a pipeline like this:
     \code
     f(x, y) = x + y;
     f_clone(x, y) = x + y;
     g(x, y) = f_clone(x, y) + 2;
     h(x, y) = f(x, y) - 3;
     \endcode
     *
     */
    //@{</doc>
<use f='halide/apps/hist/hist_generator.cpp' l='102' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='139' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/hist/hist_generator.cpp' l='180' u='c' c='_ZN12_GLOBAL__N_14Hist8generateEv'/>
<use f='halide/apps/interpolate/interpolate_generator.cpp' l='163' u='c' c='_ZN12_GLOBAL__N_111Interpolate8generateEv'/>
<dec f='halide/build/include/Halide.h' l='17320' type='Halide::Func Halide::Func::clone_in(const Halide::Func &amp; f)'/>
<doc f='halide/build/include/Halide.h' l='17300'>/** Similar to \ref Func::in; however, instead of replacing the call to
     * this Func with an identity Func that refers to it, this replaces the
     * call with a clone of this Func.
     *
     * For example, f.clone_in(g) would rewrite a pipeline like this:
     \code
     f(x, y) = x + y;
     g(x, y) = f(x, y) + 2;
     h(x, y) = f(x, y) - 3;
     \endcode
     * into a pipeline like this:
     \code
     f(x, y) = x + y;
     f_clone(x, y) = x + y;
     g(x, y) = f_clone(x, y) + 2;
     h(x, y) = f(x, y) - 3;
     \endcode
     *
     */
    //@{</doc>
<use f='halide/python_bindings/src/PyFunc.cpp' l='318' u='a' c='_ZN6Halide14PythonBindings11define_funcERN8pybind117module_E'/>
<dec f='halide/src/Func.h' l='1440' type='Halide::Func Halide::Func::clone_in(const Halide::Func &amp; f)'/>
<doc f='halide/src/Func.h' l='1420'>/** Similar to \ref Func::in; however, instead of replacing the call to
     * this Func with an identity Func that refers to it, this replaces the
     * call with a clone of this Func.
     *
     * For example, f.clone_in(g) would rewrite a pipeline like this:
     \code
     f(x, y) = x + y;
     g(x, y) = f(x, y) + 2;
     h(x, y) = f(x, y) - 3;
     \endcode
     * into a pipeline like this:
     \code
     f(x, y) = x + y;
     f_clone(x, y) = x + y;
     g(x, y) = f_clone(x, y) + 2;
     h(x, y) = f(x, y) - 3;
     \endcode
     *
     */
    //@{</doc>
<def f='halide/src/Func.cpp' l='2022' ll='2026' type='Halide::Func Halide::Func::clone_in(const Halide::Func &amp; f)'/>
<use f='halide/tutorial/lesson_20_cloning_funcs.cpp' l='57' u='c' c='main'/>
<use f='halide/tutorial/lesson_20_cloning_funcs.cpp' l='164' u='c' c='main'/>
