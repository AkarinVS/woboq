<dec f='halide/halide-install/include/Halide.h' l='7822' type='Halide::Expr Halide::ceil(Halide::Expr x)'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='284' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<use f='halide/apps/bgu/bgu_generator.cpp' l='286' u='c' c='_ZN12_GLOBAL__N_13BGU8generateEv'/>
<doc f='halide/halide-install/include/Halide.h' l='7818'>/** Return the least whole number greater than or equal to a
 * floating-point expression. If the argument is not floating-point,
 * it is cast to Float(32). The return value is still in floating
 * point, despite being a whole number. Vectorizes cleanly. */</doc>
<use f='halide/apps/resize/resize_generator.cpp' l='97' u='c' c='_ZN6Resize8generateEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='107' u='c' c='_ZN6Resize8generateEv'/>
<use f='halide/apps/resize/resize_generator.cpp' l='108' u='c' c='_ZN6Resize8generateEv'/>
<dec f='halide/build/include/Halide.h' l='7822' type='Halide::Expr Halide::ceil(Halide::Expr x)'/>
<doc f='halide/build/include/Halide.h' l='7818'>/** Return the least whole number greater than or equal to a
 * floating-point expression. If the argument is not floating-point,
 * it is cast to Float(32). The return value is still in floating
 * point, despite being a whole number. Vectorizes cleanly. */</doc>
<use f='halide/python_bindings/src/PyIROperator.cpp' l='142' u='a' c='_ZN6Halide14PythonBindings16define_operatorsERN8pybind117module_E'/>
<dec f='halide/src/IROperator.h' l='1017' type='Halide::Expr Halide::ceil(Halide::Expr x)'/>
<doc f='halide/src/IROperator.h' l='1013'>/** Return the least whole number greater than or equal to a
 * floating-point expression. If the argument is not floating-point,
 * it is cast to Float(32). The return value is still in floating
 * point, despite being a whole number. Vectorizes cleanly. */</doc>
<def f='halide/src/IROperator.cpp' l='2206' ll='2222' type='Halide::Expr Halide::ceil(Halide::Expr x)'/>
<use f='halide/src/autoschedulers/adams2019/cost_model_generator.cpp' l='302' u='c' c='_ZN9CostModel8generateEv'/>
