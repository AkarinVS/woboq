<dec f='halide/halide-install/include/Halide.h' l='7803' type='Halide::Expr Halide::fast_inverse(Halide::Expr x)'/>
<doc f='halide/halide-install/include/Halide.h' l='7798'>/** Fast approximate inverse for Float(32). Corresponds to the rcpps
 * instruction on x86, and the vrecpe instruction on ARM. Vectorizes
 * cleanly. Note that this can produce slightly different results
 * across different implementations of the same architecture (e.g. AMD vs Intel),
 * even when strict_float is enabled. */</doc>
<dec f='halide/build/include/Halide.h' l='7803' type='Halide::Expr Halide::fast_inverse(Halide::Expr x)'/>
<doc f='halide/build/include/Halide.h' l='7798'>/** Fast approximate inverse for Float(32). Corresponds to the rcpps
 * instruction on x86, and the vrecpe instruction on ARM. Vectorizes
 * cleanly. Note that this can produce slightly different results
 * across different implementations of the same architecture (e.g. AMD vs Intel),
 * even when strict_float is enabled. */</doc>
<use f='halide/python_bindings/src/PyIROperator.cpp' l='139' u='a' c='_ZN6Halide14PythonBindings16define_operatorsERN8pybind117module_E'/>
<dec f='halide/src/IROperator.h' l='998' type='Halide::Expr Halide::fast_inverse(Halide::Expr x)'/>
<doc f='halide/src/IROperator.h' l='993'>/** Fast approximate inverse for Float(32). Corresponds to the rcpps
 * instruction on x86, and the vrecpe instruction on ARM. Vectorizes
 * cleanly. Note that this can produce slightly different results
 * across different implementations of the same architecture (e.g. AMD vs Intel),
 * even when strict_float is enabled. */</doc>
<use f='halide/src/Derivative.cpp' l='1141' u='c' c='_ZN6Halide8Internal12_GLOBAL__N_126ReverseAccumulationVisitor5visitEPKNS0_4CallE'/>
<def f='halide/src/IROperator.cpp' l='2176' ll='2180' type='Halide::Expr Halide::fast_inverse(Halide::Expr x)'/>
