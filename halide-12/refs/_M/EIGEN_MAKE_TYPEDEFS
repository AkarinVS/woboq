<dec f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='479'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='509' u='w'/>
<dec f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='514'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='538' u='c'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='539' u='c'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='540' u='c'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='541' u='c'/>
<use f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='556' u='w'/>
<dec f='halide/build-apps/eigen/Eigen/src/Geometry/AlignedBox.h' l='372'/>
<use f='halide/build-apps/eigen/Eigen/src/Geometry/AlignedBox.h' l='388' u='w'/>
<doc f='halide/build-apps/eigen/Eigen/src/Core/Matrix.h' l='450'>/** \defgroup matrixtypedefs Global matrix typedefs
  *
  * \ingroup Core_Module
  *
  * %Eigen defines several typedef shortcuts for most common matrix and vector types.
  *
  * The general patterns are the following:
  *
  * \c MatrixSizeType where \c Size can be \c 2,\c 3,\c 4 for fixed size square matrices or \c X for dynamic size,
  * and where \c Type can be \c i for integer, \c f for float, \c d for double, \c cf for complex float, \c cd
  * for complex double.
  *
  * For example, \c Matrix3d is a fixed-size 3x3 matrix type of doubles, and \c MatrixXf is a dynamic-size matrix of floats.
  *
  * There are also \c VectorSizeType and \c RowVectorSizeType which are self-explanatory. For example, \c Vector4cf is
  * a fixed-size vector of 4 complex floats.
  * 
  * With \cpp11, template alias are also defined for common sizes.
  * They follow the same pattern as above except that the scalar type suffix is replaced by a
  * template parameter, i.e.:
  *   - `MatrixSize&lt;Type&gt;` where `Size` can be \c 2,\c 3,\c 4 for fixed size square matrices or \c X for dynamic size.
  *   - `MatrixXSize&lt;Type&gt;` and `MatrixSizeX&lt;Type&gt;` where `Size` can be \c 2,\c 3,\c 4 for hybrid dynamic/fixed matrices.
  *   - `VectorSize&lt;Type&gt;` and `RowVectorSize&lt;Type&gt;` for column and row vectors.
  * 
  * With \cpp11, you can also use fully generic column and row vector types: `Vector&lt;Type,Size&gt;` and `RowVector&lt;Type,Size&gt;`.
  *
  * \sa class Matrix
  */</doc>
<doc f='halide/build-apps/eigen/Eigen/src/Geometry/AlignedBox.h' l='356'>/** \defgroup alignedboxtypedefs Global aligned box typedefs
  *
  * \ingroup Geometry_Module
  *
  * Eigen defines several typedef shortcuts for most common aligned box types.
  *
  * The general patterns are the following:
  *
  * \c AlignedBoxSizeType where \c Size can be \c 1, \c 2,\c 3,\c 4 for fixed size boxes or \c X for dynamic size,
  * and where \c Type can be \c i for integer, \c f for float, \c d for double.
  *
  * For example, \c AlignedBox3d is a fixed-size 3x3 aligned box type of doubles, and \c AlignedBoxXf is a dynamic-size aligned box of floats.
  *
  * \sa class AlignedBox
  */</doc>
