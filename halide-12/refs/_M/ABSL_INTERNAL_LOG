<dec f='halide/build-apps/abseil-cpp/absl/base/internal/raw_logging.h' l='75'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/raw_logging.h' l='66'>// ABSL_INTERNAL_LOG and ABSL_INTERNAL_CHECK work like the RAW variants above,
// except that if the richer log library is linked into the binary, we dispatch
// to that instead.  This is potentially useful for internal logging and
// assertions, where we are using RAW_LOG neither for its async-signal-safety
// nor for its non-allocating nature, but rather because raw logging has very
// few other dependencies.
//
// The API is a subset of the above: each macro only takes two arguments.  Use
// StrCat if you need to build a richer message.</doc>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.h' l='624' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='116' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='278' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/internal/flag.cc' l='361' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/parse.cc' l='84' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/parse.cc' l='100' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/parse.cc' l='116' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/parse.cc' l='547' u='c'/>
<use f='halide/build-apps/abseil-cpp/absl/flags/usage.cc' l='45' u='c'/>
