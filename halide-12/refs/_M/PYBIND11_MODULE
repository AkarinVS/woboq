<dec f='halide/build/_deps/pybind11-src/include/pybind11/detail/common.h' l='314'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/detail/common.h' l='293'>/** \rst
    This macro creates the entry point that will be invoked when the Python interpreter
    imports an extension module. The module name is given as the fist argument and it
    should not be in quotes. The second macro argument defines a variable of type
    `py::module_` which can be used to initialize the module.

    The entry point is marked as &quot;maybe unused&quot; to aid dead-code detection analysis:
    since the entry point is typically only looked up at runtime and not referenced
    during translation, it would otherwise appear as unused (&quot;dead&quot;) code.

    .. code-block:: cpp

        PYBIND11_MODULE(example, m) {
            m.doc() = &quot;pybind11 example module&quot;;

            // Add bindings here
            m.def(&quot;foo&quot;, []() {
                return &quot;Hello, World!&quot;;
            });
        }
\endrst */</doc>
<use f='halide/python_bindings/src/PyHalide.cpp' l='37' u='c'/>
