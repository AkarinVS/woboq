<dec f='halide/src/Simplify_Internal.h' l='26'/>
<doc f='halide/src/Simplify_Internal.h' l='21'>// On old compilers, some visitors would use large stack frames,
// because they use expression templates that generate large numbers
// of temporary objects when they are built and matched against. If we
// wrap the expressions that imply lots of temporaries in a lambda, we
// can get these large frames out of the recursive path.</doc>
<use f='halide/src/Simplify_Add.cpp' l='50' u='c'/>
<use f='halide/src/Simplify_And.cpp' l='22' u='c'/>
<use f='halide/src/Simplify_Div.cpp' l='133' u='c'/>
<use f='halide/src/Simplify_LT.cpp' l='35' u='c'/>
<use f='halide/src/Simplify_LT.cpp' l='78' u='c'/>
<use f='halide/src/Simplify_LT.cpp' l='333' u='c'/>
<use f='halide/src/Simplify_Max.cpp' l='58' u='c'/>
<use f='halide/src/Simplify_Max.cpp' l='141' u='c'/>
<use f='halide/src/Simplify_Min.cpp' l='58' u='c'/>
<use f='halide/src/Simplify_Min.cpp' l='141' u='c'/>
<use f='halide/src/Simplify_Mod.cpp' l='77' u='c'/>
<use f='halide/src/Simplify_Or.cpp' l='21' u='c'/>
<use f='halide/src/Simplify_Select.cpp' l='27' u='c'/>
<use f='halide/src/Simplify_Select.cpp' l='45' u='c'/>
<use f='halide/src/Simplify_Sub.cpp' l='45' u='c'/>
