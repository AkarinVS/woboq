<dec f='halide/build/_deps/pybind11-src/include/pybind11/detail/common.h' l='351' type='1'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='108'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='110'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='782'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pytypes.h' l='784'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='531' c='_ZN8pybind116detail19type_caster_generic4castEPKvNS_19return_value_policyENS_6handleEPKNS0_9type_infoEPFPvS3_ESB_S3_'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='871' u='r' c='_ZN8pybind116detail16type_caster_base4castERKNS0_14intrinsic_typeIT_E4typeENS_19return_value_policyENS_6handleE'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='977' u='r' c='_ZN8pybind116detail11type_casterISt17reference_wrapperIT_EvE4castERKS4_NS_19return_value_policyENS_6handleE'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1756' c='_ZN8pybind114castEOT_NS_19return_value_policyENS_6handleE'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1762' u='r' c='_ZN8pybind114castEOT_NS_19return_value_policyENS_6handleE'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1839'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/cast.h' l='1842'/>
<use f='halide/build/_deps/pybind11-src/include/pybind11/pybind11.h' l='2085'/>
<doc f='halide/build/_deps/pybind11-src/include/pybind11/detail/common.h' l='347'>/** As above, but use policy return_value_policy::reference when the return
        value is a pointer. This is the default conversion policy for function
        arguments when calling Python functions manually from C++ code (i.e. via
        handle::operator()). You probably won&apos;t need to use this. */</doc>
