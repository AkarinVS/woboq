<def f='halide/llvm-install/include/llvm/Support/AlignOf.h' l='27' ll='30'/>
<use f='halide/llvm-install/include/llvm/Support/ErrorOr.h' l='256'/>
<use f='halide/llvm-install/include/llvm/Support/ErrorOr.h' l='257'/>
<use f='halide/llvm-install/include/llvm/Support/Error.h' l='681'/>
<use f='halide/llvm-install/include/llvm/Support/Error.h' l='682'/>
<use f='halide/llvm-install/include/llvm/ADT/DenseMap.h' l='904'/>
<use f='halide/llvm-install/include/llvm/ADT/DenseMap.h' l='1044' c='_ZN4llvm13SmallDenseMap4growEj'/>
<use f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='1316'/>
<use f='halide/llvm-install/include/llvm/Support/YAMLTraits.h' l='1353'/>
<doc f='halide/llvm-install/include/llvm/Support/AlignOf.h' l='20'>/// A suitably aligned and sized character array member which can hold elements
/// of any type.
///
/// This template is equivalent to std::aligned_union_t&lt;1, ...&gt;, but we cannot
/// use it due to a bug in the MSVC x86 compiler:
/// https://github.com/microsoft/STL/issues/1533
/// Using `alignas` here works around the bug.</doc>
<mbr r='llvm::AlignedCharArrayUnion::buffer' t='char [sizeof(llvm::AlignedCharArrayUnion::AlignedUnion)]'/>
