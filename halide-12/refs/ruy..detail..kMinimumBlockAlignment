<def f='halide/build-apps/ruy/ruy/system_aligned_alloc.h' l='42' type='const std::ptrdiff_t'/>
<use f='halide/build-apps/ruy/ruy/allocator.cc' l='50' u='r' c='_ZN3ruy9Allocator13AllocateBytesEl'/>
<doc f='halide/build-apps/ruy/ruy/system_aligned_alloc.h' l='25'>// Minimum alignment for blocks.
//
// Considerations:
//  - This needs to be at least the alignment of any usual data type.
//  - It&apos;s useful that this is at least the size of a cache line to limit
//    possible cache side effects (if only on performance behavior).
//  - It&apos;s useful that this is at least the size of SIMD registers, as
//    some SIMD instruction sets have at least performance behavior
//    differences (e.g. NEON) or even different requirements (e.g. SSE)
//    based on that.
//  - It&apos;s useful that this is at least the size of an &quot;exclusive reservation
//    granule&quot; on ARM, meaning that if we use this Allocator to allocate
//    an atomic variable, there will be no side effects from other things
//    contending for exclusive/atomic memory accesses to it. While the
//    ARM reference manual mentions that this granule size may be as large
//    as 2048 bytes, in practice we observe it to be 64 bytes. It can
//    be queried cheaply, at runtime, from userspace, if needed.</doc>
<use f='halide/build-apps/ruy/ruy/system_aligned_alloc.cc' l='34' u='r' c='_ZN3ruy6detail18SystemAlignedAllocEl'/>
