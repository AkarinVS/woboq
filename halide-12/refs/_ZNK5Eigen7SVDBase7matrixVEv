<def f='halide/build-apps/eigen/Eigen/src/SVD/SVDBase.h' l='114' ll='119' type='const Eigen::SVDBase::MatrixVType &amp; Eigen::SVDBase::matrixV() const'/>
<doc f='halide/build-apps/eigen/Eigen/src/SVD/SVDBase.h' l='105'>/** \returns the \a V matrix.
   *
   * For the SVD decomposition of a n-by-p matrix, letting \a m be the minimum of \a n and \a p,
   * the V matrix is p-by-p if you asked for \link Eigen::ComputeFullV ComputeFullV \endlink, and is p-by-m if you asked for \link Eigen::ComputeThinV ComputeThinV \endlink.
   *
   * The \a m first columns of \a V are the right singular vectors of the matrix being decomposed.
   *
   * This method asserts that you asked for \a V to be computed.
   */</doc>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='63' u='c' c='zgesdd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='68' u='c' c='zgesdd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='73' u='c' c='zgesdd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='78' u='c' c='zgesdd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='133' u='c' c='zgesvd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='134' u='c' c='zgesvd_'/>
<use f='halide/build-apps/eigen/lapack/svd.cpp' l='135' u='c' c='zgesvd_'/>
