<def f='halide/build-apps/abseil-cpp/absl/container/internal/raw_hash_set.h' l='1169' type='void absl::lts_2020_02_25::container_internal::raw_hash_set::erase(absl::lts_2020_02_25::container_internal::raw_hash_set::const_iterator cit)'/>
<doc f='halide/build-apps/abseil-cpp/absl/container/internal/raw_hash_set.h' l='1156'>// Erases the element pointed to by `it`.  Unlike `std::unordered_set::erase`,
  // this method returns void to reduce algorithmic complexity to O(1).  The
  // iterator is invalidated, so any increment should be done before calling
  // erase.  In order to erase while iterating across a map, use the following
  // idiom (which also works for standard containers):
  //
  // for (auto it = m.begin(), end = m.end(); it != end;) {
  //   // `erase()` will invalidate `it`, so advance `it` first.
  //   auto copy_it = it++;
  //   if (&lt;pred&gt;) {
  //     m.erase(copy_it);
  //   }
  // }</doc>
