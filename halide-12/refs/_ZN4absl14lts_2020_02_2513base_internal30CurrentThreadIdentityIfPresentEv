<dec f='halide/build-apps/abseil-cpp/absl/base/internal/thread_identity.h' l='174' type='absl::lts_2020_02_25::base_internal::ThreadIdentity * absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent()'/>
<def f='halide/build-apps/abseil-cpp/absl/base/internal/thread_identity.cc' l='140' ll='147' type='absl::lts_2020_02_25::base_internal::ThreadIdentity * absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent()'/>
<doc f='halide/build-apps/abseil-cpp/absl/base/internal/thread_identity.h' l='163'>// Returns the ThreadIdentity object representing the calling thread; guaranteed
// to be unique for its lifetime.  The returned object will remain valid for the
// program&apos;s lifetime; although it may be re-assigned to a subsequent thread.
// If one does not exist, return nullptr instead.
//
// Does not malloc(*), and is async-signal safe.
// [*] Technically pthread_setspecific() does malloc on first use; however this
// is handled internally within tcmalloc&apos;s initialization already.
//
// New ThreadIdentity objects can be constructed and associated with a thread
// by calling GetOrCreateCurrentThreadIdentity() in per-thread-sem.h.</doc>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/create_thread_identity.h' l='49' u='c' c='_ZN4absl14lts_2020_02_2524synchronization_internal32GetOrCreateCurrentThreadIdentityEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/internal/waiter.cc' l='57' u='c' c='_ZN4absl14lts_2020_02_2524synchronization_internalL15MaybeBecomeIdleEv'/>
<use f='halide/build-apps/abseil-cpp/absl/synchronization/mutex.cc' l='581' u='c' c='_ZN4absl14lts_2020_02_255Mutex45InternalAttemptToUseMutexInFatalSignalHandlerEv'/>
