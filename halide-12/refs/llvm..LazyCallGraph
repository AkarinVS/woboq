<def f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='112' ll='1229'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='187'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='199'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='230'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='320'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='324' c='_ZNK4llvm13LazyCallGraph4Node8getGraphEv'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='376'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='389' c='_ZN4llvm13LazyCallGraph4NodeC1ERS0_RNS_8FunctionE'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='424'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='540'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='543'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='553' c='_ZN4llvm13LazyCallGraph6RefSCCC1ERS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='877'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='883'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='887' c='_ZN4llvm13LazyCallGraph26postorder_ref_scc_iteratorC1ERS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='890' c='_ZN4llvm13LazyCallGraph26postorder_ref_scc_iteratorC1ERS0_NS1_8IsAtEndTE'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='894' c='_ZN4llvm13LazyCallGraph26postorder_ref_scc_iterator5getRCERS0_i'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='925' c='_ZN4llvm13LazyCallGraphC1EOS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='926' c='_ZN4llvm13LazyCallGraphaSEOS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='926' c='_ZN4llvm13LazyCallGraphaSEOS0_'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='1267'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='1284'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='1290' c='_ZN4llvm21LazyCallGraphAnalysis3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<use f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='1296' c='_ZN4llvm21LazyCallGraphAnalysis3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='120'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='129'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='139' c='_ZN4llvm11PassManager3runERT_RT0_DpT1_'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='141'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='149'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='155'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='157'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='160' c='_ZN4llvm19RequireAnalysisPassIT_NS_13LazyCallGraph3SCCENS_15AnalysisManagerIS3_JRS2_EEEJS5_RNS_17CGSCCUpdateResultEEE3runERS3_RS6_S5_S8_'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='175' c='_ZN4llvm25InnerAnalysisManagerProxyINS_15AnalysisManagerINS_13LazyCallGraph3SCCEJRS2_EEENS_6ModuleEJEE6ResultC1ERS5_S4_'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='196'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='210'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='215'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='344'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='379' c='_ZN4llvm39createModuleToPostOrderCGSCCPassAdaptorET_'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='415' c='_ZN4llvm33FunctionAnalysisManagerCGSCCProxy3runERNS_13LazyCallGraph3SCCERNS_15AnalysisManagerIS2_JRS1_EEES5_'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='436' c='_ZN4llvm41updateCGAndAnalysisManagerForFunctionPassERNS_13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultER14548421'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='447' c='_ZN4llvm38updateCGAndAnalysisManagerForCGSCCPassERNS_13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultERNS6_INS_8FunctionEJEEE'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='482' c='_ZN4llvm26CGSCCToFunctionPassAdaptor3runERNS_13LazyCallGraph3SCCERNS_15AnalysisManagerIS2_JRS1_EEES5_RNS_17CGSCCUpdateResultE'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='520'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='529' c='_ZN4llvm21DevirtSCCRepeatedPass3runERNS_13LazyCallGraph3SCCERNS_15AnalysisManagerIS2_JRS1_EEES5_RNS_17CGSCCUpdateResultE'/>
<use f='halide/llvm-install/include/llvm/Analysis/CGSCCPassManager.h' l='543' c='_ZN4llvm27createDevirtSCCRepeatedPassET_i'/>
<use f='halide/llvm-install/include/llvm/Transforms/IPO/Inliner.h' l='104' c='_ZN4llvm11InlinerPass3runERNS_13LazyCallGraph3SCCERNS_15AnalysisManagerIS2_JRS1_EEES5_RNS_17CGSCCUpdateResultE'/>
<size>664</size>
<doc f='halide/llvm-install/include/llvm/Analysis/LazyCallGraph.h' l='66'>/// A lazily constructed view of the call graph of a module.
///
/// With the edges of this graph, the motivating constraint that we are
/// attempting to maintain is that function-local optimization, CGSCC-local
/// optimizations, and optimizations transforming a pair of functions connected
/// by an edge in the graph, do not invalidate a bottom-up traversal of the SCC
/// DAG. That is, no optimizations will delete, remove, or add an edge such
/// that functions already visited in a bottom-up order of the SCC DAG are no
/// longer valid to have visited, or such that functions not yet visited in
/// a bottom-up order of the SCC DAG are not required to have already been
/// visited.
///
/// Within this constraint, the desire is to minimize the merge points of the
/// SCC DAG. The greater the fanout of the SCC DAG and the fewer merge points
/// in the SCC DAG, the more independence there is in optimizing within it.
/// There is a strong desire to enable parallelization of optimizations over
/// the call graph, and both limited fanout and merge points will (artificially
/// in some cases) limit the scaling of such an effort.
///
/// To this end, graph represents both direct and any potential resolution to
/// an indirect call edge. Another way to think about it is that it represents
/// both the direct call edges and any direct call edges that might be formed
/// through static optimizations. Specifically, it considers taking the address
/// of a function to be an edge in the call graph because this might be
/// forwarded to become a direct call by some subsequent function-local
/// optimization. The result is that the graph closely follows the use-def
/// edges for functions. Walking &quot;up&quot; the graph can be done by looking at all
/// of the uses of a function.
///
/// The roots of the call graph are the external functions and functions
/// escaped into global variables. Those functions can be called from outside
/// of the module or via unknowable means in the IR -- we may not be able to
/// form even a potential call edge from a function body which may dynamically
/// load the function and call it.
///
/// This analysis still requires updates to remain valid after optimizations
/// which could potentially change the set of potential callees. The
/// constraints it operates under only make the traversal order remain valid.
///
/// The entire analysis must be re-computed if full interprocedural
/// optimizations run at any point. For example, globalopt completely
/// invalidates the information in this analysis.
///
/// FIXME: This class is named LazyCallGraph in a lame attempt to distinguish
/// it from the existing CallGraph. At some point, it is expected that this
/// will be the only call graph and it will be renamed accordingly.</doc>
<fun r='_ZN4llvm13LazyCallGraphC1ERNS_6ModuleENS_12function_refIFRNS_17TargetLibraryInfoERNS_8FunctionEEEE'/>
<fun r='_ZN4llvm13LazyCallGraphC1EOS0_'/>
<fun r='_ZN4llvm13LazyCallGraphaSEOS0_'/>
<fun r='_ZN4llvm13LazyCallGraph10invalidateERNS_6ModuleERKNS_17PreservedAnalysesERNS_15AnalysisManagerIS1_JEE11InvalidatorE'/>
<fun r='_ZN4llvm13LazyCallGraph5beginEv'/>
<fun r='_ZN4llvm13LazyCallGraph3endEv'/>
<fun r='_ZN4llvm13LazyCallGraph12buildRefSCCsEv'/>
<fun r='_ZN4llvm13LazyCallGraph23postorder_ref_scc_beginEv'/>
<fun r='_ZN4llvm13LazyCallGraph21postorder_ref_scc_endEv'/>
<fun r='_ZN4llvm13LazyCallGraph18postorder_ref_sccsEv'/>
<fun r='_ZNK4llvm13LazyCallGraph6lookupERKNS_8FunctionE'/>
<fun r='_ZNK4llvm13LazyCallGraph9lookupSCCERNS0_4NodeE'/>
<fun r='_ZNK4llvm13LazyCallGraph12lookupRefSCCERNS0_4NodeE'/>
<fun r='_ZN4llvm13LazyCallGraph3getERNS_8FunctionE'/>
<fun r='_ZNK4llvm13LazyCallGraph15getLibFunctionsEv'/>
<fun r='_ZNK4llvm13LazyCallGraph13isLibFunctionERNS_8FunctionE'/>
<fun r='_ZN4llvm13LazyCallGraph10insertEdgeERNS0_4NodeES2_NS0_4Edge4KindE'/>
<fun r='_ZN4llvm13LazyCallGraph10insertEdgeERNS_8FunctionES2_NS0_4Edge4KindE'/>
<fun r='_ZN4llvm13LazyCallGraph10removeEdgeERNS0_4NodeES2_'/>
<fun r='_ZN4llvm13LazyCallGraph10removeEdgeERNS_8FunctionES2_'/>
<fun r='_ZN4llvm13LazyCallGraph18removeDeadFunctionERNS_8FunctionE'/>
<fun r='_ZN4llvm13LazyCallGraph16addSplitFunctionERNS_8FunctionES2_'/>
<fun r='_ZN4llvm13LazyCallGraph29addSplitRefRecursiveFunctionsERNS_8FunctionENS_8ArrayRefIPS1_EE'/>
<fun r='_ZN4llvm13LazyCallGraph15visitReferencesERNS_15SmallVectorImplIPNS_8ConstantEEERNS_15SmallPtrSetImplIS3_EET_'/>
<mbr r='llvm::LazyCallGraph::BPA' o='0' t='SpecificBumpPtrAllocator&lt;llvm::LazyCallGraph::Node&gt;'/>
<mbr r='llvm::LazyCallGraph::NodeMap' o='768' t='DenseMap&lt;const llvm::Function *, llvm::LazyCallGraph::Node *&gt;'/>
<mbr r='llvm::LazyCallGraph::EntryEdges' o='960' t='llvm::LazyCallGraph::EdgeSequence'/>
<mbr r='llvm::LazyCallGraph::SCCBPA' o='1536' t='SpecificBumpPtrAllocator&lt;llvm::LazyCallGraph::SCC&gt;'/>
<mbr r='llvm::LazyCallGraph::SCCMap' o='2304' t='DenseMap&lt;llvm::LazyCallGraph::Node *, llvm::LazyCallGraph::SCC *&gt;'/>
<mbr r='llvm::LazyCallGraph::RefSCCBPA' o='2496' t='SpecificBumpPtrAllocator&lt;llvm::LazyCallGraph::RefSCC&gt;'/>
<mbr r='llvm::LazyCallGraph::PostOrderRefSCCs' o='3264' t='SmallVector&lt;llvm::LazyCallGraph::RefSCC *, 16&gt;'/>
<mbr r='llvm::LazyCallGraph::RefSCCIndices' o='4416' t='DenseMap&lt;llvm::LazyCallGraph::RefSCC *, int&gt;'/>
<mbr r='llvm::LazyCallGraph::LibFunctions' o='4608' t='SmallSetVector&lt;llvm::Function *, 4&gt;'/>
<fun r='_ZN4llvm13LazyCallGraph10insertIntoERNS_8FunctionERPNS0_4NodeE'/>
<fun r='_ZN4llvm13LazyCallGraph8initNodeERNS_8FunctionE'/>
<fun r='_ZN4llvm13LazyCallGraph15updateGraphPtrsEv'/>
<fun r='_ZN4llvm13LazyCallGraph9createSCCEDpOT_'/>
<fun r='_ZN4llvm13LazyCallGraph12createRefSCCEDpOT_'/>
<fun r='_ZN4llvm13LazyCallGraph16buildGenericSCCsEOT_OT0_OT1_OT2_OT3_'/>
<fun r='_ZN4llvm13LazyCallGraph9buildSCCsERNS0_6RefSCCENS_14iterator_rangeISt16reverse_iteratorIPPNS0_4NodeEEEE'/>
<fun r='_ZN4llvm13LazyCallGraph14getRefSCCIndexERNS0_6RefSCCE'/>
