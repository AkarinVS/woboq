<dec f='halide/halide-install/include/Halide.h' l='1459' type='int halide_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/halide-install/include/Halide.h' l='1441'>/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn&apos;t know how to test should be ignored;
 * this implies that a return value of 1 means &quot;not known to be bad&quot; rather than &quot;known to be good&quot;.
 *
 * In other words: a return value of 0 means &quot;It is not safe to use code compiled with these features&quot;,
 * while a return value of 1 means &quot;It is not obviously unsafe to use code compiled with these features&quot;.
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{</doc>
<dec f='halide/halide-install/include/HalideRuntime.h' l='1361' type='int halide_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/halide-install/include/HalideRuntime.h' l='1343'>/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn&apos;t know how to test should be ignored;
 * this implies that a return value of 1 means &quot;not known to be bad&quot; rather than &quot;known to be good&quot;.
 *
 * In other words: a return value of 0 means &quot;It is not safe to use code compiled with these features&quot;,
 * while a return value of 1 means &quot;It is not obviously unsafe to use code compiled with these features&quot;.
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{</doc>
<dec f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='1521' type='int halide_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/build-apps/c_backend/pipeline_c.halide_generated.cpp' l='1503'>/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn&apos;t know how to test should be ignored;
 * this implies that a return value of 1 means &quot;not known to be bad&quot; rather than &quot;known to be good&quot;.
 *
 * In other words: a return value of 0 means &quot;It is not safe to use code compiled with these features&quot;,
 * while a return value of 1 means &quot;It is not obviously unsafe to use code compiled with these features&quot;.
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{</doc>
<dec f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='1521' type='int halide_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/build-apps/c_backend/pipeline_cpp_cpp.halide_generated.cpp' l='1503'>/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn&apos;t know how to test should be ignored;
 * this implies that a return value of 1 means &quot;not known to be bad&quot; rather than &quot;known to be good&quot;.
 *
 * In other words: a return value of 0 means &quot;It is not safe to use code compiled with these features&quot;,
 * while a return value of 1 means &quot;It is not obviously unsafe to use code compiled with these features&quot;.
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{</doc>
<dec f='halide/build/include/HalideRuntime.h' l='1361' type='int halide_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/build/include/HalideRuntime.h' l='1343'>/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn&apos;t know how to test should be ignored;
 * this implies that a return value of 1 means &quot;not known to be bad&quot; rather than &quot;known to be good&quot;.
 *
 * In other words: a return value of 0 means &quot;It is not safe to use code compiled with these features&quot;,
 * while a return value of 1 means &quot;It is not obviously unsafe to use code compiled with these features&quot;.
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{</doc>
<dec f='halide/build/include/Halide.h' l='1459' type='int halide_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/build/include/Halide.h' l='1441'>/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn&apos;t know how to test should be ignored;
 * this implies that a return value of 1 means &quot;not known to be bad&quot; rather than &quot;known to be good&quot;.
 *
 * In other words: a return value of 0 means &quot;It is not safe to use code compiled with these features&quot;,
 * while a return value of 1 means &quot;It is not obviously unsafe to use code compiled with these features&quot;.
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{</doc>
<dec f='halide/src/runtime/HalideRuntime.h' l='1361' type='int halide_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/src/runtime/HalideRuntime.h' l='1343'>/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn&apos;t know how to test should be ignored;
 * this implies that a return value of 1 means &quot;not known to be bad&quot; rather than &quot;known to be good&quot;.
 *
 * In other words: a return value of 0 means &quot;It is not safe to use code compiled with these features&quot;,
 * while a return value of 1 means &quot;It is not obviously unsafe to use code compiled with these features&quot;.
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{</doc>
<use f='halide/test/generator/can_use_target_aottest.cpp' l='67' u='c' c='main'/>
<use f='halide/test/generator/can_use_target_aottest.cpp' l='80' u='c' c='main'/>
<dec f='halide/build/tutorial/lesson_10_halide.h' l='1433' type='int halide_can_use_target_features(int count, const uint64_t * features)'/>
<doc f='halide/build/tutorial/lesson_10_halide.h' l='1415'>/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn&apos;t know how to test should be ignored;
 * this implies that a return value of 1 means &quot;not known to be bad&quot; rather than &quot;known to be good&quot;.
 *
 * In other words: a return value of 0 means &quot;It is not safe to use code compiled with these features&quot;,
 * while a return value of 1 means &quot;It is not obviously unsafe to use code compiled with these features&quot;.
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{</doc>
