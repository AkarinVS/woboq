<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.h' l='40' u='m' c='_ZNK6tflite17CpuBackendContext11ruy_contextEv'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.h' l='56' u='m' c='_ZN6tflite17CpuBackendContext11ClearCachesEv'/>
<dec f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.h' l='97' type='const std::unique_ptr&lt;ruy::Context&gt;'/>
<offset>64</offset>
<doc f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.h' l='91'>// To enable a smooth transition from the current direct usage
  // of the underlying gemmlowp context to going through abstractions
  // (see :cpu_backend_gemm), for now a CpuBackendContext always
  // stores both a gemmlowp context and a ruy context.
  // TODO(b/131416458): Once call sites all go through abstractions,
  // elide what can be elided based on TFLITE_WITH_RUY.</doc>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.cc' l='128' u='w' c='_ZN6tflite17CpuBackendContextC1Ev'/>
<use f='halide/build-apps/_deps/tflite-src/tensorflow/lite/kernels/cpu_backend_context.cc' l='145' u='m' c='_ZN6tflite17CpuBackendContext16SetMaxNumThreadsEi'/>
