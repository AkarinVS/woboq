<def f='include/libavutil/pixfmt.h' l='64' ll='352'/>
<use f='include/libavutil/hwcontext.h' l='208'/>
<use f='include/libavutil/hwcontext.h' l='221'/>
<use f='include/libavutil/hwcontext.h' l='423' c='av_hwframe_transfer_get_formats'/>
<use f='include/libavutil/hwcontext.h' l='437'/>
<use f='include/libavutil/hwcontext.h' l='444'/>
<use f='include/libavutil/hwcontext.h' l='579' c='av_hwframe_ctx_create_derived'/>
<use f='include/libavcodec/avcodec.h' l='1775'/>
<use f='include/libavcodec/avcodec.h' l='1817'/>
<use f='include/libavcodec/avcodec.h' l='1817'/>
<use f='include/libavcodec/avcodec.h' l='3112'/>
<use f='include/libavcodec/avcodec.h' l='3459'/>
<use f='include/libavcodec/avcodec.h' l='3502'/>
<use f='include/libavcodec/avcodec.h' l='3676'/>
<use f='include/libavcodec/avcodec.h' l='5091' c='avcodec_get_hw_frames_parameters'/>
<use f='include/libavcodec/avcodec.h' l='5483' c='avpicture_alloc'/>
<use f='include/libavcodec/avcodec.h' l='5496' c='avpicture_fill'/>
<use f='include/libavcodec/avcodec.h' l='5502' c='avpicture_layout'/>
<use f='include/libavcodec/avcodec.h' l='5510' c='avpicture_get_size'/>
<use f='include/libavcodec/avcodec.h' l='5517' c='av_picture_copy'/>
<use f='include/libavcodec/avcodec.h' l='5524' c='av_picture_crop'/>
<use f='include/libavcodec/avcodec.h' l='5530' c='av_picture_pad'/>
<use f='include/libavcodec/avcodec.h' l='5560' c='avcodec_get_chroma_sub_sample'/>
<use f='include/libavcodec/avcodec.h' l='5568' c='avcodec_pix_fmt_to_codec_tag'/>
<use f='include/libavcodec/avcodec.h' l='5573' c='avcodec_get_pix_fmt_loss'/>
<use f='include/libavcodec/avcodec.h' l='5573' c='avcodec_get_pix_fmt_loss'/>
<use f='include/libavcodec/avcodec.h' l='5593' c='avcodec_find_best_pix_fmt_of_list'/>
<use f='include/libavcodec/avcodec.h' l='5593' c='avcodec_find_best_pix_fmt_of_list'/>
<use f='include/libavcodec/avcodec.h' l='5594' c='avcodec_find_best_pix_fmt_of_list'/>
<use f='include/libavcodec/avcodec.h' l='5600' c='avcodec_find_best_pix_fmt_of_2'/>
<use f='include/libavcodec/avcodec.h' l='5600' c='avcodec_find_best_pix_fmt_of_2'/>
<use f='include/libavcodec/avcodec.h' l='5600' c='avcodec_find_best_pix_fmt_of_2'/>
<use f='include/libavcodec/avcodec.h' l='5601' c='avcodec_find_best_pix_fmt_of_2'/>
<use f='include/libavcodec/avcodec.h' l='5604' c='avcodec_find_best_pix_fmt2'/>
<use f='include/libavcodec/avcodec.h' l='5604' c='avcodec_find_best_pix_fmt2'/>
<use f='include/libavcodec/avcodec.h' l='5604' c='avcodec_find_best_pix_fmt2'/>
<use f='include/libavcodec/avcodec.h' l='5605' c='avcodec_find_best_pix_fmt2'/>
<use f='include/libavcodec/avcodec.h' l='5607' c='avcodec_default_get_format'/>
<use f='include/libavcodec/avcodec.h' l='5607' c='avcodec_default_get_format'/>
<use f='include/libavutil/pixdesc.h' l='211' c='av_pix_fmt_desc_get'/>
<use f='include/libavutil/pixdesc.h' l='226' c='av_pix_fmt_desc_get_id'/>
<use f='include/libavutil/pixdesc.h' l='238' c='av_pix_fmt_get_chroma_sub_sample'/>
<use f='include/libavutil/pixdesc.h' l='245' c='av_pix_fmt_count_planes'/>
<use f='include/libavutil/pixdesc.h' l='308' c='av_get_pix_fmt'/>
<use f='include/libavutil/pixdesc.h' l='316' c='av_get_pix_fmt_name'/>
<use f='include/libavutil/pixdesc.h' l='329' c='av_get_pix_fmt_string'/>
<use f='include/libavutil/pixdesc.h' l='388' c='av_pix_fmt_swap_endianness'/>
<use f='include/libavutil/pixdesc.h' l='388' c='av_pix_fmt_swap_endianness'/>
<use f='include/libavutil/pixdesc.h' l='415' c='av_get_pix_fmt_loss'/>
<use f='include/libavutil/pixdesc.h' l='416' c='av_get_pix_fmt_loss'/>
<use f='include/libavutil/pixdesc.h' l='437' c='av_find_best_pix_fmt_of_2'/>
<use f='include/libavutil/pixdesc.h' l='437' c='av_find_best_pix_fmt_of_2'/>
<use f='include/libavutil/pixdesc.h' l='437' c='av_find_best_pix_fmt_of_2'/>
<use f='include/libavutil/pixdesc.h' l='438' c='av_find_best_pix_fmt_of_2'/>
<doc f='include/libavutil/pixfmt.h' l='35'>/**
 * Pixel format.
 *
 * @note
 * AV_PIX_FMT_RGB32 is handled in an endian-specific manner. An RGBA
 * color is put together as:
 *  (A &lt;&lt; 24) | (R &lt;&lt; 16) | (G &lt;&lt; 8) | B
 * This is stored as BGRA on little-endian CPU architectures and ARGB on
 * big-endian CPUs.
 *
 * @note
 * If the resolution is not a multiple of the chroma subsampling factor
 * then the chroma plane resolution must be rounded up.
 *
 * @par
 * When the pixel format is palettized RGB32 (AV_PIX_FMT_PAL8), the palettized
 * image data is stored in AVFrame.data[0]. The palette is transported in
 * AVFrame.data[1], is 1024 bytes long (256 4-byte entries) and is
 * formatted the same as in AV_PIX_FMT_RGB32 described above (i.e., it is
 * also endian-specific). Note also that the individual RGB32 palette
 * components stored in AVFrame.data[1] should be in the range 0..255.
 * This is important as many custom PAL8 video codecs that were designed
 * to run on the IBM VGA graphics adapter use 6-bit palette components.
 *
 * @par
 * For all the 8 bits per pixel formats, an RGB32 palette is in data[1] like
 * for pal8. This palette is filled in automatically by the function
 * allocating the picture.
 */</doc>
<use f='include/libswscale/swscale.h' l='128' c='sws_isSupportedInput'/>
<use f='include/libswscale/swscale.h' l='134' c='sws_isSupportedOutput'/>
<use f='include/libswscale/swscale.h' l='141' c='sws_isSupportedEndiannessConversion'/>
<use f='include/libswscale/swscale.h' l='186' c='sws_getContext'/>
<use f='include/libswscale/swscale.h' l='187' c='sws_getContext'/>
<use f='include/libswscale/swscale.h' l='295' c='sws_getCachedContext'/>
<use f='include/libswscale/swscale.h' l='296' c='sws_getCachedContext'/>
<use f='include/libavutil/opt.h' l='687' c='av_opt_set_pixel_fmt'/>
<use f='include/libavutil/opt.h' l='741' c='av_opt_get_pixel_fmt'/>
<use f='x264/x264.c' l='474' c='print_csp_names'/>
