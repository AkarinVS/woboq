<def f='include/libavcodec/avcodec.h' l='1454' ll='1508'/>
<use f='include/libavcodec/avcodec.h' l='1454'/>
<size>88</size>
<doc f='include/libavcodec/avcodec.h' l='1426'>/**
 * This structure stores compressed data. It is typically exported by demuxers
 * and then passed as input to decoders, or received as output from encoders and
 * then passed to muxers.
 *
 * For video, it should typically contain one compressed frame. For audio it may
 * contain several compressed frames. Encoders are allowed to output empty
 * packets, with no compressed data, containing only side data
 * (e.g. to update some stream parameters at the end of encoding).
 *
 * AVPacket is one of the few structs in FFmpeg, whose size is a part of public
 * ABI. Thus it may be allocated on stack and no new fields can be added to it
 * without libavcodec and libavformat major bump.
 *
 * The semantics of data ownership depends on the buf field.
 * If it is set, the packet data is dynamically allocated and is
 * valid indefinitely until a call to av_packet_unref() reduces the
 * reference count to 0.
 *
 * If the buf field is not set av_packet_ref() would make a copy instead
 * of increasing the reference count.
 *
 * The side data is always allocated with av_malloc(), copied by
 * av_packet_ref() and freed by av_packet_unref().
 *
 * @see av_packet_ref
 * @see av_packet_unref
 */</doc>
<mbr r='AVPacket::buf' o='0' t='AVBufferRef *'/>
<mbr r='AVPacket::pts' o='64' t='int64_t'/>
<mbr r='AVPacket::dts' o='128' t='int64_t'/>
<mbr r='AVPacket::data' o='192' t='uint8_t *'/>
<mbr r='AVPacket::size' o='256' t='int'/>
<mbr r='AVPacket::stream_index' o='288' t='int'/>
<mbr r='AVPacket::flags' o='320' t='int'/>
<mbr r='AVPacket::side_data' o='384' t='AVPacketSideData *'/>
<mbr r='AVPacket::side_data_elems' o='448' t='int'/>
<mbr r='AVPacket::duration' o='512' t='int64_t'/>
<mbr r='AVPacket::pos' o='576' t='int64_t'/>
<mbr r='AVPacket::convergence_duration' o='640' t='int64_t'/>
