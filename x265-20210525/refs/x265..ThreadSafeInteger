<def f='x265/source/common/threading.h' l='377' ll='460'/>
<use f='x265/source/output/reconplay.h' l='66'/>
<use f='x265/source/output/reconplay.h' l='67'/>
<use f='x265/source/abrEncApp.h' l='47'/>
<use f='x265/source/abrEncApp.h' l='53'/>
<use f='x265/source/abrEncApp.h' l='54'/>
<use f='x265/source/abrEncApp.h' l='55'/>
<use f='x265/source/abrEncApp.h' l='56'/>
<use f='x265/source/abrEncApp.h' l='57'/>
<use f='x265/source/abrEncApp.h' l='58'/>
<use f='x265/source/abrEncApp.h' l='59'/>
<use f='x265/source/abrEncApp.h' l='120'/>
<use f='x265/source/abrEncApp.cpp' l='82' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='83' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='84' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='85' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='87' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='87' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='88' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='88' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='89' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='89' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='102' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='103' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<use f='x265/source/abrEncApp.cpp' l='104' c='_ZN4x26510AbrEncoder12allocBuffersEv'/>
<size>96</size>
<doc f='x265/source/common/threading.h' l='372'>/* This class is intended for use in signaling state changes safely between CPU
 * cores. One thread should be a writer and multiple threads may be readers. The
 * mutex&apos;s main purpose is to serve as a memory fence to ensure writes made by
 * the writer thread are visible prior to readers seeing the m_val change. Its
 * secondary purpose is for use with the condition variable for blocking waits */</doc>
<fun r='_ZN4x26517ThreadSafeIntegerC1Ev'/>
<fun r='_ZN4x26517ThreadSafeIntegerD1Ev'/>
<fun r='_ZN4x26517ThreadSafeInteger13waitForChangeEi'/>
<fun r='_ZN4x26517ThreadSafeInteger3getEv'/>
<fun r='_ZN4x26517ThreadSafeInteger7getIncrEi'/>
<fun r='_ZN4x26517ThreadSafeInteger3setEi'/>
<fun r='_ZN4x26517ThreadSafeInteger4pokeEv'/>
<fun r='_ZN4x26517ThreadSafeInteger4incrEv'/>
<fun r='_ZN4x26517ThreadSafeInteger4decrEv'/>
<mbr r='x265::ThreadSafeInteger::m_mutex' o='0' t='pthread_mutex_t'/>
<mbr r='x265::ThreadSafeInteger::m_cond' o='320' t='pthread_cond_t'/>
<mbr r='x265::ThreadSafeInteger::m_val' o='704' t='int'/>
<use f='x265/source/common/frame.h' l='105'/>
<use f='x265/source/common/frame.h' l='106'/>
<size>96</size>
<use f='x265/source/common/frame.cpp' l='138' c='_ZN4x2655Frame6createEP10x265_paramPf'/>
<use f='x265/source/common/frame.cpp' l='139' c='_ZN4x2655Frame6createEP10x265_paramPf'/>
<size>96</size>
<use f='x265/source/common/threadpool.h' l='126'/>
<size>96</size>
<use f='x265/source/encoder/encoder.h' l='296'/>
<use f='x265/source/encoder/encoder.h' l='297'/>
<size>96</size>
<use f='x265/source/encoder/framefilter.h' l='61'/>
<use f='x265/source/encoder/framefilter.h' l='76'/>
<use f='x265/source/encoder/framefilter.h' l='77'/>
<use f='x265/source/encoder/framefilter.h' l='78'/>
<use f='x265/source/encoder/ratecontrol.h' l='221'/>
<use f='x265/source/encoder/encoder.cpp' l='395' c='_ZN4x2657Encoder6createEv'/>
<use f='x265/source/encoder/encoder.cpp' l='396' c='_ZN4x2657Encoder6createEv'/>
<size>96</size>
<use f='x265/source/input/yuv.h' l='52'/>
<use f='x265/source/input/yuv.h' l='54'/>
<use f='x265/source/input/y4m.h' l='60'/>
<use f='x265/source/input/y4m.h' l='62'/>
<size>96</size>
